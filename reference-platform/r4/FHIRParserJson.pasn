unit FHIRParserJson;

{$I fhir.inc}

{
  Copyright (c) 2011+, HL7 and Health Intersections Pty Ltd (http://www.healthintersections.com.au)
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
}

{$IFNDEF FHIR4}
This is the dstu4 version of the FHIR code
{$ENDIF}


interface

// FHIR v3.2.0 generated 2018-01-13T10:54:00+11:00

uses
  SysUtils, Classes, StringSupport, DateSupport, DecimalSupport, FHIRParserBase, FHIRBase, FHIRResources, FHIRConstants, FHIRTypes, AdvStringMatches, AdvJSON;

Type

  TFHIRJsonParser = class (TFHIRJsonParserBase)
  protected
    function ParseElement(jsn : TJsonObject) : TFhirElement; overload;
    procedure ParseElement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBackboneElement(jsn : TJsonObject) : TFhirBackboneElement; overload;
    procedure ParseBackboneElement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}

    procedure ParseElementProperties(jsn : TJsonObject; element : TFhirElement);
    procedure ParseBackboneElementProperties(jsn : TJsonObject; element : TFhirBackboneElement);
    procedure ParseEnum(path, value : string; jsn : TJsonObject; ctxt : TFHIRObjectList; Const aNames, aSystems : Array Of String); overload;
    function ParseEnum(path, value : string; jsn : TJsonObject; Const aNames, aSystems : Array Of String) : TFHIREnum; overload;
    procedure ParseDate(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseDate(value : string; jsn : TJsonObject) : TFHIRDate; overload;
    procedure ParseDateTime(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseDateTime(value : string; jsn : TJsonObject) : TFHIRDateTime; overload;
    procedure ParseString(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseString(value : string; jsn : TJsonObject) : TFHIRString; overload;
    procedure ParseInteger(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseInteger(value : string; jsn : TJsonObject) : TFHIRInteger; overload;
    procedure ParseUri(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUri(value : string; jsn : TJsonObject) : TFHIRUri; overload;
    procedure ParseInstant(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseInstant(value : string; jsn : TJsonObject) : TFHIRInstant; overload;
    procedure ParseXhtml(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseXhtml(value : string; jsn : TJsonObject) : TFHIRXhtml; overload;
    procedure ParseBoolean(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseBoolean(value : string; jsn : TJsonObject) : TFHIRBoolean; overload;
    procedure ParseBase64Binary(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseBase64Binary(value : string; jsn : TJsonObject) : TFHIRBase64Binary; overload;
    procedure ParseTime(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseTime(value : string; jsn : TJsonObject) : TFHIRTime; overload;
    procedure ParseDecimal(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseDecimal(value : string; jsn : TJsonObject) : TFHIRDecimal; overload;
    procedure ParseCode(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseCode(value : string; jsn : TJsonObject) : TFHIRCode; overload;
    procedure ParseOid(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseOid(value : string; jsn : TJsonObject) : TFHIROid; overload;
    procedure ParseUuid(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUuid(value : string; jsn : TJsonObject) : TFHIRUuid; overload;
    procedure ParseMarkdown(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseMarkdown(value : string; jsn : TJsonObject) : TFHIRMarkdown; overload;
    procedure ParseUnsignedInt(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUnsignedInt(value : string; jsn : TJsonObject) : TFHIRUnsignedInt; overload;
    procedure ParseId(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseId(value : string; jsn : TJsonObject) : TFHIRId; overload;
    procedure ParsePositiveInt(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParsePositiveInt(value : string; jsn : TJsonObject) : TFHIRPositiveInt; overload;

    procedure ParseResourceProperties(jsn : TJsonObject; resource : TFhirResource);
    procedure ParseDomainResourceProperties(jsn : TJsonObject; resource : TFhirDomainResource);
{$IFDEF FHIR_PARAMETERS}
    function ParseParametersParameter(jsn : TJsonObject) : TFhirParametersParameter; overload; {b\}
    procedure ParseParametersParameterProperties(jsn : TJsonObject; result : TFhirParametersParameter); overload; {b\}
    procedure ParseParametersParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseParameters(jsn : TJsonObject) : TFhirParameters; overload;
    procedure ParseParametersProperties(jsn : TJsonObject; result : TFhirParameters); overload;
    procedure ParseParameters(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PARAMETERS}

    function ParseExtension(jsn : TJsonObject) : TFhirExtension; overload;
    procedure ParseExtensionProperties(jsn : TJsonObject; result : TFhirExtension); overload;
    procedure ParseExtension(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNarrative(jsn : TJsonObject) : TFhirNarrative; overload;
    procedure ParseNarrativeProperties(jsn : TJsonObject; result : TFhirNarrative); overload;
    procedure ParseNarrative(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContributor(jsn : TJsonObject) : TFhirContributor; overload;
    procedure ParseContributorProperties(jsn : TJsonObject; result : TFhirContributor); overload;
    procedure ParseContributor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAttachment(jsn : TJsonObject) : TFhirAttachment; overload;
    procedure ParseAttachmentProperties(jsn : TJsonObject; result : TFhirAttachment); overload;
    procedure ParseAttachment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDataRequirementCodeFilter(jsn : TJsonObject) : TFhirDataRequirementCodeFilter; overload; {b\}
    procedure ParseDataRequirementCodeFilterProperties(jsn : TJsonObject; result : TFhirDataRequirementCodeFilter); overload; {b\}
    procedure ParseDataRequirementCodeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDataRequirementDateFilter(jsn : TJsonObject) : TFhirDataRequirementDateFilter; overload; {b\}
    procedure ParseDataRequirementDateFilterProperties(jsn : TJsonObject; result : TFhirDataRequirementDateFilter); overload; {b\}
    procedure ParseDataRequirementDateFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDataRequirement(jsn : TJsonObject) : TFhirDataRequirement; overload;
    procedure ParseDataRequirementProperties(jsn : TJsonObject; result : TFhirDataRequirement); overload;
    procedure ParseDataRequirement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDosage(jsn : TJsonObject) : TFhirDosage; overload;
    procedure ParseDosageProperties(jsn : TJsonObject; result : TFhirDosage); overload;
    procedure ParseDosage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMarketingStatus(jsn : TJsonObject) : TFhirMarketingStatus; overload;
    procedure ParseMarketingStatusProperties(jsn : TJsonObject; result : TFhirMarketingStatus); overload;
    procedure ParseMarketingStatus(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseIdentifier(jsn : TJsonObject) : TFhirIdentifier; overload;
    procedure ParseIdentifierProperties(jsn : TJsonObject; result : TFhirIdentifier); overload;
    procedure ParseIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceAmountReferenceRange(jsn : TJsonObject) : TFhirSubstanceAmountReferenceRange; overload; {b\}
    procedure ParseSubstanceAmountReferenceRangeProperties(jsn : TJsonObject; result : TFhirSubstanceAmountReferenceRange); overload; {b\}
    procedure ParseSubstanceAmountReferenceRange(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceAmount(jsn : TJsonObject) : TFhirSubstanceAmount; overload;
    procedure ParseSubstanceAmountProperties(jsn : TJsonObject; result : TFhirSubstanceAmount); overload;
    procedure ParseSubstanceAmount(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCoding(jsn : TJsonObject) : TFhirCoding; overload;
    procedure ParseCodingProperties(jsn : TJsonObject; result : TFhirCoding); overload;
    procedure ParseCoding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSampledData(jsn : TJsonObject) : TFhirSampledData; overload;
    procedure ParseSampledDataProperties(jsn : TJsonObject; result : TFhirSampledData); overload;
    procedure ParseSampledData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRatio(jsn : TJsonObject) : TFhirRatio; overload;
    procedure ParseRatioProperties(jsn : TJsonObject; result : TFhirRatio); overload;
    procedure ParseRatio(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceMoiety(jsn : TJsonObject) : TFhirSubstanceMoiety; overload;
    procedure ParseSubstanceMoietyProperties(jsn : TJsonObject; result : TFhirSubstanceMoiety); overload;
    procedure ParseSubstanceMoiety(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseReference(jsn : TJsonObject) : TFhirReference; overload;
    procedure ParseReferenceProperties(jsn : TJsonObject; result : TFhirReference); overload;
    procedure ParseReference(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTriggerDefinitionCondition(jsn : TJsonObject) : TFhirTriggerDefinitionCondition; overload; {b\}
    procedure ParseTriggerDefinitionConditionProperties(jsn : TJsonObject; result : TFhirTriggerDefinitionCondition); overload; {b\}
    procedure ParseTriggerDefinitionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTriggerDefinition(jsn : TJsonObject) : TFhirTriggerDefinition; overload;
    procedure ParseTriggerDefinitionProperties(jsn : TJsonObject; result : TFhirTriggerDefinition); overload;
    procedure ParseTriggerDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePeriod(jsn : TJsonObject) : TFhirPeriod; overload;
    procedure ParsePeriodProperties(jsn : TJsonObject; result : TFhirPeriod); overload;
    procedure ParsePeriod(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuantity(jsn : TJsonObject) : TFhirQuantity; overload;
    procedure ParseQuantityProperties(jsn : TJsonObject; result : TFhirQuantity); overload;
    procedure ParseQuantity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRange(jsn : TJsonObject) : TFhirRange; overload;
    procedure ParseRangeProperties(jsn : TJsonObject; result : TFhirRange); overload;
    procedure ParseRange(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRelatedArtifact(jsn : TJsonObject) : TFhirRelatedArtifact; overload;
    procedure ParseRelatedArtifactProperties(jsn : TJsonObject; result : TFhirRelatedArtifact); overload;
    procedure ParseRelatedArtifact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAnnotation(jsn : TJsonObject) : TFhirAnnotation; overload;
    procedure ParseAnnotationProperties(jsn : TJsonObject; result : TFhirAnnotation); overload;
    procedure ParseAnnotation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProductShelfLife(jsn : TJsonObject) : TFhirProductShelfLife; overload;
    procedure ParseProductShelfLifeProperties(jsn : TJsonObject; result : TFhirProductShelfLife); overload;
    procedure ParseProductShelfLife(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContactDetail(jsn : TJsonObject) : TFhirContactDetail; overload;
    procedure ParseContactDetailProperties(jsn : TJsonObject; result : TFhirContactDetail); overload;
    procedure ParseContactDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseUsageContext(jsn : TJsonObject) : TFhirUsageContext; overload;
    procedure ParseUsageContextProperties(jsn : TJsonObject; result : TFhirUsageContext); overload;
    procedure ParseUsageContext(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSignature(jsn : TJsonObject) : TFhirSignature; overload;
    procedure ParseSignatureProperties(jsn : TJsonObject; result : TFhirSignature); overload;
    procedure ParseSignature(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProdCharacteristic(jsn : TJsonObject) : TFhirProdCharacteristic; overload;
    procedure ParseProdCharacteristicProperties(jsn : TJsonObject; result : TFhirProdCharacteristic); overload;
    procedure ParseProdCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeableConcept(jsn : TJsonObject) : TFhirCodeableConcept; overload;
    procedure ParseCodeableConceptProperties(jsn : TJsonObject; result : TFhirCodeableConcept); overload;
    procedure ParseCodeableConcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseParameterDefinition(jsn : TJsonObject) : TFhirParameterDefinition; overload;
    procedure ParseParameterDefinitionProperties(jsn : TJsonObject; result : TFhirParameterDefinition); overload;
    procedure ParseParameterDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContactPoint(jsn : TJsonObject) : TFhirContactPoint; overload;
    procedure ParseContactPointProperties(jsn : TJsonObject; result : TFhirContactPoint); overload;
    procedure ParseContactPoint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseHumanName(jsn : TJsonObject) : TFhirHumanName; overload;
    procedure ParseHumanNameProperties(jsn : TJsonObject; result : TFhirHumanName); overload;
    procedure ParseHumanName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeta(jsn : TJsonObject) : TFhirMeta; overload;
    procedure ParseMetaProperties(jsn : TJsonObject; result : TFhirMeta); overload;
    procedure ParseMeta(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAddress(jsn : TJsonObject) : TFhirAddress; overload;
    procedure ParseAddressProperties(jsn : TJsonObject; result : TFhirAddress); overload;
    procedure ParseAddress(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionSlicing(jsn : TJsonObject) : TFhirElementDefinitionSlicing; overload; {b\}
    procedure ParseElementDefinitionSlicingProperties(jsn : TJsonObject; result : TFhirElementDefinitionSlicing); overload; {b\}
    procedure ParseElementDefinitionSlicing(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject) : TFhirElementDefinitionSlicingDiscriminator; overload; {b\}
    procedure ParseElementDefinitionSlicingDiscriminatorProperties(jsn : TJsonObject; result : TFhirElementDefinitionSlicingDiscriminator); overload; {b\}
    procedure ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionBase(jsn : TJsonObject) : TFhirElementDefinitionBase; overload; {b\}
    procedure ParseElementDefinitionBaseProperties(jsn : TJsonObject; result : TFhirElementDefinitionBase); overload; {b\}
    procedure ParseElementDefinitionBase(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionType(jsn : TJsonObject) : TFhirElementDefinitionType; overload; {b\}
    procedure ParseElementDefinitionTypeProperties(jsn : TJsonObject; result : TFhirElementDefinitionType); overload; {b\}
    procedure ParseElementDefinitionType(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionExample(jsn : TJsonObject) : TFhirElementDefinitionExample; overload; {b\}
    procedure ParseElementDefinitionExampleProperties(jsn : TJsonObject; result : TFhirElementDefinitionExample); overload; {b\}
    procedure ParseElementDefinitionExample(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionConstraint(jsn : TJsonObject) : TFhirElementDefinitionConstraint; overload; {b\}
    procedure ParseElementDefinitionConstraintProperties(jsn : TJsonObject; result : TFhirElementDefinitionConstraint); overload; {b\}
    procedure ParseElementDefinitionConstraint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionBinding(jsn : TJsonObject) : TFhirElementDefinitionBinding; overload; {b\}
    procedure ParseElementDefinitionBindingProperties(jsn : TJsonObject; result : TFhirElementDefinitionBinding); overload; {b\}
    procedure ParseElementDefinitionBinding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionMapping(jsn : TJsonObject) : TFhirElementDefinitionMapping; overload; {b\}
    procedure ParseElementDefinitionMappingProperties(jsn : TJsonObject; result : TFhirElementDefinitionMapping); overload; {b\}
    procedure ParseElementDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinition(jsn : TJsonObject) : TFhirElementDefinition; overload;
    procedure ParseElementDefinitionProperties(jsn : TJsonObject; result : TFhirElementDefinition); overload;
    procedure ParseElementDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTimingRepeat(jsn : TJsonObject) : TFhirTimingRepeat; overload; {b\}
    procedure ParseTimingRepeatProperties(jsn : TJsonObject; result : TFhirTimingRepeat); overload; {b\}
    procedure ParseTimingRepeat(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTiming(jsn : TJsonObject) : TFhirTiming; overload;
    procedure ParseTimingProperties(jsn : TJsonObject; result : TFhirTiming); overload;
    procedure ParseTiming(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCount(jsn : TJsonObject) : TFhirCount; overload;
    procedure ParseCountProperties(jsn : TJsonObject; result : TFhirCount); overload;
    procedure ParseCount(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMoney(jsn : TJsonObject) : TFhirMoney; overload;
    procedure ParseMoneyProperties(jsn : TJsonObject; result : TFhirMoney); overload;
    procedure ParseMoney(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAge(jsn : TJsonObject) : TFhirAge; overload;
    procedure ParseAgeProperties(jsn : TJsonObject; result : TFhirAge); overload;
    procedure ParseAge(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDistance(jsn : TJsonObject) : TFhirDistance; overload;
    procedure ParseDistanceProperties(jsn : TJsonObject; result : TFhirDistance); overload;
    procedure ParseDistance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDuration(jsn : TJsonObject) : TFhirDuration; overload;
    procedure ParseDurationProperties(jsn : TJsonObject; result : TFhirDuration); overload;
    procedure ParseDuration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}

{$IFDEF FHIR_ACCOUNT}
    function ParseAccountCoverage(jsn : TJsonObject) : TFhirAccountCoverage; overload; {b\}
    procedure ParseAccountCoverageProperties(jsn : TJsonObject; result : TFhirAccountCoverage); overload; {b\}
    procedure ParseAccountCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAccountGuarantor(jsn : TJsonObject) : TFhirAccountGuarantor; overload; {b\}
    procedure ParseAccountGuarantorProperties(jsn : TJsonObject; result : TFhirAccountGuarantor); overload; {b\}
    procedure ParseAccountGuarantor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAccount(jsn : TJsonObject) : TFhirAccount; overload;
    procedure ParseAccountProperties(jsn : TJsonObject; result : TFhirAccount); overload;
    procedure ParseAccount(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    function ParseActivityDefinitionParticipant(jsn : TJsonObject) : TFhirActivityDefinitionParticipant; overload; {b\}
    procedure ParseActivityDefinitionParticipantProperties(jsn : TJsonObject; result : TFhirActivityDefinitionParticipant); overload; {b\}
    procedure ParseActivityDefinitionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseActivityDefinitionDynamicValue(jsn : TJsonObject) : TFhirActivityDefinitionDynamicValue; overload; {b\}
    procedure ParseActivityDefinitionDynamicValueProperties(jsn : TJsonObject; result : TFhirActivityDefinitionDynamicValue); overload; {b\}
    procedure ParseActivityDefinitionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseActivityDefinition(jsn : TJsonObject) : TFhirActivityDefinition; overload;
    procedure ParseActivityDefinitionProperties(jsn : TJsonObject; result : TFhirActivityDefinition); overload;
    procedure ParseActivityDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    function ParseAdverseEventSuspectEntity(jsn : TJsonObject) : TFhirAdverseEventSuspectEntity; overload; {b\}
    procedure ParseAdverseEventSuspectEntityProperties(jsn : TJsonObject; result : TFhirAdverseEventSuspectEntity); overload; {b\}
    procedure ParseAdverseEventSuspectEntity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAdverseEventSuspectEntityCausality(jsn : TJsonObject) : TFhirAdverseEventSuspectEntityCausality; overload; {b\}
    procedure ParseAdverseEventSuspectEntityCausalityProperties(jsn : TJsonObject; result : TFhirAdverseEventSuspectEntityCausality); overload; {b\}
    procedure ParseAdverseEventSuspectEntityCausality(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAdverseEvent(jsn : TJsonObject) : TFhirAdverseEvent; overload;
    procedure ParseAdverseEventProperties(jsn : TJsonObject; result : TFhirAdverseEvent); overload;
    procedure ParseAdverseEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    function ParseAllergyIntoleranceReaction(jsn : TJsonObject) : TFhirAllergyIntoleranceReaction; overload; {b\}
    procedure ParseAllergyIntoleranceReactionProperties(jsn : TJsonObject; result : TFhirAllergyIntoleranceReaction); overload; {b\}
    procedure ParseAllergyIntoleranceReaction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAllergyIntolerance(jsn : TJsonObject) : TFhirAllergyIntolerance; overload;
    procedure ParseAllergyIntoleranceProperties(jsn : TJsonObject; result : TFhirAllergyIntolerance); overload;
    procedure ParseAllergyIntolerance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    function ParseAppointmentParticipant(jsn : TJsonObject) : TFhirAppointmentParticipant; overload; {b\}
    procedure ParseAppointmentParticipantProperties(jsn : TJsonObject; result : TFhirAppointmentParticipant); overload; {b\}
    procedure ParseAppointmentParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAppointment(jsn : TJsonObject) : TFhirAppointment; overload;
    procedure ParseAppointmentProperties(jsn : TJsonObject; result : TFhirAppointment); overload;
    procedure ParseAppointment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    function ParseAppointmentResponse(jsn : TJsonObject) : TFhirAppointmentResponse; overload;
    procedure ParseAppointmentResponseProperties(jsn : TJsonObject; result : TFhirAppointmentResponse); overload;
    procedure ParseAppointmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    function ParseAuditEventAgent(jsn : TJsonObject) : TFhirAuditEventAgent; overload; {b\}
    procedure ParseAuditEventAgentProperties(jsn : TJsonObject; result : TFhirAuditEventAgent); overload; {b\}
    procedure ParseAuditEventAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEventAgentNetwork(jsn : TJsonObject) : TFhirAuditEventAgentNetwork; overload; {b\}
    procedure ParseAuditEventAgentNetworkProperties(jsn : TJsonObject; result : TFhirAuditEventAgentNetwork); overload; {b\}
    procedure ParseAuditEventAgentNetwork(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEventSource(jsn : TJsonObject) : TFhirAuditEventSource; overload; {b\}
    procedure ParseAuditEventSourceProperties(jsn : TJsonObject; result : TFhirAuditEventSource); overload; {b\}
    procedure ParseAuditEventSource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEventEntity(jsn : TJsonObject) : TFhirAuditEventEntity; overload; {b\}
    procedure ParseAuditEventEntityProperties(jsn : TJsonObject; result : TFhirAuditEventEntity); overload; {b\}
    procedure ParseAuditEventEntity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEventEntityDetail(jsn : TJsonObject) : TFhirAuditEventEntityDetail; overload; {b\}
    procedure ParseAuditEventEntityDetailProperties(jsn : TJsonObject; result : TFhirAuditEventEntityDetail); overload; {b\}
    procedure ParseAuditEventEntityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEvent(jsn : TJsonObject) : TFhirAuditEvent; overload;
    procedure ParseAuditEventProperties(jsn : TJsonObject; result : TFhirAuditEvent); overload;
    procedure ParseAuditEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    function ParseBasic(jsn : TJsonObject) : TFhirBasic; overload;
    procedure ParseBasicProperties(jsn : TJsonObject; result : TFhirBasic); overload;
    procedure ParseBasic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    function ParseBinary(jsn : TJsonObject) : TFhirBinary; overload;
    procedure ParseBinaryProperties(jsn : TJsonObject; result : TFhirBinary); overload;
    procedure ParseBinary(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    function ParseBiologicallyDerivedProductCollection(jsn : TJsonObject) : TFhirBiologicallyDerivedProductCollection; overload; {b\}
    procedure ParseBiologicallyDerivedProductCollectionProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProductCollection); overload; {b\}
    procedure ParseBiologicallyDerivedProductCollection(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBiologicallyDerivedProductProcessing(jsn : TJsonObject) : TFhirBiologicallyDerivedProductProcessing; overload; {b\}
    procedure ParseBiologicallyDerivedProductProcessingProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProductProcessing); overload; {b\}
    procedure ParseBiologicallyDerivedProductProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBiologicallyDerivedProductManipulation(jsn : TJsonObject) : TFhirBiologicallyDerivedProductManipulation; overload; {b\}
    procedure ParseBiologicallyDerivedProductManipulationProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProductManipulation); overload; {b\}
    procedure ParseBiologicallyDerivedProductManipulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBiologicallyDerivedProductStorage(jsn : TJsonObject) : TFhirBiologicallyDerivedProductStorage; overload; {b\}
    procedure ParseBiologicallyDerivedProductStorageProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProductStorage); overload; {b\}
    procedure ParseBiologicallyDerivedProductStorage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBiologicallyDerivedProduct(jsn : TJsonObject) : TFhirBiologicallyDerivedProduct; overload;
    procedure ParseBiologicallyDerivedProductProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProduct); overload;
    procedure ParseBiologicallyDerivedProduct(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    function ParseBodyStructure(jsn : TJsonObject) : TFhirBodyStructure; overload;
    procedure ParseBodyStructureProperties(jsn : TJsonObject; result : TFhirBodyStructure); overload;
    procedure ParseBodyStructure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    function ParseBundleLink(jsn : TJsonObject) : TFhirBundleLink; overload; {b\}
    procedure ParseBundleLinkProperties(jsn : TJsonObject; result : TFhirBundleLink); overload; {b\}
    procedure ParseBundleLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundleEntry(jsn : TJsonObject) : TFhirBundleEntry; overload; {b\}
    procedure ParseBundleEntryProperties(jsn : TJsonObject; result : TFhirBundleEntry); overload; {b\}
    procedure ParseBundleEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundleEntrySearch(jsn : TJsonObject) : TFhirBundleEntrySearch; overload; {b\}
    procedure ParseBundleEntrySearchProperties(jsn : TJsonObject; result : TFhirBundleEntrySearch); overload; {b\}
    procedure ParseBundleEntrySearch(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundleEntryRequest(jsn : TJsonObject) : TFhirBundleEntryRequest; overload; {b\}
    procedure ParseBundleEntryRequestProperties(jsn : TJsonObject; result : TFhirBundleEntryRequest); overload; {b\}
    procedure ParseBundleEntryRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundleEntryResponse(jsn : TJsonObject) : TFhirBundleEntryResponse; overload; {b\}
    procedure ParseBundleEntryResponseProperties(jsn : TJsonObject; result : TFhirBundleEntryResponse); overload; {b\}
    procedure ParseBundleEntryResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundle(jsn : TJsonObject) : TFhirBundle; overload;
    procedure ParseBundleProperties(jsn : TJsonObject; result : TFhirBundle); overload;
    procedure ParseBundle(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    function ParseCapabilityStatementSoftware(jsn : TJsonObject) : TFhirCapabilityStatementSoftware; overload; {b\}
    procedure ParseCapabilityStatementSoftwareProperties(jsn : TJsonObject; result : TFhirCapabilityStatementSoftware); overload; {b\}
    procedure ParseCapabilityStatementSoftware(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementImplementation(jsn : TJsonObject) : TFhirCapabilityStatementImplementation; overload; {b\}
    procedure ParseCapabilityStatementImplementationProperties(jsn : TJsonObject; result : TFhirCapabilityStatementImplementation); overload; {b\}
    procedure ParseCapabilityStatementImplementation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRest(jsn : TJsonObject) : TFhirCapabilityStatementRest; overload; {b\}
    procedure ParseCapabilityStatementRestProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRest); overload; {b\}
    procedure ParseCapabilityStatementRest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestSecurity(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurity; overload; {b\}
    procedure ParseCapabilityStatementRestSecurityProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestSecurity); overload; {b\}
    procedure ParseCapabilityStatementRestSecurity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestSecurityCertificate(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurityCertificate; overload; {b\}
    procedure ParseCapabilityStatementRestSecurityCertificateProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestSecurityCertificate); overload; {b\}
    procedure ParseCapabilityStatementRestSecurityCertificate(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestResource(jsn : TJsonObject) : TFhirCapabilityStatementRestResource; overload; {b\}
    procedure ParseCapabilityStatementRestResourceProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResource); overload; {b\}
    procedure ParseCapabilityStatementRestResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceInteraction; overload; {b\}
    procedure ParseCapabilityStatementRestResourceInteractionProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceInteraction); overload; {b\}
    procedure ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceSearchParam; overload; {b\}
    procedure ParseCapabilityStatementRestResourceSearchParamProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceSearchParam); overload; {b\}
    procedure ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestResourceOperation(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceOperation; overload; {b\}
    procedure ParseCapabilityStatementRestResourceOperationProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceOperation); overload; {b\}
    procedure ParseCapabilityStatementRestResourceOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestInteraction; overload; {b\}
    procedure ParseCapabilityStatementRestInteractionProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestInteraction); overload; {b\}
    procedure ParseCapabilityStatementRestInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementMessaging(jsn : TJsonObject) : TFhirCapabilityStatementMessaging; overload; {b\}
    procedure ParseCapabilityStatementMessagingProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessaging); overload; {b\}
    procedure ParseCapabilityStatementMessaging(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject) : TFhirCapabilityStatementMessagingEndpoint; overload; {b\}
    procedure ParseCapabilityStatementMessagingEndpointProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingEndpoint); overload; {b\}
    procedure ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject) : TFhirCapabilityStatementMessagingSupportedMessage; overload; {b\}
    procedure ParseCapabilityStatementMessagingSupportedMessageProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingSupportedMessage); overload; {b\}
    procedure ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementDocument(jsn : TJsonObject) : TFhirCapabilityStatementDocument; overload; {b\}
    procedure ParseCapabilityStatementDocumentProperties(jsn : TJsonObject; result : TFhirCapabilityStatementDocument); overload; {b\}
    procedure ParseCapabilityStatementDocument(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatement(jsn : TJsonObject) : TFhirCapabilityStatement; overload;
    procedure ParseCapabilityStatementProperties(jsn : TJsonObject; result : TFhirCapabilityStatement); overload;
    procedure ParseCapabilityStatement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
    function ParseCarePlanActivity(jsn : TJsonObject) : TFhirCarePlanActivity; overload; {b\}
    procedure ParseCarePlanActivityProperties(jsn : TJsonObject; result : TFhirCarePlanActivity); overload; {b\}
    procedure ParseCarePlanActivity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCarePlanActivityDetail(jsn : TJsonObject) : TFhirCarePlanActivityDetail; overload; {b\}
    procedure ParseCarePlanActivityDetailProperties(jsn : TJsonObject; result : TFhirCarePlanActivityDetail); overload; {b\}
    procedure ParseCarePlanActivityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCarePlan(jsn : TJsonObject) : TFhirCarePlan; overload;
    procedure ParseCarePlanProperties(jsn : TJsonObject; result : TFhirCarePlan); overload;
    procedure ParseCarePlan(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    function ParseCareTeamParticipant(jsn : TJsonObject) : TFhirCareTeamParticipant; overload; {b\}
    procedure ParseCareTeamParticipantProperties(jsn : TJsonObject; result : TFhirCareTeamParticipant); overload; {b\}
    procedure ParseCareTeamParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCareTeam(jsn : TJsonObject) : TFhirCareTeam; overload;
    procedure ParseCareTeamProperties(jsn : TJsonObject; result : TFhirCareTeam); overload;
    procedure ParseCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
    function ParseChargeItemParticipant(jsn : TJsonObject) : TFhirChargeItemParticipant; overload; {b\}
    procedure ParseChargeItemParticipantProperties(jsn : TJsonObject; result : TFhirChargeItemParticipant); overload; {b\}
    procedure ParseChargeItemParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseChargeItem(jsn : TJsonObject) : TFhirChargeItem; overload;
    procedure ParseChargeItemProperties(jsn : TJsonObject; result : TFhirChargeItem); overload;
    procedure ParseChargeItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
    function ParseClaimRelated(jsn : TJsonObject) : TFhirClaimRelated; overload; {b\}
    procedure ParseClaimRelatedProperties(jsn : TJsonObject; result : TFhirClaimRelated); overload; {b\}
    procedure ParseClaimRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimPayee(jsn : TJsonObject) : TFhirClaimPayee; overload; {b\}
    procedure ParseClaimPayeeProperties(jsn : TJsonObject; result : TFhirClaimPayee); overload; {b\}
    procedure ParseClaimPayee(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimCareTeam(jsn : TJsonObject) : TFhirClaimCareTeam; overload; {b\}
    procedure ParseClaimCareTeamProperties(jsn : TJsonObject; result : TFhirClaimCareTeam); overload; {b\}
    procedure ParseClaimCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimInformation(jsn : TJsonObject) : TFhirClaimInformation; overload; {b\}
    procedure ParseClaimInformationProperties(jsn : TJsonObject; result : TFhirClaimInformation); overload; {b\}
    procedure ParseClaimInformation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimDiagnosis(jsn : TJsonObject) : TFhirClaimDiagnosis; overload; {b\}
    procedure ParseClaimDiagnosisProperties(jsn : TJsonObject; result : TFhirClaimDiagnosis); overload; {b\}
    procedure ParseClaimDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimProcedure(jsn : TJsonObject) : TFhirClaimProcedure; overload; {b\}
    procedure ParseClaimProcedureProperties(jsn : TJsonObject; result : TFhirClaimProcedure); overload; {b\}
    procedure ParseClaimProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimInsurance(jsn : TJsonObject) : TFhirClaimInsurance; overload; {b\}
    procedure ParseClaimInsuranceProperties(jsn : TJsonObject; result : TFhirClaimInsurance); overload; {b\}
    procedure ParseClaimInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimAccident(jsn : TJsonObject) : TFhirClaimAccident; overload; {b\}
    procedure ParseClaimAccidentProperties(jsn : TJsonObject; result : TFhirClaimAccident); overload; {b\}
    procedure ParseClaimAccident(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimItem(jsn : TJsonObject) : TFhirClaimItem; overload; {b\}
    procedure ParseClaimItemProperties(jsn : TJsonObject; result : TFhirClaimItem); overload; {b\}
    procedure ParseClaimItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimItemDetail(jsn : TJsonObject) : TFhirClaimItemDetail; overload; {b\}
    procedure ParseClaimItemDetailProperties(jsn : TJsonObject; result : TFhirClaimItemDetail); overload; {b\}
    procedure ParseClaimItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimItemDetailSubDetail; overload; {b\}
    procedure ParseClaimItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirClaimItemDetailSubDetail); overload; {b\}
    procedure ParseClaimItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaim(jsn : TJsonObject) : TFhirClaim; overload;
    procedure ParseClaimProperties(jsn : TJsonObject; result : TFhirClaim); overload;
    procedure ParseClaim(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    function ParseClaimResponseItem(jsn : TJsonObject) : TFhirClaimResponseItem; overload; {b\}
    procedure ParseClaimResponseItemProperties(jsn : TJsonObject; result : TFhirClaimResponseItem); overload; {b\}
    procedure ParseClaimResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseItemAdjudication(jsn : TJsonObject) : TFhirClaimResponseItemAdjudication; overload; {b\}
    procedure ParseClaimResponseItemAdjudicationProperties(jsn : TJsonObject; result : TFhirClaimResponseItemAdjudication); overload; {b\}
    procedure ParseClaimResponseItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseItemDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetail; overload; {b\}
    procedure ParseClaimResponseItemDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseItemDetail); overload; {b\}
    procedure ParseClaimResponseItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetailSubDetail; overload; {b\}
    procedure ParseClaimResponseItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseItemDetailSubDetail); overload; {b\}
    procedure ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseAddItem(jsn : TJsonObject) : TFhirClaimResponseAddItem; overload; {b\}
    procedure ParseClaimResponseAddItemProperties(jsn : TJsonObject; result : TFhirClaimResponseAddItem); overload; {b\}
    procedure ParseClaimResponseAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseError(jsn : TJsonObject) : TFhirClaimResponseError; overload; {b\}
    procedure ParseClaimResponseErrorProperties(jsn : TJsonObject; result : TFhirClaimResponseError); overload; {b\}
    procedure ParseClaimResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponsePayment(jsn : TJsonObject) : TFhirClaimResponsePayment; overload; {b\}
    procedure ParseClaimResponsePaymentProperties(jsn : TJsonObject; result : TFhirClaimResponsePayment); overload; {b\}
    procedure ParseClaimResponsePayment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseProcessNote(jsn : TJsonObject) : TFhirClaimResponseProcessNote; overload; {b\}
    procedure ParseClaimResponseProcessNoteProperties(jsn : TJsonObject; result : TFhirClaimResponseProcessNote); overload; {b\}
    procedure ParseClaimResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseInsurance(jsn : TJsonObject) : TFhirClaimResponseInsurance; overload; {b\}
    procedure ParseClaimResponseInsuranceProperties(jsn : TJsonObject; result : TFhirClaimResponseInsurance); overload; {b\}
    procedure ParseClaimResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponse(jsn : TJsonObject) : TFhirClaimResponse; overload;
    procedure ParseClaimResponseProperties(jsn : TJsonObject; result : TFhirClaimResponse); overload;
    procedure ParseClaimResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    function ParseClinicalImpressionInvestigation(jsn : TJsonObject) : TFhirClinicalImpressionInvestigation; overload; {b\}
    procedure ParseClinicalImpressionInvestigationProperties(jsn : TJsonObject; result : TFhirClinicalImpressionInvestigation); overload; {b\}
    procedure ParseClinicalImpressionInvestigation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClinicalImpressionFinding(jsn : TJsonObject) : TFhirClinicalImpressionFinding; overload; {b\}
    procedure ParseClinicalImpressionFindingProperties(jsn : TJsonObject; result : TFhirClinicalImpressionFinding); overload; {b\}
    procedure ParseClinicalImpressionFinding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClinicalImpression(jsn : TJsonObject) : TFhirClinicalImpression; overload;
    procedure ParseClinicalImpressionProperties(jsn : TJsonObject; result : TFhirClinicalImpression); overload;
    procedure ParseClinicalImpression(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
    function ParseCodeSystemFilter(jsn : TJsonObject) : TFhirCodeSystemFilter; overload; {b\}
    procedure ParseCodeSystemFilterProperties(jsn : TJsonObject; result : TFhirCodeSystemFilter); overload; {b\}
    procedure ParseCodeSystemFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystemProperty(jsn : TJsonObject) : TFhirCodeSystemProperty; overload; {b\}
    procedure ParseCodeSystemPropertyProperties(jsn : TJsonObject; result : TFhirCodeSystemProperty); overload; {b\}
    procedure ParseCodeSystemProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystemConcept(jsn : TJsonObject) : TFhirCodeSystemConcept; overload; {b\}
    procedure ParseCodeSystemConceptProperties(jsn : TJsonObject; result : TFhirCodeSystemConcept); overload; {b\}
    procedure ParseCodeSystemConcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystemConceptDesignation(jsn : TJsonObject) : TFhirCodeSystemConceptDesignation; overload; {b\}
    procedure ParseCodeSystemConceptDesignationProperties(jsn : TJsonObject; result : TFhirCodeSystemConceptDesignation); overload; {b\}
    procedure ParseCodeSystemConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystemConceptProperty(jsn : TJsonObject) : TFhirCodeSystemConceptProperty; overload; {b\}
    procedure ParseCodeSystemConceptPropertyProperties(jsn : TJsonObject; result : TFhirCodeSystemConceptProperty); overload; {b\}
    procedure ParseCodeSystemConceptProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystem(jsn : TJsonObject) : TFhirCodeSystem; overload;
    procedure ParseCodeSystemProperties(jsn : TJsonObject; result : TFhirCodeSystem); overload;
    procedure ParseCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    function ParseCommunicationPayload(jsn : TJsonObject) : TFhirCommunicationPayload; overload; {b\}
    procedure ParseCommunicationPayloadProperties(jsn : TJsonObject; result : TFhirCommunicationPayload); overload; {b\}
    procedure ParseCommunicationPayload(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCommunication(jsn : TJsonObject) : TFhirCommunication; overload;
    procedure ParseCommunicationProperties(jsn : TJsonObject; result : TFhirCommunication); overload;
    procedure ParseCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    function ParseCommunicationRequestPayload(jsn : TJsonObject) : TFhirCommunicationRequestPayload; overload; {b\}
    procedure ParseCommunicationRequestPayloadProperties(jsn : TJsonObject; result : TFhirCommunicationRequestPayload); overload; {b\}
    procedure ParseCommunicationRequestPayload(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCommunicationRequest(jsn : TJsonObject) : TFhirCommunicationRequest; overload;
    procedure ParseCommunicationRequestProperties(jsn : TJsonObject; result : TFhirCommunicationRequest); overload;
    procedure ParseCommunicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    function ParseCompartmentDefinitionResource(jsn : TJsonObject) : TFhirCompartmentDefinitionResource; overload; {b\}
    procedure ParseCompartmentDefinitionResourceProperties(jsn : TJsonObject; result : TFhirCompartmentDefinitionResource); overload; {b\}
    procedure ParseCompartmentDefinitionResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCompartmentDefinition(jsn : TJsonObject) : TFhirCompartmentDefinition; overload;
    procedure ParseCompartmentDefinitionProperties(jsn : TJsonObject; result : TFhirCompartmentDefinition); overload;
    procedure ParseCompartmentDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    function ParseCompositionAttester(jsn : TJsonObject) : TFhirCompositionAttester; overload; {b\}
    procedure ParseCompositionAttesterProperties(jsn : TJsonObject; result : TFhirCompositionAttester); overload; {b\}
    procedure ParseCompositionAttester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCompositionRelatesTo(jsn : TJsonObject) : TFhirCompositionRelatesTo; overload; {b\}
    procedure ParseCompositionRelatesToProperties(jsn : TJsonObject; result : TFhirCompositionRelatesTo); overload; {b\}
    procedure ParseCompositionRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCompositionEvent(jsn : TJsonObject) : TFhirCompositionEvent; overload; {b\}
    procedure ParseCompositionEventProperties(jsn : TJsonObject; result : TFhirCompositionEvent); overload; {b\}
    procedure ParseCompositionEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCompositionSection(jsn : TJsonObject) : TFhirCompositionSection; overload; {b\}
    procedure ParseCompositionSectionProperties(jsn : TJsonObject; result : TFhirCompositionSection); overload; {b\}
    procedure ParseCompositionSection(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseComposition(jsn : TJsonObject) : TFhirComposition; overload;
    procedure ParseCompositionProperties(jsn : TJsonObject; result : TFhirComposition); overload;
    procedure ParseComposition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    function ParseConceptMapGroup(jsn : TJsonObject) : TFhirConceptMapGroup; overload; {b\}
    procedure ParseConceptMapGroupProperties(jsn : TJsonObject; result : TFhirConceptMapGroup); overload; {b\}
    procedure ParseConceptMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMapGroupElement(jsn : TJsonObject) : TFhirConceptMapGroupElement; overload; {b\}
    procedure ParseConceptMapGroupElementProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElement); overload; {b\}
    procedure ParseConceptMapGroupElement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMapGroupElementTarget(jsn : TJsonObject) : TFhirConceptMapGroupElementTarget; overload; {b\}
    procedure ParseConceptMapGroupElementTargetProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElementTarget); overload; {b\}
    procedure ParseConceptMapGroupElementTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject) : TFhirConceptMapGroupElementTargetDependsOn; overload; {b\}
    procedure ParseConceptMapGroupElementTargetDependsOnProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElementTargetDependsOn); overload; {b\}
    procedure ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMapGroupUnmapped(jsn : TJsonObject) : TFhirConceptMapGroupUnmapped; overload; {b\}
    procedure ParseConceptMapGroupUnmappedProperties(jsn : TJsonObject; result : TFhirConceptMapGroupUnmapped); overload; {b\}
    procedure ParseConceptMapGroupUnmapped(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMap(jsn : TJsonObject) : TFhirConceptMap; overload;
    procedure ParseConceptMapProperties(jsn : TJsonObject; result : TFhirConceptMap); overload;
    procedure ParseConceptMap(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    function ParseConditionStage(jsn : TJsonObject) : TFhirConditionStage; overload; {b\}
    procedure ParseConditionStageProperties(jsn : TJsonObject; result : TFhirConditionStage); overload; {b\}
    procedure ParseConditionStage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConditionEvidence(jsn : TJsonObject) : TFhirConditionEvidence; overload; {b\}
    procedure ParseConditionEvidenceProperties(jsn : TJsonObject; result : TFhirConditionEvidence); overload; {b\}
    procedure ParseConditionEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCondition(jsn : TJsonObject) : TFhirCondition; overload;
    procedure ParseConditionProperties(jsn : TJsonObject; result : TFhirCondition); overload;
    procedure ParseCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
    function ParseConsentPolicy(jsn : TJsonObject) : TFhirConsentPolicy; overload; {b\}
    procedure ParseConsentPolicyProperties(jsn : TJsonObject; result : TFhirConsentPolicy); overload; {b\}
    procedure ParseConsentPolicy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsentVerification(jsn : TJsonObject) : TFhirConsentVerification; overload; {b\}
    procedure ParseConsentVerificationProperties(jsn : TJsonObject; result : TFhirConsentVerification); overload; {b\}
    procedure ParseConsentVerification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsentProvision(jsn : TJsonObject) : TFhirConsentProvision; overload; {b\}
    procedure ParseConsentProvisionProperties(jsn : TJsonObject; result : TFhirConsentProvision); overload; {b\}
    procedure ParseConsentProvision(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsentProvisionActor(jsn : TJsonObject) : TFhirConsentProvisionActor; overload; {b\}
    procedure ParseConsentProvisionActorProperties(jsn : TJsonObject; result : TFhirConsentProvisionActor); overload; {b\}
    procedure ParseConsentProvisionActor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsentProvisionData(jsn : TJsonObject) : TFhirConsentProvisionData; overload; {b\}
    procedure ParseConsentProvisionDataProperties(jsn : TJsonObject; result : TFhirConsentProvisionData); overload; {b\}
    procedure ParseConsentProvisionData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsent(jsn : TJsonObject) : TFhirConsent; overload;
    procedure ParseConsentProperties(jsn : TJsonObject; result : TFhirConsent); overload;
    procedure ParseConsent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    function ParseContractTerm(jsn : TJsonObject) : TFhirContractTerm; overload; {b\}
    procedure ParseContractTermProperties(jsn : TJsonObject; result : TFhirContractTerm); overload; {b\}
    procedure ParseContractTerm(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractTermOffer(jsn : TJsonObject) : TFhirContractTermOffer; overload; {b\}
    procedure ParseContractTermOfferProperties(jsn : TJsonObject; result : TFhirContractTermOffer); overload; {b\}
    procedure ParseContractTermOffer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractTermAsset(jsn : TJsonObject) : TFhirContractTermAsset; overload; {b\}
    procedure ParseContractTermAssetProperties(jsn : TJsonObject; result : TFhirContractTermAsset); overload; {b\}
    procedure ParseContractTermAsset(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractTermAssetData(jsn : TJsonObject) : TFhirContractTermAssetData; overload; {b\}
    procedure ParseContractTermAssetDataProperties(jsn : TJsonObject; result : TFhirContractTermAssetData); overload; {b\}
    procedure ParseContractTermAssetData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractTermAssetValuedItem(jsn : TJsonObject) : TFhirContractTermAssetValuedItem; overload; {b\}
    procedure ParseContractTermAssetValuedItemProperties(jsn : TJsonObject; result : TFhirContractTermAssetValuedItem); overload; {b\}
    procedure ParseContractTermAssetValuedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractTermAgent(jsn : TJsonObject) : TFhirContractTermAgent; overload; {b\}
    procedure ParseContractTermAgentProperties(jsn : TJsonObject; result : TFhirContractTermAgent); overload; {b\}
    procedure ParseContractTermAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractSigner(jsn : TJsonObject) : TFhirContractSigner; overload; {b\}
    procedure ParseContractSignerProperties(jsn : TJsonObject; result : TFhirContractSigner); overload; {b\}
    procedure ParseContractSigner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractFriendly(jsn : TJsonObject) : TFhirContractFriendly; overload; {b\}
    procedure ParseContractFriendlyProperties(jsn : TJsonObject; result : TFhirContractFriendly); overload; {b\}
    procedure ParseContractFriendly(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractLegal(jsn : TJsonObject) : TFhirContractLegal; overload; {b\}
    procedure ParseContractLegalProperties(jsn : TJsonObject; result : TFhirContractLegal); overload; {b\}
    procedure ParseContractLegal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractRule(jsn : TJsonObject) : TFhirContractRule; overload; {b\}
    procedure ParseContractRuleProperties(jsn : TJsonObject; result : TFhirContractRule); overload; {b\}
    procedure ParseContractRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContract(jsn : TJsonObject) : TFhirContract; overload;
    procedure ParseContractProperties(jsn : TJsonObject; result : TFhirContract); overload;
    procedure ParseContract(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    function ParseCoverageClass(jsn : TJsonObject) : TFhirCoverageClass; overload; {b\}
    procedure ParseCoverageClassProperties(jsn : TJsonObject; result : TFhirCoverageClass); overload; {b\}
    procedure ParseCoverageClass(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCoverageGrouping(jsn : TJsonObject) : TFhirCoverageGrouping; overload; {b\}
    procedure ParseCoverageGroupingProperties(jsn : TJsonObject; result : TFhirCoverageGrouping); overload; {b\}
    procedure ParseCoverageGrouping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCoverageCopay(jsn : TJsonObject) : TFhirCoverageCopay; overload; {b\}
    procedure ParseCoverageCopayProperties(jsn : TJsonObject; result : TFhirCoverageCopay); overload; {b\}
    procedure ParseCoverageCopay(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCoverage(jsn : TJsonObject) : TFhirCoverage; overload;
    procedure ParseCoverageProperties(jsn : TJsonObject; result : TFhirCoverage); overload;
    procedure ParseCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DETECTEDISSUE}
    function ParseDetectedIssueMitigation(jsn : TJsonObject) : TFhirDetectedIssueMitigation; overload; {b\}
    procedure ParseDetectedIssueMitigationProperties(jsn : TJsonObject; result : TFhirDetectedIssueMitigation); overload; {b\}
    procedure ParseDetectedIssueMitigation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDetectedIssue(jsn : TJsonObject) : TFhirDetectedIssue; overload;
    procedure ParseDetectedIssueProperties(jsn : TJsonObject; result : TFhirDetectedIssue); overload;
    procedure ParseDetectedIssue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    function ParseDeviceUdi(jsn : TJsonObject) : TFhirDeviceUdi; overload; {b\}
    procedure ParseDeviceUdiProperties(jsn : TJsonObject; result : TFhirDeviceUdi); overload; {b\}
    procedure ParseDeviceUdi(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDevice(jsn : TJsonObject) : TFhirDevice; overload;
    procedure ParseDeviceProperties(jsn : TJsonObject; result : TFhirDevice); overload;
    procedure ParseDevice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
    function ParseDeviceComponentProductionSpecification(jsn : TJsonObject) : TFhirDeviceComponentProductionSpecification; overload; {b\}
    procedure ParseDeviceComponentProductionSpecificationProperties(jsn : TJsonObject; result : TFhirDeviceComponentProductionSpecification); overload; {b\}
    procedure ParseDeviceComponentProductionSpecification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDeviceComponentProperty(jsn : TJsonObject) : TFhirDeviceComponentProperty; overload; {b\}
    procedure ParseDeviceComponentPropertyProperties(jsn : TJsonObject; result : TFhirDeviceComponentProperty); overload; {b\}
    procedure ParseDeviceComponentProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDeviceComponent(jsn : TJsonObject) : TFhirDeviceComponent; overload;
    procedure ParseDeviceComponentProperties(jsn : TJsonObject; result : TFhirDeviceComponent); overload;
    procedure ParseDeviceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
    function ParseDeviceMetricCalibration(jsn : TJsonObject) : TFhirDeviceMetricCalibration; overload; {b\}
    procedure ParseDeviceMetricCalibrationProperties(jsn : TJsonObject; result : TFhirDeviceMetricCalibration); overload; {b\}
    procedure ParseDeviceMetricCalibration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDeviceMetric(jsn : TJsonObject) : TFhirDeviceMetric; overload;
    procedure ParseDeviceMetricProperties(jsn : TJsonObject; result : TFhirDeviceMetric); overload;
    procedure ParseDeviceMetric(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    function ParseDeviceRequestParameter(jsn : TJsonObject) : TFhirDeviceRequestParameter; overload; {b\}
    procedure ParseDeviceRequestParameterProperties(jsn : TJsonObject; result : TFhirDeviceRequestParameter); overload; {b\}
    procedure ParseDeviceRequestParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDeviceRequest(jsn : TJsonObject) : TFhirDeviceRequest; overload;
    procedure ParseDeviceRequestProperties(jsn : TJsonObject; result : TFhirDeviceRequest); overload;
    procedure ParseDeviceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    function ParseDeviceUseStatement(jsn : TJsonObject) : TFhirDeviceUseStatement; overload;
    procedure ParseDeviceUseStatementProperties(jsn : TJsonObject; result : TFhirDeviceUseStatement); overload;
    procedure ParseDeviceUseStatement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    function ParseDiagnosticReportMedia(jsn : TJsonObject) : TFhirDiagnosticReportMedia; overload; {b\}
    procedure ParseDiagnosticReportMediaProperties(jsn : TJsonObject; result : TFhirDiagnosticReportMedia); overload; {b\}
    procedure ParseDiagnosticReportMedia(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDiagnosticReport(jsn : TJsonObject) : TFhirDiagnosticReport; overload;
    procedure ParseDiagnosticReportProperties(jsn : TJsonObject; result : TFhirDiagnosticReport); overload;
    procedure ParseDiagnosticReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    function ParseDocumentManifestAgent(jsn : TJsonObject) : TFhirDocumentManifestAgent; overload; {b\}
    procedure ParseDocumentManifestAgentProperties(jsn : TJsonObject; result : TFhirDocumentManifestAgent); overload; {b\}
    procedure ParseDocumentManifestAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentManifestRelated(jsn : TJsonObject) : TFhirDocumentManifestRelated; overload; {b\}
    procedure ParseDocumentManifestRelatedProperties(jsn : TJsonObject; result : TFhirDocumentManifestRelated); overload; {b\}
    procedure ParseDocumentManifestRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentManifest(jsn : TJsonObject) : TFhirDocumentManifest; overload;
    procedure ParseDocumentManifestProperties(jsn : TJsonObject; result : TFhirDocumentManifest); overload;
    procedure ParseDocumentManifest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    function ParseDocumentReferenceAgent(jsn : TJsonObject) : TFhirDocumentReferenceAgent; overload; {b\}
    procedure ParseDocumentReferenceAgentProperties(jsn : TJsonObject; result : TFhirDocumentReferenceAgent); overload; {b\}
    procedure ParseDocumentReferenceAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentReferenceRelatesTo(jsn : TJsonObject) : TFhirDocumentReferenceRelatesTo; overload; {b\}
    procedure ParseDocumentReferenceRelatesToProperties(jsn : TJsonObject; result : TFhirDocumentReferenceRelatesTo); overload; {b\}
    procedure ParseDocumentReferenceRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentReferenceContent(jsn : TJsonObject) : TFhirDocumentReferenceContent; overload; {b\}
    procedure ParseDocumentReferenceContentProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContent); overload; {b\}
    procedure ParseDocumentReferenceContent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentReferenceContext(jsn : TJsonObject) : TFhirDocumentReferenceContext; overload; {b\}
    procedure ParseDocumentReferenceContextProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContext); overload; {b\}
    procedure ParseDocumentReferenceContext(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentReferenceContextRelated(jsn : TJsonObject) : TFhirDocumentReferenceContextRelated; overload; {b\}
    procedure ParseDocumentReferenceContextRelatedProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContextRelated); overload; {b\}
    procedure ParseDocumentReferenceContextRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentReference(jsn : TJsonObject) : TFhirDocumentReference; overload;
    procedure ParseDocumentReferenceProperties(jsn : TJsonObject; result : TFhirDocumentReference); overload;
    procedure ParseDocumentReference(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
    function ParseEligibilityRequestAuthorization(jsn : TJsonObject) : TFhirEligibilityRequestAuthorization; overload; {b\}
    procedure ParseEligibilityRequestAuthorizationProperties(jsn : TJsonObject; result : TFhirEligibilityRequestAuthorization); overload; {b\}
    procedure ParseEligibilityRequestAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityRequest(jsn : TJsonObject) : TFhirEligibilityRequest; overload;
    procedure ParseEligibilityRequestProperties(jsn : TJsonObject; result : TFhirEligibilityRequest); overload;
    procedure ParseEligibilityRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
    function ParseEligibilityResponseInsurance(jsn : TJsonObject) : TFhirEligibilityResponseInsurance; overload; {b\}
    procedure ParseEligibilityResponseInsuranceProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsurance); overload; {b\}
    procedure ParseEligibilityResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityResponseInsuranceBenefitBalance(jsn : TJsonObject) : TFhirEligibilityResponseInsuranceBenefitBalance; overload; {b\}
    procedure ParseEligibilityResponseInsuranceBenefitBalanceProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsuranceBenefitBalance); overload; {b\}
    procedure ParseEligibilityResponseInsuranceBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn : TJsonObject) : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial; overload; {b\}
    procedure ParseEligibilityResponseInsuranceBenefitBalanceFinancialProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial); overload; {b\}
    procedure ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityResponseAuthorization(jsn : TJsonObject) : TFhirEligibilityResponseAuthorization; overload; {b\}
    procedure ParseEligibilityResponseAuthorizationProperties(jsn : TJsonObject; result : TFhirEligibilityResponseAuthorization); overload; {b\}
    procedure ParseEligibilityResponseAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityResponseError(jsn : TJsonObject) : TFhirEligibilityResponseError; overload; {b\}
    procedure ParseEligibilityResponseErrorProperties(jsn : TJsonObject; result : TFhirEligibilityResponseError); overload; {b\}
    procedure ParseEligibilityResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityResponse(jsn : TJsonObject) : TFhirEligibilityResponse; overload;
    procedure ParseEligibilityResponseProperties(jsn : TJsonObject; result : TFhirEligibilityResponse); overload;
    procedure ParseEligibilityResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
    function ParseEncounterStatusHistory(jsn : TJsonObject) : TFhirEncounterStatusHistory; overload; {b\}
    procedure ParseEncounterStatusHistoryProperties(jsn : TJsonObject; result : TFhirEncounterStatusHistory); overload; {b\}
    procedure ParseEncounterStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterClassHistory(jsn : TJsonObject) : TFhirEncounterClassHistory; overload; {b\}
    procedure ParseEncounterClassHistoryProperties(jsn : TJsonObject; result : TFhirEncounterClassHistory); overload; {b\}
    procedure ParseEncounterClassHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterParticipant(jsn : TJsonObject) : TFhirEncounterParticipant; overload; {b\}
    procedure ParseEncounterParticipantProperties(jsn : TJsonObject; result : TFhirEncounterParticipant); overload; {b\}
    procedure ParseEncounterParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterDiagnosis(jsn : TJsonObject) : TFhirEncounterDiagnosis; overload; {b\}
    procedure ParseEncounterDiagnosisProperties(jsn : TJsonObject; result : TFhirEncounterDiagnosis); overload; {b\}
    procedure ParseEncounterDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterHospitalization(jsn : TJsonObject) : TFhirEncounterHospitalization; overload; {b\}
    procedure ParseEncounterHospitalizationProperties(jsn : TJsonObject; result : TFhirEncounterHospitalization); overload; {b\}
    procedure ParseEncounterHospitalization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterLocation(jsn : TJsonObject) : TFhirEncounterLocation; overload; {b\}
    procedure ParseEncounterLocationProperties(jsn : TJsonObject; result : TFhirEncounterLocation); overload; {b\}
    procedure ParseEncounterLocation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounter(jsn : TJsonObject) : TFhirEncounter; overload;
    procedure ParseEncounterProperties(jsn : TJsonObject; result : TFhirEncounter); overload;
    procedure ParseEncounter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    function ParseEndpoint(jsn : TJsonObject) : TFhirEndpoint; overload;
    procedure ParseEndpointProperties(jsn : TJsonObject; result : TFhirEndpoint); overload;
    procedure ParseEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    function ParseEnrollmentRequest(jsn : TJsonObject) : TFhirEnrollmentRequest; overload;
    procedure ParseEnrollmentRequestProperties(jsn : TJsonObject; result : TFhirEnrollmentRequest); overload;
    procedure ParseEnrollmentRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    function ParseEnrollmentResponse(jsn : TJsonObject) : TFhirEnrollmentResponse; overload;
    procedure ParseEnrollmentResponseProperties(jsn : TJsonObject; result : TFhirEnrollmentResponse); overload;
    procedure ParseEnrollmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_ENTRYDEFINITION}
    function ParseEntryDefinitionRelatedEntry(jsn : TJsonObject) : TFhirEntryDefinitionRelatedEntry; overload; {b\}
    procedure ParseEntryDefinitionRelatedEntryProperties(jsn : TJsonObject; result : TFhirEntryDefinitionRelatedEntry); overload; {b\}
    procedure ParseEntryDefinitionRelatedEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEntryDefinition(jsn : TJsonObject) : TFhirEntryDefinition; overload;
    procedure ParseEntryDefinitionProperties(jsn : TJsonObject; result : TFhirEntryDefinition); overload;
    procedure ParseEntryDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ENTRYDEFINITION}
{$IFDEF FHIR_EPISODEOFCARE}
    function ParseEpisodeOfCareStatusHistory(jsn : TJsonObject) : TFhirEpisodeOfCareStatusHistory; overload; {b\}
    procedure ParseEpisodeOfCareStatusHistoryProperties(jsn : TJsonObject; result : TFhirEpisodeOfCareStatusHistory); overload; {b\}
    procedure ParseEpisodeOfCareStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEpisodeOfCareDiagnosis(jsn : TJsonObject) : TFhirEpisodeOfCareDiagnosis; overload; {b\}
    procedure ParseEpisodeOfCareDiagnosisProperties(jsn : TJsonObject; result : TFhirEpisodeOfCareDiagnosis); overload; {b\}
    procedure ParseEpisodeOfCareDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEpisodeOfCare(jsn : TJsonObject) : TFhirEpisodeOfCare; overload;
    procedure ParseEpisodeOfCareProperties(jsn : TJsonObject; result : TFhirEpisodeOfCare); overload;
    procedure ParseEpisodeOfCare(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    function ParseEventDefinition(jsn : TJsonObject) : TFhirEventDefinition; overload;
    procedure ParseEventDefinitionProperties(jsn : TJsonObject; result : TFhirEventDefinition); overload;
    procedure ParseEventDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EXAMPLESCENARIO}
    function ParseExampleScenarioActor(jsn : TJsonObject) : TFhirExampleScenarioActor; overload; {b\}
    procedure ParseExampleScenarioActorProperties(jsn : TJsonObject; result : TFhirExampleScenarioActor); overload; {b\}
    procedure ParseExampleScenarioActor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExampleScenarioInstance(jsn : TJsonObject) : TFhirExampleScenarioInstance; overload; {b\}
    procedure ParseExampleScenarioInstanceProperties(jsn : TJsonObject; result : TFhirExampleScenarioInstance); overload; {b\}
    procedure ParseExampleScenarioInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExampleScenarioInstanceVersion(jsn : TJsonObject) : TFhirExampleScenarioInstanceVersion; overload; {b\}
    procedure ParseExampleScenarioInstanceVersionProperties(jsn : TJsonObject; result : TFhirExampleScenarioInstanceVersion); overload; {b\}
    procedure ParseExampleScenarioInstanceVersion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExampleScenarioInstanceContainedInstance(jsn : TJsonObject) : TFhirExampleScenarioInstanceContainedInstance; overload; {b\}
    procedure ParseExampleScenarioInstanceContainedInstanceProperties(jsn : TJsonObject; result : TFhirExampleScenarioInstanceContainedInstance); overload; {b\}
    procedure ParseExampleScenarioInstanceContainedInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExampleScenarioProcess(jsn : TJsonObject) : TFhirExampleScenarioProcess; overload; {b\}
    procedure ParseExampleScenarioProcessProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcess); overload; {b\}
    procedure ParseExampleScenarioProcess(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExampleScenarioProcessStep(jsn : TJsonObject) : TFhirExampleScenarioProcessStep; overload; {b\}
    procedure ParseExampleScenarioProcessStepProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcessStep); overload; {b\}
    procedure ParseExampleScenarioProcessStep(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExampleScenarioProcessStepOperation(jsn : TJsonObject) : TFhirExampleScenarioProcessStepOperation; overload; {b\}
    procedure ParseExampleScenarioProcessStepOperationProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcessStepOperation); overload; {b\}
    procedure ParseExampleScenarioProcessStepOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExampleScenarioProcessStepAlternative(jsn : TJsonObject) : TFhirExampleScenarioProcessStepAlternative; overload; {b\}
    procedure ParseExampleScenarioProcessStepAlternativeProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcessStepAlternative); overload; {b\}
    procedure ParseExampleScenarioProcessStepAlternative(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExampleScenarioProcessStepAlternativeOption(jsn : TJsonObject) : TFhirExampleScenarioProcessStepAlternativeOption; overload; {b\}
    procedure ParseExampleScenarioProcessStepAlternativeOptionProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcessStepAlternativeOption); overload; {b\}
    procedure ParseExampleScenarioProcessStepAlternativeOption(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExampleScenario(jsn : TJsonObject) : TFhirExampleScenario; overload;
    procedure ParseExampleScenarioProperties(jsn : TJsonObject; result : TFhirExampleScenario); overload;
    procedure ParseExampleScenario(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPANSIONPROFILE}
    function ParseExpansionProfileFixedVersion(jsn : TJsonObject) : TFhirExpansionProfileFixedVersion; overload; {b\}
    procedure ParseExpansionProfileFixedVersionProperties(jsn : TJsonObject; result : TFhirExpansionProfileFixedVersion); overload; {b\}
    procedure ParseExpansionProfileFixedVersion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileExcludedSystem(jsn : TJsonObject) : TFhirExpansionProfileExcludedSystem; overload; {b\}
    procedure ParseExpansionProfileExcludedSystemProperties(jsn : TJsonObject; result : TFhirExpansionProfileExcludedSystem); overload; {b\}
    procedure ParseExpansionProfileExcludedSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignation; overload; {b\}
    procedure ParseExpansionProfileDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignation); overload; {b\}
    procedure ParseExpansionProfileDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignationInclude(jsn : TJsonObject) : TFhirExpansionProfileDesignationInclude; overload; {b\}
    procedure ParseExpansionProfileDesignationIncludeProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationInclude); overload; {b\}
    procedure ParseExpansionProfileDesignationInclude(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignationIncludeDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignationIncludeDesignation; overload; {b\}
    procedure ParseExpansionProfileDesignationIncludeDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationIncludeDesignation); overload; {b\}
    procedure ParseExpansionProfileDesignationIncludeDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignationExclude(jsn : TJsonObject) : TFhirExpansionProfileDesignationExclude; overload; {b\}
    procedure ParseExpansionProfileDesignationExcludeProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationExclude); overload; {b\}
    procedure ParseExpansionProfileDesignationExclude(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignationExcludeDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignationExcludeDesignation; overload; {b\}
    procedure ParseExpansionProfileDesignationExcludeDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationExcludeDesignation); overload; {b\}
    procedure ParseExpansionProfileDesignationExcludeDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfile(jsn : TJsonObject) : TFhirExpansionProfile; overload;
    procedure ParseExpansionProfileProperties(jsn : TJsonObject; result : TFhirExpansionProfile); overload;
    procedure ParseExpansionProfile(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    function ParseExplanationOfBenefitRelated(jsn : TJsonObject) : TFhirExplanationOfBenefitRelated; overload; {b\}
    procedure ParseExplanationOfBenefitRelatedProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitRelated); overload; {b\}
    procedure ParseExplanationOfBenefitRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitPayee(jsn : TJsonObject) : TFhirExplanationOfBenefitPayee; overload; {b\}
    procedure ParseExplanationOfBenefitPayeeProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitPayee); overload; {b\}
    procedure ParseExplanationOfBenefitPayee(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitInformation(jsn : TJsonObject) : TFhirExplanationOfBenefitInformation; overload; {b\}
    procedure ParseExplanationOfBenefitInformationProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitInformation); overload; {b\}
    procedure ParseExplanationOfBenefitInformation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitCareTeam(jsn : TJsonObject) : TFhirExplanationOfBenefitCareTeam; overload; {b\}
    procedure ParseExplanationOfBenefitCareTeamProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitCareTeam); overload; {b\}
    procedure ParseExplanationOfBenefitCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject) : TFhirExplanationOfBenefitDiagnosis; overload; {b\}
    procedure ParseExplanationOfBenefitDiagnosisProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitDiagnosis); overload; {b\}
    procedure ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitProcedure(jsn : TJsonObject) : TFhirExplanationOfBenefitProcedure; overload; {b\}
    procedure ParseExplanationOfBenefitProcedureProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitProcedure); overload; {b\}
    procedure ParseExplanationOfBenefitProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitInsurance(jsn : TJsonObject) : TFhirExplanationOfBenefitInsurance; overload; {b\}
    procedure ParseExplanationOfBenefitInsuranceProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitInsurance); overload; {b\}
    procedure ParseExplanationOfBenefitInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitAccident(jsn : TJsonObject) : TFhirExplanationOfBenefitAccident; overload; {b\}
    procedure ParseExplanationOfBenefitAccidentProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAccident); overload; {b\}
    procedure ParseExplanationOfBenefitAccident(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitItem(jsn : TJsonObject) : TFhirExplanationOfBenefitItem; overload; {b\}
    procedure ParseExplanationOfBenefitItemProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItem); overload; {b\}
    procedure ParseExplanationOfBenefitItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject) : TFhirExplanationOfBenefitItemAdjudication; overload; {b\}
    procedure ParseExplanationOfBenefitItemAdjudicationProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemAdjudication); overload; {b\}
    procedure ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetail; overload; {b\}
    procedure ParseExplanationOfBenefitItemDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemDetail); overload; {b\}
    procedure ParseExplanationOfBenefitItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetailSubDetail; overload; {b\}
    procedure ParseExplanationOfBenefitItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemDetailSubDetail); overload; {b\}
    procedure ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitAddItem(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItem; overload; {b\}
    procedure ParseExplanationOfBenefitAddItemProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAddItem); overload; {b\}
    procedure ParseExplanationOfBenefitAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitPayment(jsn : TJsonObject) : TFhirExplanationOfBenefitPayment; overload; {b\}
    procedure ParseExplanationOfBenefitPaymentProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitPayment); overload; {b\}
    procedure ParseExplanationOfBenefitPayment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitProcessNote(jsn : TJsonObject) : TFhirExplanationOfBenefitProcessNote; overload; {b\}
    procedure ParseExplanationOfBenefitProcessNoteProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitProcessNote); overload; {b\}
    procedure ParseExplanationOfBenefitProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalance; overload; {b\}
    procedure ParseExplanationOfBenefitBenefitBalanceProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitBenefitBalance); overload; {b\}
    procedure ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalanceFinancial; overload; {b\}
    procedure ParseExplanationOfBenefitBenefitBalanceFinancialProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitBenefitBalanceFinancial); overload; {b\}
    procedure ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefit(jsn : TJsonObject) : TFhirExplanationOfBenefit; overload;
    procedure ParseExplanationOfBenefitProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefit); overload;
    procedure ParseExplanationOfBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    function ParseFamilyMemberHistoryCondition(jsn : TJsonObject) : TFhirFamilyMemberHistoryCondition; overload; {b\}
    procedure ParseFamilyMemberHistoryConditionProperties(jsn : TJsonObject; result : TFhirFamilyMemberHistoryCondition); overload; {b\}
    procedure ParseFamilyMemberHistoryCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseFamilyMemberHistory(jsn : TJsonObject) : TFhirFamilyMemberHistory; overload;
    procedure ParseFamilyMemberHistoryProperties(jsn : TJsonObject; result : TFhirFamilyMemberHistory); overload;
    procedure ParseFamilyMemberHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    function ParseFlag(jsn : TJsonObject) : TFhirFlag; overload;
    procedure ParseFlagProperties(jsn : TJsonObject; result : TFhirFlag); overload;
    procedure ParseFlag(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    function ParseGoalTarget(jsn : TJsonObject) : TFhirGoalTarget; overload; {b\}
    procedure ParseGoalTargetProperties(jsn : TJsonObject; result : TFhirGoalTarget); overload; {b\}
    procedure ParseGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGoal(jsn : TJsonObject) : TFhirGoal; overload;
    procedure ParseGoalProperties(jsn : TJsonObject; result : TFhirGoal); overload;
    procedure ParseGoal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    function ParseGraphDefinitionLink(jsn : TJsonObject) : TFhirGraphDefinitionLink; overload; {b\}
    procedure ParseGraphDefinitionLinkProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLink); overload; {b\}
    procedure ParseGraphDefinitionLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGraphDefinitionLinkTarget(jsn : TJsonObject) : TFhirGraphDefinitionLinkTarget; overload; {b\}
    procedure ParseGraphDefinitionLinkTargetProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLinkTarget); overload; {b\}
    procedure ParseGraphDefinitionLinkTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject) : TFhirGraphDefinitionLinkTargetCompartment; overload; {b\}
    procedure ParseGraphDefinitionLinkTargetCompartmentProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLinkTargetCompartment); overload; {b\}
    procedure ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGraphDefinition(jsn : TJsonObject) : TFhirGraphDefinition; overload;
    procedure ParseGraphDefinitionProperties(jsn : TJsonObject; result : TFhirGraphDefinition); overload;
    procedure ParseGraphDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    function ParseGroupCharacteristic(jsn : TJsonObject) : TFhirGroupCharacteristic; overload; {b\}
    procedure ParseGroupCharacteristicProperties(jsn : TJsonObject; result : TFhirGroupCharacteristic); overload; {b\}
    procedure ParseGroupCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGroupMember(jsn : TJsonObject) : TFhirGroupMember; overload; {b\}
    procedure ParseGroupMemberProperties(jsn : TJsonObject; result : TFhirGroupMember); overload; {b\}
    procedure ParseGroupMember(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGroup(jsn : TJsonObject) : TFhirGroup; overload;
    procedure ParseGroupProperties(jsn : TJsonObject; result : TFhirGroup); overload;
    procedure ParseGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    function ParseGuidanceResponse(jsn : TJsonObject) : TFhirGuidanceResponse; overload;
    procedure ParseGuidanceResponseProperties(jsn : TJsonObject; result : TFhirGuidanceResponse); overload;
    procedure ParseGuidanceResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    function ParseHealthcareServiceAvailableTime(jsn : TJsonObject) : TFhirHealthcareServiceAvailableTime; overload; {b\}
    procedure ParseHealthcareServiceAvailableTimeProperties(jsn : TJsonObject; result : TFhirHealthcareServiceAvailableTime); overload; {b\}
    procedure ParseHealthcareServiceAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseHealthcareServiceNotAvailable(jsn : TJsonObject) : TFhirHealthcareServiceNotAvailable; overload; {b\}
    procedure ParseHealthcareServiceNotAvailableProperties(jsn : TJsonObject; result : TFhirHealthcareServiceNotAvailable); overload; {b\}
    procedure ParseHealthcareServiceNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseHealthcareService(jsn : TJsonObject) : TFhirHealthcareService; overload;
    procedure ParseHealthcareServiceProperties(jsn : TJsonObject; result : TFhirHealthcareService); overload;
    procedure ParseHealthcareService(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    function ParseImagingStudySeries(jsn : TJsonObject) : TFhirImagingStudySeries; overload; {b\}
    procedure ParseImagingStudySeriesProperties(jsn : TJsonObject; result : TFhirImagingStudySeries); overload; {b\}
    procedure ParseImagingStudySeries(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImagingStudySeriesInstance(jsn : TJsonObject) : TFhirImagingStudySeriesInstance; overload; {b\}
    procedure ParseImagingStudySeriesInstanceProperties(jsn : TJsonObject; result : TFhirImagingStudySeriesInstance); overload; {b\}
    procedure ParseImagingStudySeriesInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImagingStudy(jsn : TJsonObject) : TFhirImagingStudy; overload;
    procedure ParseImagingStudyProperties(jsn : TJsonObject; result : TFhirImagingStudy); overload;
    procedure ParseImagingStudy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    function ParseImmunizationPractitioner(jsn : TJsonObject) : TFhirImmunizationPractitioner; overload; {b\}
    procedure ParseImmunizationPractitionerProperties(jsn : TJsonObject; result : TFhirImmunizationPractitioner); overload; {b\}
    procedure ParseImmunizationPractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunizationEducation(jsn : TJsonObject) : TFhirImmunizationEducation; overload; {b\}
    procedure ParseImmunizationEducationProperties(jsn : TJsonObject; result : TFhirImmunizationEducation); overload; {b\}
    procedure ParseImmunizationEducation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunization(jsn : TJsonObject) : TFhirImmunization; overload;
    procedure ParseImmunizationProperties(jsn : TJsonObject; result : TFhirImmunization); overload;
    procedure ParseImmunization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    function ParseImmunizationEvaluation(jsn : TJsonObject) : TFhirImmunizationEvaluation; overload;
    procedure ParseImmunizationEvaluationProperties(jsn : TJsonObject; result : TFhirImmunizationEvaluation); overload;
    procedure ParseImmunizationEvaluation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    function ParseImmunizationRecommendationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendation; overload; {b\}
    procedure ParseImmunizationRecommendationRecommendationProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendation); overload; {b\}
    procedure ParseImmunizationRecommendationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendationDateCriterion; overload; {b\}
    procedure ParseImmunizationRecommendationRecommendationDateCriterionProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendationDateCriterion); overload; {b\}
    procedure ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunizationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendation; overload;
    procedure ParseImmunizationRecommendationProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendation); overload;
    procedure ParseImmunizationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    function ParseImplementationGuideDependency(jsn : TJsonObject) : TFhirImplementationGuideDependency; overload; {b\}
    procedure ParseImplementationGuideDependencyProperties(jsn : TJsonObject; result : TFhirImplementationGuideDependency); overload; {b\}
    procedure ParseImplementationGuideDependency(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuidePackage(jsn : TJsonObject) : TFhirImplementationGuidePackage; overload; {b\}
    procedure ParseImplementationGuidePackageProperties(jsn : TJsonObject; result : TFhirImplementationGuidePackage); overload; {b\}
    procedure ParseImplementationGuidePackage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuidePackageResource(jsn : TJsonObject) : TFhirImplementationGuidePackageResource; overload; {b\}
    procedure ParseImplementationGuidePackageResourceProperties(jsn : TJsonObject; result : TFhirImplementationGuidePackageResource); overload; {b\}
    procedure ParseImplementationGuidePackageResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideGlobal(jsn : TJsonObject) : TFhirImplementationGuideGlobal; overload; {b\}
    procedure ParseImplementationGuideGlobalProperties(jsn : TJsonObject; result : TFhirImplementationGuideGlobal); overload; {b\}
    procedure ParseImplementationGuideGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuidePage(jsn : TJsonObject) : TFhirImplementationGuidePage; overload; {b\}
    procedure ParseImplementationGuidePageProperties(jsn : TJsonObject; result : TFhirImplementationGuidePage); overload; {b\}
    procedure ParseImplementationGuidePage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuide(jsn : TJsonObject) : TFhirImplementationGuide; overload;
    procedure ParseImplementationGuideProperties(jsn : TJsonObject; result : TFhirImplementationGuide); overload;
    procedure ParseImplementationGuide(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEINPUT}
    function ParseImplementationGuideInputDependency(jsn : TJsonObject) : TFhirImplementationGuideInputDependency; overload; {b\}
    procedure ParseImplementationGuideInputDependencyProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputDependency); overload; {b\}
    procedure ParseImplementationGuideInputDependency(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideInputPackage(jsn : TJsonObject) : TFhirImplementationGuideInputPackage; overload; {b\}
    procedure ParseImplementationGuideInputPackageProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputPackage); overload; {b\}
    procedure ParseImplementationGuideInputPackage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideInputPackageResource(jsn : TJsonObject) : TFhirImplementationGuideInputPackageResource; overload; {b\}
    procedure ParseImplementationGuideInputPackageResourceProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputPackageResource); overload; {b\}
    procedure ParseImplementationGuideInputPackageResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideInputGlobal(jsn : TJsonObject) : TFhirImplementationGuideInputGlobal; overload; {b\}
    procedure ParseImplementationGuideInputGlobalProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputGlobal); overload; {b\}
    procedure ParseImplementationGuideInputGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideInputPage(jsn : TJsonObject) : TFhirImplementationGuideInputPage; overload; {b\}
    procedure ParseImplementationGuideInputPageProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputPage); overload; {b\}
    procedure ParseImplementationGuideInputPage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideInput(jsn : TJsonObject) : TFhirImplementationGuideInput; overload;
    procedure ParseImplementationGuideInputProperties(jsn : TJsonObject; result : TFhirImplementationGuideInput); overload;
    procedure ParseImplementationGuideInput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMPLEMENTATIONGUIDEINPUT}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
    function ParseImplementationGuideOutputDependency(jsn : TJsonObject) : TFhirImplementationGuideOutputDependency; overload; {b\}
    procedure ParseImplementationGuideOutputDependencyProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutputDependency); overload; {b\}
    procedure ParseImplementationGuideOutputDependency(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideOutputResource(jsn : TJsonObject) : TFhirImplementationGuideOutputResource; overload; {b\}
    procedure ParseImplementationGuideOutputResourceProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutputResource); overload; {b\}
    procedure ParseImplementationGuideOutputResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideOutputGlobal(jsn : TJsonObject) : TFhirImplementationGuideOutputGlobal; overload; {b\}
    procedure ParseImplementationGuideOutputGlobalProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutputGlobal); overload; {b\}
    procedure ParseImplementationGuideOutputGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideOutputPage(jsn : TJsonObject) : TFhirImplementationGuideOutputPage; overload; {b\}
    procedure ParseImplementationGuideOutputPageProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutputPage); overload; {b\}
    procedure ParseImplementationGuideOutputPage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideOutput(jsn : TJsonObject) : TFhirImplementationGuideOutput; overload;
    procedure ParseImplementationGuideOutputProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutput); overload;
    procedure ParseImplementationGuideOutput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
{$IFDEF FHIR_INVOICE}
    function ParseInvoiceParticipant(jsn : TJsonObject) : TFhirInvoiceParticipant; overload; {b\}
    procedure ParseInvoiceParticipantProperties(jsn : TJsonObject; result : TFhirInvoiceParticipant); overload; {b\}
    procedure ParseInvoiceParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseInvoiceLineItem(jsn : TJsonObject) : TFhirInvoiceLineItem; overload; {b\}
    procedure ParseInvoiceLineItemProperties(jsn : TJsonObject; result : TFhirInvoiceLineItem); overload; {b\}
    procedure ParseInvoiceLineItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseInvoiceLineItemPriceComponent(jsn : TJsonObject) : TFhirInvoiceLineItemPriceComponent; overload; {b\}
    procedure ParseInvoiceLineItemPriceComponentProperties(jsn : TJsonObject; result : TFhirInvoiceLineItemPriceComponent); overload; {b\}
    procedure ParseInvoiceLineItemPriceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseInvoice(jsn : TJsonObject) : TFhirInvoice; overload;
    procedure ParseInvoiceProperties(jsn : TJsonObject; result : TFhirInvoice); overload;
    procedure ParseInvoice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_ITEMINSTANCE}
    function ParseItemInstance(jsn : TJsonObject) : TFhirItemInstance; overload;
    procedure ParseItemInstanceProperties(jsn : TJsonObject; result : TFhirItemInstance); overload;
    procedure ParseItemInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ITEMINSTANCE}
{$IFDEF FHIR_LIBRARY}
    function ParseLibrary(jsn : TJsonObject) : TFhirLibrary; overload;
    procedure ParseLibraryProperties(jsn : TJsonObject; result : TFhirLibrary); overload;
    procedure ParseLibrary(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    function ParseLinkageItem(jsn : TJsonObject) : TFhirLinkageItem; overload; {b\}
    procedure ParseLinkageItemProperties(jsn : TJsonObject; result : TFhirLinkageItem); overload; {b\}
    procedure ParseLinkageItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseLinkage(jsn : TJsonObject) : TFhirLinkage; overload;
    procedure ParseLinkageProperties(jsn : TJsonObject; result : TFhirLinkage); overload;
    procedure ParseLinkage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    function ParseListEntry(jsn : TJsonObject) : TFhirListEntry; overload; {b\}
    procedure ParseListEntryProperties(jsn : TJsonObject; result : TFhirListEntry); overload; {b\}
    procedure ParseListEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseList(jsn : TJsonObject) : TFhirList; overload;
    procedure ParseListProperties(jsn : TJsonObject; result : TFhirList); overload;
    procedure ParseList(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    function ParseLocationPosition(jsn : TJsonObject) : TFhirLocationPosition; overload; {b\}
    procedure ParseLocationPositionProperties(jsn : TJsonObject; result : TFhirLocationPosition); overload; {b\}
    procedure ParseLocationPosition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseLocationHoursOfOperation(jsn : TJsonObject) : TFhirLocationHoursOfOperation; overload; {b\}
    procedure ParseLocationHoursOfOperationProperties(jsn : TJsonObject; result : TFhirLocationHoursOfOperation); overload; {b\}
    procedure ParseLocationHoursOfOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseLocation(jsn : TJsonObject) : TFhirLocation; overload;
    procedure ParseLocationProperties(jsn : TJsonObject; result : TFhirLocation); overload;
    procedure ParseLocation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
    function ParseMeasureGroup(jsn : TJsonObject) : TFhirMeasureGroup; overload; {b\}
    procedure ParseMeasureGroupProperties(jsn : TJsonObject; result : TFhirMeasureGroup); overload; {b\}
    procedure ParseMeasureGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureGroupPopulation(jsn : TJsonObject) : TFhirMeasureGroupPopulation; overload; {b\}
    procedure ParseMeasureGroupPopulationProperties(jsn : TJsonObject; result : TFhirMeasureGroupPopulation); overload; {b\}
    procedure ParseMeasureGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureGroupStratifier(jsn : TJsonObject) : TFhirMeasureGroupStratifier; overload; {b\}
    procedure ParseMeasureGroupStratifierProperties(jsn : TJsonObject; result : TFhirMeasureGroupStratifier); overload; {b\}
    procedure ParseMeasureGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureSupplementalData(jsn : TJsonObject) : TFhirMeasureSupplementalData; overload; {b\}
    procedure ParseMeasureSupplementalDataProperties(jsn : TJsonObject; result : TFhirMeasureSupplementalData); overload; {b\}
    procedure ParseMeasureSupplementalData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasure(jsn : TJsonObject) : TFhirMeasure; overload;
    procedure ParseMeasureProperties(jsn : TJsonObject; result : TFhirMeasure); overload;
    procedure ParseMeasure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    function ParseMeasureReportGroup(jsn : TJsonObject) : TFhirMeasureReportGroup; overload; {b\}
    procedure ParseMeasureReportGroupProperties(jsn : TJsonObject; result : TFhirMeasureReportGroup); overload; {b\}
    procedure ParseMeasureReportGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReportGroupPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupPopulation; overload; {b\}
    procedure ParseMeasureReportGroupPopulationProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupPopulation); overload; {b\}
    procedure ParseMeasureReportGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReportGroupStratifier(jsn : TJsonObject) : TFhirMeasureReportGroupStratifier; overload; {b\}
    procedure ParseMeasureReportGroupStratifierProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifier); overload; {b\}
    procedure ParseMeasureReportGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratum; overload; {b\}
    procedure ParseMeasureReportGroupStratifierStratumProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifierStratum); overload; {b\}
    procedure ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratumPopulation; overload; {b\}
    procedure ParseMeasureReportGroupStratifierStratumPopulationProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifierStratumPopulation); overload; {b\}
    procedure ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReport(jsn : TJsonObject) : TFhirMeasureReport; overload;
    procedure ParseMeasureReportProperties(jsn : TJsonObject; result : TFhirMeasureReport); overload;
    procedure ParseMeasureReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
    function ParseMedia(jsn : TJsonObject) : TFhirMedia; overload;
    procedure ParseMediaProperties(jsn : TJsonObject; result : TFhirMedia); overload;
    procedure ParseMedia(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
    function ParseMedicationIngredient(jsn : TJsonObject) : TFhirMedicationIngredient; overload; {b\}
    procedure ParseMedicationIngredientProperties(jsn : TJsonObject; result : TFhirMedicationIngredient); overload; {b\}
    procedure ParseMedicationIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationBatch(jsn : TJsonObject) : TFhirMedicationBatch; overload; {b\}
    procedure ParseMedicationBatchProperties(jsn : TJsonObject; result : TFhirMedicationBatch); overload; {b\}
    procedure ParseMedicationBatch(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedication(jsn : TJsonObject) : TFhirMedication; overload;
    procedure ParseMedicationProperties(jsn : TJsonObject; result : TFhirMedication); overload;
    procedure ParseMedication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    function ParseMedicationAdministrationPerformer(jsn : TJsonObject) : TFhirMedicationAdministrationPerformer; overload; {b\}
    procedure ParseMedicationAdministrationPerformerProperties(jsn : TJsonObject; result : TFhirMedicationAdministrationPerformer); overload; {b\}
    procedure ParseMedicationAdministrationPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationAdministrationDosage(jsn : TJsonObject) : TFhirMedicationAdministrationDosage; overload; {b\}
    procedure ParseMedicationAdministrationDosageProperties(jsn : TJsonObject; result : TFhirMedicationAdministrationDosage); overload; {b\}
    procedure ParseMedicationAdministrationDosage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationAdministration(jsn : TJsonObject) : TFhirMedicationAdministration; overload;
    procedure ParseMedicationAdministrationProperties(jsn : TJsonObject; result : TFhirMedicationAdministration); overload;
    procedure ParseMedicationAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    function ParseMedicationDispensePerformer(jsn : TJsonObject) : TFhirMedicationDispensePerformer; overload; {b\}
    procedure ParseMedicationDispensePerformerProperties(jsn : TJsonObject; result : TFhirMedicationDispensePerformer); overload; {b\}
    procedure ParseMedicationDispensePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationDispenseSubstitution(jsn : TJsonObject) : TFhirMedicationDispenseSubstitution; overload; {b\}
    procedure ParseMedicationDispenseSubstitutionProperties(jsn : TJsonObject; result : TFhirMedicationDispenseSubstitution); overload; {b\}
    procedure ParseMedicationDispenseSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationDispense(jsn : TJsonObject) : TFhirMedicationDispense; overload;
    procedure ParseMedicationDispenseProperties(jsn : TJsonObject; result : TFhirMedicationDispense); overload;
    procedure ParseMedicationDispense(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    function ParseMedicationRequestDispenseRequest(jsn : TJsonObject) : TFhirMedicationRequestDispenseRequest; overload; {b\}
    procedure ParseMedicationRequestDispenseRequestProperties(jsn : TJsonObject; result : TFhirMedicationRequestDispenseRequest); overload; {b\}
    procedure ParseMedicationRequestDispenseRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationRequestSubstitution(jsn : TJsonObject) : TFhirMedicationRequestSubstitution; overload; {b\}
    procedure ParseMedicationRequestSubstitutionProperties(jsn : TJsonObject; result : TFhirMedicationRequestSubstitution); overload; {b\}
    procedure ParseMedicationRequestSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationRequest(jsn : TJsonObject) : TFhirMedicationRequest; overload;
    procedure ParseMedicationRequestProperties(jsn : TJsonObject; result : TFhirMedicationRequest); overload;
    procedure ParseMedicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
    function ParseMedicationStatement(jsn : TJsonObject) : TFhirMedicationStatement; overload;
    procedure ParseMedicationStatementProperties(jsn : TJsonObject; result : TFhirMedicationStatement); overload;
    procedure ParseMedicationStatement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
    function ParseMedicinalProductName(jsn : TJsonObject) : TFhirMedicinalProductName; overload; {b\}
    procedure ParseMedicinalProductNameProperties(jsn : TJsonObject; result : TFhirMedicinalProductName); overload; {b\}
    procedure ParseMedicinalProductName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductNameNamePart(jsn : TJsonObject) : TFhirMedicinalProductNameNamePart; overload; {b\}
    procedure ParseMedicinalProductNameNamePartProperties(jsn : TJsonObject; result : TFhirMedicinalProductNameNamePart); overload; {b\}
    procedure ParseMedicinalProductNameNamePart(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductNameCountryLanguage(jsn : TJsonObject) : TFhirMedicinalProductNameCountryLanguage; overload; {b\}
    procedure ParseMedicinalProductNameCountryLanguageProperties(jsn : TJsonObject; result : TFhirMedicinalProductNameCountryLanguage); overload; {b\}
    procedure ParseMedicinalProductNameCountryLanguage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductManufacturingBusinessOperation(jsn : TJsonObject) : TFhirMedicinalProductManufacturingBusinessOperation; overload; {b\}
    procedure ParseMedicinalProductManufacturingBusinessOperationProperties(jsn : TJsonObject; result : TFhirMedicinalProductManufacturingBusinessOperation); overload; {b\}
    procedure ParseMedicinalProductManufacturingBusinessOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProduct(jsn : TJsonObject) : TFhirMedicinalProduct; overload;
    procedure ParseMedicinalProductProperties(jsn : TJsonObject; result : TFhirMedicinalProduct); overload;
    procedure ParseMedicinalProduct(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
    function ParseMedicinalProductAuthorizationJurisdictionalAuthorization(jsn : TJsonObject) : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization; overload; {b\}
    procedure ParseMedicinalProductAuthorizationJurisdictionalAuthorizationProperties(jsn : TJsonObject; result : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization); overload; {b\}
    procedure ParseMedicinalProductAuthorizationJurisdictionalAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductAuthorizationProcedure(jsn : TJsonObject) : TFhirMedicinalProductAuthorizationProcedure; overload; {b\}
    procedure ParseMedicinalProductAuthorizationProcedureProperties(jsn : TJsonObject; result : TFhirMedicinalProductAuthorizationProcedure); overload; {b\}
    procedure ParseMedicinalProductAuthorizationProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductAuthorizationProcedureApplication(jsn : TJsonObject) : TFhirMedicinalProductAuthorizationProcedureApplication; overload; {b\}
    procedure ParseMedicinalProductAuthorizationProcedureApplicationProperties(jsn : TJsonObject; result : TFhirMedicinalProductAuthorizationProcedureApplication); overload; {b\}
    procedure ParseMedicinalProductAuthorizationProcedureApplication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductAuthorization(jsn : TJsonObject) : TFhirMedicinalProductAuthorization; overload;
    procedure ParseMedicinalProductAuthorizationProperties(jsn : TJsonObject; result : TFhirMedicinalProductAuthorization); overload;
    procedure ParseMedicinalProductAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCLINICALS}
    function ParseMedicinalProductClinicalsUndesirableEffects(jsn : TJsonObject) : TFhirMedicinalProductClinicalsUndesirableEffects; overload; {b\}
    procedure ParseMedicinalProductClinicalsUndesirableEffectsProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsUndesirableEffects); overload; {b\}
    procedure ParseMedicinalProductClinicalsUndesirableEffects(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductClinicalsUndesirableEffectsPopulation(jsn : TJsonObject) : TFhirMedicinalProductClinicalsUndesirableEffectsPopulation; overload; {b\}
    procedure ParseMedicinalProductClinicalsUndesirableEffectsPopulationProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsUndesirableEffectsPopulation); overload; {b\}
    procedure ParseMedicinalProductClinicalsUndesirableEffectsPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductClinicalsTherapeuticIndication(jsn : TJsonObject) : TFhirMedicinalProductClinicalsTherapeuticIndication; overload; {b\}
    procedure ParseMedicinalProductClinicalsTherapeuticIndicationProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsTherapeuticIndication); overload; {b\}
    procedure ParseMedicinalProductClinicalsTherapeuticIndication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(jsn : TJsonObject) : TFhirMedicinalProductClinicalsTherapeuticIndicationOtherTherapy; overload; {b\}
    procedure ParseMedicinalProductClinicalsTherapeuticIndicationOtherTherapyProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsTherapeuticIndicationOtherTherapy); overload; {b\}
    procedure ParseMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductClinicalsContraindication(jsn : TJsonObject) : TFhirMedicinalProductClinicalsContraindication; overload; {b\}
    procedure ParseMedicinalProductClinicalsContraindicationProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsContraindication); overload; {b\}
    procedure ParseMedicinalProductClinicalsContraindication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductClinicalsInteractions(jsn : TJsonObject) : TFhirMedicinalProductClinicalsInteractions; overload; {b\}
    procedure ParseMedicinalProductClinicalsInteractionsProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsInteractions); overload; {b\}
    procedure ParseMedicinalProductClinicalsInteractions(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductClinicals(jsn : TJsonObject) : TFhirMedicinalProductClinicals; overload;
    procedure ParseMedicinalProductClinicalsProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicals); overload;
    procedure ParseMedicinalProductClinicals(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICINALPRODUCTCLINICALS}
{$IFDEF FHIR_MEDICINALPRODUCTDEVICESPEC}
    function ParseMedicinalProductDeviceSpecMaterial(jsn : TJsonObject) : TFhirMedicinalProductDeviceSpecMaterial; overload; {b\}
    procedure ParseMedicinalProductDeviceSpecMaterialProperties(jsn : TJsonObject; result : TFhirMedicinalProductDeviceSpecMaterial); overload; {b\}
    procedure ParseMedicinalProductDeviceSpecMaterial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductDeviceSpec(jsn : TJsonObject) : TFhirMedicinalProductDeviceSpec; overload;
    procedure ParseMedicinalProductDeviceSpecProperties(jsn : TJsonObject; result : TFhirMedicinalProductDeviceSpec); overload;
    procedure ParseMedicinalProductDeviceSpec(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICINALPRODUCTDEVICESPEC}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
    function ParseMedicinalProductIngredientSpecifiedSubstance(jsn : TJsonObject) : TFhirMedicinalProductIngredientSpecifiedSubstance; overload; {b\}
    procedure ParseMedicinalProductIngredientSpecifiedSubstanceProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredientSpecifiedSubstance); overload; {b\}
    procedure ParseMedicinalProductIngredientSpecifiedSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductIngredientSpecifiedSubstanceStrength(jsn : TJsonObject) : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength; overload; {b\}
    procedure ParseMedicinalProductIngredientSpecifiedSubstanceStrengthProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength); overload; {b\}
    procedure ParseMedicinalProductIngredientSpecifiedSubstanceStrength(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(jsn : TJsonObject) : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength; overload; {b\}
    procedure ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength); overload; {b\}
    procedure ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductIngredientSubstance(jsn : TJsonObject) : TFhirMedicinalProductIngredientSubstance; overload; {b\}
    procedure ParseMedicinalProductIngredientSubstanceProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredientSubstance); overload; {b\}
    procedure ParseMedicinalProductIngredientSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductIngredient(jsn : TJsonObject) : TFhirMedicinalProductIngredient; overload;
    procedure ParseMedicinalProductIngredientProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredient); overload;
    procedure ParseMedicinalProductIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
    function ParseMedicinalProductPackagedBatchIdentifier(jsn : TJsonObject) : TFhirMedicinalProductPackagedBatchIdentifier; overload; {b\}
    procedure ParseMedicinalProductPackagedBatchIdentifierProperties(jsn : TJsonObject; result : TFhirMedicinalProductPackagedBatchIdentifier); overload; {b\}
    procedure ParseMedicinalProductPackagedBatchIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductPackagedPackageItem(jsn : TJsonObject) : TFhirMedicinalProductPackagedPackageItem; overload; {b\}
    procedure ParseMedicinalProductPackagedPackageItemProperties(jsn : TJsonObject; result : TFhirMedicinalProductPackagedPackageItem); overload; {b\}
    procedure ParseMedicinalProductPackagedPackageItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductPackagedPackageItemManufacturedItem(jsn : TJsonObject) : TFhirMedicinalProductPackagedPackageItemManufacturedItem; overload; {b\}
    procedure ParseMedicinalProductPackagedPackageItemManufacturedItemProperties(jsn : TJsonObject; result : TFhirMedicinalProductPackagedPackageItemManufacturedItem); overload; {b\}
    procedure ParseMedicinalProductPackagedPackageItemManufacturedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductPackaged(jsn : TJsonObject) : TFhirMedicinalProductPackaged; overload;
    procedure ParseMedicinalProductPackagedProperties(jsn : TJsonObject; result : TFhirMedicinalProductPackaged); overload;
    procedure ParseMedicinalProductPackaged(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
    function ParseMedicinalProductPharmaceuticalCharacteristics(jsn : TJsonObject) : TFhirMedicinalProductPharmaceuticalCharacteristics; overload; {b\}
    procedure ParseMedicinalProductPharmaceuticalCharacteristicsProperties(jsn : TJsonObject; result : TFhirMedicinalProductPharmaceuticalCharacteristics); overload; {b\}
    procedure ParseMedicinalProductPharmaceuticalCharacteristics(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicinalProductPharmaceutical(jsn : TJsonObject) : TFhirMedicinalProductPharmaceutical; overload;
    procedure ParseMedicinalProductPharmaceuticalProperties(jsn : TJsonObject; result : TFhirMedicinalProductPharmaceutical); overload;
    procedure ParseMedicinalProductPharmaceutical(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MESSAGEDEFINITION}
    function ParseMessageDefinitionFocus(jsn : TJsonObject) : TFhirMessageDefinitionFocus; overload; {b\}
    procedure ParseMessageDefinitionFocusProperties(jsn : TJsonObject; result : TFhirMessageDefinitionFocus); overload; {b\}
    procedure ParseMessageDefinitionFocus(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageDefinitionAllowedResponse(jsn : TJsonObject) : TFhirMessageDefinitionAllowedResponse; overload; {b\}
    procedure ParseMessageDefinitionAllowedResponseProperties(jsn : TJsonObject; result : TFhirMessageDefinitionAllowedResponse); overload; {b\}
    procedure ParseMessageDefinitionAllowedResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageDefinition(jsn : TJsonObject) : TFhirMessageDefinition; overload;
    procedure ParseMessageDefinitionProperties(jsn : TJsonObject; result : TFhirMessageDefinition); overload;
    procedure ParseMessageDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    function ParseMessageHeaderDestination(jsn : TJsonObject) : TFhirMessageHeaderDestination; overload; {b\}
    procedure ParseMessageHeaderDestinationProperties(jsn : TJsonObject; result : TFhirMessageHeaderDestination); overload; {b\}
    procedure ParseMessageHeaderDestination(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageHeaderSource(jsn : TJsonObject) : TFhirMessageHeaderSource; overload; {b\}
    procedure ParseMessageHeaderSourceProperties(jsn : TJsonObject; result : TFhirMessageHeaderSource); overload; {b\}
    procedure ParseMessageHeaderSource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageHeaderResponse(jsn : TJsonObject) : TFhirMessageHeaderResponse; overload; {b\}
    procedure ParseMessageHeaderResponseProperties(jsn : TJsonObject; result : TFhirMessageHeaderResponse); overload; {b\}
    procedure ParseMessageHeaderResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageHeader(jsn : TJsonObject) : TFhirMessageHeader; overload;
    procedure ParseMessageHeaderProperties(jsn : TJsonObject; result : TFhirMessageHeader); overload;
    procedure ParseMessageHeader(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
    function ParseNamingSystemUniqueId(jsn : TJsonObject) : TFhirNamingSystemUniqueId; overload; {b\}
    procedure ParseNamingSystemUniqueIdProperties(jsn : TJsonObject; result : TFhirNamingSystemUniqueId); overload; {b\}
    procedure ParseNamingSystemUniqueId(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNamingSystem(jsn : TJsonObject) : TFhirNamingSystem; overload;
    procedure ParseNamingSystemProperties(jsn : TJsonObject; result : TFhirNamingSystem); overload;
    procedure ParseNamingSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
    function ParseNutritionOrderOralDiet(jsn : TJsonObject) : TFhirNutritionOrderOralDiet; overload; {b\}
    procedure ParseNutritionOrderOralDietProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDiet); overload; {b\}
    procedure ParseNutritionOrderOralDiet(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderOralDietNutrient(jsn : TJsonObject) : TFhirNutritionOrderOralDietNutrient; overload; {b\}
    procedure ParseNutritionOrderOralDietNutrientProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDietNutrient); overload; {b\}
    procedure ParseNutritionOrderOralDietNutrient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderOralDietTexture(jsn : TJsonObject) : TFhirNutritionOrderOralDietTexture; overload; {b\}
    procedure ParseNutritionOrderOralDietTextureProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDietTexture); overload; {b\}
    procedure ParseNutritionOrderOralDietTexture(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderSupplement(jsn : TJsonObject) : TFhirNutritionOrderSupplement; overload; {b\}
    procedure ParseNutritionOrderSupplementProperties(jsn : TJsonObject; result : TFhirNutritionOrderSupplement); overload; {b\}
    procedure ParseNutritionOrderSupplement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderEnteralFormula(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormula; overload; {b\}
    procedure ParseNutritionOrderEnteralFormulaProperties(jsn : TJsonObject; result : TFhirNutritionOrderEnteralFormula); overload; {b\}
    procedure ParseNutritionOrderEnteralFormula(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormulaAdministration; overload; {b\}
    procedure ParseNutritionOrderEnteralFormulaAdministrationProperties(jsn : TJsonObject; result : TFhirNutritionOrderEnteralFormulaAdministration); overload; {b\}
    procedure ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrder(jsn : TJsonObject) : TFhirNutritionOrder; overload;
    procedure ParseNutritionOrderProperties(jsn : TJsonObject; result : TFhirNutritionOrder); overload;
    procedure ParseNutritionOrder(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
    function ParseObservationReferenceRange(jsn : TJsonObject) : TFhirObservationReferenceRange; overload; {b\}
    procedure ParseObservationReferenceRangeProperties(jsn : TJsonObject; result : TFhirObservationReferenceRange); overload; {b\}
    procedure ParseObservationReferenceRange(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseObservationComponent(jsn : TJsonObject) : TFhirObservationComponent; overload; {b\}
    procedure ParseObservationComponentProperties(jsn : TJsonObject; result : TFhirObservationComponent); overload; {b\}
    procedure ParseObservationComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseObservation(jsn : TJsonObject) : TFhirObservation; overload;
    procedure ParseObservationProperties(jsn : TJsonObject; result : TFhirObservation); overload;
    procedure ParseObservation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    function ParseObservationDefinitionQuantitativeDetails(jsn : TJsonObject) : TFhirObservationDefinitionQuantitativeDetails; overload; {b\}
    procedure ParseObservationDefinitionQuantitativeDetailsProperties(jsn : TJsonObject; result : TFhirObservationDefinitionQuantitativeDetails); overload; {b\}
    procedure ParseObservationDefinitionQuantitativeDetails(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseObservationDefinitionQualifiedInterval(jsn : TJsonObject) : TFhirObservationDefinitionQualifiedInterval; overload; {b\}
    procedure ParseObservationDefinitionQualifiedIntervalProperties(jsn : TJsonObject; result : TFhirObservationDefinitionQualifiedInterval); overload; {b\}
    procedure ParseObservationDefinitionQualifiedInterval(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseObservationDefinition(jsn : TJsonObject) : TFhirObservationDefinition; overload;
    procedure ParseObservationDefinitionProperties(jsn : TJsonObject; result : TFhirObservationDefinition); overload;
    procedure ParseObservationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OCCUPATIONALDATA}
    function ParseOccupationalDataEmploymentStatus(jsn : TJsonObject) : TFhirOccupationalDataEmploymentStatus; overload; {b\}
    procedure ParseOccupationalDataEmploymentStatusProperties(jsn : TJsonObject; result : TFhirOccupationalDataEmploymentStatus); overload; {b\}
    procedure ParseOccupationalDataEmploymentStatus(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOccupationalDataUsualOccupation(jsn : TJsonObject) : TFhirOccupationalDataUsualOccupation; overload; {b\}
    procedure ParseOccupationalDataUsualOccupationProperties(jsn : TJsonObject; result : TFhirOccupationalDataUsualOccupation); overload; {b\}
    procedure ParseOccupationalDataUsualOccupation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOccupationalDataPastOrPresentOccupation(jsn : TJsonObject) : TFhirOccupationalDataPastOrPresentOccupation; overload; {b\}
    procedure ParseOccupationalDataPastOrPresentOccupationProperties(jsn : TJsonObject; result : TFhirOccupationalDataPastOrPresentOccupation); overload; {b\}
    procedure ParseOccupationalDataPastOrPresentOccupation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOccupationalDataPastOrPresentOccupationWorkSchedule(jsn : TJsonObject) : TFhirOccupationalDataPastOrPresentOccupationWorkSchedule; overload; {b\}
    procedure ParseOccupationalDataPastOrPresentOccupationWorkScheduleProperties(jsn : TJsonObject; result : TFhirOccupationalDataPastOrPresentOccupationWorkSchedule); overload; {b\}
    procedure ParseOccupationalDataPastOrPresentOccupationWorkSchedule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOccupationalData(jsn : TJsonObject) : TFhirOccupationalData; overload;
    procedure ParseOccupationalDataProperties(jsn : TJsonObject; result : TFhirOccupationalData); overload;
    procedure ParseOccupationalData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_OCCUPATIONALDATA}
{$IFDEF FHIR_OPERATIONDEFINITION}
    function ParseOperationDefinitionParameter(jsn : TJsonObject) : TFhirOperationDefinitionParameter; overload; {b\}
    procedure ParseOperationDefinitionParameterProperties(jsn : TJsonObject; result : TFhirOperationDefinitionParameter); overload; {b\}
    procedure ParseOperationDefinitionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOperationDefinitionParameterBinding(jsn : TJsonObject) : TFhirOperationDefinitionParameterBinding; overload; {b\}
    procedure ParseOperationDefinitionParameterBindingProperties(jsn : TJsonObject; result : TFhirOperationDefinitionParameterBinding); overload; {b\}
    procedure ParseOperationDefinitionParameterBinding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOperationDefinitionOverload(jsn : TJsonObject) : TFhirOperationDefinitionOverload; overload; {b\}
    procedure ParseOperationDefinitionOverloadProperties(jsn : TJsonObject; result : TFhirOperationDefinitionOverload); overload; {b\}
    procedure ParseOperationDefinitionOverload(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOperationDefinition(jsn : TJsonObject) : TFhirOperationDefinition; overload;
    procedure ParseOperationDefinitionProperties(jsn : TJsonObject; result : TFhirOperationDefinition); overload;
    procedure ParseOperationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    function ParseOperationOutcomeIssue(jsn : TJsonObject) : TFhirOperationOutcomeIssue; overload; {b\}
    procedure ParseOperationOutcomeIssueProperties(jsn : TJsonObject; result : TFhirOperationOutcomeIssue); overload; {b\}
    procedure ParseOperationOutcomeIssue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOperationOutcome(jsn : TJsonObject) : TFhirOperationOutcome; overload;
    procedure ParseOperationOutcomeProperties(jsn : TJsonObject; result : TFhirOperationOutcome); overload;
    procedure ParseOperationOutcome(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    function ParseOrganizationContact(jsn : TJsonObject) : TFhirOrganizationContact; overload; {b\}
    procedure ParseOrganizationContactProperties(jsn : TJsonObject; result : TFhirOrganizationContact); overload; {b\}
    procedure ParseOrganizationContact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOrganization(jsn : TJsonObject) : TFhirOrganization; overload;
    procedure ParseOrganizationProperties(jsn : TJsonObject; result : TFhirOrganization); overload;
    procedure ParseOrganization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONROLE}
    function ParseOrganizationRoleAvailableTime(jsn : TJsonObject) : TFhirOrganizationRoleAvailableTime; overload; {b\}
    procedure ParseOrganizationRoleAvailableTimeProperties(jsn : TJsonObject; result : TFhirOrganizationRoleAvailableTime); overload; {b\}
    procedure ParseOrganizationRoleAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOrganizationRoleNotAvailable(jsn : TJsonObject) : TFhirOrganizationRoleNotAvailable; overload; {b\}
    procedure ParseOrganizationRoleNotAvailableProperties(jsn : TJsonObject; result : TFhirOrganizationRoleNotAvailable); overload; {b\}
    procedure ParseOrganizationRoleNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOrganizationRole(jsn : TJsonObject) : TFhirOrganizationRole; overload;
    procedure ParseOrganizationRoleProperties(jsn : TJsonObject; result : TFhirOrganizationRole); overload;
    procedure ParseOrganizationRole(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ORGANIZATIONROLE}
{$IFDEF FHIR_PATIENT}
    function ParsePatientContact(jsn : TJsonObject) : TFhirPatientContact; overload; {b\}
    procedure ParsePatientContactProperties(jsn : TJsonObject; result : TFhirPatientContact); overload; {b\}
    procedure ParsePatientContact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePatientAnimal(jsn : TJsonObject) : TFhirPatientAnimal; overload; {b\}
    procedure ParsePatientAnimalProperties(jsn : TJsonObject; result : TFhirPatientAnimal); overload; {b\}
    procedure ParsePatientAnimal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePatientCommunication(jsn : TJsonObject) : TFhirPatientCommunication; overload; {b\}
    procedure ParsePatientCommunicationProperties(jsn : TJsonObject; result : TFhirPatientCommunication); overload; {b\}
    procedure ParsePatientCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePatientLink(jsn : TJsonObject) : TFhirPatientLink; overload; {b\}
    procedure ParsePatientLinkProperties(jsn : TJsonObject; result : TFhirPatientLink); overload; {b\}
    procedure ParsePatientLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePatient(jsn : TJsonObject) : TFhirPatient; overload;
    procedure ParsePatientProperties(jsn : TJsonObject; result : TFhirPatient); overload;
    procedure ParsePatient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    function ParsePaymentNotice(jsn : TJsonObject) : TFhirPaymentNotice; overload;
    procedure ParsePaymentNoticeProperties(jsn : TJsonObject; result : TFhirPaymentNotice); overload;
    procedure ParsePaymentNotice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    function ParsePaymentReconciliationDetail(jsn : TJsonObject) : TFhirPaymentReconciliationDetail; overload; {b\}
    procedure ParsePaymentReconciliationDetailProperties(jsn : TJsonObject; result : TFhirPaymentReconciliationDetail); overload; {b\}
    procedure ParsePaymentReconciliationDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePaymentReconciliationProcessNote(jsn : TJsonObject) : TFhirPaymentReconciliationProcessNote; overload; {b\}
    procedure ParsePaymentReconciliationProcessNoteProperties(jsn : TJsonObject; result : TFhirPaymentReconciliationProcessNote); overload; {b\}
    procedure ParsePaymentReconciliationProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePaymentReconciliation(jsn : TJsonObject) : TFhirPaymentReconciliation; overload;
    procedure ParsePaymentReconciliationProperties(jsn : TJsonObject; result : TFhirPaymentReconciliation); overload;
    procedure ParsePaymentReconciliation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
    function ParsePersonLink(jsn : TJsonObject) : TFhirPersonLink; overload; {b\}
    procedure ParsePersonLinkProperties(jsn : TJsonObject; result : TFhirPersonLink); overload; {b\}
    procedure ParsePersonLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePerson(jsn : TJsonObject) : TFhirPerson; overload;
    procedure ParsePersonProperties(jsn : TJsonObject; result : TFhirPerson); overload;
    procedure ParsePerson(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    function ParsePlanDefinitionGoal(jsn : TJsonObject) : TFhirPlanDefinitionGoal; overload; {b\}
    procedure ParsePlanDefinitionGoalProperties(jsn : TJsonObject; result : TFhirPlanDefinitionGoal); overload; {b\}
    procedure ParsePlanDefinitionGoal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionGoalTarget(jsn : TJsonObject) : TFhirPlanDefinitionGoalTarget; overload; {b\}
    procedure ParsePlanDefinitionGoalTargetProperties(jsn : TJsonObject; result : TFhirPlanDefinitionGoalTarget); overload; {b\}
    procedure ParsePlanDefinitionGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionAction(jsn : TJsonObject) : TFhirPlanDefinitionAction; overload; {b\}
    procedure ParsePlanDefinitionActionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionAction); overload; {b\}
    procedure ParsePlanDefinitionAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionActionCondition(jsn : TJsonObject) : TFhirPlanDefinitionActionCondition; overload; {b\}
    procedure ParsePlanDefinitionActionConditionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionCondition); overload; {b\}
    procedure ParsePlanDefinitionActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject) : TFhirPlanDefinitionActionRelatedAction; overload; {b\}
    procedure ParsePlanDefinitionActionRelatedActionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionRelatedAction); overload; {b\}
    procedure ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionActionParticipant(jsn : TJsonObject) : TFhirPlanDefinitionActionParticipant; overload; {b\}
    procedure ParsePlanDefinitionActionParticipantProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionParticipant); overload; {b\}
    procedure ParsePlanDefinitionActionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject) : TFhirPlanDefinitionActionDynamicValue; overload; {b\}
    procedure ParsePlanDefinitionActionDynamicValueProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionDynamicValue); overload; {b\}
    procedure ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinition(jsn : TJsonObject) : TFhirPlanDefinition; overload;
    procedure ParsePlanDefinitionProperties(jsn : TJsonObject; result : TFhirPlanDefinition); overload;
    procedure ParsePlanDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    function ParsePractitionerQualification(jsn : TJsonObject) : TFhirPractitionerQualification; overload; {b\}
    procedure ParsePractitionerQualificationProperties(jsn : TJsonObject; result : TFhirPractitionerQualification); overload; {b\}
    procedure ParsePractitionerQualification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePractitioner(jsn : TJsonObject) : TFhirPractitioner; overload;
    procedure ParsePractitionerProperties(jsn : TJsonObject; result : TFhirPractitioner); overload;
    procedure ParsePractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    function ParsePractitionerRoleAvailableTime(jsn : TJsonObject) : TFhirPractitionerRoleAvailableTime; overload; {b\}
    procedure ParsePractitionerRoleAvailableTimeProperties(jsn : TJsonObject; result : TFhirPractitionerRoleAvailableTime); overload; {b\}
    procedure ParsePractitionerRoleAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePractitionerRoleNotAvailable(jsn : TJsonObject) : TFhirPractitionerRoleNotAvailable; overload; {b\}
    procedure ParsePractitionerRoleNotAvailableProperties(jsn : TJsonObject; result : TFhirPractitionerRoleNotAvailable); overload; {b\}
    procedure ParsePractitionerRoleNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePractitionerRole(jsn : TJsonObject) : TFhirPractitionerRole; overload;
    procedure ParsePractitionerRoleProperties(jsn : TJsonObject; result : TFhirPractitionerRole); overload;
    procedure ParsePractitionerRole(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    function ParseProcedurePerformer(jsn : TJsonObject) : TFhirProcedurePerformer; overload; {b\}
    procedure ParseProcedurePerformerProperties(jsn : TJsonObject; result : TFhirProcedurePerformer); overload; {b\}
    procedure ParseProcedurePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProcedureFocalDevice(jsn : TJsonObject) : TFhirProcedureFocalDevice; overload; {b\}
    procedure ParseProcedureFocalDeviceProperties(jsn : TJsonObject; result : TFhirProcedureFocalDevice); overload; {b\}
    procedure ParseProcedureFocalDevice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProcedure(jsn : TJsonObject) : TFhirProcedure; overload;
    procedure ParseProcedureProperties(jsn : TJsonObject; result : TFhirProcedure); overload;
    procedure ParseProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCESSREQUEST}
    function ParseProcessRequestItem(jsn : TJsonObject) : TFhirProcessRequestItem; overload; {b\}
    procedure ParseProcessRequestItemProperties(jsn : TJsonObject; result : TFhirProcessRequestItem); overload; {b\}
    procedure ParseProcessRequestItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProcessRequest(jsn : TJsonObject) : TFhirProcessRequest; overload;
    procedure ParseProcessRequestProperties(jsn : TJsonObject; result : TFhirProcessRequest); overload;
    procedure ParseProcessRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
    function ParseProcessResponseProcessNote(jsn : TJsonObject) : TFhirProcessResponseProcessNote; overload; {b\}
    procedure ParseProcessResponseProcessNoteProperties(jsn : TJsonObject; result : TFhirProcessResponseProcessNote); overload; {b\}
    procedure ParseProcessResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProcessResponse(jsn : TJsonObject) : TFhirProcessResponse; overload;
    procedure ParseProcessResponseProperties(jsn : TJsonObject; result : TFhirProcessResponse); overload;
    procedure ParseProcessResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PRODUCTPLAN}
    function ParseProductPlanContact(jsn : TJsonObject) : TFhirProductPlanContact; overload; {b\}
    procedure ParseProductPlanContactProperties(jsn : TJsonObject; result : TFhirProductPlanContact); overload; {b\}
    procedure ParseProductPlanContact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProductPlanCoverage(jsn : TJsonObject) : TFhirProductPlanCoverage; overload; {b\}
    procedure ParseProductPlanCoverageProperties(jsn : TJsonObject; result : TFhirProductPlanCoverage); overload; {b\}
    procedure ParseProductPlanCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProductPlanCoverageBenefit(jsn : TJsonObject) : TFhirProductPlanCoverageBenefit; overload; {b\}
    procedure ParseProductPlanCoverageBenefitProperties(jsn : TJsonObject; result : TFhirProductPlanCoverageBenefit); overload; {b\}
    procedure ParseProductPlanCoverageBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProductPlanCoverageBenefitItem(jsn : TJsonObject) : TFhirProductPlanCoverageBenefitItem; overload; {b\}
    procedure ParseProductPlanCoverageBenefitItemProperties(jsn : TJsonObject; result : TFhirProductPlanCoverageBenefitItem); overload; {b\}
    procedure ParseProductPlanCoverageBenefitItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProductPlanPlan(jsn : TJsonObject) : TFhirProductPlanPlan; overload; {b\}
    procedure ParseProductPlanPlanProperties(jsn : TJsonObject; result : TFhirProductPlanPlan); overload; {b\}
    procedure ParseProductPlanPlan(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProductPlanPlanCategory(jsn : TJsonObject) : TFhirProductPlanPlanCategory; overload; {b\}
    procedure ParseProductPlanPlanCategoryProperties(jsn : TJsonObject; result : TFhirProductPlanPlanCategory); overload; {b\}
    procedure ParseProductPlanPlanCategory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProductPlanPlanCategoryBenefit(jsn : TJsonObject) : TFhirProductPlanPlanCategoryBenefit; overload; {b\}
    procedure ParseProductPlanPlanCategoryBenefitProperties(jsn : TJsonObject; result : TFhirProductPlanPlanCategoryBenefit); overload; {b\}
    procedure ParseProductPlanPlanCategoryBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProductPlanPlanCategoryBenefitCost(jsn : TJsonObject) : TFhirProductPlanPlanCategoryBenefitCost; overload; {b\}
    procedure ParseProductPlanPlanCategoryBenefitCostProperties(jsn : TJsonObject; result : TFhirProductPlanPlanCategoryBenefitCost); overload; {b\}
    procedure ParseProductPlanPlanCategoryBenefitCost(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProductPlan(jsn : TJsonObject) : TFhirProductPlan; overload;
    procedure ParseProductPlanProperties(jsn : TJsonObject; result : TFhirProductPlan); overload;
    procedure ParseProductPlan(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PRODUCTPLAN}
{$IFDEF FHIR_PROVENANCE}
    function ParseProvenanceAgent(jsn : TJsonObject) : TFhirProvenanceAgent; overload; {b\}
    procedure ParseProvenanceAgentProperties(jsn : TJsonObject; result : TFhirProvenanceAgent); overload; {b\}
    procedure ParseProvenanceAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProvenanceEntity(jsn : TJsonObject) : TFhirProvenanceEntity; overload; {b\}
    procedure ParseProvenanceEntityProperties(jsn : TJsonObject; result : TFhirProvenanceEntity); overload; {b\}
    procedure ParseProvenanceEntity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProvenance(jsn : TJsonObject) : TFhirProvenance; overload;
    procedure ParseProvenanceProperties(jsn : TJsonObject; result : TFhirProvenance); overload;
    procedure ParseProvenance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    function ParseQuestionnaireItem(jsn : TJsonObject) : TFhirQuestionnaireItem; overload; {b\}
    procedure ParseQuestionnaireItemProperties(jsn : TJsonObject; result : TFhirQuestionnaireItem); overload; {b\}
    procedure ParseQuestionnaireItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaireItemEnableWhen(jsn : TJsonObject) : TFhirQuestionnaireItemEnableWhen; overload; {b\}
    procedure ParseQuestionnaireItemEnableWhenProperties(jsn : TJsonObject; result : TFhirQuestionnaireItemEnableWhen); overload; {b\}
    procedure ParseQuestionnaireItemEnableWhen(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaireItemOption(jsn : TJsonObject) : TFhirQuestionnaireItemOption; overload; {b\}
    procedure ParseQuestionnaireItemOptionProperties(jsn : TJsonObject; result : TFhirQuestionnaireItemOption); overload; {b\}
    procedure ParseQuestionnaireItemOption(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaire(jsn : TJsonObject) : TFhirQuestionnaire; overload;
    procedure ParseQuestionnaireProperties(jsn : TJsonObject; result : TFhirQuestionnaire); overload;
    procedure ParseQuestionnaire(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    function ParseQuestionnaireResponseItem(jsn : TJsonObject) : TFhirQuestionnaireResponseItem; overload; {b\}
    procedure ParseQuestionnaireResponseItemProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponseItem); overload; {b\}
    procedure ParseQuestionnaireResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject) : TFhirQuestionnaireResponseItemAnswer; overload; {b\}
    procedure ParseQuestionnaireResponseItemAnswerProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponseItemAnswer); overload; {b\}
    procedure ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaireResponse(jsn : TJsonObject) : TFhirQuestionnaireResponse; overload;
    procedure ParseQuestionnaireResponseProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponse); overload;
    procedure ParseQuestionnaireResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
    function ParseRelatedPerson(jsn : TJsonObject) : TFhirRelatedPerson; overload;
    procedure ParseRelatedPersonProperties(jsn : TJsonObject; result : TFhirRelatedPerson); overload;
    procedure ParseRelatedPerson(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    function ParseRequestGroupAction(jsn : TJsonObject) : TFhirRequestGroupAction; overload; {b\}
    procedure ParseRequestGroupActionProperties(jsn : TJsonObject; result : TFhirRequestGroupAction); overload; {b\}
    procedure ParseRequestGroupAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRequestGroupActionCondition(jsn : TJsonObject) : TFhirRequestGroupActionCondition; overload; {b\}
    procedure ParseRequestGroupActionConditionProperties(jsn : TJsonObject; result : TFhirRequestGroupActionCondition); overload; {b\}
    procedure ParseRequestGroupActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRequestGroupActionRelatedAction(jsn : TJsonObject) : TFhirRequestGroupActionRelatedAction; overload; {b\}
    procedure ParseRequestGroupActionRelatedActionProperties(jsn : TJsonObject; result : TFhirRequestGroupActionRelatedAction); overload; {b\}
    procedure ParseRequestGroupActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRequestGroup(jsn : TJsonObject) : TFhirRequestGroup; overload;
    procedure ParseRequestGroupProperties(jsn : TJsonObject; result : TFhirRequestGroup); overload;
    procedure ParseRequestGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
    function ParseResearchStudyArm(jsn : TJsonObject) : TFhirResearchStudyArm; overload; {b\}
    procedure ParseResearchStudyArmProperties(jsn : TJsonObject; result : TFhirResearchStudyArm); overload; {b\}
    procedure ParseResearchStudyArm(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseResearchStudyObjective(jsn : TJsonObject) : TFhirResearchStudyObjective; overload; {b\}
    procedure ParseResearchStudyObjectiveProperties(jsn : TJsonObject; result : TFhirResearchStudyObjective); overload; {b\}
    procedure ParseResearchStudyObjective(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseResearchStudy(jsn : TJsonObject) : TFhirResearchStudy; overload;
    procedure ParseResearchStudyProperties(jsn : TJsonObject; result : TFhirResearchStudy); overload;
    procedure ParseResearchStudy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    function ParseResearchSubject(jsn : TJsonObject) : TFhirResearchSubject; overload;
    procedure ParseResearchSubjectProperties(jsn : TJsonObject; result : TFhirResearchSubject); overload;
    procedure ParseResearchSubject(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    function ParseRiskAssessmentPrediction(jsn : TJsonObject) : TFhirRiskAssessmentPrediction; overload; {b\}
    procedure ParseRiskAssessmentPredictionProperties(jsn : TJsonObject; result : TFhirRiskAssessmentPrediction); overload; {b\}
    procedure ParseRiskAssessmentPrediction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRiskAssessment(jsn : TJsonObject) : TFhirRiskAssessment; overload;
    procedure ParseRiskAssessmentProperties(jsn : TJsonObject; result : TFhirRiskAssessment); overload;
    procedure ParseRiskAssessment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    function ParseSchedule(jsn : TJsonObject) : TFhirSchedule; overload;
    procedure ParseScheduleProperties(jsn : TJsonObject; result : TFhirSchedule); overload;
    procedure ParseSchedule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    function ParseSearchParameterComponent(jsn : TJsonObject) : TFhirSearchParameterComponent; overload; {b\}
    procedure ParseSearchParameterComponentProperties(jsn : TJsonObject; result : TFhirSearchParameterComponent); overload; {b\}
    procedure ParseSearchParameterComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSearchParameter(jsn : TJsonObject) : TFhirSearchParameter; overload;
    procedure ParseSearchParameterProperties(jsn : TJsonObject; result : TFhirSearchParameter); overload;
    procedure ParseSearchParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
    function ParseSequenceReferenceSeq(jsn : TJsonObject) : TFhirSequenceReferenceSeq; overload; {b\}
    procedure ParseSequenceReferenceSeqProperties(jsn : TJsonObject; result : TFhirSequenceReferenceSeq); overload; {b\}
    procedure ParseSequenceReferenceSeq(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceVariant(jsn : TJsonObject) : TFhirSequenceVariant; overload; {b\}
    procedure ParseSequenceVariantProperties(jsn : TJsonObject; result : TFhirSequenceVariant); overload; {b\}
    procedure ParseSequenceVariant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceQuality(jsn : TJsonObject) : TFhirSequenceQuality; overload; {b\}
    procedure ParseSequenceQualityProperties(jsn : TJsonObject; result : TFhirSequenceQuality); overload; {b\}
    procedure ParseSequenceQuality(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceQualityRoc(jsn : TJsonObject) : TFhirSequenceQualityRoc; overload; {b\}
    procedure ParseSequenceQualityRocProperties(jsn : TJsonObject; result : TFhirSequenceQualityRoc); overload; {b\}
    procedure ParseSequenceQualityRoc(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceRepository(jsn : TJsonObject) : TFhirSequenceRepository; overload; {b\}
    procedure ParseSequenceRepositoryProperties(jsn : TJsonObject; result : TFhirSequenceRepository); overload; {b\}
    procedure ParseSequenceRepository(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceStructureVariant(jsn : TJsonObject) : TFhirSequenceStructureVariant; overload; {b\}
    procedure ParseSequenceStructureVariantProperties(jsn : TJsonObject; result : TFhirSequenceStructureVariant); overload; {b\}
    procedure ParseSequenceStructureVariant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceStructureVariantOuter(jsn : TJsonObject) : TFhirSequenceStructureVariantOuter; overload; {b\}
    procedure ParseSequenceStructureVariantOuterProperties(jsn : TJsonObject; result : TFhirSequenceStructureVariantOuter); overload; {b\}
    procedure ParseSequenceStructureVariantOuter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceStructureVariantInner(jsn : TJsonObject) : TFhirSequenceStructureVariantInner; overload; {b\}
    procedure ParseSequenceStructureVariantInnerProperties(jsn : TJsonObject; result : TFhirSequenceStructureVariantInner); overload; {b\}
    procedure ParseSequenceStructureVariantInner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequence(jsn : TJsonObject) : TFhirSequence; overload;
    procedure ParseSequenceProperties(jsn : TJsonObject; result : TFhirSequence); overload;
    procedure ParseSequence(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
    function ParseServiceDefinition(jsn : TJsonObject) : TFhirServiceDefinition; overload;
    procedure ParseServiceDefinitionProperties(jsn : TJsonObject; result : TFhirServiceDefinition); overload;
    procedure ParseServiceDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SERVICEREQUEST}
    function ParseServiceRequest(jsn : TJsonObject) : TFhirServiceRequest; overload;
    procedure ParseServiceRequestProperties(jsn : TJsonObject; result : TFhirServiceRequest); overload;
    procedure ParseServiceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    function ParseSlot(jsn : TJsonObject) : TFhirSlot; overload;
    procedure ParseSlotProperties(jsn : TJsonObject; result : TFhirSlot); overload;
    procedure ParseSlot(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    function ParseSpecimenCollection(jsn : TJsonObject) : TFhirSpecimenCollection; overload; {b\}
    procedure ParseSpecimenCollectionProperties(jsn : TJsonObject; result : TFhirSpecimenCollection); overload; {b\}
    procedure ParseSpecimenCollection(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSpecimenProcessing(jsn : TJsonObject) : TFhirSpecimenProcessing; overload; {b\}
    procedure ParseSpecimenProcessingProperties(jsn : TJsonObject; result : TFhirSpecimenProcessing); overload; {b\}
    procedure ParseSpecimenProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSpecimenContainer(jsn : TJsonObject) : TFhirSpecimenContainer; overload; {b\}
    procedure ParseSpecimenContainerProperties(jsn : TJsonObject; result : TFhirSpecimenContainer); overload; {b\}
    procedure ParseSpecimenContainer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSpecimen(jsn : TJsonObject) : TFhirSpecimen; overload;
    procedure ParseSpecimenProperties(jsn : TJsonObject; result : TFhirSpecimen); overload;
    procedure ParseSpecimen(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    function ParseSpecimenDefinitionSpecimenToLab(jsn : TJsonObject) : TFhirSpecimenDefinitionSpecimenToLab; overload; {b\}
    procedure ParseSpecimenDefinitionSpecimenToLabProperties(jsn : TJsonObject; result : TFhirSpecimenDefinitionSpecimenToLab); overload; {b\}
    procedure ParseSpecimenDefinitionSpecimenToLab(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSpecimenDefinitionSpecimenToLabContainerAdditive(jsn : TJsonObject) : TFhirSpecimenDefinitionSpecimenToLabContainerAdditive; overload; {b\}
    procedure ParseSpecimenDefinitionSpecimenToLabContainerAdditiveProperties(jsn : TJsonObject; result : TFhirSpecimenDefinitionSpecimenToLabContainerAdditive); overload; {b\}
    procedure ParseSpecimenDefinitionSpecimenToLabContainerAdditive(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSpecimenDefinitionSpecimenToLabHandling(jsn : TJsonObject) : TFhirSpecimenDefinitionSpecimenToLabHandling; overload; {b\}
    procedure ParseSpecimenDefinitionSpecimenToLabHandlingProperties(jsn : TJsonObject; result : TFhirSpecimenDefinitionSpecimenToLabHandling); overload; {b\}
    procedure ParseSpecimenDefinitionSpecimenToLabHandling(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSpecimenDefinition(jsn : TJsonObject) : TFhirSpecimenDefinition; overload;
    procedure ParseSpecimenDefinitionProperties(jsn : TJsonObject; result : TFhirSpecimenDefinition); overload;
    procedure ParseSpecimenDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    function ParseStructureDefinitionMapping(jsn : TJsonObject) : TFhirStructureDefinitionMapping; overload; {b\}
    procedure ParseStructureDefinitionMappingProperties(jsn : TJsonObject; result : TFhirStructureDefinitionMapping); overload; {b\}
    procedure ParseStructureDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureDefinitionSnapshot(jsn : TJsonObject) : TFhirStructureDefinitionSnapshot; overload; {b\}
    procedure ParseStructureDefinitionSnapshotProperties(jsn : TJsonObject; result : TFhirStructureDefinitionSnapshot); overload; {b\}
    procedure ParseStructureDefinitionSnapshot(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureDefinitionDifferential(jsn : TJsonObject) : TFhirStructureDefinitionDifferential; overload; {b\}
    procedure ParseStructureDefinitionDifferentialProperties(jsn : TJsonObject; result : TFhirStructureDefinitionDifferential); overload; {b\}
    procedure ParseStructureDefinitionDifferential(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureDefinition(jsn : TJsonObject) : TFhirStructureDefinition; overload;
    procedure ParseStructureDefinitionProperties(jsn : TJsonObject; result : TFhirStructureDefinition); overload;
    procedure ParseStructureDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    function ParseStructureMapStructure(jsn : TJsonObject) : TFhirStructureMapStructure; overload; {b\}
    procedure ParseStructureMapStructureProperties(jsn : TJsonObject; result : TFhirStructureMapStructure); overload; {b\}
    procedure ParseStructureMapStructure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroup(jsn : TJsonObject) : TFhirStructureMapGroup; overload; {b\}
    procedure ParseStructureMapGroupProperties(jsn : TJsonObject; result : TFhirStructureMapGroup); overload; {b\}
    procedure ParseStructureMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupInput(jsn : TJsonObject) : TFhirStructureMapGroupInput; overload; {b\}
    procedure ParseStructureMapGroupInputProperties(jsn : TJsonObject; result : TFhirStructureMapGroupInput); overload; {b\}
    procedure ParseStructureMapGroupInput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRule(jsn : TJsonObject) : TFhirStructureMapGroupRule; overload; {b\}
    procedure ParseStructureMapGroupRuleProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRule); overload; {b\}
    procedure ParseStructureMapGroupRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRuleSource(jsn : TJsonObject) : TFhirStructureMapGroupRuleSource; overload; {b\}
    procedure ParseStructureMapGroupRuleSourceProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleSource); overload; {b\}
    procedure ParseStructureMapGroupRuleSource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRuleTarget(jsn : TJsonObject) : TFhirStructureMapGroupRuleTarget; overload; {b\}
    procedure ParseStructureMapGroupRuleTargetProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleTarget); overload; {b\}
    procedure ParseStructureMapGroupRuleTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject) : TFhirStructureMapGroupRuleTargetParameter; overload; {b\}
    procedure ParseStructureMapGroupRuleTargetParameterProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleTargetParameter); overload; {b\}
    procedure ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRuleDependent(jsn : TJsonObject) : TFhirStructureMapGroupRuleDependent; overload; {b\}
    procedure ParseStructureMapGroupRuleDependentProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleDependent); overload; {b\}
    procedure ParseStructureMapGroupRuleDependent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMap(jsn : TJsonObject) : TFhirStructureMap; overload;
    procedure ParseStructureMapProperties(jsn : TJsonObject; result : TFhirStructureMap); overload;
    procedure ParseStructureMap(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    function ParseSubscriptionChannel(jsn : TJsonObject) : TFhirSubscriptionChannel; overload; {b\}
    procedure ParseSubscriptionChannelProperties(jsn : TJsonObject; result : TFhirSubscriptionChannel); overload; {b\}
    procedure ParseSubscriptionChannel(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubscription(jsn : TJsonObject) : TFhirSubscription; overload;
    procedure ParseSubscriptionProperties(jsn : TJsonObject; result : TFhirSubscription); overload;
    procedure ParseSubscription(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
    function ParseSubstanceInstance(jsn : TJsonObject) : TFhirSubstanceInstance; overload; {b\}
    procedure ParseSubstanceInstanceProperties(jsn : TJsonObject; result : TFhirSubstanceInstance); overload; {b\}
    procedure ParseSubstanceInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceIngredient(jsn : TJsonObject) : TFhirSubstanceIngredient; overload; {b\}
    procedure ParseSubstanceIngredientProperties(jsn : TJsonObject; result : TFhirSubstanceIngredient); overload; {b\}
    procedure ParseSubstanceIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstance(jsn : TJsonObject) : TFhirSubstance; overload;
    procedure ParseSubstanceProperties(jsn : TJsonObject; result : TFhirSubstance); overload;
    procedure ParseSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
    function ParseSubstancePolymerMonomerSet(jsn : TJsonObject) : TFhirSubstancePolymerMonomerSet; overload; {b\}
    procedure ParseSubstancePolymerMonomerSetProperties(jsn : TJsonObject; result : TFhirSubstancePolymerMonomerSet); overload; {b\}
    procedure ParseSubstancePolymerMonomerSet(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstancePolymerMonomerSetStartingMaterial(jsn : TJsonObject) : TFhirSubstancePolymerMonomerSetStartingMaterial; overload; {b\}
    procedure ParseSubstancePolymerMonomerSetStartingMaterialProperties(jsn : TJsonObject; result : TFhirSubstancePolymerMonomerSetStartingMaterial); overload; {b\}
    procedure ParseSubstancePolymerMonomerSetStartingMaterial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstancePolymerRepeat(jsn : TJsonObject) : TFhirSubstancePolymerRepeat; overload; {b\}
    procedure ParseSubstancePolymerRepeatProperties(jsn : TJsonObject; result : TFhirSubstancePolymerRepeat); overload; {b\}
    procedure ParseSubstancePolymerRepeat(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstancePolymerRepeatRepeatUnit(jsn : TJsonObject) : TFhirSubstancePolymerRepeatRepeatUnit; overload; {b\}
    procedure ParseSubstancePolymerRepeatRepeatUnitProperties(jsn : TJsonObject; result : TFhirSubstancePolymerRepeatRepeatUnit); overload; {b\}
    procedure ParseSubstancePolymerRepeatRepeatUnit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(jsn : TJsonObject) : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation; overload; {b\}
    procedure ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationProperties(jsn : TJsonObject; result : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation); overload; {b\}
    procedure ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(jsn : TJsonObject) : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation; overload; {b\}
    procedure ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentationProperties(jsn : TJsonObject; result : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation); overload; {b\}
    procedure ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstancePolymer(jsn : TJsonObject) : TFhirSubstancePolymer; overload;
    procedure ParseSubstancePolymerProperties(jsn : TJsonObject; result : TFhirSubstancePolymer); overload;
    procedure ParseSubstancePolymer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
    function ParseSubstanceReferenceInformationGene(jsn : TJsonObject) : TFhirSubstanceReferenceInformationGene; overload; {b\}
    procedure ParseSubstanceReferenceInformationGeneProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationGene); overload; {b\}
    procedure ParseSubstanceReferenceInformationGene(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceReferenceInformationGeneElement(jsn : TJsonObject) : TFhirSubstanceReferenceInformationGeneElement; overload; {b\}
    procedure ParseSubstanceReferenceInformationGeneElementProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationGeneElement); overload; {b\}
    procedure ParseSubstanceReferenceInformationGeneElement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceReferenceInformationClassification(jsn : TJsonObject) : TFhirSubstanceReferenceInformationClassification; overload; {b\}
    procedure ParseSubstanceReferenceInformationClassificationProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationClassification); overload; {b\}
    procedure ParseSubstanceReferenceInformationClassification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceReferenceInformationRelationship(jsn : TJsonObject) : TFhirSubstanceReferenceInformationRelationship; overload; {b\}
    procedure ParseSubstanceReferenceInformationRelationshipProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationRelationship); overload; {b\}
    procedure ParseSubstanceReferenceInformationRelationship(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceReferenceInformationTarget(jsn : TJsonObject) : TFhirSubstanceReferenceInformationTarget; overload; {b\}
    procedure ParseSubstanceReferenceInformationTargetProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationTarget); overload; {b\}
    procedure ParseSubstanceReferenceInformationTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceReferenceInformation(jsn : TJsonObject) : TFhirSubstanceReferenceInformation; overload;
    procedure ParseSubstanceReferenceInformationProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformation); overload;
    procedure ParseSubstanceReferenceInformation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
    function ParseSubstanceSpecificationMoiety(jsn : TJsonObject) : TFhirSubstanceSpecificationMoiety; overload; {b\}
    procedure ParseSubstanceSpecificationMoietyProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationMoiety); overload; {b\}
    procedure ParseSubstanceSpecificationMoiety(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceSpecificationProperty(jsn : TJsonObject) : TFhirSubstanceSpecificationProperty; overload; {b\}
    procedure ParseSubstanceSpecificationPropertyProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationProperty); overload; {b\}
    procedure ParseSubstanceSpecificationProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceSpecificationStructure(jsn : TJsonObject) : TFhirSubstanceSpecificationStructure; overload; {b\}
    procedure ParseSubstanceSpecificationStructureProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationStructure); overload; {b\}
    procedure ParseSubstanceSpecificationStructure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceSpecificationStructureIsotope(jsn : TJsonObject) : TFhirSubstanceSpecificationStructureIsotope; overload; {b\}
    procedure ParseSubstanceSpecificationStructureIsotopeProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationStructureIsotope); overload; {b\}
    procedure ParseSubstanceSpecificationStructureIsotope(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceSpecificationStructureIsotopeMolecularWeight(jsn : TJsonObject) : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight; overload; {b\}
    procedure ParseSubstanceSpecificationStructureIsotopeMolecularWeightProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight); overload; {b\}
    procedure ParseSubstanceSpecificationStructureIsotopeMolecularWeight(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceSpecificationStructureStructuralRepresentation(jsn : TJsonObject) : TFhirSubstanceSpecificationStructureStructuralRepresentation; overload; {b\}
    procedure ParseSubstanceSpecificationStructureStructuralRepresentationProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationStructureStructuralRepresentation); overload; {b\}
    procedure ParseSubstanceSpecificationStructureStructuralRepresentation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceSpecificationSubstanceCode(jsn : TJsonObject) : TFhirSubstanceSpecificationSubstanceCode; overload; {b\}
    procedure ParseSubstanceSpecificationSubstanceCodeProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationSubstanceCode); overload; {b\}
    procedure ParseSubstanceSpecificationSubstanceCode(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceSpecificationSubstanceName(jsn : TJsonObject) : TFhirSubstanceSpecificationSubstanceName; overload; {b\}
    procedure ParseSubstanceSpecificationSubstanceNameProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationSubstanceName); overload; {b\}
    procedure ParseSubstanceSpecificationSubstanceName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceSpecificationSubstanceNameOfficialName(jsn : TJsonObject) : TFhirSubstanceSpecificationSubstanceNameOfficialName; overload; {b\}
    procedure ParseSubstanceSpecificationSubstanceNameOfficialNameProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationSubstanceNameOfficialName); overload; {b\}
    procedure ParseSubstanceSpecificationSubstanceNameOfficialName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceSpecification(jsn : TJsonObject) : TFhirSubstanceSpecification; overload;
    procedure ParseSubstanceSpecificationProperties(jsn : TJsonObject; result : TFhirSubstanceSpecification); overload;
    procedure ParseSubstanceSpecification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
    function ParseSupplyDeliverySuppliedItem(jsn : TJsonObject) : TFhirSupplyDeliverySuppliedItem; overload; {b\}
    procedure ParseSupplyDeliverySuppliedItemProperties(jsn : TJsonObject; result : TFhirSupplyDeliverySuppliedItem); overload; {b\}
    procedure ParseSupplyDeliverySuppliedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSupplyDelivery(jsn : TJsonObject) : TFhirSupplyDelivery; overload;
    procedure ParseSupplyDeliveryProperties(jsn : TJsonObject; result : TFhirSupplyDelivery); overload;
    procedure ParseSupplyDelivery(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    function ParseSupplyRequestParameter(jsn : TJsonObject) : TFhirSupplyRequestParameter; overload; {b\}
    procedure ParseSupplyRequestParameterProperties(jsn : TJsonObject; result : TFhirSupplyRequestParameter); overload; {b\}
    procedure ParseSupplyRequestParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSupplyRequest(jsn : TJsonObject) : TFhirSupplyRequest; overload;
    procedure ParseSupplyRequestProperties(jsn : TJsonObject; result : TFhirSupplyRequest); overload;
    procedure ParseSupplyRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    function ParseTaskRestriction(jsn : TJsonObject) : TFhirTaskRestriction; overload; {b\}
    procedure ParseTaskRestrictionProperties(jsn : TJsonObject; result : TFhirTaskRestriction); overload; {b\}
    procedure ParseTaskRestriction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTaskInput(jsn : TJsonObject) : TFhirTaskInput; overload; {b\}
    procedure ParseTaskInputProperties(jsn : TJsonObject; result : TFhirTaskInput); overload; {b\}
    procedure ParseTaskInput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTaskOutput(jsn : TJsonObject) : TFhirTaskOutput; overload; {b\}
    procedure ParseTaskOutputProperties(jsn : TJsonObject; result : TFhirTaskOutput); overload; {b\}
    procedure ParseTaskOutput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTask(jsn : TJsonObject) : TFhirTask; overload;
    procedure ParseTaskProperties(jsn : TJsonObject; result : TFhirTask); overload;
    procedure ParseTask(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    function ParseTerminologyCapabilitiesCodeSystem(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystem; overload; {b\}
    procedure ParseTerminologyCapabilitiesCodeSystemProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesCodeSystem); overload; {b\}
    procedure ParseTerminologyCapabilitiesCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTerminologyCapabilitiesCodeSystemVersion(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystemVersion; overload; {b\}
    procedure ParseTerminologyCapabilitiesCodeSystemVersionProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesCodeSystemVersion); overload; {b\}
    procedure ParseTerminologyCapabilitiesCodeSystemVersion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; overload; {b\}
    procedure ParseTerminologyCapabilitiesCodeSystemVersionFilterProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesCodeSystemVersionFilter); overload; {b\}
    procedure ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTerminologyCapabilitiesExpansion(jsn : TJsonObject) : TFhirTerminologyCapabilitiesExpansion; overload; {b\}
    procedure ParseTerminologyCapabilitiesExpansionProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesExpansion); overload; {b\}
    procedure ParseTerminologyCapabilitiesExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTerminologyCapabilitiesValidateCode(jsn : TJsonObject) : TFhirTerminologyCapabilitiesValidateCode; overload; {b\}
    procedure ParseTerminologyCapabilitiesValidateCodeProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesValidateCode); overload; {b\}
    procedure ParseTerminologyCapabilitiesValidateCode(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTerminologyCapabilitiesTranslation(jsn : TJsonObject) : TFhirTerminologyCapabilitiesTranslation; overload; {b\}
    procedure ParseTerminologyCapabilitiesTranslationProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesTranslation); overload; {b\}
    procedure ParseTerminologyCapabilitiesTranslation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTerminologyCapabilitiesClosure(jsn : TJsonObject) : TFhirTerminologyCapabilitiesClosure; overload; {b\}
    procedure ParseTerminologyCapabilitiesClosureProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesClosure); overload; {b\}
    procedure ParseTerminologyCapabilitiesClosure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTerminologyCapabilities(jsn : TJsonObject) : TFhirTerminologyCapabilities; overload;
    procedure ParseTerminologyCapabilitiesProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilities); overload;
    procedure ParseTerminologyCapabilities(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    function ParseTestReportParticipant(jsn : TJsonObject) : TFhirTestReportParticipant; overload; {b\}
    procedure ParseTestReportParticipantProperties(jsn : TJsonObject; result : TFhirTestReportParticipant); overload; {b\}
    procedure ParseTestReportParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportSetup(jsn : TJsonObject) : TFhirTestReportSetup; overload; {b\}
    procedure ParseTestReportSetupProperties(jsn : TJsonObject; result : TFhirTestReportSetup); overload; {b\}
    procedure ParseTestReportSetup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportSetupAction(jsn : TJsonObject) : TFhirTestReportSetupAction; overload; {b\}
    procedure ParseTestReportSetupActionProperties(jsn : TJsonObject; result : TFhirTestReportSetupAction); overload; {b\}
    procedure ParseTestReportSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportSetupActionOperation(jsn : TJsonObject) : TFhirTestReportSetupActionOperation; overload; {b\}
    procedure ParseTestReportSetupActionOperationProperties(jsn : TJsonObject; result : TFhirTestReportSetupActionOperation); overload; {b\}
    procedure ParseTestReportSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportSetupActionAssert(jsn : TJsonObject) : TFhirTestReportSetupActionAssert; overload; {b\}
    procedure ParseTestReportSetupActionAssertProperties(jsn : TJsonObject; result : TFhirTestReportSetupActionAssert); overload; {b\}
    procedure ParseTestReportSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportTest(jsn : TJsonObject) : TFhirTestReportTest; overload; {b\}
    procedure ParseTestReportTestProperties(jsn : TJsonObject; result : TFhirTestReportTest); overload; {b\}
    procedure ParseTestReportTest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportTestAction(jsn : TJsonObject) : TFhirTestReportTestAction; overload; {b\}
    procedure ParseTestReportTestActionProperties(jsn : TJsonObject; result : TFhirTestReportTestAction); overload; {b\}
    procedure ParseTestReportTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportTeardown(jsn : TJsonObject) : TFhirTestReportTeardown; overload; {b\}
    procedure ParseTestReportTeardownProperties(jsn : TJsonObject; result : TFhirTestReportTeardown); overload; {b\}
    procedure ParseTestReportTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportTeardownAction(jsn : TJsonObject) : TFhirTestReportTeardownAction; overload; {b\}
    procedure ParseTestReportTeardownActionProperties(jsn : TJsonObject; result : TFhirTestReportTeardownAction); overload; {b\}
    procedure ParseTestReportTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReport(jsn : TJsonObject) : TFhirTestReport; overload;
    procedure ParseTestReportProperties(jsn : TJsonObject; result : TFhirTestReport); overload;
    procedure ParseTestReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    function ParseTestScriptOrigin(jsn : TJsonObject) : TFhirTestScriptOrigin; overload; {b\}
    procedure ParseTestScriptOriginProperties(jsn : TJsonObject; result : TFhirTestScriptOrigin); overload; {b\}
    procedure ParseTestScriptOrigin(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptDestination(jsn : TJsonObject) : TFhirTestScriptDestination; overload; {b\}
    procedure ParseTestScriptDestinationProperties(jsn : TJsonObject; result : TFhirTestScriptDestination); overload; {b\}
    procedure ParseTestScriptDestination(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptMetadata(jsn : TJsonObject) : TFhirTestScriptMetadata; overload; {b\}
    procedure ParseTestScriptMetadataProperties(jsn : TJsonObject; result : TFhirTestScriptMetadata); overload; {b\}
    procedure ParseTestScriptMetadata(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptMetadataLink(jsn : TJsonObject) : TFhirTestScriptMetadataLink; overload; {b\}
    procedure ParseTestScriptMetadataLinkProperties(jsn : TJsonObject; result : TFhirTestScriptMetadataLink); overload; {b\}
    procedure ParseTestScriptMetadataLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptMetadataCapability(jsn : TJsonObject) : TFhirTestScriptMetadataCapability; overload; {b\}
    procedure ParseTestScriptMetadataCapabilityProperties(jsn : TJsonObject; result : TFhirTestScriptMetadataCapability); overload; {b\}
    procedure ParseTestScriptMetadataCapability(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptFixture(jsn : TJsonObject) : TFhirTestScriptFixture; overload; {b\}
    procedure ParseTestScriptFixtureProperties(jsn : TJsonObject; result : TFhirTestScriptFixture); overload; {b\}
    procedure ParseTestScriptFixture(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptVariable(jsn : TJsonObject) : TFhirTestScriptVariable; overload; {b\}
    procedure ParseTestScriptVariableProperties(jsn : TJsonObject; result : TFhirTestScriptVariable); overload; {b\}
    procedure ParseTestScriptVariable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRule(jsn : TJsonObject) : TFhirTestScriptRule; overload; {b\}
    procedure ParseTestScriptRuleProperties(jsn : TJsonObject; result : TFhirTestScriptRule); overload; {b\}
    procedure ParseTestScriptRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRuleParam(jsn : TJsonObject) : TFhirTestScriptRuleParam; overload; {b\}
    procedure ParseTestScriptRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptRuleParam); overload; {b\}
    procedure ParseTestScriptRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRuleset(jsn : TJsonObject) : TFhirTestScriptRuleset; overload; {b\}
    procedure ParseTestScriptRulesetProperties(jsn : TJsonObject; result : TFhirTestScriptRuleset); overload; {b\}
    procedure ParseTestScriptRuleset(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRulesetRule(jsn : TJsonObject) : TFhirTestScriptRulesetRule; overload; {b\}
    procedure ParseTestScriptRulesetRuleProperties(jsn : TJsonObject; result : TFhirTestScriptRulesetRule); overload; {b\}
    procedure ParseTestScriptRulesetRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRulesetRuleParam(jsn : TJsonObject) : TFhirTestScriptRulesetRuleParam; overload; {b\}
    procedure ParseTestScriptRulesetRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptRulesetRuleParam); overload; {b\}
    procedure ParseTestScriptRulesetRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetup(jsn : TJsonObject) : TFhirTestScriptSetup; overload; {b\}
    procedure ParseTestScriptSetupProperties(jsn : TJsonObject; result : TFhirTestScriptSetup); overload; {b\}
    procedure ParseTestScriptSetup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupAction(jsn : TJsonObject) : TFhirTestScriptSetupAction; overload; {b\}
    procedure ParseTestScriptSetupActionProperties(jsn : TJsonObject; result : TFhirTestScriptSetupAction); overload; {b\}
    procedure ParseTestScriptSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionOperation(jsn : TJsonObject) : TFhirTestScriptSetupActionOperation; overload; {b\}
    procedure ParseTestScriptSetupActionOperationProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionOperation); overload; {b\}
    procedure ParseTestScriptSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject) : TFhirTestScriptSetupActionOperationRequestHeader; overload; {b\}
    procedure ParseTestScriptSetupActionOperationRequestHeaderProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionOperationRequestHeader); overload; {b\}
    procedure ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssert(jsn : TJsonObject) : TFhirTestScriptSetupActionAssert; overload; {b\}
    procedure ParseTestScriptSetupActionAssertProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssert); overload; {b\}
    procedure ParseTestScriptSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRule(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRule; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRuleProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRule); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRuleParam(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRuleParam; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRuleParam); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRuleset(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRuleset; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRuleset); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRuleset(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRulesetRule(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRulesetRule; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetRuleProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRulesetRule); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRulesetRuleParam(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRulesetRuleParam; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRulesetRuleParam); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptTest(jsn : TJsonObject) : TFhirTestScriptTest; overload; {b\}
    procedure ParseTestScriptTestProperties(jsn : TJsonObject; result : TFhirTestScriptTest); overload; {b\}
    procedure ParseTestScriptTest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptTestAction(jsn : TJsonObject) : TFhirTestScriptTestAction; overload; {b\}
    procedure ParseTestScriptTestActionProperties(jsn : TJsonObject; result : TFhirTestScriptTestAction); overload; {b\}
    procedure ParseTestScriptTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptTeardown(jsn : TJsonObject) : TFhirTestScriptTeardown; overload; {b\}
    procedure ParseTestScriptTeardownProperties(jsn : TJsonObject; result : TFhirTestScriptTeardown); overload; {b\}
    procedure ParseTestScriptTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptTeardownAction(jsn : TJsonObject) : TFhirTestScriptTeardownAction; overload; {b\}
    procedure ParseTestScriptTeardownActionProperties(jsn : TJsonObject; result : TFhirTestScriptTeardownAction); overload; {b\}
    procedure ParseTestScriptTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScript(jsn : TJsonObject) : TFhirTestScript; overload;
    procedure ParseTestScriptProperties(jsn : TJsonObject; result : TFhirTestScript); overload;
    procedure ParseTestScript(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_USERSESSION}
    function ParseUserSessionStatus(jsn : TJsonObject) : TFhirUserSessionStatus; overload; {b\}
    procedure ParseUserSessionStatusProperties(jsn : TJsonObject; result : TFhirUserSessionStatus); overload; {b\}
    procedure ParseUserSessionStatus(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseUserSessionContext(jsn : TJsonObject) : TFhirUserSessionContext; overload; {b\}
    procedure ParseUserSessionContextProperties(jsn : TJsonObject; result : TFhirUserSessionContext); overload; {b\}
    procedure ParseUserSessionContext(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseUserSession(jsn : TJsonObject) : TFhirUserSession; overload;
    procedure ParseUserSessionProperties(jsn : TJsonObject; result : TFhirUserSession); overload;
    procedure ParseUserSession(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_USERSESSION}
{$IFDEF FHIR_VALUESET}
    function ParseValueSetCompose(jsn : TJsonObject) : TFhirValueSetCompose; overload; {b\}
    procedure ParseValueSetComposeProperties(jsn : TJsonObject; result : TFhirValueSetCompose); overload; {b\}
    procedure ParseValueSetCompose(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetComposeInclude(jsn : TJsonObject) : TFhirValueSetComposeInclude; overload; {b\}
    procedure ParseValueSetComposeIncludeProperties(jsn : TJsonObject; result : TFhirValueSetComposeInclude); overload; {b\}
    procedure ParseValueSetComposeInclude(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetComposeIncludeConcept(jsn : TJsonObject) : TFhirValueSetComposeIncludeConcept; overload; {b\}
    procedure ParseValueSetComposeIncludeConceptProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeConcept); overload; {b\}
    procedure ParseValueSetComposeIncludeConcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject) : TFhirValueSetComposeIncludeConceptDesignation; overload; {b\}
    procedure ParseValueSetComposeIncludeConceptDesignationProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeConceptDesignation); overload; {b\}
    procedure ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetComposeIncludeFilter(jsn : TJsonObject) : TFhirValueSetComposeIncludeFilter; overload; {b\}
    procedure ParseValueSetComposeIncludeFilterProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeFilter); overload; {b\}
    procedure ParseValueSetComposeIncludeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetExpansion(jsn : TJsonObject) : TFhirValueSetExpansion; overload; {b\}
    procedure ParseValueSetExpansionProperties(jsn : TJsonObject; result : TFhirValueSetExpansion); overload; {b\}
    procedure ParseValueSetExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetExpansionParameter(jsn : TJsonObject) : TFhirValueSetExpansionParameter; overload; {b\}
    procedure ParseValueSetExpansionParameterProperties(jsn : TJsonObject; result : TFhirValueSetExpansionParameter); overload; {b\}
    procedure ParseValueSetExpansionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetExpansionContains(jsn : TJsonObject) : TFhirValueSetExpansionContains; overload; {b\}
    procedure ParseValueSetExpansionContainsProperties(jsn : TJsonObject; result : TFhirValueSetExpansionContains); overload; {b\}
    procedure ParseValueSetExpansionContains(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSet(jsn : TJsonObject) : TFhirValueSet; overload;
    procedure ParseValueSetProperties(jsn : TJsonObject; result : TFhirValueSet); overload;
    procedure ParseValueSet(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    function ParseVerificationResultPrimarySource(jsn : TJsonObject) : TFhirVerificationResultPrimarySource; overload; {b\}
    procedure ParseVerificationResultPrimarySourceProperties(jsn : TJsonObject; result : TFhirVerificationResultPrimarySource); overload; {b\}
    procedure ParseVerificationResultPrimarySource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseVerificationResultAttestation(jsn : TJsonObject) : TFhirVerificationResultAttestation; overload; {b\}
    procedure ParseVerificationResultAttestationProperties(jsn : TJsonObject; result : TFhirVerificationResultAttestation); overload; {b\}
    procedure ParseVerificationResultAttestation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseVerificationResultValidator(jsn : TJsonObject) : TFhirVerificationResultValidator; overload; {b\}
    procedure ParseVerificationResultValidatorProperties(jsn : TJsonObject; result : TFhirVerificationResultValidator); overload; {b\}
    procedure ParseVerificationResultValidator(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseVerificationResult(jsn : TJsonObject) : TFhirVerificationResult; overload;
    procedure ParseVerificationResultProperties(jsn : TJsonObject; result : TFhirVerificationResult); overload;
    procedure ParseVerificationResult(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    function ParseVisionPrescriptionDispense(jsn : TJsonObject) : TFhirVisionPrescriptionDispense; overload; {b\}
    procedure ParseVisionPrescriptionDispenseProperties(jsn : TJsonObject; result : TFhirVisionPrescriptionDispense); overload; {b\}
    procedure ParseVisionPrescriptionDispense(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseVisionPrescription(jsn : TJsonObject) : TFhirVisionPrescription; overload;
    procedure ParseVisionPrescriptionProperties(jsn : TJsonObject; result : TFhirVisionPrescription); overload;
    procedure ParseVisionPrescription(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_VISIONPRESCRIPTION}
    function ParseResource(jsn : TJsonObject) : TFhirResource; override;
    function ParseDataType(jsn : TJsonObject; name : String; type_ : TFHIRTypeClass) : TFHIRType; override;
  public
    function ParseFragment(jsn : TJsonObject; type_ : String) : TFHIRObject;  overload;
  end;

  TFHIRJsonComposer = class (TFHIRJsonComposerBase)
  protected
    procedure ComposeElement(json : TJSONWriter; name : string; elem : TFhirElement; noObj : boolean = false);
    procedure ComposeBackboneElement(json : TJSONWriter; name : string; elem : TFhirBackboneElement; noObj : boolean = false);

    Procedure ComposeElementProperties(json : TJSONWriter; elem : TFhirElement);
    Procedure ComposeBackboneElementProperties(json : TJSONWriter; elem : TFhirBackboneElement);
    Procedure ComposeEnumValue(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
    Procedure ComposeEnumProps(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
    Procedure ComposeDateValue(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
    Procedure ComposeDateProps(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
    Procedure ComposeDateTimeValue(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
    Procedure ComposeDateTimeProps(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
    Procedure ComposeStringValue(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
    Procedure ComposeStringProps(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
    Procedure ComposeIntegerValue(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
    Procedure ComposeIntegerProps(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
    Procedure ComposeUriValue(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
    Procedure ComposeUriProps(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
    Procedure ComposeInstantValue(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
    Procedure ComposeInstantProps(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
    Procedure ComposeXhtmlValue(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
    Procedure ComposeXhtmlProps(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
    Procedure ComposeBooleanValue(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
    Procedure ComposeBooleanProps(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
    Procedure ComposeBase64BinaryValue(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
    Procedure ComposeBase64BinaryProps(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
    Procedure ComposeTimeValue(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
    Procedure ComposeTimeProps(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
    Procedure ComposeDecimalValue(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
    Procedure ComposeDecimalProps(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
    Procedure ComposeCodeValue(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
    Procedure ComposeCodeProps(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
    Procedure ComposeOidValue(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
    Procedure ComposeOidProps(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
    Procedure ComposeUuidValue(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
    Procedure ComposeUuidProps(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
    Procedure ComposeMarkdownValue(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
    Procedure ComposeMarkdownProps(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
    Procedure ComposeUnsignedIntValue(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
    Procedure ComposeUnsignedIntProps(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
    Procedure ComposeIdValue(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
    Procedure ComposeIdProps(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
    Procedure ComposePositiveIntValue(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
    Procedure ComposePositiveIntProps(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);

    Procedure ComposeResourceProperties(json : TJSONWriter; elem : TFhirResource);
    Procedure ComposeDomainResourceProperties(json : TJSONWriter; elem : TFhirDomainResource);
{$IFDEF FHIR_PARAMETERS}
    procedure ComposeParametersParameter(json : TJSONWriter; name : string; elem : TFhirParametersParameter; noObj : boolean = false);
    procedure ComposeParameters(json : TJSONWriter; name : string; elem : TFhirParameters; noObj : boolean = false);
{$ENDIF FHIR_PARAMETERS}

    procedure ComposeExtension(json : TJSONWriter; name : string; elem : TFhirExtension; noObj : boolean = false);
    procedure ComposeNarrative(json : TJSONWriter; name : string; elem : TFhirNarrative; noObj : boolean = false);
    procedure ComposeContributor(json : TJSONWriter; name : string; elem : TFhirContributor; noObj : boolean = false);
    procedure ComposeAttachment(json : TJSONWriter; name : string; elem : TFhirAttachment; noObj : boolean = false);
    procedure ComposeDataRequirementCodeFilter(json : TJSONWriter; name : string; elem : TFhirDataRequirementCodeFilter; noObj : boolean = false);
    procedure ComposeDataRequirementDateFilter(json : TJSONWriter; name : string; elem : TFhirDataRequirementDateFilter; noObj : boolean = false);
    procedure ComposeDataRequirement(json : TJSONWriter; name : string; elem : TFhirDataRequirement; noObj : boolean = false);
    procedure ComposeDosage(json : TJSONWriter; name : string; elem : TFhirDosage; noObj : boolean = false);
    procedure ComposeMarketingStatus(json : TJSONWriter; name : string; elem : TFhirMarketingStatus; noObj : boolean = false);
    procedure ComposeIdentifier(json : TJSONWriter; name : string; elem : TFhirIdentifier; noObj : boolean = false);
    procedure ComposeSubstanceAmountReferenceRange(json : TJSONWriter; name : string; elem : TFhirSubstanceAmountReferenceRange; noObj : boolean = false);
    procedure ComposeSubstanceAmount(json : TJSONWriter; name : string; elem : TFhirSubstanceAmount; noObj : boolean = false);
    procedure ComposeCoding(json : TJSONWriter; name : string; elem : TFhirCoding; noObj : boolean = false);
    procedure ComposeSampledData(json : TJSONWriter; name : string; elem : TFhirSampledData; noObj : boolean = false);
    procedure ComposeRatio(json : TJSONWriter; name : string; elem : TFhirRatio; noObj : boolean = false);
    procedure ComposeSubstanceMoiety(json : TJSONWriter; name : string; elem : TFhirSubstanceMoiety; noObj : boolean = false);
    procedure ComposeReference(json : TJSONWriter; name : string; elem : TFhirReference; noObj : boolean = false);
    procedure ComposeTriggerDefinitionCondition(json : TJSONWriter; name : string; elem : TFhirTriggerDefinitionCondition; noObj : boolean = false);
    procedure ComposeTriggerDefinition(json : TJSONWriter; name : string; elem : TFhirTriggerDefinition; noObj : boolean = false);
    procedure ComposePeriod(json : TJSONWriter; name : string; elem : TFhirPeriod; noObj : boolean = false);
    procedure ComposeQuantity(json : TJSONWriter; name : string; elem : TFhirQuantity; noObj : boolean = false);
    procedure ComposeRange(json : TJSONWriter; name : string; elem : TFhirRange; noObj : boolean = false);
    procedure ComposeRelatedArtifact(json : TJSONWriter; name : string; elem : TFhirRelatedArtifact; noObj : boolean = false);
    procedure ComposeAnnotation(json : TJSONWriter; name : string; elem : TFhirAnnotation; noObj : boolean = false);
    procedure ComposeProductShelfLife(json : TJSONWriter; name : string; elem : TFhirProductShelfLife; noObj : boolean = false);
    procedure ComposeContactDetail(json : TJSONWriter; name : string; elem : TFhirContactDetail; noObj : boolean = false);
    procedure ComposeUsageContext(json : TJSONWriter; name : string; elem : TFhirUsageContext; noObj : boolean = false);
    procedure ComposeSignature(json : TJSONWriter; name : string; elem : TFhirSignature; noObj : boolean = false);
    procedure ComposeProdCharacteristic(json : TJSONWriter; name : string; elem : TFhirProdCharacteristic; noObj : boolean = false);
    procedure ComposeCodeableConcept(json : TJSONWriter; name : string; elem : TFhirCodeableConcept; noObj : boolean = false);
    procedure ComposeParameterDefinition(json : TJSONWriter; name : string; elem : TFhirParameterDefinition; noObj : boolean = false);
    procedure ComposeContactPoint(json : TJSONWriter; name : string; elem : TFhirContactPoint; noObj : boolean = false);
    procedure ComposeHumanName(json : TJSONWriter; name : string; elem : TFhirHumanName; noObj : boolean = false);
    procedure ComposeMeta(json : TJSONWriter; name : string; elem : TFhirMeta; noObj : boolean = false);
    procedure ComposeAddress(json : TJSONWriter; name : string; elem : TFhirAddress; noObj : boolean = false);
    procedure ComposeElementDefinitionSlicing(json : TJSONWriter; name : string; elem : TFhirElementDefinitionSlicing; noObj : boolean = false);
    procedure ComposeElementDefinitionSlicingDiscriminator(json : TJSONWriter; name : string; elem : TFhirElementDefinitionSlicingDiscriminator; noObj : boolean = false);
    procedure ComposeElementDefinitionBase(json : TJSONWriter; name : string; elem : TFhirElementDefinitionBase; noObj : boolean = false);
    procedure ComposeElementDefinitionType(json : TJSONWriter; name : string; elem : TFhirElementDefinitionType; noObj : boolean = false);
    procedure ComposeElementDefinitionExample(json : TJSONWriter; name : string; elem : TFhirElementDefinitionExample; noObj : boolean = false);
    procedure ComposeElementDefinitionConstraint(json : TJSONWriter; name : string; elem : TFhirElementDefinitionConstraint; noObj : boolean = false);
    procedure ComposeElementDefinitionBinding(json : TJSONWriter; name : string; elem : TFhirElementDefinitionBinding; noObj : boolean = false);
    procedure ComposeElementDefinitionMapping(json : TJSONWriter; name : string; elem : TFhirElementDefinitionMapping; noObj : boolean = false);
    procedure ComposeElementDefinition(json : TJSONWriter; name : string; elem : TFhirElementDefinition; noObj : boolean = false);
    procedure ComposeTimingRepeat(json : TJSONWriter; name : string; elem : TFhirTimingRepeat; noObj : boolean = false);
    procedure ComposeTiming(json : TJSONWriter; name : string; elem : TFhirTiming; noObj : boolean = false);
    procedure ComposeCount(json : TJSONWriter; name : string; elem : TFhirCount; noObj : boolean = false);
    procedure ComposeMoney(json : TJSONWriter; name : string; elem : TFhirMoney; noObj : boolean = false);
    procedure ComposeAge(json : TJSONWriter; name : string; elem : TFhirAge; noObj : boolean = false);
    procedure ComposeDistance(json : TJSONWriter; name : string; elem : TFhirDistance; noObj : boolean = false);
    procedure ComposeDuration(json : TJSONWriter; name : string; elem : TFhirDuration; noObj : boolean = false);

{$IFDEF FHIR_ACCOUNT}
    procedure ComposeAccountCoverage(json : TJSONWriter; name : string; elem : TFhirAccountCoverage; noObj : boolean = false);
    procedure ComposeAccountGuarantor(json : TJSONWriter; name : string; elem : TFhirAccountGuarantor; noObj : boolean = false);
    procedure ComposeAccount(json : TJSONWriter; name : string; elem : TFhirAccount; noObj : boolean = false);
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    procedure ComposeActivityDefinitionParticipant(json : TJSONWriter; name : string; elem : TFhirActivityDefinitionParticipant; noObj : boolean = false);
    procedure ComposeActivityDefinitionDynamicValue(json : TJSONWriter; name : string; elem : TFhirActivityDefinitionDynamicValue; noObj : boolean = false);
    procedure ComposeActivityDefinition(json : TJSONWriter; name : string; elem : TFhirActivityDefinition; noObj : boolean = false);
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    procedure ComposeAdverseEventSuspectEntity(json : TJSONWriter; name : string; elem : TFhirAdverseEventSuspectEntity; noObj : boolean = false);
    procedure ComposeAdverseEventSuspectEntityCausality(json : TJSONWriter; name : string; elem : TFhirAdverseEventSuspectEntityCausality; noObj : boolean = false);
    procedure ComposeAdverseEvent(json : TJSONWriter; name : string; elem : TFhirAdverseEvent; noObj : boolean = false);
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    procedure ComposeAllergyIntoleranceReaction(json : TJSONWriter; name : string; elem : TFhirAllergyIntoleranceReaction; noObj : boolean = false);
    procedure ComposeAllergyIntolerance(json : TJSONWriter; name : string; elem : TFhirAllergyIntolerance; noObj : boolean = false);
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    procedure ComposeAppointmentParticipant(json : TJSONWriter; name : string; elem : TFhirAppointmentParticipant; noObj : boolean = false);
    procedure ComposeAppointment(json : TJSONWriter; name : string; elem : TFhirAppointment; noObj : boolean = false);
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    procedure ComposeAppointmentResponse(json : TJSONWriter; name : string; elem : TFhirAppointmentResponse; noObj : boolean = false);
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    procedure ComposeAuditEventAgent(json : TJSONWriter; name : string; elem : TFhirAuditEventAgent; noObj : boolean = false);
    procedure ComposeAuditEventAgentNetwork(json : TJSONWriter; name : string; elem : TFhirAuditEventAgentNetwork; noObj : boolean = false);
    procedure ComposeAuditEventSource(json : TJSONWriter; name : string; elem : TFhirAuditEventSource; noObj : boolean = false);
    procedure ComposeAuditEventEntity(json : TJSONWriter; name : string; elem : TFhirAuditEventEntity; noObj : boolean = false);
    procedure ComposeAuditEventEntityDetail(json : TJSONWriter; name : string; elem : TFhirAuditEventEntityDetail; noObj : boolean = false);
    procedure ComposeAuditEvent(json : TJSONWriter; name : string; elem : TFhirAuditEvent; noObj : boolean = false);
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    procedure ComposeBasic(json : TJSONWriter; name : string; elem : TFhirBasic; noObj : boolean = false);
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    procedure ComposeBinary(json : TJSONWriter; name : string; elem : TFhirBinary; noObj : boolean = false);
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    procedure ComposeBiologicallyDerivedProductCollection(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProductCollection; noObj : boolean = false);
    procedure ComposeBiologicallyDerivedProductProcessing(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProductProcessing; noObj : boolean = false);
    procedure ComposeBiologicallyDerivedProductManipulation(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProductManipulation; noObj : boolean = false);
    procedure ComposeBiologicallyDerivedProductStorage(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProductStorage; noObj : boolean = false);
    procedure ComposeBiologicallyDerivedProduct(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProduct; noObj : boolean = false);
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    procedure ComposeBodyStructure(json : TJSONWriter; name : string; elem : TFhirBodyStructure; noObj : boolean = false);
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    procedure ComposeBundleLink(json : TJSONWriter; name : string; elem : TFhirBundleLink; noObj : boolean = false);
    procedure ComposeBundleEntry(json : TJSONWriter; name : string; elem : TFhirBundleEntry; noObj : boolean = false);
    procedure ComposeBundleEntrySearch(json : TJSONWriter; name : string; elem : TFhirBundleEntrySearch; noObj : boolean = false);
    procedure ComposeBundleEntryRequest(json : TJSONWriter; name : string; elem : TFhirBundleEntryRequest; noObj : boolean = false);
    procedure ComposeBundleEntryResponse(json : TJSONWriter; name : string; elem : TFhirBundleEntryResponse; noObj : boolean = false);
    procedure ComposeBundle(json : TJSONWriter; name : string; elem : TFhirBundle; noObj : boolean = false);
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    procedure ComposeCapabilityStatementSoftware(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementSoftware; noObj : boolean = false);
    procedure ComposeCapabilityStatementImplementation(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementImplementation; noObj : boolean = false);
    procedure ComposeCapabilityStatementRest(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRest; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestSecurity(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestSecurity; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestSecurityCertificate(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestSecurityCertificate; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResource(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResource; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResourceInteraction(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceInteraction; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResourceSearchParam(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceSearchParam; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResourceOperation(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceOperation; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestInteraction(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestInteraction; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessaging(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessaging; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessagingEndpoint(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingEndpoint; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessagingSupportedMessage(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingSupportedMessage; noObj : boolean = false);
    procedure ComposeCapabilityStatementDocument(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementDocument; noObj : boolean = false);
    procedure ComposeCapabilityStatement(json : TJSONWriter; name : string; elem : TFhirCapabilityStatement; noObj : boolean = false);
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
    procedure ComposeCarePlanActivity(json : TJSONWriter; name : string; elem : TFhirCarePlanActivity; noObj : boolean = false);
    procedure ComposeCarePlanActivityDetail(json : TJSONWriter; name : string; elem : TFhirCarePlanActivityDetail; noObj : boolean = false);
    procedure ComposeCarePlan(json : TJSONWriter; name : string; elem : TFhirCarePlan; noObj : boolean = false);
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    procedure ComposeCareTeamParticipant(json : TJSONWriter; name : string; elem : TFhirCareTeamParticipant; noObj : boolean = false);
    procedure ComposeCareTeam(json : TJSONWriter; name : string; elem : TFhirCareTeam; noObj : boolean = false);
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
    procedure ComposeChargeItemParticipant(json : TJSONWriter; name : string; elem : TFhirChargeItemParticipant; noObj : boolean = false);
    procedure ComposeChargeItem(json : TJSONWriter; name : string; elem : TFhirChargeItem; noObj : boolean = false);
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
    procedure ComposeClaimRelated(json : TJSONWriter; name : string; elem : TFhirClaimRelated; noObj : boolean = false);
    procedure ComposeClaimPayee(json : TJSONWriter; name : string; elem : TFhirClaimPayee; noObj : boolean = false);
    procedure ComposeClaimCareTeam(json : TJSONWriter; name : string; elem : TFhirClaimCareTeam; noObj : boolean = false);
    procedure ComposeClaimInformation(json : TJSONWriter; name : string; elem : TFhirClaimInformation; noObj : boolean = false);
    procedure ComposeClaimDiagnosis(json : TJSONWriter; name : string; elem : TFhirClaimDiagnosis; noObj : boolean = false);
    procedure ComposeClaimProcedure(json : TJSONWriter; name : string; elem : TFhirClaimProcedure; noObj : boolean = false);
    procedure ComposeClaimInsurance(json : TJSONWriter; name : string; elem : TFhirClaimInsurance; noObj : boolean = false);
    procedure ComposeClaimAccident(json : TJSONWriter; name : string; elem : TFhirClaimAccident; noObj : boolean = false);
    procedure ComposeClaimItem(json : TJSONWriter; name : string; elem : TFhirClaimItem; noObj : boolean = false);
    procedure ComposeClaimItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimItemDetail; noObj : boolean = false);
    procedure ComposeClaimItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirClaimItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeClaim(json : TJSONWriter; name : string; elem : TFhirClaim; noObj : boolean = false);
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    procedure ComposeClaimResponseItem(json : TJSONWriter; name : string; elem : TFhirClaimResponseItem; noObj : boolean = false);
    procedure ComposeClaimResponseItemAdjudication(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemAdjudication; noObj : boolean = false);
    procedure ComposeClaimResponseItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemDetail; noObj : boolean = false);
    procedure ComposeClaimResponseItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeClaimResponseAddItem(json : TJSONWriter; name : string; elem : TFhirClaimResponseAddItem; noObj : boolean = false);
    procedure ComposeClaimResponseError(json : TJSONWriter; name : string; elem : TFhirClaimResponseError; noObj : boolean = false);
    procedure ComposeClaimResponsePayment(json : TJSONWriter; name : string; elem : TFhirClaimResponsePayment; noObj : boolean = false);
    procedure ComposeClaimResponseProcessNote(json : TJSONWriter; name : string; elem : TFhirClaimResponseProcessNote; noObj : boolean = false);
    procedure ComposeClaimResponseInsurance(json : TJSONWriter; name : string; elem : TFhirClaimResponseInsurance; noObj : boolean = false);
    procedure ComposeClaimResponse(json : TJSONWriter; name : string; elem : TFhirClaimResponse; noObj : boolean = false);
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    procedure ComposeClinicalImpressionInvestigation(json : TJSONWriter; name : string; elem : TFhirClinicalImpressionInvestigation; noObj : boolean = false);
    procedure ComposeClinicalImpressionFinding(json : TJSONWriter; name : string; elem : TFhirClinicalImpressionFinding; noObj : boolean = false);
    procedure ComposeClinicalImpression(json : TJSONWriter; name : string; elem : TFhirClinicalImpression; noObj : boolean = false);
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
    procedure ComposeCodeSystemFilter(json : TJSONWriter; name : string; elem : TFhirCodeSystemFilter; noObj : boolean = false);
    procedure ComposeCodeSystemProperty(json : TJSONWriter; name : string; elem : TFhirCodeSystemProperty; noObj : boolean = false);
    procedure ComposeCodeSystemConcept(json : TJSONWriter; name : string; elem : TFhirCodeSystemConcept; noObj : boolean = false);
    procedure ComposeCodeSystemConceptDesignation(json : TJSONWriter; name : string; elem : TFhirCodeSystemConceptDesignation; noObj : boolean = false);
    procedure ComposeCodeSystemConceptProperty(json : TJSONWriter; name : string; elem : TFhirCodeSystemConceptProperty; noObj : boolean = false);
    procedure ComposeCodeSystem(json : TJSONWriter; name : string; elem : TFhirCodeSystem; noObj : boolean = false);
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    procedure ComposeCommunicationPayload(json : TJSONWriter; name : string; elem : TFhirCommunicationPayload; noObj : boolean = false);
    procedure ComposeCommunication(json : TJSONWriter; name : string; elem : TFhirCommunication; noObj : boolean = false);
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    procedure ComposeCommunicationRequestPayload(json : TJSONWriter; name : string; elem : TFhirCommunicationRequestPayload; noObj : boolean = false);
    procedure ComposeCommunicationRequest(json : TJSONWriter; name : string; elem : TFhirCommunicationRequest; noObj : boolean = false);
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    procedure ComposeCompartmentDefinitionResource(json : TJSONWriter; name : string; elem : TFhirCompartmentDefinitionResource; noObj : boolean = false);
    procedure ComposeCompartmentDefinition(json : TJSONWriter; name : string; elem : TFhirCompartmentDefinition; noObj : boolean = false);
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    procedure ComposeCompositionAttester(json : TJSONWriter; name : string; elem : TFhirCompositionAttester; noObj : boolean = false);
    procedure ComposeCompositionRelatesTo(json : TJSONWriter; name : string; elem : TFhirCompositionRelatesTo; noObj : boolean = false);
    procedure ComposeCompositionEvent(json : TJSONWriter; name : string; elem : TFhirCompositionEvent; noObj : boolean = false);
    procedure ComposeCompositionSection(json : TJSONWriter; name : string; elem : TFhirCompositionSection; noObj : boolean = false);
    procedure ComposeComposition(json : TJSONWriter; name : string; elem : TFhirComposition; noObj : boolean = false);
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    procedure ComposeConceptMapGroup(json : TJSONWriter; name : string; elem : TFhirConceptMapGroup; noObj : boolean = false);
    procedure ComposeConceptMapGroupElement(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElement; noObj : boolean = false);
    procedure ComposeConceptMapGroupElementTarget(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElementTarget; noObj : boolean = false);
    procedure ComposeConceptMapGroupElementTargetDependsOn(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElementTargetDependsOn; noObj : boolean = false);
    procedure ComposeConceptMapGroupUnmapped(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupUnmapped; noObj : boolean = false);
    procedure ComposeConceptMap(json : TJSONWriter; name : string; elem : TFhirConceptMap; noObj : boolean = false);
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    procedure ComposeConditionStage(json : TJSONWriter; name : string; elem : TFhirConditionStage; noObj : boolean = false);
    procedure ComposeConditionEvidence(json : TJSONWriter; name : string; elem : TFhirConditionEvidence; noObj : boolean = false);
    procedure ComposeCondition(json : TJSONWriter; name : string; elem : TFhirCondition; noObj : boolean = false);
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
    procedure ComposeConsentPolicy(json : TJSONWriter; name : string; elem : TFhirConsentPolicy; noObj : boolean = false);
    procedure ComposeConsentVerification(json : TJSONWriter; name : string; elem : TFhirConsentVerification; noObj : boolean = false);
    procedure ComposeConsentProvision(json : TJSONWriter; name : string; elem : TFhirConsentProvision; noObj : boolean = false);
    procedure ComposeConsentProvisionActor(json : TJSONWriter; name : string; elem : TFhirConsentProvisionActor; noObj : boolean = false);
    procedure ComposeConsentProvisionData(json : TJSONWriter; name : string; elem : TFhirConsentProvisionData; noObj : boolean = false);
    procedure ComposeConsent(json : TJSONWriter; name : string; elem : TFhirConsent; noObj : boolean = false);
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    procedure ComposeContractTerm(json : TJSONWriter; name : string; elem : TFhirContractTerm; noObj : boolean = false);
    procedure ComposeContractTermOffer(json : TJSONWriter; name : string; elem : TFhirContractTermOffer; noObj : boolean = false);
    procedure ComposeContractTermAsset(json : TJSONWriter; name : string; elem : TFhirContractTermAsset; noObj : boolean = false);
    procedure ComposeContractTermAssetData(json : TJSONWriter; name : string; elem : TFhirContractTermAssetData; noObj : boolean = false);
    procedure ComposeContractTermAssetValuedItem(json : TJSONWriter; name : string; elem : TFhirContractTermAssetValuedItem; noObj : boolean = false);
    procedure ComposeContractTermAgent(json : TJSONWriter; name : string; elem : TFhirContractTermAgent; noObj : boolean = false);
    procedure ComposeContractSigner(json : TJSONWriter; name : string; elem : TFhirContractSigner; noObj : boolean = false);
    procedure ComposeContractFriendly(json : TJSONWriter; name : string; elem : TFhirContractFriendly; noObj : boolean = false);
    procedure ComposeContractLegal(json : TJSONWriter; name : string; elem : TFhirContractLegal; noObj : boolean = false);
    procedure ComposeContractRule(json : TJSONWriter; name : string; elem : TFhirContractRule; noObj : boolean = false);
    procedure ComposeContract(json : TJSONWriter; name : string; elem : TFhirContract; noObj : boolean = false);
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    procedure ComposeCoverageClass(json : TJSONWriter; name : string; elem : TFhirCoverageClass; noObj : boolean = false);
    procedure ComposeCoverageGrouping(json : TJSONWriter; name : string; elem : TFhirCoverageGrouping; noObj : boolean = false);
    procedure ComposeCoverageCopay(json : TJSONWriter; name : string; elem : TFhirCoverageCopay; noObj : boolean = false);
    procedure ComposeCoverage(json : TJSONWriter; name : string; elem : TFhirCoverage; noObj : boolean = false);
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DETECTEDISSUE}
    procedure ComposeDetectedIssueMitigation(json : TJSONWriter; name : string; elem : TFhirDetectedIssueMitigation; noObj : boolean = false);
    procedure ComposeDetectedIssue(json : TJSONWriter; name : string; elem : TFhirDetectedIssue; noObj : boolean = false);
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    procedure ComposeDeviceUdi(json : TJSONWriter; name : string; elem : TFhirDeviceUdi; noObj : boolean = false);
    procedure ComposeDevice(json : TJSONWriter; name : string; elem : TFhirDevice; noObj : boolean = false);
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
    procedure ComposeDeviceComponentProductionSpecification(json : TJSONWriter; name : string; elem : TFhirDeviceComponentProductionSpecification; noObj : boolean = false);
    procedure ComposeDeviceComponentProperty(json : TJSONWriter; name : string; elem : TFhirDeviceComponentProperty; noObj : boolean = false);
    procedure ComposeDeviceComponent(json : TJSONWriter; name : string; elem : TFhirDeviceComponent; noObj : boolean = false);
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
    procedure ComposeDeviceMetricCalibration(json : TJSONWriter; name : string; elem : TFhirDeviceMetricCalibration; noObj : boolean = false);
    procedure ComposeDeviceMetric(json : TJSONWriter; name : string; elem : TFhirDeviceMetric; noObj : boolean = false);
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    procedure ComposeDeviceRequestParameter(json : TJSONWriter; name : string; elem : TFhirDeviceRequestParameter; noObj : boolean = false);
    procedure ComposeDeviceRequest(json : TJSONWriter; name : string; elem : TFhirDeviceRequest; noObj : boolean = false);
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    procedure ComposeDeviceUseStatement(json : TJSONWriter; name : string; elem : TFhirDeviceUseStatement; noObj : boolean = false);
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    procedure ComposeDiagnosticReportMedia(json : TJSONWriter; name : string; elem : TFhirDiagnosticReportMedia; noObj : boolean = false);
    procedure ComposeDiagnosticReport(json : TJSONWriter; name : string; elem : TFhirDiagnosticReport; noObj : boolean = false);
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    procedure ComposeDocumentManifestAgent(json : TJSONWriter; name : string; elem : TFhirDocumentManifestAgent; noObj : boolean = false);
    procedure ComposeDocumentManifestRelated(json : TJSONWriter; name : string; elem : TFhirDocumentManifestRelated; noObj : boolean = false);
    procedure ComposeDocumentManifest(json : TJSONWriter; name : string; elem : TFhirDocumentManifest; noObj : boolean = false);
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    procedure ComposeDocumentReferenceAgent(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceAgent; noObj : boolean = false);
    procedure ComposeDocumentReferenceRelatesTo(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceRelatesTo; noObj : boolean = false);
    procedure ComposeDocumentReferenceContent(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContent; noObj : boolean = false);
    procedure ComposeDocumentReferenceContext(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContext; noObj : boolean = false);
    procedure ComposeDocumentReferenceContextRelated(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContextRelated; noObj : boolean = false);
    procedure ComposeDocumentReference(json : TJSONWriter; name : string; elem : TFhirDocumentReference; noObj : boolean = false);
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
    procedure ComposeEligibilityRequestAuthorization(json : TJSONWriter; name : string; elem : TFhirEligibilityRequestAuthorization; noObj : boolean = false);
    procedure ComposeEligibilityRequest(json : TJSONWriter; name : string; elem : TFhirEligibilityRequest; noObj : boolean = false);
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
    procedure ComposeEligibilityResponseInsurance(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsurance; noObj : boolean = false);
    procedure ComposeEligibilityResponseInsuranceBenefitBalance(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsuranceBenefitBalance; noObj : boolean = false);
    procedure ComposeEligibilityResponseInsuranceBenefitBalanceFinancial(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial; noObj : boolean = false);
    procedure ComposeEligibilityResponseAuthorization(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseAuthorization; noObj : boolean = false);
    procedure ComposeEligibilityResponseError(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseError; noObj : boolean = false);
    procedure ComposeEligibilityResponse(json : TJSONWriter; name : string; elem : TFhirEligibilityResponse; noObj : boolean = false);
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
    procedure ComposeEncounterStatusHistory(json : TJSONWriter; name : string; elem : TFhirEncounterStatusHistory; noObj : boolean = false);
    procedure ComposeEncounterClassHistory(json : TJSONWriter; name : string; elem : TFhirEncounterClassHistory; noObj : boolean = false);
    procedure ComposeEncounterParticipant(json : TJSONWriter; name : string; elem : TFhirEncounterParticipant; noObj : boolean = false);
    procedure ComposeEncounterDiagnosis(json : TJSONWriter; name : string; elem : TFhirEncounterDiagnosis; noObj : boolean = false);
    procedure ComposeEncounterHospitalization(json : TJSONWriter; name : string; elem : TFhirEncounterHospitalization; noObj : boolean = false);
    procedure ComposeEncounterLocation(json : TJSONWriter; name : string; elem : TFhirEncounterLocation; noObj : boolean = false);
    procedure ComposeEncounter(json : TJSONWriter; name : string; elem : TFhirEncounter; noObj : boolean = false);
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    procedure ComposeEndpoint(json : TJSONWriter; name : string; elem : TFhirEndpoint; noObj : boolean = false);
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    procedure ComposeEnrollmentRequest(json : TJSONWriter; name : string; elem : TFhirEnrollmentRequest; noObj : boolean = false);
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    procedure ComposeEnrollmentResponse(json : TJSONWriter; name : string; elem : TFhirEnrollmentResponse; noObj : boolean = false);
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_ENTRYDEFINITION}
    procedure ComposeEntryDefinitionRelatedEntry(json : TJSONWriter; name : string; elem : TFhirEntryDefinitionRelatedEntry; noObj : boolean = false);
    procedure ComposeEntryDefinition(json : TJSONWriter; name : string; elem : TFhirEntryDefinition; noObj : boolean = false);
{$ENDIF FHIR_ENTRYDEFINITION}
{$IFDEF FHIR_EPISODEOFCARE}
    procedure ComposeEpisodeOfCareStatusHistory(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCareStatusHistory; noObj : boolean = false);
    procedure ComposeEpisodeOfCareDiagnosis(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCareDiagnosis; noObj : boolean = false);
    procedure ComposeEpisodeOfCare(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCare; noObj : boolean = false);
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    procedure ComposeEventDefinition(json : TJSONWriter; name : string; elem : TFhirEventDefinition; noObj : boolean = false);
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EXAMPLESCENARIO}
    procedure ComposeExampleScenarioActor(json : TJSONWriter; name : string; elem : TFhirExampleScenarioActor; noObj : boolean = false);
    procedure ComposeExampleScenarioInstance(json : TJSONWriter; name : string; elem : TFhirExampleScenarioInstance; noObj : boolean = false);
    procedure ComposeExampleScenarioInstanceVersion(json : TJSONWriter; name : string; elem : TFhirExampleScenarioInstanceVersion; noObj : boolean = false);
    procedure ComposeExampleScenarioInstanceContainedInstance(json : TJSONWriter; name : string; elem : TFhirExampleScenarioInstanceContainedInstance; noObj : boolean = false);
    procedure ComposeExampleScenarioProcess(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcess; noObj : boolean = false);
    procedure ComposeExampleScenarioProcessStep(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcessStep; noObj : boolean = false);
    procedure ComposeExampleScenarioProcessStepOperation(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcessStepOperation; noObj : boolean = false);
    procedure ComposeExampleScenarioProcessStepAlternative(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcessStepAlternative; noObj : boolean = false);
    procedure ComposeExampleScenarioProcessStepAlternativeOption(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcessStepAlternativeOption; noObj : boolean = false);
    procedure ComposeExampleScenario(json : TJSONWriter; name : string; elem : TFhirExampleScenario; noObj : boolean = false);
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPANSIONPROFILE}
    procedure ComposeExpansionProfileFixedVersion(json : TJSONWriter; name : string; elem : TFhirExpansionProfileFixedVersion; noObj : boolean = false);
    procedure ComposeExpansionProfileExcludedSystem(json : TJSONWriter; name : string; elem : TFhirExpansionProfileExcludedSystem; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignation; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignationInclude(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationInclude; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignationIncludeDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationIncludeDesignation; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignationExclude(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationExclude; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignationExcludeDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationExcludeDesignation; noObj : boolean = false);
    procedure ComposeExpansionProfile(json : TJSONWriter; name : string; elem : TFhirExpansionProfile; noObj : boolean = false);
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    procedure ComposeExplanationOfBenefitRelated(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitRelated; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitPayee(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitPayee; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitInformation(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitInformation; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitCareTeam(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitCareTeam; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitDiagnosis(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitDiagnosis; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitProcedure(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitProcedure; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitInsurance(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitInsurance; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitAccident(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAccident; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItem(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItem; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItemAdjudication(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemAdjudication; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItemDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemDetail; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitAddItem(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAddItem; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitPayment(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitPayment; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitProcessNote(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitProcessNote; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitBenefitBalance(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitBenefitBalance; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitBenefitBalanceFinancial(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitBenefitBalanceFinancial; noObj : boolean = false);
    procedure ComposeExplanationOfBenefit(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefit; noObj : boolean = false);
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    procedure ComposeFamilyMemberHistoryCondition(json : TJSONWriter; name : string; elem : TFhirFamilyMemberHistoryCondition; noObj : boolean = false);
    procedure ComposeFamilyMemberHistory(json : TJSONWriter; name : string; elem : TFhirFamilyMemberHistory; noObj : boolean = false);
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    procedure ComposeFlag(json : TJSONWriter; name : string; elem : TFhirFlag; noObj : boolean = false);
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    procedure ComposeGoalTarget(json : TJSONWriter; name : string; elem : TFhirGoalTarget; noObj : boolean = false);
    procedure ComposeGoal(json : TJSONWriter; name : string; elem : TFhirGoal; noObj : boolean = false);
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    procedure ComposeGraphDefinitionLink(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLink; noObj : boolean = false);
    procedure ComposeGraphDefinitionLinkTarget(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLinkTarget; noObj : boolean = false);
    procedure ComposeGraphDefinitionLinkTargetCompartment(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLinkTargetCompartment; noObj : boolean = false);
    procedure ComposeGraphDefinition(json : TJSONWriter; name : string; elem : TFhirGraphDefinition; noObj : boolean = false);
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    procedure ComposeGroupCharacteristic(json : TJSONWriter; name : string; elem : TFhirGroupCharacteristic; noObj : boolean = false);
    procedure ComposeGroupMember(json : TJSONWriter; name : string; elem : TFhirGroupMember; noObj : boolean = false);
    procedure ComposeGroup(json : TJSONWriter; name : string; elem : TFhirGroup; noObj : boolean = false);
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    procedure ComposeGuidanceResponse(json : TJSONWriter; name : string; elem : TFhirGuidanceResponse; noObj : boolean = false);
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    procedure ComposeHealthcareServiceAvailableTime(json : TJSONWriter; name : string; elem : TFhirHealthcareServiceAvailableTime; noObj : boolean = false);
    procedure ComposeHealthcareServiceNotAvailable(json : TJSONWriter; name : string; elem : TFhirHealthcareServiceNotAvailable; noObj : boolean = false);
    procedure ComposeHealthcareService(json : TJSONWriter; name : string; elem : TFhirHealthcareService; noObj : boolean = false);
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    procedure ComposeImagingStudySeries(json : TJSONWriter; name : string; elem : TFhirImagingStudySeries; noObj : boolean = false);
    procedure ComposeImagingStudySeriesInstance(json : TJSONWriter; name : string; elem : TFhirImagingStudySeriesInstance; noObj : boolean = false);
    procedure ComposeImagingStudy(json : TJSONWriter; name : string; elem : TFhirImagingStudy; noObj : boolean = false);
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    procedure ComposeImmunizationPractitioner(json : TJSONWriter; name : string; elem : TFhirImmunizationPractitioner; noObj : boolean = false);
    procedure ComposeImmunizationEducation(json : TJSONWriter; name : string; elem : TFhirImmunizationEducation; noObj : boolean = false);
    procedure ComposeImmunization(json : TJSONWriter; name : string; elem : TFhirImmunization; noObj : boolean = false);
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    procedure ComposeImmunizationEvaluation(json : TJSONWriter; name : string; elem : TFhirImmunizationEvaluation; noObj : boolean = false);
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    procedure ComposeImmunizationRecommendationRecommendation(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendation; noObj : boolean = false);
    procedure ComposeImmunizationRecommendationRecommendationDateCriterion(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendationDateCriterion; noObj : boolean = false);
    procedure ComposeImmunizationRecommendation(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendation; noObj : boolean = false);
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    procedure ComposeImplementationGuideDependency(json : TJSONWriter; name : string; elem : TFhirImplementationGuideDependency; noObj : boolean = false);
    procedure ComposeImplementationGuidePackage(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePackage; noObj : boolean = false);
    procedure ComposeImplementationGuidePackageResource(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePackageResource; noObj : boolean = false);
    procedure ComposeImplementationGuideGlobal(json : TJSONWriter; name : string; elem : TFhirImplementationGuideGlobal; noObj : boolean = false);
    procedure ComposeImplementationGuidePage(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePage; noObj : boolean = false);
    procedure ComposeImplementationGuide(json : TJSONWriter; name : string; elem : TFhirImplementationGuide; noObj : boolean = false);
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEINPUT}
    procedure ComposeImplementationGuideInputDependency(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputDependency; noObj : boolean = false);
    procedure ComposeImplementationGuideInputPackage(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputPackage; noObj : boolean = false);
    procedure ComposeImplementationGuideInputPackageResource(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputPackageResource; noObj : boolean = false);
    procedure ComposeImplementationGuideInputGlobal(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputGlobal; noObj : boolean = false);
    procedure ComposeImplementationGuideInputPage(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputPage; noObj : boolean = false);
    procedure ComposeImplementationGuideInput(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInput; noObj : boolean = false);
{$ENDIF FHIR_IMPLEMENTATIONGUIDEINPUT}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
    procedure ComposeImplementationGuideOutputDependency(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutputDependency; noObj : boolean = false);
    procedure ComposeImplementationGuideOutputResource(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutputResource; noObj : boolean = false);
    procedure ComposeImplementationGuideOutputGlobal(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutputGlobal; noObj : boolean = false);
    procedure ComposeImplementationGuideOutputPage(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutputPage; noObj : boolean = false);
    procedure ComposeImplementationGuideOutput(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutput; noObj : boolean = false);
{$ENDIF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
{$IFDEF FHIR_INVOICE}
    procedure ComposeInvoiceParticipant(json : TJSONWriter; name : string; elem : TFhirInvoiceParticipant; noObj : boolean = false);
    procedure ComposeInvoiceLineItem(json : TJSONWriter; name : string; elem : TFhirInvoiceLineItem; noObj : boolean = false);
    procedure ComposeInvoiceLineItemPriceComponent(json : TJSONWriter; name : string; elem : TFhirInvoiceLineItemPriceComponent; noObj : boolean = false);
    procedure ComposeInvoice(json : TJSONWriter; name : string; elem : TFhirInvoice; noObj : boolean = false);
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_ITEMINSTANCE}
    procedure ComposeItemInstance(json : TJSONWriter; name : string; elem : TFhirItemInstance; noObj : boolean = false);
{$ENDIF FHIR_ITEMINSTANCE}
{$IFDEF FHIR_LIBRARY}
    procedure ComposeLibrary(json : TJSONWriter; name : string; elem : TFhirLibrary; noObj : boolean = false);
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    procedure ComposeLinkageItem(json : TJSONWriter; name : string; elem : TFhirLinkageItem; noObj : boolean = false);
    procedure ComposeLinkage(json : TJSONWriter; name : string; elem : TFhirLinkage; noObj : boolean = false);
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    procedure ComposeListEntry(json : TJSONWriter; name : string; elem : TFhirListEntry; noObj : boolean = false);
    procedure ComposeList(json : TJSONWriter; name : string; elem : TFhirList; noObj : boolean = false);
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    procedure ComposeLocationPosition(json : TJSONWriter; name : string; elem : TFhirLocationPosition; noObj : boolean = false);
    procedure ComposeLocationHoursOfOperation(json : TJSONWriter; name : string; elem : TFhirLocationHoursOfOperation; noObj : boolean = false);
    procedure ComposeLocation(json : TJSONWriter; name : string; elem : TFhirLocation; noObj : boolean = false);
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
    procedure ComposeMeasureGroup(json : TJSONWriter; name : string; elem : TFhirMeasureGroup; noObj : boolean = false);
    procedure ComposeMeasureGroupPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureGroupPopulation; noObj : boolean = false);
    procedure ComposeMeasureGroupStratifier(json : TJSONWriter; name : string; elem : TFhirMeasureGroupStratifier; noObj : boolean = false);
    procedure ComposeMeasureSupplementalData(json : TJSONWriter; name : string; elem : TFhirMeasureSupplementalData; noObj : boolean = false);
    procedure ComposeMeasure(json : TJSONWriter; name : string; elem : TFhirMeasure; noObj : boolean = false);
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    procedure ComposeMeasureReportGroup(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroup; noObj : boolean = false);
    procedure ComposeMeasureReportGroupPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupPopulation; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifier(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifier; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifierStratum(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifierStratum; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifierStratumPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifierStratumPopulation; noObj : boolean = false);
    procedure ComposeMeasureReport(json : TJSONWriter; name : string; elem : TFhirMeasureReport; noObj : boolean = false);
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
    procedure ComposeMedia(json : TJSONWriter; name : string; elem : TFhirMedia; noObj : boolean = false);
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
    procedure ComposeMedicationIngredient(json : TJSONWriter; name : string; elem : TFhirMedicationIngredient; noObj : boolean = false);
    procedure ComposeMedicationBatch(json : TJSONWriter; name : string; elem : TFhirMedicationBatch; noObj : boolean = false);
    procedure ComposeMedication(json : TJSONWriter; name : string; elem : TFhirMedication; noObj : boolean = false);
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    procedure ComposeMedicationAdministrationPerformer(json : TJSONWriter; name : string; elem : TFhirMedicationAdministrationPerformer; noObj : boolean = false);
    procedure ComposeMedicationAdministrationDosage(json : TJSONWriter; name : string; elem : TFhirMedicationAdministrationDosage; noObj : boolean = false);
    procedure ComposeMedicationAdministration(json : TJSONWriter; name : string; elem : TFhirMedicationAdministration; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    procedure ComposeMedicationDispensePerformer(json : TJSONWriter; name : string; elem : TFhirMedicationDispensePerformer; noObj : boolean = false);
    procedure ComposeMedicationDispenseSubstitution(json : TJSONWriter; name : string; elem : TFhirMedicationDispenseSubstitution; noObj : boolean = false);
    procedure ComposeMedicationDispense(json : TJSONWriter; name : string; elem : TFhirMedicationDispense; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    procedure ComposeMedicationRequestDispenseRequest(json : TJSONWriter; name : string; elem : TFhirMedicationRequestDispenseRequest; noObj : boolean = false);
    procedure ComposeMedicationRequestSubstitution(json : TJSONWriter; name : string; elem : TFhirMedicationRequestSubstitution; noObj : boolean = false);
    procedure ComposeMedicationRequest(json : TJSONWriter; name : string; elem : TFhirMedicationRequest; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
    procedure ComposeMedicationStatement(json : TJSONWriter; name : string; elem : TFhirMedicationStatement; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
    procedure ComposeMedicinalProductName(json : TJSONWriter; name : string; elem : TFhirMedicinalProductName; noObj : boolean = false);
    procedure ComposeMedicinalProductNameNamePart(json : TJSONWriter; name : string; elem : TFhirMedicinalProductNameNamePart; noObj : boolean = false);
    procedure ComposeMedicinalProductNameCountryLanguage(json : TJSONWriter; name : string; elem : TFhirMedicinalProductNameCountryLanguage; noObj : boolean = false);
    procedure ComposeMedicinalProductManufacturingBusinessOperation(json : TJSONWriter; name : string; elem : TFhirMedicinalProductManufacturingBusinessOperation; noObj : boolean = false);
    procedure ComposeMedicinalProduct(json : TJSONWriter; name : string; elem : TFhirMedicinalProduct; noObj : boolean = false);
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
    procedure ComposeMedicinalProductAuthorizationJurisdictionalAuthorization(json : TJSONWriter; name : string; elem : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization; noObj : boolean = false);
    procedure ComposeMedicinalProductAuthorizationProcedure(json : TJSONWriter; name : string; elem : TFhirMedicinalProductAuthorizationProcedure; noObj : boolean = false);
    procedure ComposeMedicinalProductAuthorizationProcedureApplication(json : TJSONWriter; name : string; elem : TFhirMedicinalProductAuthorizationProcedureApplication; noObj : boolean = false);
    procedure ComposeMedicinalProductAuthorization(json : TJSONWriter; name : string; elem : TFhirMedicinalProductAuthorization; noObj : boolean = false);
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCLINICALS}
    procedure ComposeMedicinalProductClinicalsUndesirableEffects(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsUndesirableEffects; noObj : boolean = false);
    procedure ComposeMedicinalProductClinicalsUndesirableEffectsPopulation(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsUndesirableEffectsPopulation; noObj : boolean = false);
    procedure ComposeMedicinalProductClinicalsTherapeuticIndication(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsTherapeuticIndication; noObj : boolean = false);
    procedure ComposeMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsTherapeuticIndicationOtherTherapy; noObj : boolean = false);
    procedure ComposeMedicinalProductClinicalsContraindication(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsContraindication; noObj : boolean = false);
    procedure ComposeMedicinalProductClinicalsInteractions(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsInteractions; noObj : boolean = false);
    procedure ComposeMedicinalProductClinicals(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicals; noObj : boolean = false);
{$ENDIF FHIR_MEDICINALPRODUCTCLINICALS}
{$IFDEF FHIR_MEDICINALPRODUCTDEVICESPEC}
    procedure ComposeMedicinalProductDeviceSpecMaterial(json : TJSONWriter; name : string; elem : TFhirMedicinalProductDeviceSpecMaterial; noObj : boolean = false);
    procedure ComposeMedicinalProductDeviceSpec(json : TJSONWriter; name : string; elem : TFhirMedicinalProductDeviceSpec; noObj : boolean = false);
{$ENDIF FHIR_MEDICINALPRODUCTDEVICESPEC}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
    procedure ComposeMedicinalProductIngredientSpecifiedSubstance(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredientSpecifiedSubstance; noObj : boolean = false);
    procedure ComposeMedicinalProductIngredientSpecifiedSubstanceStrength(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength; noObj : boolean = false);
    procedure ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength; noObj : boolean = false);
    procedure ComposeMedicinalProductIngredientSubstance(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredientSubstance; noObj : boolean = false);
    procedure ComposeMedicinalProductIngredient(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredient; noObj : boolean = false);
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
    procedure ComposeMedicinalProductPackagedBatchIdentifier(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPackagedBatchIdentifier; noObj : boolean = false);
    procedure ComposeMedicinalProductPackagedPackageItem(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPackagedPackageItem; noObj : boolean = false);
    procedure ComposeMedicinalProductPackagedPackageItemManufacturedItem(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPackagedPackageItemManufacturedItem; noObj : boolean = false);
    procedure ComposeMedicinalProductPackaged(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPackaged; noObj : boolean = false);
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
    procedure ComposeMedicinalProductPharmaceuticalCharacteristics(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPharmaceuticalCharacteristics; noObj : boolean = false);
    procedure ComposeMedicinalProductPharmaceutical(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPharmaceutical; noObj : boolean = false);
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MESSAGEDEFINITION}
    procedure ComposeMessageDefinitionFocus(json : TJSONWriter; name : string; elem : TFhirMessageDefinitionFocus; noObj : boolean = false);
    procedure ComposeMessageDefinitionAllowedResponse(json : TJSONWriter; name : string; elem : TFhirMessageDefinitionAllowedResponse; noObj : boolean = false);
    procedure ComposeMessageDefinition(json : TJSONWriter; name : string; elem : TFhirMessageDefinition; noObj : boolean = false);
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    procedure ComposeMessageHeaderDestination(json : TJSONWriter; name : string; elem : TFhirMessageHeaderDestination; noObj : boolean = false);
    procedure ComposeMessageHeaderSource(json : TJSONWriter; name : string; elem : TFhirMessageHeaderSource; noObj : boolean = false);
    procedure ComposeMessageHeaderResponse(json : TJSONWriter; name : string; elem : TFhirMessageHeaderResponse; noObj : boolean = false);
    procedure ComposeMessageHeader(json : TJSONWriter; name : string; elem : TFhirMessageHeader; noObj : boolean = false);
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
    procedure ComposeNamingSystemUniqueId(json : TJSONWriter; name : string; elem : TFhirNamingSystemUniqueId; noObj : boolean = false);
    procedure ComposeNamingSystem(json : TJSONWriter; name : string; elem : TFhirNamingSystem; noObj : boolean = false);
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
    procedure ComposeNutritionOrderOralDiet(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDiet; noObj : boolean = false);
    procedure ComposeNutritionOrderOralDietNutrient(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDietNutrient; noObj : boolean = false);
    procedure ComposeNutritionOrderOralDietTexture(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDietTexture; noObj : boolean = false);
    procedure ComposeNutritionOrderSupplement(json : TJSONWriter; name : string; elem : TFhirNutritionOrderSupplement; noObj : boolean = false);
    procedure ComposeNutritionOrderEnteralFormula(json : TJSONWriter; name : string; elem : TFhirNutritionOrderEnteralFormula; noObj : boolean = false);
    procedure ComposeNutritionOrderEnteralFormulaAdministration(json : TJSONWriter; name : string; elem : TFhirNutritionOrderEnteralFormulaAdministration; noObj : boolean = false);
    procedure ComposeNutritionOrder(json : TJSONWriter; name : string; elem : TFhirNutritionOrder; noObj : boolean = false);
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
    procedure ComposeObservationReferenceRange(json : TJSONWriter; name : string; elem : TFhirObservationReferenceRange; noObj : boolean = false);
    procedure ComposeObservationComponent(json : TJSONWriter; name : string; elem : TFhirObservationComponent; noObj : boolean = false);
    procedure ComposeObservation(json : TJSONWriter; name : string; elem : TFhirObservation; noObj : boolean = false);
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    procedure ComposeObservationDefinitionQuantitativeDetails(json : TJSONWriter; name : string; elem : TFhirObservationDefinitionQuantitativeDetails; noObj : boolean = false);
    procedure ComposeObservationDefinitionQualifiedInterval(json : TJSONWriter; name : string; elem : TFhirObservationDefinitionQualifiedInterval; noObj : boolean = false);
    procedure ComposeObservationDefinition(json : TJSONWriter; name : string; elem : TFhirObservationDefinition; noObj : boolean = false);
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OCCUPATIONALDATA}
    procedure ComposeOccupationalDataEmploymentStatus(json : TJSONWriter; name : string; elem : TFhirOccupationalDataEmploymentStatus; noObj : boolean = false);
    procedure ComposeOccupationalDataUsualOccupation(json : TJSONWriter; name : string; elem : TFhirOccupationalDataUsualOccupation; noObj : boolean = false);
    procedure ComposeOccupationalDataPastOrPresentOccupation(json : TJSONWriter; name : string; elem : TFhirOccupationalDataPastOrPresentOccupation; noObj : boolean = false);
    procedure ComposeOccupationalDataPastOrPresentOccupationWorkSchedule(json : TJSONWriter; name : string; elem : TFhirOccupationalDataPastOrPresentOccupationWorkSchedule; noObj : boolean = false);
    procedure ComposeOccupationalData(json : TJSONWriter; name : string; elem : TFhirOccupationalData; noObj : boolean = false);
{$ENDIF FHIR_OCCUPATIONALDATA}
{$IFDEF FHIR_OPERATIONDEFINITION}
    procedure ComposeOperationDefinitionParameter(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionParameter; noObj : boolean = false);
    procedure ComposeOperationDefinitionParameterBinding(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionParameterBinding; noObj : boolean = false);
    procedure ComposeOperationDefinitionOverload(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionOverload; noObj : boolean = false);
    procedure ComposeOperationDefinition(json : TJSONWriter; name : string; elem : TFhirOperationDefinition; noObj : boolean = false);
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    procedure ComposeOperationOutcomeIssue(json : TJSONWriter; name : string; elem : TFhirOperationOutcomeIssue; noObj : boolean = false);
    procedure ComposeOperationOutcome(json : TJSONWriter; name : string; elem : TFhirOperationOutcome; noObj : boolean = false);
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    procedure ComposeOrganizationContact(json : TJSONWriter; name : string; elem : TFhirOrganizationContact; noObj : boolean = false);
    procedure ComposeOrganization(json : TJSONWriter; name : string; elem : TFhirOrganization; noObj : boolean = false);
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONROLE}
    procedure ComposeOrganizationRoleAvailableTime(json : TJSONWriter; name : string; elem : TFhirOrganizationRoleAvailableTime; noObj : boolean = false);
    procedure ComposeOrganizationRoleNotAvailable(json : TJSONWriter; name : string; elem : TFhirOrganizationRoleNotAvailable; noObj : boolean = false);
    procedure ComposeOrganizationRole(json : TJSONWriter; name : string; elem : TFhirOrganizationRole; noObj : boolean = false);
{$ENDIF FHIR_ORGANIZATIONROLE}
{$IFDEF FHIR_PATIENT}
    procedure ComposePatientContact(json : TJSONWriter; name : string; elem : TFhirPatientContact; noObj : boolean = false);
    procedure ComposePatientAnimal(json : TJSONWriter; name : string; elem : TFhirPatientAnimal; noObj : boolean = false);
    procedure ComposePatientCommunication(json : TJSONWriter; name : string; elem : TFhirPatientCommunication; noObj : boolean = false);
    procedure ComposePatientLink(json : TJSONWriter; name : string; elem : TFhirPatientLink; noObj : boolean = false);
    procedure ComposePatient(json : TJSONWriter; name : string; elem : TFhirPatient; noObj : boolean = false);
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    procedure ComposePaymentNotice(json : TJSONWriter; name : string; elem : TFhirPaymentNotice; noObj : boolean = false);
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    procedure ComposePaymentReconciliationDetail(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliationDetail; noObj : boolean = false);
    procedure ComposePaymentReconciliationProcessNote(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliationProcessNote; noObj : boolean = false);
    procedure ComposePaymentReconciliation(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliation; noObj : boolean = false);
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
    procedure ComposePersonLink(json : TJSONWriter; name : string; elem : TFhirPersonLink; noObj : boolean = false);
    procedure ComposePerson(json : TJSONWriter; name : string; elem : TFhirPerson; noObj : boolean = false);
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    procedure ComposePlanDefinitionGoal(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionGoal; noObj : boolean = false);
    procedure ComposePlanDefinitionGoalTarget(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionGoalTarget; noObj : boolean = false);
    procedure ComposePlanDefinitionAction(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionAction; noObj : boolean = false);
    procedure ComposePlanDefinitionActionCondition(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionCondition; noObj : boolean = false);
    procedure ComposePlanDefinitionActionRelatedAction(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionRelatedAction; noObj : boolean = false);
    procedure ComposePlanDefinitionActionParticipant(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionParticipant; noObj : boolean = false);
    procedure ComposePlanDefinitionActionDynamicValue(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionDynamicValue; noObj : boolean = false);
    procedure ComposePlanDefinition(json : TJSONWriter; name : string; elem : TFhirPlanDefinition; noObj : boolean = false);
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    procedure ComposePractitionerQualification(json : TJSONWriter; name : string; elem : TFhirPractitionerQualification; noObj : boolean = false);
    procedure ComposePractitioner(json : TJSONWriter; name : string; elem : TFhirPractitioner; noObj : boolean = false);
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    procedure ComposePractitionerRoleAvailableTime(json : TJSONWriter; name : string; elem : TFhirPractitionerRoleAvailableTime; noObj : boolean = false);
    procedure ComposePractitionerRoleNotAvailable(json : TJSONWriter; name : string; elem : TFhirPractitionerRoleNotAvailable; noObj : boolean = false);
    procedure ComposePractitionerRole(json : TJSONWriter; name : string; elem : TFhirPractitionerRole; noObj : boolean = false);
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    procedure ComposeProcedurePerformer(json : TJSONWriter; name : string; elem : TFhirProcedurePerformer; noObj : boolean = false);
    procedure ComposeProcedureFocalDevice(json : TJSONWriter; name : string; elem : TFhirProcedureFocalDevice; noObj : boolean = false);
    procedure ComposeProcedure(json : TJSONWriter; name : string; elem : TFhirProcedure; noObj : boolean = false);
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCESSREQUEST}
    procedure ComposeProcessRequestItem(json : TJSONWriter; name : string; elem : TFhirProcessRequestItem; noObj : boolean = false);
    procedure ComposeProcessRequest(json : TJSONWriter; name : string; elem : TFhirProcessRequest; noObj : boolean = false);
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
    procedure ComposeProcessResponseProcessNote(json : TJSONWriter; name : string; elem : TFhirProcessResponseProcessNote; noObj : boolean = false);
    procedure ComposeProcessResponse(json : TJSONWriter; name : string; elem : TFhirProcessResponse; noObj : boolean = false);
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PRODUCTPLAN}
    procedure ComposeProductPlanContact(json : TJSONWriter; name : string; elem : TFhirProductPlanContact; noObj : boolean = false);
    procedure ComposeProductPlanCoverage(json : TJSONWriter; name : string; elem : TFhirProductPlanCoverage; noObj : boolean = false);
    procedure ComposeProductPlanCoverageBenefit(json : TJSONWriter; name : string; elem : TFhirProductPlanCoverageBenefit; noObj : boolean = false);
    procedure ComposeProductPlanCoverageBenefitItem(json : TJSONWriter; name : string; elem : TFhirProductPlanCoverageBenefitItem; noObj : boolean = false);
    procedure ComposeProductPlanPlan(json : TJSONWriter; name : string; elem : TFhirProductPlanPlan; noObj : boolean = false);
    procedure ComposeProductPlanPlanCategory(json : TJSONWriter; name : string; elem : TFhirProductPlanPlanCategory; noObj : boolean = false);
    procedure ComposeProductPlanPlanCategoryBenefit(json : TJSONWriter; name : string; elem : TFhirProductPlanPlanCategoryBenefit; noObj : boolean = false);
    procedure ComposeProductPlanPlanCategoryBenefitCost(json : TJSONWriter; name : string; elem : TFhirProductPlanPlanCategoryBenefitCost; noObj : boolean = false);
    procedure ComposeProductPlan(json : TJSONWriter; name : string; elem : TFhirProductPlan; noObj : boolean = false);
{$ENDIF FHIR_PRODUCTPLAN}
{$IFDEF FHIR_PROVENANCE}
    procedure ComposeProvenanceAgent(json : TJSONWriter; name : string; elem : TFhirProvenanceAgent; noObj : boolean = false);
    procedure ComposeProvenanceEntity(json : TJSONWriter; name : string; elem : TFhirProvenanceEntity; noObj : boolean = false);
    procedure ComposeProvenance(json : TJSONWriter; name : string; elem : TFhirProvenance; noObj : boolean = false);
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    procedure ComposeQuestionnaireItem(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItem; noObj : boolean = false);
    procedure ComposeQuestionnaireItemEnableWhen(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItemEnableWhen; noObj : boolean = false);
    procedure ComposeQuestionnaireItemOption(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItemOption; noObj : boolean = false);
    procedure ComposeQuestionnaire(json : TJSONWriter; name : string; elem : TFhirQuestionnaire; noObj : boolean = false);
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    procedure ComposeQuestionnaireResponseItem(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponseItem; noObj : boolean = false);
    procedure ComposeQuestionnaireResponseItemAnswer(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponseItemAnswer; noObj : boolean = false);
    procedure ComposeQuestionnaireResponse(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponse; noObj : boolean = false);
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
    procedure ComposeRelatedPerson(json : TJSONWriter; name : string; elem : TFhirRelatedPerson; noObj : boolean = false);
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    procedure ComposeRequestGroupAction(json : TJSONWriter; name : string; elem : TFhirRequestGroupAction; noObj : boolean = false);
    procedure ComposeRequestGroupActionCondition(json : TJSONWriter; name : string; elem : TFhirRequestGroupActionCondition; noObj : boolean = false);
    procedure ComposeRequestGroupActionRelatedAction(json : TJSONWriter; name : string; elem : TFhirRequestGroupActionRelatedAction; noObj : boolean = false);
    procedure ComposeRequestGroup(json : TJSONWriter; name : string; elem : TFhirRequestGroup; noObj : boolean = false);
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
    procedure ComposeResearchStudyArm(json : TJSONWriter; name : string; elem : TFhirResearchStudyArm; noObj : boolean = false);
    procedure ComposeResearchStudyObjective(json : TJSONWriter; name : string; elem : TFhirResearchStudyObjective; noObj : boolean = false);
    procedure ComposeResearchStudy(json : TJSONWriter; name : string; elem : TFhirResearchStudy; noObj : boolean = false);
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    procedure ComposeResearchSubject(json : TJSONWriter; name : string; elem : TFhirResearchSubject; noObj : boolean = false);
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    procedure ComposeRiskAssessmentPrediction(json : TJSONWriter; name : string; elem : TFhirRiskAssessmentPrediction; noObj : boolean = false);
    procedure ComposeRiskAssessment(json : TJSONWriter; name : string; elem : TFhirRiskAssessment; noObj : boolean = false);
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    procedure ComposeSchedule(json : TJSONWriter; name : string; elem : TFhirSchedule; noObj : boolean = false);
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    procedure ComposeSearchParameterComponent(json : TJSONWriter; name : string; elem : TFhirSearchParameterComponent; noObj : boolean = false);
    procedure ComposeSearchParameter(json : TJSONWriter; name : string; elem : TFhirSearchParameter; noObj : boolean = false);
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
    procedure ComposeSequenceReferenceSeq(json : TJSONWriter; name : string; elem : TFhirSequenceReferenceSeq; noObj : boolean = false);
    procedure ComposeSequenceVariant(json : TJSONWriter; name : string; elem : TFhirSequenceVariant; noObj : boolean = false);
    procedure ComposeSequenceQuality(json : TJSONWriter; name : string; elem : TFhirSequenceQuality; noObj : boolean = false);
    procedure ComposeSequenceQualityRoc(json : TJSONWriter; name : string; elem : TFhirSequenceQualityRoc; noObj : boolean = false);
    procedure ComposeSequenceRepository(json : TJSONWriter; name : string; elem : TFhirSequenceRepository; noObj : boolean = false);
    procedure ComposeSequenceStructureVariant(json : TJSONWriter; name : string; elem : TFhirSequenceStructureVariant; noObj : boolean = false);
    procedure ComposeSequenceStructureVariantOuter(json : TJSONWriter; name : string; elem : TFhirSequenceStructureVariantOuter; noObj : boolean = false);
    procedure ComposeSequenceStructureVariantInner(json : TJSONWriter; name : string; elem : TFhirSequenceStructureVariantInner; noObj : boolean = false);
    procedure ComposeSequence(json : TJSONWriter; name : string; elem : TFhirSequence; noObj : boolean = false);
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
    procedure ComposeServiceDefinition(json : TJSONWriter; name : string; elem : TFhirServiceDefinition; noObj : boolean = false);
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SERVICEREQUEST}
    procedure ComposeServiceRequest(json : TJSONWriter; name : string; elem : TFhirServiceRequest; noObj : boolean = false);
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    procedure ComposeSlot(json : TJSONWriter; name : string; elem : TFhirSlot; noObj : boolean = false);
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    procedure ComposeSpecimenCollection(json : TJSONWriter; name : string; elem : TFhirSpecimenCollection; noObj : boolean = false);
    procedure ComposeSpecimenProcessing(json : TJSONWriter; name : string; elem : TFhirSpecimenProcessing; noObj : boolean = false);
    procedure ComposeSpecimenContainer(json : TJSONWriter; name : string; elem : TFhirSpecimenContainer; noObj : boolean = false);
    procedure ComposeSpecimen(json : TJSONWriter; name : string; elem : TFhirSpecimen; noObj : boolean = false);
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    procedure ComposeSpecimenDefinitionSpecimenToLab(json : TJSONWriter; name : string; elem : TFhirSpecimenDefinitionSpecimenToLab; noObj : boolean = false);
    procedure ComposeSpecimenDefinitionSpecimenToLabContainerAdditive(json : TJSONWriter; name : string; elem : TFhirSpecimenDefinitionSpecimenToLabContainerAdditive; noObj : boolean = false);
    procedure ComposeSpecimenDefinitionSpecimenToLabHandling(json : TJSONWriter; name : string; elem : TFhirSpecimenDefinitionSpecimenToLabHandling; noObj : boolean = false);
    procedure ComposeSpecimenDefinition(json : TJSONWriter; name : string; elem : TFhirSpecimenDefinition; noObj : boolean = false);
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    procedure ComposeStructureDefinitionMapping(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionMapping; noObj : boolean = false);
    procedure ComposeStructureDefinitionSnapshot(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionSnapshot; noObj : boolean = false);
    procedure ComposeStructureDefinitionDifferential(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionDifferential; noObj : boolean = false);
    procedure ComposeStructureDefinition(json : TJSONWriter; name : string; elem : TFhirStructureDefinition; noObj : boolean = false);
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    procedure ComposeStructureMapStructure(json : TJSONWriter; name : string; elem : TFhirStructureMapStructure; noObj : boolean = false);
    procedure ComposeStructureMapGroup(json : TJSONWriter; name : string; elem : TFhirStructureMapGroup; noObj : boolean = false);
    procedure ComposeStructureMapGroupInput(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupInput; noObj : boolean = false);
    procedure ComposeStructureMapGroupRule(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRule; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleSource(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleSource; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleTarget(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleTarget; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleTargetParameter(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleTargetParameter; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleDependent(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleDependent; noObj : boolean = false);
    procedure ComposeStructureMap(json : TJSONWriter; name : string; elem : TFhirStructureMap; noObj : boolean = false);
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    procedure ComposeSubscriptionChannel(json : TJSONWriter; name : string; elem : TFhirSubscriptionChannel; noObj : boolean = false);
    procedure ComposeSubscription(json : TJSONWriter; name : string; elem : TFhirSubscription; noObj : boolean = false);
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
    procedure ComposeSubstanceInstance(json : TJSONWriter; name : string; elem : TFhirSubstanceInstance; noObj : boolean = false);
    procedure ComposeSubstanceIngredient(json : TJSONWriter; name : string; elem : TFhirSubstanceIngredient; noObj : boolean = false);
    procedure ComposeSubstance(json : TJSONWriter; name : string; elem : TFhirSubstance; noObj : boolean = false);
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
    procedure ComposeSubstancePolymerMonomerSet(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerMonomerSet; noObj : boolean = false);
    procedure ComposeSubstancePolymerMonomerSetStartingMaterial(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerMonomerSetStartingMaterial; noObj : boolean = false);
    procedure ComposeSubstancePolymerRepeat(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerRepeat; noObj : boolean = false);
    procedure ComposeSubstancePolymerRepeatRepeatUnit(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerRepeatRepeatUnit; noObj : boolean = false);
    procedure ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation; noObj : boolean = false);
    procedure ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation; noObj : boolean = false);
    procedure ComposeSubstancePolymer(json : TJSONWriter; name : string; elem : TFhirSubstancePolymer; noObj : boolean = false);
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
    procedure ComposeSubstanceReferenceInformationGene(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationGene; noObj : boolean = false);
    procedure ComposeSubstanceReferenceInformationGeneElement(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationGeneElement; noObj : boolean = false);
    procedure ComposeSubstanceReferenceInformationClassification(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationClassification; noObj : boolean = false);
    procedure ComposeSubstanceReferenceInformationRelationship(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationRelationship; noObj : boolean = false);
    procedure ComposeSubstanceReferenceInformationTarget(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationTarget; noObj : boolean = false);
    procedure ComposeSubstanceReferenceInformation(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformation; noObj : boolean = false);
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
    procedure ComposeSubstanceSpecificationMoiety(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationMoiety; noObj : boolean = false);
    procedure ComposeSubstanceSpecificationProperty(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationProperty; noObj : boolean = false);
    procedure ComposeSubstanceSpecificationStructure(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationStructure; noObj : boolean = false);
    procedure ComposeSubstanceSpecificationStructureIsotope(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationStructureIsotope; noObj : boolean = false);
    procedure ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight; noObj : boolean = false);
    procedure ComposeSubstanceSpecificationStructureStructuralRepresentation(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationStructureStructuralRepresentation; noObj : boolean = false);
    procedure ComposeSubstanceSpecificationSubstanceCode(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationSubstanceCode; noObj : boolean = false);
    procedure ComposeSubstanceSpecificationSubstanceName(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationSubstanceName; noObj : boolean = false);
    procedure ComposeSubstanceSpecificationSubstanceNameOfficialName(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationSubstanceNameOfficialName; noObj : boolean = false);
    procedure ComposeSubstanceSpecification(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecification; noObj : boolean = false);
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
    procedure ComposeSupplyDeliverySuppliedItem(json : TJSONWriter; name : string; elem : TFhirSupplyDeliverySuppliedItem; noObj : boolean = false);
    procedure ComposeSupplyDelivery(json : TJSONWriter; name : string; elem : TFhirSupplyDelivery; noObj : boolean = false);
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    procedure ComposeSupplyRequestParameter(json : TJSONWriter; name : string; elem : TFhirSupplyRequestParameter; noObj : boolean = false);
    procedure ComposeSupplyRequest(json : TJSONWriter; name : string; elem : TFhirSupplyRequest; noObj : boolean = false);
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    procedure ComposeTaskRestriction(json : TJSONWriter; name : string; elem : TFhirTaskRestriction; noObj : boolean = false);
    procedure ComposeTaskInput(json : TJSONWriter; name : string; elem : TFhirTaskInput; noObj : boolean = false);
    procedure ComposeTaskOutput(json : TJSONWriter; name : string; elem : TFhirTaskOutput; noObj : boolean = false);
    procedure ComposeTask(json : TJSONWriter; name : string; elem : TFhirTask; noObj : boolean = false);
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    procedure ComposeTerminologyCapabilitiesCodeSystem(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesCodeSystem; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersion(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesCodeSystemVersion; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersionFilter(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesExpansion(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesExpansion; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesValidateCode(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesValidateCode; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesTranslation(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesTranslation; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesClosure(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesClosure; noObj : boolean = false);
    procedure ComposeTerminologyCapabilities(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilities; noObj : boolean = false);
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    procedure ComposeTestReportParticipant(json : TJSONWriter; name : string; elem : TFhirTestReportParticipant; noObj : boolean = false);
    procedure ComposeTestReportSetup(json : TJSONWriter; name : string; elem : TFhirTestReportSetup; noObj : boolean = false);
    procedure ComposeTestReportSetupAction(json : TJSONWriter; name : string; elem : TFhirTestReportSetupAction; noObj : boolean = false);
    procedure ComposeTestReportSetupActionOperation(json : TJSONWriter; name : string; elem : TFhirTestReportSetupActionOperation; noObj : boolean = false);
    procedure ComposeTestReportSetupActionAssert(json : TJSONWriter; name : string; elem : TFhirTestReportSetupActionAssert; noObj : boolean = false);
    procedure ComposeTestReportTest(json : TJSONWriter; name : string; elem : TFhirTestReportTest; noObj : boolean = false);
    procedure ComposeTestReportTestAction(json : TJSONWriter; name : string; elem : TFhirTestReportTestAction; noObj : boolean = false);
    procedure ComposeTestReportTeardown(json : TJSONWriter; name : string; elem : TFhirTestReportTeardown; noObj : boolean = false);
    procedure ComposeTestReportTeardownAction(json : TJSONWriter; name : string; elem : TFhirTestReportTeardownAction; noObj : boolean = false);
    procedure ComposeTestReport(json : TJSONWriter; name : string; elem : TFhirTestReport; noObj : boolean = false);
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    procedure ComposeTestScriptOrigin(json : TJSONWriter; name : string; elem : TFhirTestScriptOrigin; noObj : boolean = false);
    procedure ComposeTestScriptDestination(json : TJSONWriter; name : string; elem : TFhirTestScriptDestination; noObj : boolean = false);
    procedure ComposeTestScriptMetadata(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadata; noObj : boolean = false);
    procedure ComposeTestScriptMetadataLink(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadataLink; noObj : boolean = false);
    procedure ComposeTestScriptMetadataCapability(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadataCapability; noObj : boolean = false);
    procedure ComposeTestScriptFixture(json : TJSONWriter; name : string; elem : TFhirTestScriptFixture; noObj : boolean = false);
    procedure ComposeTestScriptVariable(json : TJSONWriter; name : string; elem : TFhirTestScriptVariable; noObj : boolean = false);
    procedure ComposeTestScriptRule(json : TJSONWriter; name : string; elem : TFhirTestScriptRule; noObj : boolean = false);
    procedure ComposeTestScriptRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptRuleParam; noObj : boolean = false);
    procedure ComposeTestScriptRuleset(json : TJSONWriter; name : string; elem : TFhirTestScriptRuleset; noObj : boolean = false);
    procedure ComposeTestScriptRulesetRule(json : TJSONWriter; name : string; elem : TFhirTestScriptRulesetRule; noObj : boolean = false);
    procedure ComposeTestScriptRulesetRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptRulesetRuleParam; noObj : boolean = false);
    procedure ComposeTestScriptSetup(json : TJSONWriter; name : string; elem : TFhirTestScriptSetup; noObj : boolean = false);
    procedure ComposeTestScriptSetupAction(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupAction; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionOperation(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionOperation; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionOperationRequestHeader(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionOperationRequestHeader; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssert(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssert; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRule(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRule; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRuleParam; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRuleset(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRuleset; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRulesetRule(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRulesetRule; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRulesetRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRulesetRuleParam; noObj : boolean = false);
    procedure ComposeTestScriptTest(json : TJSONWriter; name : string; elem : TFhirTestScriptTest; noObj : boolean = false);
    procedure ComposeTestScriptTestAction(json : TJSONWriter; name : string; elem : TFhirTestScriptTestAction; noObj : boolean = false);
    procedure ComposeTestScriptTeardown(json : TJSONWriter; name : string; elem : TFhirTestScriptTeardown; noObj : boolean = false);
    procedure ComposeTestScriptTeardownAction(json : TJSONWriter; name : string; elem : TFhirTestScriptTeardownAction; noObj : boolean = false);
    procedure ComposeTestScript(json : TJSONWriter; name : string; elem : TFhirTestScript; noObj : boolean = false);
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_USERSESSION}
    procedure ComposeUserSessionStatus(json : TJSONWriter; name : string; elem : TFhirUserSessionStatus; noObj : boolean = false);
    procedure ComposeUserSessionContext(json : TJSONWriter; name : string; elem : TFhirUserSessionContext; noObj : boolean = false);
    procedure ComposeUserSession(json : TJSONWriter; name : string; elem : TFhirUserSession; noObj : boolean = false);
{$ENDIF FHIR_USERSESSION}
{$IFDEF FHIR_VALUESET}
    procedure ComposeValueSetCompose(json : TJSONWriter; name : string; elem : TFhirValueSetCompose; noObj : boolean = false);
    procedure ComposeValueSetComposeInclude(json : TJSONWriter; name : string; elem : TFhirValueSetComposeInclude; noObj : boolean = false);
    procedure ComposeValueSetComposeIncludeConcept(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeConcept; noObj : boolean = false);
    procedure ComposeValueSetComposeIncludeConceptDesignation(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeConceptDesignation; noObj : boolean = false);
    procedure ComposeValueSetComposeIncludeFilter(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeFilter; noObj : boolean = false);
    procedure ComposeValueSetExpansion(json : TJSONWriter; name : string; elem : TFhirValueSetExpansion; noObj : boolean = false);
    procedure ComposeValueSetExpansionParameter(json : TJSONWriter; name : string; elem : TFhirValueSetExpansionParameter; noObj : boolean = false);
    procedure ComposeValueSetExpansionContains(json : TJSONWriter; name : string; elem : TFhirValueSetExpansionContains; noObj : boolean = false);
    procedure ComposeValueSet(json : TJSONWriter; name : string; elem : TFhirValueSet; noObj : boolean = false);
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    procedure ComposeVerificationResultPrimarySource(json : TJSONWriter; name : string; elem : TFhirVerificationResultPrimarySource; noObj : boolean = false);
    procedure ComposeVerificationResultAttestation(json : TJSONWriter; name : string; elem : TFhirVerificationResultAttestation; noObj : boolean = false);
    procedure ComposeVerificationResultValidator(json : TJSONWriter; name : string; elem : TFhirVerificationResultValidator; noObj : boolean = false);
    procedure ComposeVerificationResult(json : TJSONWriter; name : string; elem : TFhirVerificationResult; noObj : boolean = false);
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    procedure ComposeVisionPrescriptionDispense(json : TJSONWriter; name : string; elem : TFhirVisionPrescriptionDispense; noObj : boolean = false);
    procedure ComposeVisionPrescription(json : TJSONWriter; name : string; elem : TFhirVisionPrescription; noObj : boolean = false);
{$ENDIF FHIR_VISIONPRESCRIPTION}
    procedure ComposeResource(json : TJSONWriter; resource : TFhirResource; links : TFhirBundleLinkList); override;
    procedure ComposeBase(json : TJSONWriter; name : String; base : TFHIRObject); override;
  end;


implementation

{ TFHIRJsonParser }

procedure TFHIRJsonParser.ParseElement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElement(jsn)); {2}
end;

function TFHIRJsonParser.ParseElement(jsn : TJsonObject) : TFhirElement;
begin
  result := TFhirElement.create;
  try
    ParseElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonComposer.ComposeElement(json : TJSONWriter; name : string; elem : TFhirElement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdValue(json, 'id', elem.idElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdProps(json, 'id', elem.idElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.extensionList.Count > 0) then
  begin
    json.valueArray('extension');
    for i := 0 to elem.extensionList.Count - 1 do
      ComposeExtension(json, '', elem.extensionList[i]); {z - Extension}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBackboneElement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBackboneElement(jsn)); {2}
end;

function TFHIRJsonParser.ParseBackboneElement(jsn : TJsonObject) : TFhirBackboneElement;
begin
  result := TFhirBackboneElement.create;
  try
    ParseBackboneElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonComposer.ComposeBackboneElement(json : TJSONWriter; name : string; elem : TFhirBackboneElement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.modifierExtensionList.Count > 0) then
  begin
    json.valueArray('modifierExtension');
    for i := 0 to elem.modifierExtensionList.Count - 1 do
      ComposeExtension(json, '', elem.modifierExtensionList[i]); {z - Extension}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementProperties(jsn : TJsonObject; element : TFhirElement);
begin
  parseComments(element, jsn);

  element.LocationStart := jsn.LocationStart;
  element.LocationEnd := jsn.LocationEnd;
  if jsn.has('id') then
    element.Id := jsn['id']
  else if jsn.has('_id') then
    element.Id := jsn['_id'];
  if jsn.has('extension') then
    iterateArray(jsn.vArr['extension'], element.extensionList, parseExtension);
end;

procedure TFHIRJsonParser.ParseBackboneElementProperties(jsn : TJsonObject; element : TFhirBackboneElement);
begin
  parseElementProperties(jsn, element);

  if jsn.has('modifierExtension') then
    iterateArray(jsn.vArr['modifierExtension'], element.modifierExtensionList, parseExtension);
end;

Procedure TFHIRJsonComposer.ComposeElementProperties(json : TJSONWriter; elem : TFhirElement);
var
  i : integer;
begin
  {no-comments composeComments(json, elem);}
  Prop(json, 'id', elem.Id);
  if elem.hasExtensionList then
  begin
    json.valueArray('extension');
    for i := 0 to elem.extensionList.Count - 1 do
      ComposeExtension(json, '',elem.extensionList[i]);
    json.FinishArray;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBackboneElementProperties(json : TJSONWriter; elem : TFhirBackboneElement);
var
  i : integer;
begin
  ComposeElementProperties(json, elem);
  if elem.hasModifierExtensionList then
  begin
    json.valueArray('modifierExtension');
    for i := 0 to elem.modifierExtensionList.Count - 1 do
      ComposeExtension(json, '', elem.modifierExtensionList[i]);
    json.FinishArray;
  end;
end;

procedure TFHIRJsonParser.ParseEnum(path, value : string; jsn : TJsonObject; ctxt : TFHIRObjectList; Const aNames, aSystems : Array Of String);
begin
  ctxt.add(ParseEnum(path, value, jsn, aNames, aSystems));
end;

function TFHIRJsonParser.ParseEnum(path, value : string; jsn : TJsonObject; Const aNames, aSystems : Array Of String) : TFHIREnum;
var
  i : integer;
begin
  i := StringArrayIndexOfSensitive(aNames, value);
  if (value <> '') and (i < 0) then
    raise Exception.create('unknown code: '+value+' from a set of choices of '+StringArrayToCommaString(aNames)+' for "'+path+'"');
  result := TFHIREnum.create;
  try
    result.value := value;
    result.system := aSystems[i];
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeEnumValue(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
begin
  if (value = nil) or (value.Value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeEnumProps(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments) }) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseDate(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDate(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseDate(value : string; jsn : TJsonObject) : TFHIRDate;
begin
  result := TFhirDate.Create;
  try
     result.value := toTDateTimeEx(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDateValue(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
begin
  if (value = nil) or (value.value.null) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, asString(value.value));
end;

Procedure TFHIRJsonComposer.ComposeDateProps(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseDateTime(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDateTime(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseDateTime(value : string; jsn : TJsonObject) : TFHIRDateTime;
begin
  result := TFhirDateTime.Create;
  try
     result.value := toTDateTimeEx(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDateTimeValue(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
begin
  if (value = nil) or (value.value.null) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, asString(value.value));
end;

Procedure TFHIRJsonComposer.ComposeDateTimeProps(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseString(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseString(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseString(value : string; jsn : TJsonObject) : TFHIRString;
begin
  result := TFhirString.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeStringValue(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeStringProps(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseInteger(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInteger(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseInteger(value : string; jsn : TJsonObject) : TFHIRInteger;
begin
  result := TFhirInteger.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeIntegerValue(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    propNumber(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeIntegerProps(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseUri(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUri(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUri(value : string; jsn : TJsonObject) : TFHIRUri;
begin
  result := TFhirUri.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUriValue(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeUriProps(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseInstant(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInstant(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseInstant(value : string; jsn : TJsonObject) : TFHIRInstant;
begin
  result := TFhirInstant.Create;
  try
     result.value := toTDateTimeEx(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeInstantValue(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
begin
  if (value = nil) or (value.value.null) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, asString(value.value));
end;

Procedure TFHIRJsonComposer.ComposeInstantProps(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseXhtml(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseXhtml(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseXhtml(value : string; jsn : TJsonObject) : TFHIRXhtml;
begin
  result := TFhirXhtml.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeXhtmlValue(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeXhtmlProps(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseBoolean(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBoolean(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseBoolean(value : string; jsn : TJsonObject) : TFHIRBoolean;
begin
  result := TFhirBoolean.Create;
  try
    result.value := StringToBoolean(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBooleanValue(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
begin
  if (value = nil) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeBooleanProps(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseBase64Binary(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBase64Binary(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseBase64Binary(value : string; jsn : TJsonObject) : TFHIRBase64Binary;
begin
  result := TFhirBase64Binary.Create;
  try
     result.value := toTBytes(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBase64BinaryValue(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
begin
  if (value = nil) or (value.value = nil) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, asString(value.value));
end;

Procedure TFHIRJsonComposer.ComposeBase64BinaryProps(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseTime(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTime(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseTime(value : string; jsn : TJsonObject) : TFHIRTime;
begin
  result := TFhirTime.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeTimeValue(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeTimeProps(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseDecimal(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDecimal(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseDecimal(value : string; jsn : TJsonObject) : TFHIRDecimal;
begin
  result := TFhirDecimal.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDecimalValue(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    propNumber(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeDecimalProps(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseCode(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCode(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseCode(value : string; jsn : TJsonObject) : TFHIRCode;
begin
  result := TFhirCode.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeCodeValue(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeCodeProps(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseOid(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOid(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseOid(value : string; jsn : TJsonObject) : TFHIROid;
begin
  result := TFhirOid.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeOidValue(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeOidProps(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseUuid(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUuid(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUuid(value : string; jsn : TJsonObject) : TFHIRUuid;
begin
  result := TFhirUuid.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUuidValue(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeUuidProps(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseMarkdown(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMarkdown(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseMarkdown(value : string; jsn : TJsonObject) : TFHIRMarkdown;
begin
  result := TFhirMarkdown.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeMarkdownValue(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeMarkdownProps(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseUnsignedInt(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUnsignedInt(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUnsignedInt(value : string; jsn : TJsonObject) : TFHIRUnsignedInt;
begin
  result := TFhirUnsignedInt.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUnsignedIntValue(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    propNumber(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeUnsignedIntProps(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseId(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseId(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseId(value : string; jsn : TJsonObject) : TFHIRId;
begin
  result := TFhirId.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeIdValue(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeIdProps(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParsePositiveInt(value : string; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePositiveInt(value, jsn)) {1};
end;

function TFHIRJsonParser.ParsePositiveInt(value : string; jsn : TJsonObject) : TFHIRPositiveInt;
begin
  result := TFhirPositiveInt.Create;
  try
    result.value := value;
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposePositiveIntValue(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    propNumber(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposePositiveIntProps(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseResourceProperties(jsn : TJsonObject; resource : TFhirResource);
begin
  resource.LocationStart := jsn.LocationStart;
  resource.LocationEnd := jsn.LocationEnd;
  if jsn.has('id') or jsn.has('_id') then
    resource.idElement := ParseId(jsn['id'], jsn.vObj['_id']);{q}
  if jsn.has('meta') then
    resource.meta := ParseMeta(jsn.vObj['meta']);{q3}
  if jsn.has('implicitRules') or jsn.has('_implicitRules') then
    resource.implicitRulesElement := ParseUri(jsn['implicitRules'], jsn.vObj['_implicitRules']);{q}
  if jsn.has('language') or jsn.has('_language') then
    resource.languageElement := ParseCode(jsn['language'], jsn.vObj['_language']);{q}
end;

Procedure TFHIRJsonComposer.ComposeResourceProperties(json : TJSONWriter; elem : TFhirResource);
begin
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdValue(json, 'id', elem.idElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdProps(json, 'id', elem.idElement, false);
  if not elem.noCompose and doCompose('meta') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMeta(json, 'meta', elem.meta); {a}
  if not elem.noCompose and doCompose('implicitRules') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'implicitRules', elem.implicitRulesElement, false);
  if not elem.noCompose and doCompose('implicitRules') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'implicitRules', elem.implicitRulesElement, false);
  if not elem.noCompose and doCompose('language') and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and doCompose('language') and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
end;

procedure TFHIRJsonParser.ParseDomainResourceProperties(jsn : TJsonObject; resource : TFhirDomainResource);
begin
  ParseResourceProperties(jsn, resource);
  if jsn.has('text') then
    resource.text := ParseNarrative(jsn.vObj['text']);{q3}
  if jsn.has('contained') then
    iterateArray(jsn.vArr['contained'], resource.containedList, parseInnerResource);
  if jsn.has('extension') then
    iterateArray(jsn.vArr['extension'], resource.extensionList, parseExtension);
  if jsn.has('modifierExtension') then
    iterateArray(jsn.vArr['modifierExtension'], resource.modifierExtensionList, parseExtension);
end;

Procedure TFHIRJsonComposer.ComposeDomainResourceProperties(json : TJSONWriter; elem : TFhirDomainResource);
var
  i : integer{z.b};
begin
  ComposeResourceProperties(json, elem);
  if not elem.noCompose and doCompose('text') and (SummaryOption in [soFull, soText]) then
    ComposeNarrative(json, 'text', elem.text); {a}
  if not elem.noCompose and doCompose('contained') and (SummaryOption in [soFull, soData]) and (elem.containedList.Count > 0) then
  begin
    json.valueArray('contained');
    for i := 0 to elem.containedList.Count - 1 do
      ComposeInnerResource(json, '', elem, elem.containedList[i]); {z - Resource}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('extension') and (SummaryOption in [soFull, soData]) and (elem.extensionList.Count > 0) then
  begin
    json.valueArray('extension');
    for i := 0 to elem.extensionList.Count - 1 do
      ComposeExtension(json, '', elem.extensionList[i]); {z - Extension}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('modifierExtension') and (SummaryOption in [soFull, soData]) and (elem.modifierExtensionList.Count > 0) then
  begin
    json.valueArray('modifierExtension');
    for i := 0 to elem.modifierExtensionList.Count - 1 do
      ComposeExtension(json, '', elem.modifierExtensionList[i]); {z - Extension}
    json.FinishArray;
  end;
end;

{$IFDEF FHIR_PARAMETERS}
procedure TFHIRJsonParser.ParseParametersParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseParametersParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseParametersParameter(jsn : TJsonObject) : TFhirParametersParameter;
begin
  result := TFhirParametersParameter.create;
  try
    ParseParametersParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseParametersParameterProperties(jsn : TJsonObject; result : TFhirParametersParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueDosage') {a4} then
      result.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueContactDetail') {a4} then
      result.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      result.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      result.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueParameterDefinition') {a4} then
      result.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      result.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      result.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      result.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn['valueUri'], jsn.vObj['_valueUri']);
    if jsn.has('resource') then
        result.resource := ParseInnerResource(jsn.vObj['resource']);{q3}
    if jsn.has('part') then
      iterateArray(jsn.vArr['part'], result.partList, parseParametersParameter);
end;

procedure TFHIRJsonComposer.ComposeParametersParameter(json : TJSONWriter; name : string; elem : TFhirParametersParameter; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(json, 'resource', elem, elem.resource); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.partList.Count > 0) then
  begin
    json.valueArray('part');
    for i := 0 to elem.partList.Count - 1 do
      ComposeParametersParameter(json, '', elem.partList[i]); {z - @Parameters.parameter}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseParameters(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseParameters(jsn)); {2}
end;

function TFHIRJsonParser.ParseParameters(jsn : TJsonObject) : TFhirParameters;
begin
  result := TFhirParameters.create;
  try
    ParseParametersProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseParametersProperties(jsn : TJsonObject; result : TFhirParameters);
begin
    ParseResourceProperties(jsn, result);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseParametersParameter);
end;

procedure TFHIRJsonComposer.ComposeParameters(json : TJSONWriter; name : string; elem : TFhirParameters; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeResourceProperties(json, elem);
  if not elem.noCompose and doCompose('parameter') and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeParametersParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PARAMETERS}
procedure TFHIRJsonParser.ParseExtension(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExtension(jsn)); {2}
end;

function TFHIRJsonParser.ParseExtension(jsn : TJsonObject) : TFhirExtension;
begin
  result := TFhirExtension.create;
  try
    ParseExtensionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExtensionProperties(jsn : TJsonObject; result : TFhirExtension);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueDosage') {a4} then
      result.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueContactDetail') {a4} then
      result.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      result.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      result.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueParameterDefinition') {a4} then
      result.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      result.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      result.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      result.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeExtension(json : TJSONWriter; name : string; elem : TFhirExtension; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNarrative(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNarrative(jsn)); {2}
end;

function TFHIRJsonParser.ParseNarrative(jsn : TJsonObject) : TFhirNarrative;
begin
  result := TFhirNarrative.create;
  try
    ParseNarrativeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNarrativeProperties(jsn : TJsonObject; result : TFhirNarrative);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirNarrativeStatusEnum, SYSTEMS_TFhirNarrativeStatusEnum);
    if jsn.has('div') then
        result.div_ := ParseXHtmlNode(jsn.path+'.div', jsn['div']);{q2}
end;

procedure TFHIRJsonComposer.ComposeNarrative(json : TJSONWriter; name : string; elem : TFhirNarrative; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirNarrativeStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirNarrativeStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeXHtmlNode(json, 'div', elem.div_); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContributor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContributor(jsn)); {2}
end;

function TFHIRJsonParser.ParseContributor(jsn : TJsonObject) : TFhirContributor;
begin
  result := TFhirContributor.create;
  try
    ParseContributorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContributorProperties(jsn : TJsonObject; result : TFhirContributor);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirContributorTypeEnum, SYSTEMS_TFhirContributorTypeEnum);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
end;

procedure TFHIRJsonComposer.ComposeContributor(json : TJSONWriter; name : string; elem : TFhirContributor; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirContributorTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirContributorTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAttachment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAttachment(jsn)); {2}
end;

function TFHIRJsonParser.ParseAttachment(jsn : TJsonObject) : TFhirAttachment;
begin
  result := TFhirAttachment.create;
  try
    ParseAttachmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAttachmentProperties(jsn : TJsonObject; result : TFhirAttachment);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('contentType') or jsn.has('_contentType') then
        result.contentTypeElement := ParseCode(jsn['contentType'], jsn.vObj['_contentType']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseCode(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('data') or jsn.has('_data') then
        result.dataElement := ParseBase64Binary(jsn['data'], jsn.vObj['_data']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('size') or jsn.has('_size') then
        result.sizeElement := ParseUnsignedInt(jsn['size'], jsn.vObj['_size']);{q}
    if jsn.has('hash') or jsn.has('_hash') then
        result.hashElement := ParseBase64Binary(jsn['hash'], jsn.vObj['_hash']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('creation') or jsn.has('_creation') then
        result.creationElement := ParseDateTime(jsn['creation'], jsn.vObj['_creation']);{q}
end;

procedure TFHIRJsonComposer.ComposeAttachment(json : TJSONWriter; name : string; elem : TFhirAttachment; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'contentType', elem.contentTypeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'contentType', elem.contentTypeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryValue(json, 'data', elem.dataElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryProps(json, 'data', elem.dataElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedIntValue(json, 'size', elem.sizeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedIntProps(json, 'size', elem.sizeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryValue(json, 'hash', elem.hashElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryProps(json, 'hash', elem.hashElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeValue(json, 'creation', elem.creationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeProps(json, 'creation', elem.creationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDataRequirementCodeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirementCodeFilter(jsn)); {2}
end;

function TFHIRJsonParser.ParseDataRequirementCodeFilter(jsn : TJsonObject) : TFhirDataRequirementCodeFilter;
begin
  result := TFhirDataRequirementCodeFilter.create;
  try
    ParseDataRequirementCodeFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementCodeFilterProperties(jsn : TJsonObject; result : TFhirDataRequirementCodeFilter);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
    if jsn.has('valueSetReference') {a3} then
      result.valueSet := ParseReference(jsn.vObj['valueSetReference']);
    if jsn.has('valueSetUri') or jsn.has('_valueSetUri') then
      result.valueSet := parseUri(jsn['valueSetUri'], jsn.vObj['_valueSetUri']);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeDataRequirementCodeFilter(json : TJSONWriter; name : string; elem : TFhirDataRequirementCodeFilter; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSet is TFhirReference) then
    ComposeReference(json, 'valueSetReference', TFhirReference(elem.valueSet))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSet is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
    ComposeUriProps(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(json, '', elem.codeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDataRequirementDateFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirementDateFilter(jsn)); {2}
end;

function TFHIRJsonParser.ParseDataRequirementDateFilter(jsn : TJsonObject) : TFhirDataRequirementDateFilter;
begin
  result := TFhirDataRequirementDateFilter.create;
  try
    ParseDataRequirementDateFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementDateFilterProperties(jsn : TJsonObject; result : TFhirDataRequirementDateFilter);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
end;

procedure TFHIRJsonComposer.ComposeDataRequirementDateFilter(json : TJSONWriter; name : string; elem : TFhirDataRequirementDateFilter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDataRequirement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirement(jsn)); {2}
end;

function TFHIRJsonParser.ParseDataRequirement(jsn : TJsonObject) : TFhirDataRequirement;
begin
  result := TFhirDataRequirement.create;
  try
    ParseDataRequirementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementProperties(jsn : TJsonObject; result : TFhirDataRequirement);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum);
      if jsn.has('profile') or jsn.has('_profile') then
      iteratePrimitiveArray(jsn.vArr['profile'], jsn.vArr['_profile'], result.profileList, parseUri);
      if jsn.has('mustSupport') or jsn.has('_mustSupport') then
      iteratePrimitiveArray(jsn.vArr['mustSupport'], jsn.vArr['_mustSupport'], result.mustSupportList, parseString);
    if jsn.has('codeFilter') then
      iterateArray(jsn.vArr['codeFilter'], result.codeFilterList, parseDataRequirementCodeFilter);
    if jsn.has('dateFilter') then
      iterateArray(jsn.vArr['dateFilter'], result.dateFilterList, parseDataRequirementDateFilter);
end;

procedure TFHIRJsonComposer.ComposeDataRequirement(json : TJSONWriter; name : string; elem : TFhirDataRequirement; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.profileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.profileList.Count - 1 do
    begin
      ext := ext or ((elem.profileList[i].id <> '') or (elem.profileList[i].hasExtensionList) {no-comments or (elem.profileList[i].hasComments)});
      val := val or (elem.profileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('profile');
      for i := 0 to elem.profileList.Count - 1 do
        ComposeUriValue(json, '',elem.profileList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_profile');
      for i := 0 to elem.profileList.Count - 1 do
        ComposeUriProps(json, '',elem.profileList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.mustSupportList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.mustSupportList.Count - 1 do
    begin
      ext := ext or ((elem.mustSupportList[i].id <> '') or (elem.mustSupportList[i].hasExtensionList) {no-comments or (elem.mustSupportList[i].hasComments)});
      val := val or (elem.mustSupportList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('mustSupport');
      for i := 0 to elem.mustSupportList.Count - 1 do
        ComposeStringValue(json, '',elem.mustSupportList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_mustSupport');
      for i := 0 to elem.mustSupportList.Count - 1 do
        ComposeStringProps(json, '',elem.mustSupportList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.codeFilterList.Count > 0) then
  begin
    json.valueArray('codeFilter');
    for i := 0 to elem.codeFilterList.Count - 1 do
      ComposeDataRequirementCodeFilter(json, '', elem.codeFilterList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.dateFilterList.Count > 0) then
  begin
    json.valueArray('dateFilter');
    for i := 0 to elem.dateFilterList.Count - 1 do
      ComposeDataRequirementDateFilter(json, '', elem.dateFilterList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDosage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDosage(jsn)); {2}
end;

function TFHIRJsonParser.ParseDosage(jsn : TJsonObject) : TFhirDosage;
begin
  result := TFhirDosage.create;
  try
    ParseDosageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDosageProperties(jsn : TJsonObject; result : TFhirDosage);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParseInteger(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
    if jsn.has('additionalInstruction') then
      iterateArray(jsn.vArr['additionalInstruction'], result.additionalInstructionList, parseCodeableConcept);
    if jsn.has('patientInstruction') or jsn.has('_patientInstruction') then
        result.patientInstructionElement := ParseString(jsn['patientInstruction'], jsn.vObj['_patientInstruction']);{q}
    if jsn.has('timing') then
        result.timing := ParseTiming(jsn.vObj['timing']);{q3}
    if jsn.has('asNeededCodeableConcept') {a4} then
      result.asNeeded := ParseCodeableConcept(jsn.vObj['asNeededCodeableConcept']);
    if jsn.has('asNeededBoolean') or jsn.has('_asNeededBoolean') then
      result.asNeeded := parseBoolean(jsn['asNeededBoolean'], jsn.vObj['_asNeededBoolean']);
    if jsn.has('site') then
        result.site := ParseCodeableConcept(jsn.vObj['site']);{q3}
    if jsn.has('route') then
        result.route := ParseCodeableConcept(jsn.vObj['route']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('doseRange') {a4} then
      result.dose := ParseRange(jsn.vObj['doseRange']);
    if jsn.has('doseQuantity') {a4} then
      result.dose := ParseQuantity(jsn.vObj['doseQuantity']);
    if jsn.has('maxDosePerPeriod') then
        result.maxDosePerPeriod := ParseRatio(jsn.vObj['maxDosePerPeriod']);{q3}
    if jsn.has('maxDosePerAdministration') then
        result.maxDosePerAdministration := ParseQuantity(jsn.vObj['maxDosePerAdministration']);{q3}
    if jsn.has('maxDosePerLifetime') then
        result.maxDosePerLifetime := ParseQuantity(jsn.vObj['maxDosePerLifetime']);{q3}
    if jsn.has('rateRatio') {a4} then
      result.rate := ParseRatio(jsn.vObj['rateRatio']);
    if jsn.has('rateRange') {a4} then
      result.rate := ParseRange(jsn.vObj['rateRange']);
    if jsn.has('rateQuantity') {a4} then
      result.rate := ParseQuantity(jsn.vObj['rateQuantity']);
end;

procedure TFHIRJsonComposer.ComposeDosage(json : TJSONWriter; name : string; elem : TFhirDosage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.additionalInstructionList.Count > 0) then
  begin
    json.valueArray('additionalInstruction');
    for i := 0 to elem.additionalInstructionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.additionalInstructionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'patientInstruction', elem.patientInstructionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'patientInstruction', elem.patientInstructionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeTiming(json, 'timing', elem.timing); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.asNeeded is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'asNeededCodeableConcept', TFhirCodeableConcept(elem.asNeeded)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.asNeeded is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'asNeededBoolean', TFhirBoolean(elem.asNeeded), false);
    ComposeBooleanProps(json, 'asNeededBoolean', TFhirBoolean(elem.asNeeded), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'site', elem.site); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'route', elem.route); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.dose is TFhirRange) then 
    ComposeRange(json, 'doseRange', TFhirRange(elem.dose)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.dose is TFhirQuantity) then 
    ComposeQuantity(json, 'doseQuantity', TFhirQuantity(elem.dose)) ;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeRatio(json, 'maxDosePerPeriod', elem.maxDosePerPeriod); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'maxDosePerAdministration', elem.maxDosePerAdministration); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'maxDosePerLifetime', elem.maxDosePerLifetime); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.rate is TFhirRatio) then 
    ComposeRatio(json, 'rateRatio', TFhirRatio(elem.rate)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.rate is TFhirRange) then 
    ComposeRange(json, 'rateRange', TFhirRange(elem.rate)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.rate is TFhirQuantity) then 
    ComposeQuantity(json, 'rateQuantity', TFhirQuantity(elem.rate)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMarketingStatus(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMarketingStatus(jsn)); {2}
end;

function TFHIRJsonParser.ParseMarketingStatus(jsn : TJsonObject) : TFhirMarketingStatus;
begin
  result := TFhirMarketingStatus.create;
  try
    ParseMarketingStatusProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMarketingStatusProperties(jsn : TJsonObject; result : TFhirMarketingStatus);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('country') then
        result.country := ParseCodeableConcept(jsn.vObj['country']);{q3}
    if jsn.has('jurisdiction') then
        result.jurisdiction := ParseCodeableConcept(jsn.vObj['jurisdiction']);{q3}
    if jsn.has('status') then
        result.status := ParseCodeableConcept(jsn.vObj['status']);{q3}
    if jsn.has('dateRange') then
        result.dateRange := ParsePeriod(jsn.vObj['dateRange']);{q3}
    if jsn.has('restoreDate') or jsn.has('_restoreDate') then
        result.restoreDateElement := ParseDateTime(jsn['restoreDate'], jsn.vObj['_restoreDate']);{q}
end;

procedure TFHIRJsonComposer.ComposeMarketingStatus(json : TJSONWriter; name : string; elem : TFhirMarketingStatus; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'country', elem.country); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'jurisdiction', elem.jurisdiction); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'status', elem.status); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(json, 'dateRange', elem.dateRange); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeValue(json, 'restoreDate', elem.restoreDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeProps(json, 'restoreDate', elem.restoreDateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseIdentifier(jsn)); {2}
end;

function TFHIRJsonParser.ParseIdentifier(jsn : TJsonObject) : TFhirIdentifier;
begin
  result := TFhirIdentifier.create;
  try
    ParseIdentifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseIdentifierProperties(jsn : TJsonObject; result : TFhirIdentifier);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn['use'], jsn.vObj['_use'], CODES_TFhirIdentifierUseEnum, SYSTEMS_TFhirIdentifierUseEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := ParseUri(jsn['system'], jsn.vObj['_system']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('assigner') then
        result.assigner := ParseReference{TFhirOrganization}(jsn.vObj['assigner']);{q3}
end;

procedure TFHIRJsonComposer.ComposeIdentifier(json : TJSONWriter; name : string; elem : TFhirIdentifier; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirIdentifierUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirIdentifierUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeReference{TFhirOrganization}(json, 'assigner', elem.assigner); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceAmountReferenceRange(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceAmountReferenceRange(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceAmountReferenceRange(jsn : TJsonObject) : TFhirSubstanceAmountReferenceRange;
begin
  result := TFhirSubstanceAmountReferenceRange.create;
  try
    ParseSubstanceAmountReferenceRangeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceAmountReferenceRangeProperties(jsn : TJsonObject; result : TFhirSubstanceAmountReferenceRange);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('lowLimit') then
        result.lowLimit := ParseQuantity(jsn.vObj['lowLimit']);{q3}
    if jsn.has('highLimit') then
        result.highLimit := ParseQuantity(jsn.vObj['highLimit']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstanceAmountReferenceRange(json : TJSONWriter; name : string; elem : TFhirSubstanceAmountReferenceRange; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'lowLimit', elem.lowLimit); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'highLimit', elem.highLimit); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceAmount(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceAmount(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceAmount(jsn : TJsonObject) : TFhirSubstanceAmount;
begin
  result := TFhirSubstanceAmount.create;
  try
    ParseSubstanceAmountProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceAmountProperties(jsn : TJsonObject; result : TFhirSubstanceAmount);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('amountQuantity') {a4} then
      result.amount := ParseQuantity(jsn.vObj['amountQuantity']);
    if jsn.has('amountRange') {a4} then
      result.amount := ParseRange(jsn.vObj['amountRange']);
    if jsn.has('amountString') or jsn.has('_amountString') then
      result.amount := parseString(jsn['amountString'], jsn.vObj['_amountString']);
    if jsn.has('amountType') then
        result.amountType := ParseCodeableConcept(jsn.vObj['amountType']);{q3}
    if jsn.has('amountText') or jsn.has('_amountText') then
        result.amountTextElement := ParseString(jsn['amountText'], jsn.vObj['_amountText']);{q}
    if jsn.has('referenceRange') then
        result.referenceRange := ParseSubstanceAmountReferenceRange(jsn.vObj['referenceRange']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstanceAmount(json : TJSONWriter; name : string; elem : TFhirSubstanceAmount; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.amount is TFhirQuantity) then 
    ComposeQuantity(json, 'amountQuantity', TFhirQuantity(elem.amount)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.amount is TFhirRange) then 
    ComposeRange(json, 'amountRange', TFhirRange(elem.amount)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.amount is TFhirString) then 
  begin
    ComposeStringValue(json, 'amountString', TFhirString(elem.amount), false);
    ComposeStringProps(json, 'amountString', TFhirString(elem.amount), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'amountType', elem.amountType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'amountText', elem.amountTextElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'amountText', elem.amountTextElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeSubstanceAmountReferenceRange(json, 'referenceRange', elem.referenceRange); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCoding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoding(jsn)); {2}
end;

function TFHIRJsonParser.ParseCoding(jsn : TJsonObject) : TFhirCoding;
begin
  result := TFhirCoding.create;
  try
    ParseCodingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodingProperties(jsn : TJsonObject; result : TFhirCoding);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := ParseUri(jsn['system'], jsn.vObj['_system']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
    if jsn.has('userSelected') or jsn.has('_userSelected') then
        result.userSelectedElement := ParseBoolean(jsn['userSelected'], jsn.vObj['_userSelected']);{q}
end;

procedure TFHIRJsonComposer.ComposeCoding(json : TJSONWriter; name : string; elem : TFhirCoding; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanValue(json, 'userSelected', elem.userSelectedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanProps(json, 'userSelected', elem.userSelectedElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSampledData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSampledData(jsn)); {2}
end;

function TFHIRJsonParser.ParseSampledData(jsn : TJsonObject) : TFhirSampledData;
begin
  result := TFhirSampledData.create;
  try
    ParseSampledDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSampledDataProperties(jsn : TJsonObject; result : TFhirSampledData);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('origin') then
        result.origin := ParseQuantity(jsn.vObj['origin']);{q3}
    if jsn.has('period') or jsn.has('_period') then
        result.periodElement := ParseDecimal(jsn['period'], jsn.vObj['_period']);{q}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := ParseDecimal(jsn['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('lowerLimit') or jsn.has('_lowerLimit') then
        result.lowerLimitElement := ParseDecimal(jsn['lowerLimit'], jsn.vObj['_lowerLimit']);{q}
    if jsn.has('upperLimit') or jsn.has('_upperLimit') then
        result.upperLimitElement := ParseDecimal(jsn['upperLimit'], jsn.vObj['_upperLimit']);{q}
    if jsn.has('dimensions') or jsn.has('_dimensions') then
        result.dimensionsElement := ParsePositiveInt(jsn['dimensions'], jsn.vObj['_dimensions']);{q}
    if jsn.has('data') or jsn.has('_data') then
        result.dataElement := ParseString(jsn['data'], jsn.vObj['_data']);{q}
end;

procedure TFHIRJsonComposer.ComposeSampledData(json : TJSONWriter; name : string; elem : TFhirSampledData; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'origin', elem.origin); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'period', elem.periodElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'period', elem.periodElement, false);
  if not elem.noCompose and (not isCanonical or (elem.factor <> '1')) and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (not isCanonical or (elem.factor <> '1')) and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'lowerLimit', elem.lowerLimitElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'lowerLimit', elem.lowerLimitElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'upperLimit', elem.upperLimitElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'upperLimit', elem.upperLimitElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePositiveIntValue(json, 'dimensions', elem.dimensionsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePositiveIntProps(json, 'dimensions', elem.dimensionsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'data', elem.dataElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'data', elem.dataElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRatio(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRatio(jsn)); {2}
end;

function TFHIRJsonParser.ParseRatio(jsn : TJsonObject) : TFhirRatio;
begin
  result := TFhirRatio.create;
  try
    ParseRatioProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRatioProperties(jsn : TJsonObject; result : TFhirRatio);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('numerator') then
        result.numerator := ParseQuantity(jsn.vObj['numerator']);{q3}
    if jsn.has('denominator') then
        result.denominator := ParseQuantity(jsn.vObj['denominator']);{q3}
end;

procedure TFHIRJsonComposer.ComposeRatio(json : TJSONWriter; name : string; elem : TFhirRatio; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'numerator', elem.numerator); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'denominator', elem.denominator); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceMoiety(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceMoiety(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceMoiety(jsn : TJsonObject) : TFhirSubstanceMoiety;
begin
  result := TFhirSubstanceMoiety.create;
  try
    ParseSubstanceMoietyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceMoietyProperties(jsn : TJsonObject; result : TFhirSubstanceMoiety);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('stereochemistry') then
        result.stereochemistry := ParseCodeableConcept(jsn.vObj['stereochemistry']);{q3}
    if jsn.has('opticalActivity') then
        result.opticalActivity := ParseCodeableConcept(jsn.vObj['opticalActivity']);{q3}
    if jsn.has('molecularFormula') or jsn.has('_molecularFormula') then
        result.molecularFormulaElement := ParseString(jsn['molecularFormula'], jsn.vObj['_molecularFormula']);{q}
    if jsn.has('amount') then
        result.amount := ParseSubstanceAmount(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstanceMoiety(json : TJSONWriter; name : string; elem : TFhirSubstanceMoiety; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'stereochemistry', elem.stereochemistry); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'opticalActivity', elem.opticalActivity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'molecularFormula', elem.molecularFormulaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'molecularFormula', elem.molecularFormulaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeSubstanceAmount(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseReference(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseReference(jsn)); {2}
end;

function TFHIRJsonParser.ParseReference(jsn : TJsonObject) : TFhirReference;
begin
  result := TFhirReference.create;
  try
    ParseReferenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseReferenceProperties(jsn : TJsonObject; result : TFhirReference);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('reference') or jsn.has('_reference') then
        result.referenceElement := ParseString(jsn['reference'], jsn.vObj['_reference']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
end;

procedure TFHIRJsonComposer.ComposeReference(json : TJSONWriter; name : string; elem : TFhirReference; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'reference', elem.referenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'reference', elem.referenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTriggerDefinitionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTriggerDefinitionCondition(jsn)); {2}
end;

function TFHIRJsonParser.ParseTriggerDefinitionCondition(jsn : TJsonObject) : TFhirTriggerDefinitionCondition;
begin
  result := TFhirTriggerDefinitionCondition.create;
  try
    ParseTriggerDefinitionConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTriggerDefinitionConditionProperties(jsn : TJsonObject; result : TFhirTriggerDefinitionCondition);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseCode(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposeTriggerDefinitionCondition(json : TJSONWriter; name : string; elem : TFhirTriggerDefinitionCondition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTriggerDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTriggerDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseTriggerDefinition(jsn : TJsonObject) : TFhirTriggerDefinition;
begin
  result := TFhirTriggerDefinition.create;
  try
    ParseTriggerDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTriggerDefinitionProperties(jsn : TJsonObject; result : TFhirTriggerDefinition);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirTriggerTypeEnum, SYSTEMS_TFhirTriggerTypeEnum);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('timingTiming') {a4} then
      result.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingReference') {a3} then
      result.timing := ParseReference(jsn.vObj['timingReference']);
    if jsn.has('timingDate') or jsn.has('_timingDate') then
      result.timing := parseDate(jsn['timingDate'], jsn.vObj['_timingDate']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      result.timing := parseDateTime(jsn['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('data') then
        result.data := ParseDataRequirement(jsn.vObj['data']);{q3}
    if jsn.has('condition') then
        result.condition := ParseTriggerDefinitionCondition(jsn.vObj['condition']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTriggerDefinition(json : TJSONWriter; name : string; elem : TFhirTriggerDefinition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirTriggerTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirTriggerTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.timing is TFhirReference) then
    ComposeReference(json, 'timingReference', TFhirReference(elem.timing))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.timing is TFhirDate) then 
  begin
    ComposeDateValue(json, 'timingDate', TFhirDate(elem.timing), false);
    ComposeDateProps(json, 'timingDate', TFhirDate(elem.timing), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDataRequirement(json, 'data', elem.data); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeTriggerDefinitionCondition(json, 'condition', elem.condition); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePeriod(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePeriod(jsn)); {2}
end;

function TFHIRJsonParser.ParsePeriod(jsn : TJsonObject) : TFhirPeriod;
begin
  result := TFhirPeriod.create;
  try
    ParsePeriodProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePeriodProperties(jsn : TJsonObject; result : TFhirPeriod);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := ParseDateTime(jsn['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := ParseDateTime(jsn['end'], jsn.vObj['_end']);{q}
end;

procedure TFHIRJsonComposer.ComposePeriod(json : TJSONWriter; name : string; elem : TFhirPeriod; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeValue(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeProps(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeValue(json, 'end', elem.end_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeProps(json, 'end', elem.end_Element, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuantity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuantity(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuantity(jsn : TJsonObject) : TFhirQuantity;
begin
  result := TFhirQuantity.create;
  try
    ParseQuantityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuantityProperties(jsn : TJsonObject; result : TFhirQuantity);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseDecimal(jsn['value'], jsn.vObj['_value']);{q}
    if jsn.has('comparator') or jsn.has('_comparator')  then
      result.comparatorElement := parseEnum(jsn.path+'/comparator', jsn['comparator'], jsn.vObj['_comparator'], CODES_TFhirQuantityComparatorEnum, SYSTEMS_TFhirQuantityComparatorEnum);
    if jsn.has('unit') or jsn.has('_unit') then
        result.unit_Element := ParseString(jsn['unit'], jsn.vObj['_unit']);{q}
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := ParseUri(jsn['system'], jsn.vObj['_system']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
end;

procedure TFHIRJsonComposer.ComposeQuantity(json : TJSONWriter; name : string; elem : TFhirQuantity; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'comparator', elem.ComparatorElement, CODES_TFhirQuantityComparatorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'comparator', elem.ComparatorElement, CODES_TFhirQuantityComparatorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'unit', elem.unit_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'unit', elem.unit_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRange(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRange(jsn)); {2}
end;

function TFHIRJsonParser.ParseRange(jsn : TJsonObject) : TFhirRange;
begin
  result := TFhirRange.create;
  try
    ParseRangeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRangeProperties(jsn : TJsonObject; result : TFhirRange);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('low') then
        result.low := ParseQuantity(jsn.vObj['low']);{q3}
    if jsn.has('high') then
        result.high := ParseQuantity(jsn.vObj['high']);{q3}
end;

procedure TFHIRJsonComposer.ComposeRange(json : TJSONWriter; name : string; elem : TFhirRange; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'low', elem.low); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'high', elem.high); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRelatedArtifact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRelatedArtifact(jsn)); {2}
end;

function TFHIRJsonParser.ParseRelatedArtifact(jsn : TJsonObject) : TFhirRelatedArtifact;
begin
  result := TFhirRelatedArtifact.create;
  try
    ParseRelatedArtifactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRelatedArtifactProperties(jsn : TJsonObject; result : TFhirRelatedArtifact);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirRelatedArtifactTypeEnum, SYSTEMS_TFhirRelatedArtifactTypeEnum);
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
    if jsn.has('citation') or jsn.has('_citation') then
        result.citationElement := ParseString(jsn['citation'], jsn.vObj['_citation']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('document') then
        result.document := ParseAttachment(jsn.vObj['document']);{q3}
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
end;

procedure TFHIRJsonComposer.ComposeRelatedArtifact(json : TJSONWriter; name : string; elem : TFhirRelatedArtifact; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirRelatedArtifactTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirRelatedArtifactTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'citation', elem.citationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'citation', elem.citationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeAttachment(json, 'document', elem.document); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAnnotation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAnnotation(jsn)); {2}
end;

function TFHIRJsonParser.ParseAnnotation(jsn : TJsonObject) : TFhirAnnotation;
begin
  result := TFhirAnnotation.create;
  try
    ParseAnnotationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAnnotationProperties(jsn : TJsonObject; result : TFhirAnnotation);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('authorReference') {a3} then
      result.author := ParseReference(jsn.vObj['authorReference']);
    if jsn.has('authorString') or jsn.has('_authorString') then
      result.author := parseString(jsn['authorString'], jsn.vObj['_authorString']);
    if jsn.has('time') or jsn.has('_time') then
        result.timeElement := ParseDateTime(jsn['time'], jsn.vObj['_time']);{q}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposeAnnotation(json : TJSONWriter; name : string; elem : TFhirAnnotation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.author is TFhirReference) then
    ComposeReference(json, 'authorReference', TFhirReference(elem.author))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.author is TFhirString) then 
  begin
    ComposeStringValue(json, 'authorString', TFhirString(elem.author), false);
    ComposeStringProps(json, 'authorString', TFhirString(elem.author), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeValue(json, 'time', elem.timeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeProps(json, 'time', elem.timeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProductShelfLife(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductShelfLife(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductShelfLife(jsn : TJsonObject) : TFhirProductShelfLife;
begin
  result := TFhirProductShelfLife.create;
  try
    ParseProductShelfLifeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductShelfLifeProperties(jsn : TJsonObject; result : TFhirProductShelfLife);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('period') then
        result.period := ParseQuantity(jsn.vObj['period']);{q3}
    if jsn.has('specialPrecautionsForStorage') then
      iterateArray(jsn.vArr['specialPrecautionsForStorage'], result.specialPrecautionsForStorageList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeProductShelfLife(json : TJSONWriter; name : string; elem : TFhirProductShelfLife; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'period', elem.period); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.specialPrecautionsForStorageList.Count > 0) then
  begin
    json.valueArray('specialPrecautionsForStorage');
    for i := 0 to elem.specialPrecautionsForStorageList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialPrecautionsForStorageList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContactDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContactDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseContactDetail(jsn : TJsonObject) : TFhirContactDetail;
begin
  result := TFhirContactDetail.create;
  try
    ParseContactDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContactDetailProperties(jsn : TJsonObject; result : TFhirContactDetail);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
end;

procedure TFHIRJsonComposer.ComposeContactDetail(json : TJSONWriter; name : string; elem : TFhirContactDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseUsageContext(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUsageContext(jsn)); {2}
end;

function TFHIRJsonParser.ParseUsageContext(jsn : TJsonObject) : TFhirUsageContext;
begin
  result := TFhirUsageContext.create;
  try
    ParseUsageContextProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseUsageContextProperties(jsn : TJsonObject; result : TFhirUsageContext);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCoding(jsn.vObj['code']);{q3}
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
end;

procedure TFHIRJsonComposer.ComposeUsageContext(json : TJSONWriter; name : string; elem : TFhirUsageContext; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCoding(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSignature(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSignature(jsn)); {2}
end;

function TFHIRJsonParser.ParseSignature(jsn : TJsonObject) : TFhirSignature;
begin
  result := TFhirSignature.create;
  try
    ParseSignatureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSignatureProperties(jsn : TJsonObject; result : TFhirSignature);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCoding);
    if jsn.has('when') or jsn.has('_when') then
        result.whenElement := ParseInstant(jsn['when'], jsn.vObj['_when']);{q}
    if jsn.has('whoReference') {a3} then
      result.who := ParseReference(jsn.vObj['whoReference']);
    if jsn.has('whoUri') or jsn.has('_whoUri') then
      result.who := parseUri(jsn['whoUri'], jsn.vObj['_whoUri']);
    if jsn.has('onBehalfOfReference') {a3} then
      result.onBehalfOf := ParseReference(jsn.vObj['onBehalfOfReference']);
    if jsn.has('onBehalfOfUri') or jsn.has('_onBehalfOfUri') then
      result.onBehalfOf := parseUri(jsn['onBehalfOfUri'], jsn.vObj['_onBehalfOfUri']);
    if jsn.has('targetFormat') or jsn.has('_targetFormat') then
        result.targetFormatElement := ParseCode(jsn['targetFormat'], jsn.vObj['_targetFormat']);{q}
    if jsn.has('sigFormat') or jsn.has('_sigFormat') then
        result.sigFormatElement := ParseCode(jsn['sigFormat'], jsn.vObj['_sigFormat']);{q}
    if jsn.has('blob') or jsn.has('_blob') then
        result.blobElement := ParseBase64Binary(jsn['blob'], jsn.vObj['_blob']);{q}
end;

procedure TFHIRJsonComposer.ComposeSignature(json : TJSONWriter; name : string; elem : TFhirSignature; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCoding(json, '', elem.type_List[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'when', elem.whenElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'when', elem.whenElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.who is TFhirReference) then
    ComposeReference(json, 'whoReference', TFhirReference(elem.who))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.who is TFhirUri) then 
  begin
    ComposeUriValue(json, 'whoUri', TFhirUri(elem.who), false);
    ComposeUriProps(json, 'whoUri', TFhirUri(elem.who), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.onBehalfOf is TFhirReference) then
    ComposeReference(json, 'onBehalfOfReference', TFhirReference(elem.onBehalfOf))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.onBehalfOf is TFhirUri) then 
  begin
    ComposeUriValue(json, 'onBehalfOfUri', TFhirUri(elem.onBehalfOf), false);
    ComposeUriProps(json, 'onBehalfOfUri', TFhirUri(elem.onBehalfOf), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'targetFormat', elem.targetFormatElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'targetFormat', elem.targetFormatElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'sigFormat', elem.sigFormatElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'sigFormat', elem.sigFormatElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryValue(json, 'blob', elem.blobElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryProps(json, 'blob', elem.blobElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProdCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProdCharacteristic(jsn)); {2}
end;

function TFHIRJsonParser.ParseProdCharacteristic(jsn : TJsonObject) : TFhirProdCharacteristic;
begin
  result := TFhirProdCharacteristic.create;
  try
    ParseProdCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProdCharacteristicProperties(jsn : TJsonObject; result : TFhirProdCharacteristic);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('height') then
        result.height := ParseQuantity(jsn.vObj['height']);{q3}
    if jsn.has('width') then
        result.width := ParseQuantity(jsn.vObj['width']);{q3}
    if jsn.has('depth') then
        result.depth := ParseQuantity(jsn.vObj['depth']);{q3}
    if jsn.has('weight') then
        result.weight := ParseQuantity(jsn.vObj['weight']);{q3}
    if jsn.has('nominalVolume') then
        result.nominalVolume := ParseQuantity(jsn.vObj['nominalVolume']);{q3}
    if jsn.has('externalDiameter') then
        result.externalDiameter := ParseQuantity(jsn.vObj['externalDiameter']);{q3}
    if jsn.has('shape') or jsn.has('_shape') then
        result.shapeElement := ParseString(jsn['shape'], jsn.vObj['_shape']);{q}
      if jsn.has('color') or jsn.has('_color') then
      iteratePrimitiveArray(jsn.vArr['color'], jsn.vArr['_color'], result.colorList, parseString);
      if jsn.has('imprint') or jsn.has('_imprint') then
      iteratePrimitiveArray(jsn.vArr['imprint'], jsn.vArr['_imprint'], result.imprintList, parseString);
    if jsn.has('image') then
      iterateArray(jsn.vArr['image'], result.imageList, parseAttachment);
    if jsn.has('scoring') then
        result.scoring := ParseCodeableConcept(jsn.vObj['scoring']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProdCharacteristic(json : TJSONWriter; name : string; elem : TFhirProdCharacteristic; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'height', elem.height); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'width', elem.width); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'depth', elem.depth); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'weight', elem.weight); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'nominalVolume', elem.nominalVolume); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'externalDiameter', elem.externalDiameter); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'shape', elem.shapeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'shape', elem.shapeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.colorList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.colorList.Count - 1 do
    begin
      ext := ext or ((elem.colorList[i].id <> '') or (elem.colorList[i].hasExtensionList) {no-comments or (elem.colorList[i].hasComments)});
      val := val or (elem.colorList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('color');
      for i := 0 to elem.colorList.Count - 1 do
        ComposeStringValue(json, '',elem.colorList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_color');
      for i := 0 to elem.colorList.Count - 1 do
        ComposeStringProps(json, '',elem.colorList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.imprintList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.imprintList.Count - 1 do
    begin
      ext := ext or ((elem.imprintList[i].id <> '') or (elem.imprintList[i].hasExtensionList) {no-comments or (elem.imprintList[i].hasComments)});
      val := val or (elem.imprintList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('imprint');
      for i := 0 to elem.imprintList.Count - 1 do
        ComposeStringValue(json, '',elem.imprintList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_imprint');
      for i := 0 to elem.imprintList.Count - 1 do
        ComposeStringProps(json, '',elem.imprintList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.imageList.Count > 0) then
  begin
    json.valueArray('image');
    for i := 0 to elem.imageList.Count - 1 do
      ComposeAttachment(json, '', elem.imageList[i]); {z - Attachment}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'scoring', elem.scoring); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeableConcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeableConcept(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeableConcept(jsn : TJsonObject) : TFhirCodeableConcept;
begin
  result := TFhirCodeableConcept.create;
  try
    ParseCodeableConceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeableConceptProperties(jsn : TJsonObject; result : TFhirCodeableConcept);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('coding') then
      iterateArray(jsn.vArr['coding'], result.codingList, parseCoding);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposeCodeableConcept(json : TJSONWriter; name : string; elem : TFhirCodeableConcept; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.codingList.Count > 0) then
  begin
    json.valueArray('coding');
    for i := 0 to elem.codingList.Count - 1 do
      ComposeCoding(json, '', elem.codingList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseParameterDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseParameterDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseParameterDefinition(jsn : TJsonObject) : TFhirParameterDefinition;
begin
  result := TFhirParameterDefinition.create;
  try
    ParseParameterDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseParameterDefinitionProperties(jsn : TJsonObject; result : TFhirParameterDefinition);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseCode(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn['use'], jsn.vObj['_use'], CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum);
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := ParseInteger(jsn['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := ParseString(jsn['max'], jsn.vObj['_max']);{q}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeParameterDefinition(json : TJSONWriter; name : string; elem : TFhirParameterDefinition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerValue(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerProps(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContactPoint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContactPoint(jsn)); {2}
end;

function TFHIRJsonParser.ParseContactPoint(jsn : TJsonObject) : TFhirContactPoint;
begin
  result := TFhirContactPoint.create;
  try
    ParseContactPointProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContactPointProperties(jsn : TJsonObject; result : TFhirContactPoint);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system')  then
      result.systemElement := parseEnum(jsn.path+'/system', jsn['system'], jsn.vObj['_system'], CODES_TFhirContactPointSystemEnum, SYSTEMS_TFhirContactPointSystemEnum);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn['use'], jsn.vObj['_use'], CODES_TFhirContactPointUseEnum, SYSTEMS_TFhirContactPointUseEnum);
    if jsn.has('rank') or jsn.has('_rank') then
        result.rankElement := ParsePositiveInt(jsn['rank'], jsn.vObj['_rank']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeContactPoint(json : TJSONWriter; name : string; elem : TFhirContactPoint; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'system', elem.SystemElement, CODES_TFhirContactPointSystemEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'system', elem.SystemElement, CODES_TFhirContactPointSystemEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirContactPointUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirContactPointUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePositiveIntValue(json, 'rank', elem.rankElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePositiveIntProps(json, 'rank', elem.rankElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseHumanName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHumanName(jsn)); {2}
end;

function TFHIRJsonParser.ParseHumanName(jsn : TJsonObject) : TFhirHumanName;
begin
  result := TFhirHumanName.create;
  try
    ParseHumanNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHumanNameProperties(jsn : TJsonObject; result : TFhirHumanName);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn['use'], jsn.vObj['_use'], CODES_TFhirNameUseEnum, SYSTEMS_TFhirNameUseEnum);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
    if jsn.has('family') or jsn.has('_family') then
        result.familyElement := ParseString(jsn['family'], jsn.vObj['_family']);{q}
      if jsn.has('given') or jsn.has('_given') then
      iteratePrimitiveArray(jsn.vArr['given'], jsn.vArr['_given'], result.givenList, parseString);
      if jsn.has('prefix') or jsn.has('_prefix') then
      iteratePrimitiveArray(jsn.vArr['prefix'], jsn.vArr['_prefix'], result.prefixList, parseString);
      if jsn.has('suffix') or jsn.has('_suffix') then
      iteratePrimitiveArray(jsn.vArr['suffix'], jsn.vArr['_suffix'], result.suffixList, parseString);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeHumanName(json : TJSONWriter; name : string; elem : TFhirHumanName; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirNameUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirNameUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'family', elem.familyElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'family', elem.familyElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.givenList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.givenList.Count - 1 do
    begin
      ext := ext or ((elem.givenList[i].id <> '') or (elem.givenList[i].hasExtensionList) {no-comments or (elem.givenList[i].hasComments)});
      val := val or (elem.givenList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('given');
      for i := 0 to elem.givenList.Count - 1 do
        ComposeStringValue(json, '',elem.givenList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_given');
      for i := 0 to elem.givenList.Count - 1 do
        ComposeStringProps(json, '',elem.givenList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.prefixList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.prefixList.Count - 1 do
    begin
      ext := ext or ((elem.prefixList[i].id <> '') or (elem.prefixList[i].hasExtensionList) {no-comments or (elem.prefixList[i].hasComments)});
      val := val or (elem.prefixList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('prefix');
      for i := 0 to elem.prefixList.Count - 1 do
        ComposeStringValue(json, '',elem.prefixList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_prefix');
      for i := 0 to elem.prefixList.Count - 1 do
        ComposeStringProps(json, '',elem.prefixList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.suffixList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.suffixList.Count - 1 do
    begin
      ext := ext or ((elem.suffixList[i].id <> '') or (elem.suffixList[i].hasExtensionList) {no-comments or (elem.suffixList[i].hasComments)});
      val := val or (elem.suffixList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('suffix');
      for i := 0 to elem.suffixList.Count - 1 do
        ComposeStringValue(json, '',elem.suffixList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_suffix');
      for i := 0 to elem.suffixList.Count - 1 do
        ComposeStringProps(json, '',elem.suffixList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeta(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeta(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeta(jsn : TJsonObject) : TFhirMeta;
begin
  result := TFhirMeta.create;
  try
    ParseMetaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMetaProperties(jsn : TJsonObject; result : TFhirMeta);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('versionId') or jsn.has('_versionId') then
        result.versionIdElement := ParseId(jsn['versionId'], jsn.vObj['_versionId']);{q}
    if jsn.has('lastUpdated') or jsn.has('_lastUpdated') then
        result.lastUpdatedElement := ParseInstant(jsn['lastUpdated'], jsn.vObj['_lastUpdated']);{q}
    if jsn.has('source') or jsn.has('_source') then
        result.sourceElement := ParseUri(jsn['source'], jsn.vObj['_source']);{q}
      if jsn.has('profile') or jsn.has('_profile') then
      iteratePrimitiveArray(jsn.vArr['profile'], jsn.vArr['_profile'], result.profileList, parseUri);
    if jsn.has('security') then
      iterateArray(jsn.vArr['security'], result.securityList, parseCoding);
    if jsn.has('tag') then
      iterateArray(jsn.vArr['tag'], result.tagList, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeMeta(json : TJSONWriter; name : string; elem : TFhirMeta; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdValue(json, 'versionId', elem.versionIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdProps(json, 'versionId', elem.versionIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'lastUpdated', elem.lastUpdatedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'lastUpdated', elem.lastUpdatedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'source', elem.sourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'source', elem.sourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.profileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.profileList.Count - 1 do
    begin
      ext := ext or ((elem.profileList[i].id <> '') or (elem.profileList[i].hasExtensionList) {no-comments or (elem.profileList[i].hasComments)});
      val := val or (elem.profileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('profile');
      for i := 0 to elem.profileList.Count - 1 do
        ComposeUriValue(json, '',elem.profileList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_profile');
      for i := 0 to elem.profileList.Count - 1 do
        ComposeUriProps(json, '',elem.profileList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.securityList.Count > 0) then
  begin
    json.valueArray('security');
    for i := 0 to elem.securityList.Count - 1 do
      ComposeCoding(json, '', elem.securityList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.tagList.Count > 0) then
  begin
    json.valueArray('tag');
    for i := 0 to elem.tagList.Count - 1 do
      ComposeCoding(json, '', elem.tagList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAddress(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAddress(jsn)); {2}
end;

function TFHIRJsonParser.ParseAddress(jsn : TJsonObject) : TFhirAddress;
begin
  result := TFhirAddress.create;
  try
    ParseAddressProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAddressProperties(jsn : TJsonObject; result : TFhirAddress);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn['use'], jsn.vObj['_use'], CODES_TFhirAddressUseEnum, SYSTEMS_TFhirAddressUseEnum);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirAddressTypeEnum, SYSTEMS_TFhirAddressTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
      if jsn.has('line') or jsn.has('_line') then
      iteratePrimitiveArray(jsn.vArr['line'], jsn.vArr['_line'], result.lineList, parseString);
    if jsn.has('city') or jsn.has('_city') then
        result.cityElement := ParseString(jsn['city'], jsn.vObj['_city']);{q}
    if jsn.has('district') or jsn.has('_district') then
        result.districtElement := ParseString(jsn['district'], jsn.vObj['_district']);{q}
    if jsn.has('state') or jsn.has('_state') then
        result.stateElement := ParseString(jsn['state'], jsn.vObj['_state']);{q}
    if jsn.has('postalCode') or jsn.has('_postalCode') then
        result.postalCodeElement := ParseString(jsn['postalCode'], jsn.vObj['_postalCode']);{q}
    if jsn.has('country') or jsn.has('_country') then
        result.countryElement := ParseString(jsn['country'], jsn.vObj['_country']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeAddress(json : TJSONWriter; name : string; elem : TFhirAddress; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirAddressUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirAddressUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAddressTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAddressTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.lineList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.lineList.Count - 1 do
    begin
      ext := ext or ((elem.lineList[i].id <> '') or (elem.lineList[i].hasExtensionList) {no-comments or (elem.lineList[i].hasComments)});
      val := val or (elem.lineList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('line');
      for i := 0 to elem.lineList.Count - 1 do
        ComposeStringValue(json, '',elem.lineList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_line');
      for i := 0 to elem.lineList.Count - 1 do
        ComposeStringProps(json, '',elem.lineList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'city', elem.cityElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'city', elem.cityElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'district', elem.districtElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'district', elem.districtElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'state', elem.stateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'state', elem.stateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'postalCode', elem.postalCodeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'postalCode', elem.postalCodeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'country', elem.countryElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'country', elem.countryElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicing(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionSlicing(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionSlicing(jsn : TJsonObject) : TFhirElementDefinitionSlicing;
begin
  result := TFhirElementDefinitionSlicing.create;
  try
    ParseElementDefinitionSlicingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicingProperties(jsn : TJsonObject; result : TFhirElementDefinitionSlicing);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('discriminator') then
      iterateArray(jsn.vArr['discriminator'], result.discriminatorList, parseElementDefinitionSlicingDiscriminator);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('ordered') or jsn.has('_ordered') then
        result.orderedElement := ParseBoolean(jsn['ordered'], jsn.vObj['_ordered']);{q}
    if jsn.has('rules') or jsn.has('_rules')  then
      result.rulesElement := parseEnum(jsn.path+'/rules', jsn['rules'], jsn.vObj['_rules'], CODES_TFhirResourceSlicingRulesEnum, SYSTEMS_TFhirResourceSlicingRulesEnum);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionSlicing(json : TJSONWriter; name : string; elem : TFhirElementDefinitionSlicing; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.discriminatorList.Count > 0) then
  begin
    json.valueArray('discriminator');
    for i := 0 to elem.discriminatorList.Count - 1 do
      ComposeElementDefinitionSlicingDiscriminator(json, '', elem.discriminatorList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (not isCanonical or (elem.ordered <> false)) and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'ordered', elem.orderedElement, false);
  if not elem.noCompose and (not isCanonical or (elem.ordered <> false)) and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'ordered', elem.orderedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'rules', elem.RulesElement, CODES_TFhirResourceSlicingRulesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'rules', elem.RulesElement, CODES_TFhirResourceSlicingRulesEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionSlicingDiscriminator(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject) : TFhirElementDefinitionSlicingDiscriminator;
begin
  result := TFhirElementDefinitionSlicingDiscriminator.create;
  try
    ParseElementDefinitionSlicingDiscriminatorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicingDiscriminatorProperties(jsn : TJsonObject; result : TFhirElementDefinitionSlicingDiscriminator);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirDiscriminatorTypeEnum, SYSTEMS_TFhirDiscriminatorTypeEnum);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionSlicingDiscriminator(json : TJSONWriter; name : string; elem : TFhirElementDefinitionSlicingDiscriminator; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirDiscriminatorTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirDiscriminatorTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBase(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionBase(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionBase(jsn : TJsonObject) : TFhirElementDefinitionBase;
begin
  result := TFhirElementDefinitionBase.create;
  try
    ParseElementDefinitionBaseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBaseProperties(jsn : TJsonObject; result : TFhirElementDefinitionBase);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := ParseUnsignedInt(jsn['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := ParseString(jsn['max'], jsn.vObj['_max']);{q}
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionBase(json : TJSONWriter; name : string; elem : TFhirElementDefinitionBase; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionType(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionType(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionType(jsn : TJsonObject) : TFhirElementDefinitionType;
begin
  result := TFhirElementDefinitionType.create;
  try
    ParseElementDefinitionTypeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionTypeProperties(jsn : TJsonObject; result : TFhirElementDefinitionType);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseUri(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('profile') or jsn.has('_profile') then
        result.profileElement := ParseUri(jsn['profile'], jsn.vObj['_profile']);{q}
    if jsn.has('targetProfile') or jsn.has('_targetProfile') then
        result.targetProfileElement := ParseUri(jsn['targetProfile'], jsn.vObj['_targetProfile']);{q}
    if jsn.has('aggregation') or jsn.has('_aggregation') then
      iterateEnumArray(jsn.vArr['aggregation'], jsn.vArr['_aggregation'], jsn.path+'/aggregation', result.aggregationList, parseEnum, CODES_TFhirResourceAggregationModeEnum, SYSTEMS_TFhirResourceAggregationModeEnum);
    if jsn.has('versioning') or jsn.has('_versioning')  then
      result.versioningElement := parseEnum(jsn.path+'/versioning', jsn['versioning'], jsn.vObj['_versioning'], CODES_TFhirReferenceVersionRulesEnum, SYSTEMS_TFhirReferenceVersionRulesEnum);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionType(json : TJSONWriter; name : string; elem : TFhirElementDefinitionType; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'profile', elem.profileElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'profile', elem.profileElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'targetProfile', elem.targetProfileElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'targetProfile', elem.targetProfileElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.aggregationList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.aggregationList.Count - 1 do
    begin
      val := val or (elem.aggregationList[i].hasPrimitiveValue);
      ext := ext or ((elem.aggregationList[i].id <> '') or (elem.aggregationList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('aggregation');
      for i := 0 to elem.aggregationList.Count - 1 do
        ComposeEnumValue(json, '', elem.aggregationList[i], CODES_TFhirResourceAggregationModeEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_aggregation');
      for i := 0 to elem.aggregationList.Count - 1 do
        ComposeEnumProps(json, '', elem.aggregationList[i], CODES_TFhirResourceAggregationModeEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (not isCanonical or (elem.versioningElement <> nil) and (elem.versioningElement.primitiveValue <> 'either')) and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'versioning', elem.VersioningElement, CODES_TFhirReferenceVersionRulesEnum, false);
  if not elem.noCompose and (not isCanonical or (elem.versioningElement <> nil) and (elem.versioningElement.primitiveValue <> 'either')) and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'versioning', elem.VersioningElement, CODES_TFhirReferenceVersionRulesEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionExample(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionExample(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionExample(jsn : TJsonObject) : TFhirElementDefinitionExample;
begin
  result := TFhirElementDefinitionExample.create;
  try
    ParseElementDefinitionExampleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionExampleProperties(jsn : TJsonObject; result : TFhirElementDefinitionExample);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := ParseString(jsn['label'], jsn.vObj['_label']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueDosage') {a4} then
      result.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueContactDetail') {a4} then
      result.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      result.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      result.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueParameterDefinition') {a4} then
      result.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      result.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      result.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      result.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionExample(json : TJSONWriter; name : string; elem : TFhirElementDefinitionExample; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'label', elem.label_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'label', elem.label_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionConstraint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionConstraint(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionConstraint(jsn : TJsonObject) : TFhirElementDefinitionConstraint;
begin
  result := TFhirElementDefinitionConstraint.create;
  try
    ParseElementDefinitionConstraintProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionConstraintProperties(jsn : TJsonObject; result : TFhirElementDefinitionConstraint);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('key') or jsn.has('_key') then
        result.keyElement := ParseId(jsn['key'], jsn.vObj['_key']);{q}
    if jsn.has('requirements') or jsn.has('_requirements') then
        result.requirementsElement := ParseString(jsn['requirements'], jsn.vObj['_requirements']);{q}
    if jsn.has('severity') or jsn.has('_severity')  then
      result.severityElement := parseEnum(jsn.path+'/severity', jsn['severity'], jsn.vObj['_severity'], CODES_TFhirConstraintSeverityEnum, SYSTEMS_TFhirConstraintSeverityEnum);
    if jsn.has('human') or jsn.has('_human') then
        result.humanElement := ParseString(jsn['human'], jsn.vObj['_human']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('xpath') or jsn.has('_xpath') then
        result.xpathElement := ParseString(jsn['xpath'], jsn.vObj['_xpath']);{q}
    if jsn.has('source') or jsn.has('_source') then
        result.sourceElement := ParseUri(jsn['source'], jsn.vObj['_source']);{q}
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionConstraint(json : TJSONWriter; name : string; elem : TFhirElementDefinitionConstraint; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'key', elem.keyElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'key', elem.keyElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'requirements', elem.requirementsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'requirements', elem.requirementsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'severity', elem.SeverityElement, CODES_TFhirConstraintSeverityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'severity', elem.SeverityElement, CODES_TFhirConstraintSeverityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'human', elem.humanElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'human', elem.humanElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'xpath', elem.xpathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'xpath', elem.xpathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'source', elem.sourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'source', elem.sourceElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBinding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionBinding(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionBinding(jsn : TJsonObject) : TFhirElementDefinitionBinding;
begin
  result := TFhirElementDefinitionBinding.create;
  try
    ParseElementDefinitionBindingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBindingProperties(jsn : TJsonObject; result : TFhirElementDefinitionBinding);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('strength') or jsn.has('_strength')  then
      result.strengthElement := parseEnum(jsn.path+'/strength', jsn['strength'], jsn.vObj['_strength'], CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('valueSetReference') {a3} then
      result.valueSet := ParseReference(jsn.vObj['valueSetReference']);
    if jsn.has('valueSetUri') or jsn.has('_valueSetUri') then
      result.valueSet := parseUri(jsn['valueSetUri'], jsn.vObj['_valueSetUri']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionBinding(json : TJSONWriter; name : string; elem : TFhirElementDefinitionBinding; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSet is TFhirReference) then
    ComposeReference(json, 'valueSetReference', TFhirReference(elem.valueSet))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSet is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
    ComposeUriProps(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionMapping(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionMapping(jsn : TJsonObject) : TFhirElementDefinitionMapping;
begin
  result := TFhirElementDefinitionMapping.create;
  try
    ParseElementDefinitionMappingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionMappingProperties(jsn : TJsonObject; result : TFhirElementDefinitionMapping);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('identity') or jsn.has('_identity') then
        result.identityElement := ParseId(jsn['identity'], jsn.vObj['_identity']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseCode(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('map') or jsn.has('_map') then
        result.mapElement := ParseString(jsn['map'], jsn.vObj['_map']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionMapping(json : TJSONWriter; name : string; elem : TFhirElementDefinitionMapping; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'identity', elem.identityElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'identity', elem.identityElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'map', elem.mapElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'map', elem.mapElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinition(jsn : TJsonObject) : TFhirElementDefinition;
begin
  result := TFhirElementDefinition.create;
  try
    ParseElementDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionProperties(jsn : TJsonObject; result : TFhirElementDefinition);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
    if jsn.has('representation') or jsn.has('_representation') then
      iterateEnumArray(jsn.vArr['representation'], jsn.vArr['_representation'], jsn.path+'/representation', result.representationList, parseEnum, CODES_TFhirPropertyRepresentationEnum, SYSTEMS_TFhirPropertyRepresentationEnum);
    if jsn.has('sliceName') or jsn.has('_sliceName') then
        result.sliceNameElement := ParseString(jsn['sliceName'], jsn.vObj['_sliceName']);{q}
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := ParseString(jsn['label'], jsn.vObj['_label']);{q}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCoding);
    if jsn.has('slicing') then
        result.slicing := ParseElementDefinitionSlicing(jsn.vObj['slicing']);{q3}
    if jsn.has('short') or jsn.has('_short') then
        result.shortElement := ParseString(jsn['short'], jsn.vObj['_short']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := ParseMarkdown(jsn['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseMarkdown(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('requirements') or jsn.has('_requirements') then
        result.requirementsElement := ParseMarkdown(jsn['requirements'], jsn.vObj['_requirements']);{q}
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], result.aliasList, parseString);
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := ParseUnsignedInt(jsn['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := ParseString(jsn['max'], jsn.vObj['_max']);{q}
    if jsn.has('base') then
        result.base := ParseElementDefinitionBase(jsn.vObj['base']);{q3}
    if jsn.has('contentReference') or jsn.has('_contentReference') then
        result.contentReferenceElement := ParseUri(jsn['contentReference'], jsn.vObj['_contentReference']);{q}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseElementDefinitionType);
    if jsn.has('defaultValueCode') or jsn.has('_defaultValueCode') then
      result.defaultValue := parseCode(jsn['defaultValueCode'], jsn.vObj['_defaultValueCode']);
    if jsn.has('defaultValueId') or jsn.has('_defaultValueId') then
      result.defaultValue := parseId(jsn['defaultValueId'], jsn.vObj['_defaultValueId']);
    if jsn.has('defaultValueMarkdown') or jsn.has('_defaultValueMarkdown') then
      result.defaultValue := parseMarkdown(jsn['defaultValueMarkdown'], jsn.vObj['_defaultValueMarkdown']);
    if jsn.has('defaultValueOid') or jsn.has('_defaultValueOid') then
      result.defaultValue := parseOid(jsn['defaultValueOid'], jsn.vObj['_defaultValueOid']);
    if jsn.has('defaultValuePositiveInt') or jsn.has('_defaultValuePositiveInt') then
      result.defaultValue := parsePositiveInt(jsn['defaultValuePositiveInt'], jsn.vObj['_defaultValuePositiveInt']);
    if jsn.has('defaultValueUnsignedInt') or jsn.has('_defaultValueUnsignedInt') then
      result.defaultValue := parseUnsignedInt(jsn['defaultValueUnsignedInt'], jsn.vObj['_defaultValueUnsignedInt']);
    if jsn.has('defaultValueAddress') {a4} then
      result.defaultValue := ParseAddress(jsn.vObj['defaultValueAddress']);
    if jsn.has('defaultValueAge') {a4} then
      result.defaultValue := ParseAge(jsn.vObj['defaultValueAge']);
    if jsn.has('defaultValueAnnotation') {a4} then
      result.defaultValue := ParseAnnotation(jsn.vObj['defaultValueAnnotation']);
    if jsn.has('defaultValueAttachment') {a4} then
      result.defaultValue := ParseAttachment(jsn.vObj['defaultValueAttachment']);
    if jsn.has('defaultValueCodeableConcept') {a4} then
      result.defaultValue := ParseCodeableConcept(jsn.vObj['defaultValueCodeableConcept']);
    if jsn.has('defaultValueCoding') {a4} then
      result.defaultValue := ParseCoding(jsn.vObj['defaultValueCoding']);
    if jsn.has('defaultValueContactPoint') {a4} then
      result.defaultValue := ParseContactPoint(jsn.vObj['defaultValueContactPoint']);
    if jsn.has('defaultValueCount') {a4} then
      result.defaultValue := ParseCount(jsn.vObj['defaultValueCount']);
    if jsn.has('defaultValueDistance') {a4} then
      result.defaultValue := ParseDistance(jsn.vObj['defaultValueDistance']);
    if jsn.has('defaultValueDuration') {a4} then
      result.defaultValue := ParseDuration(jsn.vObj['defaultValueDuration']);
    if jsn.has('defaultValueHumanName') {a4} then
      result.defaultValue := ParseHumanName(jsn.vObj['defaultValueHumanName']);
    if jsn.has('defaultValueIdentifier') {a4} then
      result.defaultValue := ParseIdentifier(jsn.vObj['defaultValueIdentifier']);
    if jsn.has('defaultValueMoney') {a4} then
      result.defaultValue := ParseMoney(jsn.vObj['defaultValueMoney']);
    if jsn.has('defaultValuePeriod') {a4} then
      result.defaultValue := ParsePeriod(jsn.vObj['defaultValuePeriod']);
    if jsn.has('defaultValueQuantity') {a4} then
      result.defaultValue := ParseQuantity(jsn.vObj['defaultValueQuantity']);
    if jsn.has('defaultValueRange') {a4} then
      result.defaultValue := ParseRange(jsn.vObj['defaultValueRange']);
    if jsn.has('defaultValueRatio') {a4} then
      result.defaultValue := ParseRatio(jsn.vObj['defaultValueRatio']);
    if jsn.has('defaultValueReference') {a4} then
      result.defaultValue := ParseReference(jsn.vObj['defaultValueReference']);
    if jsn.has('defaultValueSampledData') {a4} then
      result.defaultValue := ParseSampledData(jsn.vObj['defaultValueSampledData']);
    if jsn.has('defaultValueSignature') {a4} then
      result.defaultValue := ParseSignature(jsn.vObj['defaultValueSignature']);
    if jsn.has('defaultValueTiming') {a4} then
      result.defaultValue := ParseTiming(jsn.vObj['defaultValueTiming']);
    if jsn.has('defaultValueDosage') {a4} then
      result.defaultValue := ParseDosage(jsn.vObj['defaultValueDosage']);
    if jsn.has('defaultValueContactDetail') {a4} then
      result.defaultValue := ParseContactDetail(jsn.vObj['defaultValueContactDetail']);
    if jsn.has('defaultValueContributor') {a4} then
      result.defaultValue := ParseContributor(jsn.vObj['defaultValueContributor']);
    if jsn.has('defaultValueDataRequirement') {a4} then
      result.defaultValue := ParseDataRequirement(jsn.vObj['defaultValueDataRequirement']);
    if jsn.has('defaultValueParameterDefinition') {a4} then
      result.defaultValue := ParseParameterDefinition(jsn.vObj['defaultValueParameterDefinition']);
    if jsn.has('defaultValueRelatedArtifact') {a4} then
      result.defaultValue := ParseRelatedArtifact(jsn.vObj['defaultValueRelatedArtifact']);
    if jsn.has('defaultValueTriggerDefinition') {a4} then
      result.defaultValue := ParseTriggerDefinition(jsn.vObj['defaultValueTriggerDefinition']);
    if jsn.has('defaultValueUsageContext') {a4} then
      result.defaultValue := ParseUsageContext(jsn.vObj['defaultValueUsageContext']);
    if jsn.has('defaultValueMeta') {a4} then
      result.defaultValue := ParseMeta(jsn.vObj['defaultValueMeta']);
    if jsn.has('defaultValueBase64Binary') or jsn.has('_defaultValueBase64Binary') then
      result.defaultValue := parseBase64Binary(jsn['defaultValueBase64Binary'], jsn.vObj['_defaultValueBase64Binary']);
    if jsn.has('defaultValueBoolean') or jsn.has('_defaultValueBoolean') then
      result.defaultValue := parseBoolean(jsn['defaultValueBoolean'], jsn.vObj['_defaultValueBoolean']);
    if jsn.has('defaultValueDate') or jsn.has('_defaultValueDate') then
      result.defaultValue := parseDate(jsn['defaultValueDate'], jsn.vObj['_defaultValueDate']);
    if jsn.has('defaultValueDateTime') or jsn.has('_defaultValueDateTime') then
      result.defaultValue := parseDateTime(jsn['defaultValueDateTime'], jsn.vObj['_defaultValueDateTime']);
    if jsn.has('defaultValueDecimal') or jsn.has('_defaultValueDecimal') then
      result.defaultValue := parseDecimal(jsn['defaultValueDecimal'], jsn.vObj['_defaultValueDecimal']);
    if jsn.has('defaultValueInstant') or jsn.has('_defaultValueInstant') then
      result.defaultValue := parseInstant(jsn['defaultValueInstant'], jsn.vObj['_defaultValueInstant']);
    if jsn.has('defaultValueInteger') or jsn.has('_defaultValueInteger') then
      result.defaultValue := parseInteger(jsn['defaultValueInteger'], jsn.vObj['_defaultValueInteger']);
    if jsn.has('defaultValueString') or jsn.has('_defaultValueString') then
      result.defaultValue := parseString(jsn['defaultValueString'], jsn.vObj['_defaultValueString']);
    if jsn.has('defaultValueTime') or jsn.has('_defaultValueTime') then
      result.defaultValue := parseTime(jsn['defaultValueTime'], jsn.vObj['_defaultValueTime']);
    if jsn.has('defaultValueUri') or jsn.has('_defaultValueUri') then
      result.defaultValue := parseUri(jsn['defaultValueUri'], jsn.vObj['_defaultValueUri']);
    if jsn.has('meaningWhenMissing') or jsn.has('_meaningWhenMissing') then
        result.meaningWhenMissingElement := ParseMarkdown(jsn['meaningWhenMissing'], jsn.vObj['_meaningWhenMissing']);{q}
    if jsn.has('orderMeaning') or jsn.has('_orderMeaning') then
        result.orderMeaningElement := ParseString(jsn['orderMeaning'], jsn.vObj['_orderMeaning']);{q}
    if jsn.has('fixedCode') or jsn.has('_fixedCode') then
      result.fixed := parseCode(jsn['fixedCode'], jsn.vObj['_fixedCode']);
    if jsn.has('fixedId') or jsn.has('_fixedId') then
      result.fixed := parseId(jsn['fixedId'], jsn.vObj['_fixedId']);
    if jsn.has('fixedMarkdown') or jsn.has('_fixedMarkdown') then
      result.fixed := parseMarkdown(jsn['fixedMarkdown'], jsn.vObj['_fixedMarkdown']);
    if jsn.has('fixedOid') or jsn.has('_fixedOid') then
      result.fixed := parseOid(jsn['fixedOid'], jsn.vObj['_fixedOid']);
    if jsn.has('fixedPositiveInt') or jsn.has('_fixedPositiveInt') then
      result.fixed := parsePositiveInt(jsn['fixedPositiveInt'], jsn.vObj['_fixedPositiveInt']);
    if jsn.has('fixedUnsignedInt') or jsn.has('_fixedUnsignedInt') then
      result.fixed := parseUnsignedInt(jsn['fixedUnsignedInt'], jsn.vObj['_fixedUnsignedInt']);
    if jsn.has('fixedAddress') {a4} then
      result.fixed := ParseAddress(jsn.vObj['fixedAddress']);
    if jsn.has('fixedAge') {a4} then
      result.fixed := ParseAge(jsn.vObj['fixedAge']);
    if jsn.has('fixedAnnotation') {a4} then
      result.fixed := ParseAnnotation(jsn.vObj['fixedAnnotation']);
    if jsn.has('fixedAttachment') {a4} then
      result.fixed := ParseAttachment(jsn.vObj['fixedAttachment']);
    if jsn.has('fixedCodeableConcept') {a4} then
      result.fixed := ParseCodeableConcept(jsn.vObj['fixedCodeableConcept']);
    if jsn.has('fixedCoding') {a4} then
      result.fixed := ParseCoding(jsn.vObj['fixedCoding']);
    if jsn.has('fixedContactPoint') {a4} then
      result.fixed := ParseContactPoint(jsn.vObj['fixedContactPoint']);
    if jsn.has('fixedCount') {a4} then
      result.fixed := ParseCount(jsn.vObj['fixedCount']);
    if jsn.has('fixedDistance') {a4} then
      result.fixed := ParseDistance(jsn.vObj['fixedDistance']);
    if jsn.has('fixedDuration') {a4} then
      result.fixed := ParseDuration(jsn.vObj['fixedDuration']);
    if jsn.has('fixedHumanName') {a4} then
      result.fixed := ParseHumanName(jsn.vObj['fixedHumanName']);
    if jsn.has('fixedIdentifier') {a4} then
      result.fixed := ParseIdentifier(jsn.vObj['fixedIdentifier']);
    if jsn.has('fixedMoney') {a4} then
      result.fixed := ParseMoney(jsn.vObj['fixedMoney']);
    if jsn.has('fixedPeriod') {a4} then
      result.fixed := ParsePeriod(jsn.vObj['fixedPeriod']);
    if jsn.has('fixedQuantity') {a4} then
      result.fixed := ParseQuantity(jsn.vObj['fixedQuantity']);
    if jsn.has('fixedRange') {a4} then
      result.fixed := ParseRange(jsn.vObj['fixedRange']);
    if jsn.has('fixedRatio') {a4} then
      result.fixed := ParseRatio(jsn.vObj['fixedRatio']);
    if jsn.has('fixedReference') {a4} then
      result.fixed := ParseReference(jsn.vObj['fixedReference']);
    if jsn.has('fixedSampledData') {a4} then
      result.fixed := ParseSampledData(jsn.vObj['fixedSampledData']);
    if jsn.has('fixedSignature') {a4} then
      result.fixed := ParseSignature(jsn.vObj['fixedSignature']);
    if jsn.has('fixedTiming') {a4} then
      result.fixed := ParseTiming(jsn.vObj['fixedTiming']);
    if jsn.has('fixedDosage') {a4} then
      result.fixed := ParseDosage(jsn.vObj['fixedDosage']);
    if jsn.has('fixedContactDetail') {a4} then
      result.fixed := ParseContactDetail(jsn.vObj['fixedContactDetail']);
    if jsn.has('fixedContributor') {a4} then
      result.fixed := ParseContributor(jsn.vObj['fixedContributor']);
    if jsn.has('fixedDataRequirement') {a4} then
      result.fixed := ParseDataRequirement(jsn.vObj['fixedDataRequirement']);
    if jsn.has('fixedParameterDefinition') {a4} then
      result.fixed := ParseParameterDefinition(jsn.vObj['fixedParameterDefinition']);
    if jsn.has('fixedRelatedArtifact') {a4} then
      result.fixed := ParseRelatedArtifact(jsn.vObj['fixedRelatedArtifact']);
    if jsn.has('fixedTriggerDefinition') {a4} then
      result.fixed := ParseTriggerDefinition(jsn.vObj['fixedTriggerDefinition']);
    if jsn.has('fixedUsageContext') {a4} then
      result.fixed := ParseUsageContext(jsn.vObj['fixedUsageContext']);
    if jsn.has('fixedMeta') {a4} then
      result.fixed := ParseMeta(jsn.vObj['fixedMeta']);
    if jsn.has('fixedBase64Binary') or jsn.has('_fixedBase64Binary') then
      result.fixed := parseBase64Binary(jsn['fixedBase64Binary'], jsn.vObj['_fixedBase64Binary']);
    if jsn.has('fixedBoolean') or jsn.has('_fixedBoolean') then
      result.fixed := parseBoolean(jsn['fixedBoolean'], jsn.vObj['_fixedBoolean']);
    if jsn.has('fixedDate') or jsn.has('_fixedDate') then
      result.fixed := parseDate(jsn['fixedDate'], jsn.vObj['_fixedDate']);
    if jsn.has('fixedDateTime') or jsn.has('_fixedDateTime') then
      result.fixed := parseDateTime(jsn['fixedDateTime'], jsn.vObj['_fixedDateTime']);
    if jsn.has('fixedDecimal') or jsn.has('_fixedDecimal') then
      result.fixed := parseDecimal(jsn['fixedDecimal'], jsn.vObj['_fixedDecimal']);
    if jsn.has('fixedInstant') or jsn.has('_fixedInstant') then
      result.fixed := parseInstant(jsn['fixedInstant'], jsn.vObj['_fixedInstant']);
    if jsn.has('fixedInteger') or jsn.has('_fixedInteger') then
      result.fixed := parseInteger(jsn['fixedInteger'], jsn.vObj['_fixedInteger']);
    if jsn.has('fixedString') or jsn.has('_fixedString') then
      result.fixed := parseString(jsn['fixedString'], jsn.vObj['_fixedString']);
    if jsn.has('fixedTime') or jsn.has('_fixedTime') then
      result.fixed := parseTime(jsn['fixedTime'], jsn.vObj['_fixedTime']);
    if jsn.has('fixedUri') or jsn.has('_fixedUri') then
      result.fixed := parseUri(jsn['fixedUri'], jsn.vObj['_fixedUri']);
    if jsn.has('patternCode') or jsn.has('_patternCode') then
      result.pattern := parseCode(jsn['patternCode'], jsn.vObj['_patternCode']);
    if jsn.has('patternId') or jsn.has('_patternId') then
      result.pattern := parseId(jsn['patternId'], jsn.vObj['_patternId']);
    if jsn.has('patternMarkdown') or jsn.has('_patternMarkdown') then
      result.pattern := parseMarkdown(jsn['patternMarkdown'], jsn.vObj['_patternMarkdown']);
    if jsn.has('patternOid') or jsn.has('_patternOid') then
      result.pattern := parseOid(jsn['patternOid'], jsn.vObj['_patternOid']);
    if jsn.has('patternPositiveInt') or jsn.has('_patternPositiveInt') then
      result.pattern := parsePositiveInt(jsn['patternPositiveInt'], jsn.vObj['_patternPositiveInt']);
    if jsn.has('patternUnsignedInt') or jsn.has('_patternUnsignedInt') then
      result.pattern := parseUnsignedInt(jsn['patternUnsignedInt'], jsn.vObj['_patternUnsignedInt']);
    if jsn.has('patternAddress') {a4} then
      result.pattern := ParseAddress(jsn.vObj['patternAddress']);
    if jsn.has('patternAge') {a4} then
      result.pattern := ParseAge(jsn.vObj['patternAge']);
    if jsn.has('patternAnnotation') {a4} then
      result.pattern := ParseAnnotation(jsn.vObj['patternAnnotation']);
    if jsn.has('patternAttachment') {a4} then
      result.pattern := ParseAttachment(jsn.vObj['patternAttachment']);
    if jsn.has('patternCodeableConcept') {a4} then
      result.pattern := ParseCodeableConcept(jsn.vObj['patternCodeableConcept']);
    if jsn.has('patternCoding') {a4} then
      result.pattern := ParseCoding(jsn.vObj['patternCoding']);
    if jsn.has('patternContactPoint') {a4} then
      result.pattern := ParseContactPoint(jsn.vObj['patternContactPoint']);
    if jsn.has('patternCount') {a4} then
      result.pattern := ParseCount(jsn.vObj['patternCount']);
    if jsn.has('patternDistance') {a4} then
      result.pattern := ParseDistance(jsn.vObj['patternDistance']);
    if jsn.has('patternDuration') {a4} then
      result.pattern := ParseDuration(jsn.vObj['patternDuration']);
    if jsn.has('patternHumanName') {a4} then
      result.pattern := ParseHumanName(jsn.vObj['patternHumanName']);
    if jsn.has('patternIdentifier') {a4} then
      result.pattern := ParseIdentifier(jsn.vObj['patternIdentifier']);
    if jsn.has('patternMoney') {a4} then
      result.pattern := ParseMoney(jsn.vObj['patternMoney']);
    if jsn.has('patternPeriod') {a4} then
      result.pattern := ParsePeriod(jsn.vObj['patternPeriod']);
    if jsn.has('patternQuantity') {a4} then
      result.pattern := ParseQuantity(jsn.vObj['patternQuantity']);
    if jsn.has('patternRange') {a4} then
      result.pattern := ParseRange(jsn.vObj['patternRange']);
    if jsn.has('patternRatio') {a4} then
      result.pattern := ParseRatio(jsn.vObj['patternRatio']);
    if jsn.has('patternReference') {a4} then
      result.pattern := ParseReference(jsn.vObj['patternReference']);
    if jsn.has('patternSampledData') {a4} then
      result.pattern := ParseSampledData(jsn.vObj['patternSampledData']);
    if jsn.has('patternSignature') {a4} then
      result.pattern := ParseSignature(jsn.vObj['patternSignature']);
    if jsn.has('patternTiming') {a4} then
      result.pattern := ParseTiming(jsn.vObj['patternTiming']);
    if jsn.has('patternDosage') {a4} then
      result.pattern := ParseDosage(jsn.vObj['patternDosage']);
    if jsn.has('patternContactDetail') {a4} then
      result.pattern := ParseContactDetail(jsn.vObj['patternContactDetail']);
    if jsn.has('patternContributor') {a4} then
      result.pattern := ParseContributor(jsn.vObj['patternContributor']);
    if jsn.has('patternDataRequirement') {a4} then
      result.pattern := ParseDataRequirement(jsn.vObj['patternDataRequirement']);
    if jsn.has('patternParameterDefinition') {a4} then
      result.pattern := ParseParameterDefinition(jsn.vObj['patternParameterDefinition']);
    if jsn.has('patternRelatedArtifact') {a4} then
      result.pattern := ParseRelatedArtifact(jsn.vObj['patternRelatedArtifact']);
    if jsn.has('patternTriggerDefinition') {a4} then
      result.pattern := ParseTriggerDefinition(jsn.vObj['patternTriggerDefinition']);
    if jsn.has('patternUsageContext') {a4} then
      result.pattern := ParseUsageContext(jsn.vObj['patternUsageContext']);
    if jsn.has('patternMeta') {a4} then
      result.pattern := ParseMeta(jsn.vObj['patternMeta']);
    if jsn.has('patternBase64Binary') or jsn.has('_patternBase64Binary') then
      result.pattern := parseBase64Binary(jsn['patternBase64Binary'], jsn.vObj['_patternBase64Binary']);
    if jsn.has('patternBoolean') or jsn.has('_patternBoolean') then
      result.pattern := parseBoolean(jsn['patternBoolean'], jsn.vObj['_patternBoolean']);
    if jsn.has('patternDate') or jsn.has('_patternDate') then
      result.pattern := parseDate(jsn['patternDate'], jsn.vObj['_patternDate']);
    if jsn.has('patternDateTime') or jsn.has('_patternDateTime') then
      result.pattern := parseDateTime(jsn['patternDateTime'], jsn.vObj['_patternDateTime']);
    if jsn.has('patternDecimal') or jsn.has('_patternDecimal') then
      result.pattern := parseDecimal(jsn['patternDecimal'], jsn.vObj['_patternDecimal']);
    if jsn.has('patternInstant') or jsn.has('_patternInstant') then
      result.pattern := parseInstant(jsn['patternInstant'], jsn.vObj['_patternInstant']);
    if jsn.has('patternInteger') or jsn.has('_patternInteger') then
      result.pattern := parseInteger(jsn['patternInteger'], jsn.vObj['_patternInteger']);
    if jsn.has('patternString') or jsn.has('_patternString') then
      result.pattern := parseString(jsn['patternString'], jsn.vObj['_patternString']);
    if jsn.has('patternTime') or jsn.has('_patternTime') then
      result.pattern := parseTime(jsn['patternTime'], jsn.vObj['_patternTime']);
    if jsn.has('patternUri') or jsn.has('_patternUri') then
      result.pattern := parseUri(jsn['patternUri'], jsn.vObj['_patternUri']);
    if jsn.has('example') then
      iterateArray(jsn.vArr['example'], result.exampleList, parseElementDefinitionExample);
    if jsn.has('minValuePositiveInt') or jsn.has('_minValuePositiveInt') then
      result.minValue := parsePositiveInt(jsn['minValuePositiveInt'], jsn.vObj['_minValuePositiveInt']);
    if jsn.has('minValueUnsignedInt') or jsn.has('_minValueUnsignedInt') then
      result.minValue := parseUnsignedInt(jsn['minValueUnsignedInt'], jsn.vObj['_minValueUnsignedInt']);
    if jsn.has('minValueQuantity') {a4} then
      result.minValue := ParseQuantity(jsn.vObj['minValueQuantity']);
    if jsn.has('minValueDate') or jsn.has('_minValueDate') then
      result.minValue := parseDate(jsn['minValueDate'], jsn.vObj['_minValueDate']);
    if jsn.has('minValueDateTime') or jsn.has('_minValueDateTime') then
      result.minValue := parseDateTime(jsn['minValueDateTime'], jsn.vObj['_minValueDateTime']);
    if jsn.has('minValueInstant') or jsn.has('_minValueInstant') then
      result.minValue := parseInstant(jsn['minValueInstant'], jsn.vObj['_minValueInstant']);
    if jsn.has('minValueTime') or jsn.has('_minValueTime') then
      result.minValue := parseTime(jsn['minValueTime'], jsn.vObj['_minValueTime']);
    if jsn.has('minValueDecimal') or jsn.has('_minValueDecimal') then
      result.minValue := parseDecimal(jsn['minValueDecimal'], jsn.vObj['_minValueDecimal']);
    if jsn.has('minValueInteger') or jsn.has('_minValueInteger') then
      result.minValue := parseInteger(jsn['minValueInteger'], jsn.vObj['_minValueInteger']);
    if jsn.has('maxValuePositiveInt') or jsn.has('_maxValuePositiveInt') then
      result.maxValue := parsePositiveInt(jsn['maxValuePositiveInt'], jsn.vObj['_maxValuePositiveInt']);
    if jsn.has('maxValueUnsignedInt') or jsn.has('_maxValueUnsignedInt') then
      result.maxValue := parseUnsignedInt(jsn['maxValueUnsignedInt'], jsn.vObj['_maxValueUnsignedInt']);
    if jsn.has('maxValueQuantity') {a4} then
      result.maxValue := ParseQuantity(jsn.vObj['maxValueQuantity']);
    if jsn.has('maxValueDate') or jsn.has('_maxValueDate') then
      result.maxValue := parseDate(jsn['maxValueDate'], jsn.vObj['_maxValueDate']);
    if jsn.has('maxValueDateTime') or jsn.has('_maxValueDateTime') then
      result.maxValue := parseDateTime(jsn['maxValueDateTime'], jsn.vObj['_maxValueDateTime']);
    if jsn.has('maxValueInstant') or jsn.has('_maxValueInstant') then
      result.maxValue := parseInstant(jsn['maxValueInstant'], jsn.vObj['_maxValueInstant']);
    if jsn.has('maxValueTime') or jsn.has('_maxValueTime') then
      result.maxValue := parseTime(jsn['maxValueTime'], jsn.vObj['_maxValueTime']);
    if jsn.has('maxValueDecimal') or jsn.has('_maxValueDecimal') then
      result.maxValue := parseDecimal(jsn['maxValueDecimal'], jsn.vObj['_maxValueDecimal']);
    if jsn.has('maxValueInteger') or jsn.has('_maxValueInteger') then
      result.maxValue := parseInteger(jsn['maxValueInteger'], jsn.vObj['_maxValueInteger']);
    if jsn.has('maxLength') or jsn.has('_maxLength') then
        result.maxLengthElement := ParseInteger(jsn['maxLength'], jsn.vObj['_maxLength']);{q}
      if jsn.has('condition') or jsn.has('_condition') then
      iteratePrimitiveArray(jsn.vArr['condition'], jsn.vArr['_condition'], result.conditionList, parseId);
    if jsn.has('constraint') then
      iterateArray(jsn.vArr['constraint'], result.constraintList, parseElementDefinitionConstraint);
    if jsn.has('mustSupport') or jsn.has('_mustSupport') then
        result.mustSupportElement := ParseBoolean(jsn['mustSupport'], jsn.vObj['_mustSupport']);{q}
    if jsn.has('isModifier') or jsn.has('_isModifier') then
        result.isModifierElement := ParseBoolean(jsn['isModifier'], jsn.vObj['_isModifier']);{q}
    if jsn.has('isSummary') or jsn.has('_isSummary') then
        result.isSummaryElement := ParseBoolean(jsn['isSummary'], jsn.vObj['_isSummary']);{q}
    if jsn.has('binding') then
        result.binding := ParseElementDefinitionBinding(jsn.vObj['binding']);{q3}
    if jsn.has('mapping') then
      iterateArray(jsn.vArr['mapping'], result.mappingList, parseElementDefinitionMapping);
end;

procedure TFHIRJsonComposer.ComposeElementDefinition(json : TJSONWriter; name : string; elem : TFhirElementDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.representationList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.representationList.Count - 1 do
    begin
      val := val or (elem.representationList[i].hasPrimitiveValue);
      ext := ext or ((elem.representationList[i].id <> '') or (elem.representationList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('representation');
      for i := 0 to elem.representationList.Count - 1 do
        ComposeEnumValue(json, '', elem.representationList[i], CODES_TFhirPropertyRepresentationEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_representation');
      for i := 0 to elem.representationList.Count - 1 do
        ComposeEnumProps(json, '', elem.representationList[i], CODES_TFhirPropertyRepresentationEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'sliceName', elem.sliceNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'sliceName', elem.sliceNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'label', elem.label_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'label', elem.label_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(json, '', elem.codeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeElementDefinitionSlicing(json, 'slicing', elem.slicing); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'short', elem.shortElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'short', elem.shortElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownValue(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownProps(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownValue(json, 'requirements', elem.requirementsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownProps(json, 'requirements', elem.requirementsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.aliasList.Count - 1 do
    begin
      ext := ext or ((elem.aliasList[i].id <> '') or (elem.aliasList[i].hasExtensionList) {no-comments or (elem.aliasList[i].hasComments)});
      val := val or (elem.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringValue(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringProps(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedIntValue(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedIntProps(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeElementDefinitionBase(json, 'base', elem.base); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'contentReference', elem.contentReferenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'contentReference', elem.contentReferenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeElementDefinitionType(json, '', elem.type_List[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'defaultValueCode', TFhirCode(elem.defaultValue), false);
    ComposeCodeProps(json, 'defaultValueCode', TFhirCode(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirId) then 
  begin
    ComposeIdValue(json, 'defaultValueId', TFhirId(elem.defaultValue), false);
    ComposeIdProps(json, 'defaultValueId', TFhirId(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue), false);
    ComposeMarkdownProps(json, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirOid) then 
  begin
    ComposeOidValue(json, 'defaultValueOid', TFhirOid(elem.defaultValue), false);
    ComposeOidProps(json, 'defaultValueOid', TFhirOid(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue), false);
    ComposePositiveIntProps(json, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue), false);
    ComposeUnsignedIntProps(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAddress) then 
    ComposeAddress(json, 'defaultValueAddress', TFhirAddress(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAge) then 
    ComposeAge(json, 'defaultValueAge', TFhirAge(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAnnotation) then 
    ComposeAnnotation(json, 'defaultValueAnnotation', TFhirAnnotation(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAttachment) then 
    ComposeAttachment(json, 'defaultValueAttachment', TFhirAttachment(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'defaultValueCodeableConcept', TFhirCodeableConcept(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCoding) then 
    ComposeCoding(json, 'defaultValueCoding', TFhirCoding(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirContactPoint) then 
    ComposeContactPoint(json, 'defaultValueContactPoint', TFhirContactPoint(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCount) then 
    ComposeCount(json, 'defaultValueCount', TFhirCount(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDistance) then 
    ComposeDistance(json, 'defaultValueDistance', TFhirDistance(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDuration) then 
    ComposeDuration(json, 'defaultValueDuration', TFhirDuration(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirHumanName) then 
    ComposeHumanName(json, 'defaultValueHumanName', TFhirHumanName(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirIdentifier) then 
    ComposeIdentifier(json, 'defaultValueIdentifier', TFhirIdentifier(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirMoney) then 
    ComposeMoney(json, 'defaultValueMoney', TFhirMoney(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirPeriod) then 
    ComposePeriod(json, 'defaultValuePeriod', TFhirPeriod(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirQuantity) then 
    ComposeQuantity(json, 'defaultValueQuantity', TFhirQuantity(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirRange) then 
    ComposeRange(json, 'defaultValueRange', TFhirRange(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirRatio) then 
    ComposeRatio(json, 'defaultValueRatio', TFhirRatio(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirReference) then 
    ComposeReference(json, 'defaultValueReference', TFhirReference(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirSampledData) then 
    ComposeSampledData(json, 'defaultValueSampledData', TFhirSampledData(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirSignature) then 
    ComposeSignature(json, 'defaultValueSignature', TFhirSignature(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirTiming) then 
    ComposeTiming(json, 'defaultValueTiming', TFhirTiming(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDosage) then 
    ComposeDosage(json, 'defaultValueDosage', TFhirDosage(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirContactDetail) then 
    ComposeContactDetail(json, 'defaultValueContactDetail', TFhirContactDetail(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirContributor) then 
    ComposeContributor(json, 'defaultValueContributor', TFhirContributor(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'defaultValueDataRequirement', TFhirDataRequirement(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'defaultValueParameterDefinition', TFhirParameterDefinition(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'defaultValueRelatedArtifact', TFhirRelatedArtifact(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'defaultValueTriggerDefinition', TFhirTriggerDefinition(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUsageContext) then 
    ComposeUsageContext(json, 'defaultValueUsageContext', TFhirUsageContext(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirMeta) then 
    ComposeMeta(json, 'defaultValueMeta', TFhirMeta(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue), false);
    ComposeBase64BinaryProps(json, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue), false);
    ComposeBooleanProps(json, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'defaultValueDate', TFhirDate(elem.defaultValue), false);
    ComposeDateProps(json, 'defaultValueDate', TFhirDate(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue), false);
    ComposeDateTimeProps(json, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue), false);
    ComposeDecimalProps(json, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'defaultValueInstant', TFhirInstant(elem.defaultValue), false);
    ComposeInstantProps(json, 'defaultValueInstant', TFhirInstant(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'defaultValueInteger', TFhirInteger(elem.defaultValue), false);
    ComposeIntegerProps(json, 'defaultValueInteger', TFhirInteger(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirString) then 
  begin
    ComposeStringValue(json, 'defaultValueString', TFhirString(elem.defaultValue), false);
    ComposeStringProps(json, 'defaultValueString', TFhirString(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'defaultValueTime', TFhirTime(elem.defaultValue), false);
    ComposeTimeProps(json, 'defaultValueTime', TFhirTime(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUri) then 
  begin
    ComposeUriValue(json, 'defaultValueUri', TFhirUri(elem.defaultValue), false);
    ComposeUriProps(json, 'defaultValueUri', TFhirUri(elem.defaultValue), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownValue(json, 'meaningWhenMissing', elem.meaningWhenMissingElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownProps(json, 'meaningWhenMissing', elem.meaningWhenMissingElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'orderMeaning', elem.orderMeaningElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'orderMeaning', elem.orderMeaningElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'fixedCode', TFhirCode(elem.fixed), false);
    ComposeCodeProps(json, 'fixedCode', TFhirCode(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirId) then 
  begin
    ComposeIdValue(json, 'fixedId', TFhirId(elem.fixed), false);
    ComposeIdProps(json, 'fixedId', TFhirId(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'fixedMarkdown', TFhirMarkdown(elem.fixed), false);
    ComposeMarkdownProps(json, 'fixedMarkdown', TFhirMarkdown(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirOid) then 
  begin
    ComposeOidValue(json, 'fixedOid', TFhirOid(elem.fixed), false);
    ComposeOidProps(json, 'fixedOid', TFhirOid(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'fixedPositiveInt', TFhirPositiveInt(elem.fixed), false);
    ComposePositiveIntProps(json, 'fixedPositiveInt', TFhirPositiveInt(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'fixedUnsignedInt', TFhirUnsignedInt(elem.fixed), false);
    ComposeUnsignedIntProps(json, 'fixedUnsignedInt', TFhirUnsignedInt(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAddress) then 
    ComposeAddress(json, 'fixedAddress', TFhirAddress(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAge) then 
    ComposeAge(json, 'fixedAge', TFhirAge(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAnnotation) then 
    ComposeAnnotation(json, 'fixedAnnotation', TFhirAnnotation(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAttachment) then 
    ComposeAttachment(json, 'fixedAttachment', TFhirAttachment(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'fixedCodeableConcept', TFhirCodeableConcept(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCoding) then 
    ComposeCoding(json, 'fixedCoding', TFhirCoding(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirContactPoint) then 
    ComposeContactPoint(json, 'fixedContactPoint', TFhirContactPoint(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCount) then 
    ComposeCount(json, 'fixedCount', TFhirCount(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDistance) then 
    ComposeDistance(json, 'fixedDistance', TFhirDistance(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDuration) then 
    ComposeDuration(json, 'fixedDuration', TFhirDuration(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirHumanName) then 
    ComposeHumanName(json, 'fixedHumanName', TFhirHumanName(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirIdentifier) then 
    ComposeIdentifier(json, 'fixedIdentifier', TFhirIdentifier(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirMoney) then 
    ComposeMoney(json, 'fixedMoney', TFhirMoney(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirPeriod) then 
    ComposePeriod(json, 'fixedPeriod', TFhirPeriod(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirQuantity) then 
    ComposeQuantity(json, 'fixedQuantity', TFhirQuantity(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirRange) then 
    ComposeRange(json, 'fixedRange', TFhirRange(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirRatio) then 
    ComposeRatio(json, 'fixedRatio', TFhirRatio(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirReference) then 
    ComposeReference(json, 'fixedReference', TFhirReference(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirSampledData) then 
    ComposeSampledData(json, 'fixedSampledData', TFhirSampledData(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirSignature) then 
    ComposeSignature(json, 'fixedSignature', TFhirSignature(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirTiming) then 
    ComposeTiming(json, 'fixedTiming', TFhirTiming(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDosage) then 
    ComposeDosage(json, 'fixedDosage', TFhirDosage(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirContactDetail) then 
    ComposeContactDetail(json, 'fixedContactDetail', TFhirContactDetail(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirContributor) then 
    ComposeContributor(json, 'fixedContributor', TFhirContributor(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'fixedDataRequirement', TFhirDataRequirement(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'fixedParameterDefinition', TFhirParameterDefinition(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'fixedRelatedArtifact', TFhirRelatedArtifact(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'fixedTriggerDefinition', TFhirTriggerDefinition(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUsageContext) then 
    ComposeUsageContext(json, 'fixedUsageContext', TFhirUsageContext(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirMeta) then 
    ComposeMeta(json, 'fixedMeta', TFhirMeta(elem.fixed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'fixedBase64Binary', TFhirBase64Binary(elem.fixed), false);
    ComposeBase64BinaryProps(json, 'fixedBase64Binary', TFhirBase64Binary(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'fixedBoolean', TFhirBoolean(elem.fixed), false);
    ComposeBooleanProps(json, 'fixedBoolean', TFhirBoolean(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDate) then 
  begin
    ComposeDateValue(json, 'fixedDate', TFhirDate(elem.fixed), false);
    ComposeDateProps(json, 'fixedDate', TFhirDate(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'fixedDateTime', TFhirDateTime(elem.fixed), false);
    ComposeDateTimeProps(json, 'fixedDateTime', TFhirDateTime(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'fixedDecimal', TFhirDecimal(elem.fixed), false);
    ComposeDecimalProps(json, 'fixedDecimal', TFhirDecimal(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'fixedInstant', TFhirInstant(elem.fixed), false);
    ComposeInstantProps(json, 'fixedInstant', TFhirInstant(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'fixedInteger', TFhirInteger(elem.fixed), false);
    ComposeIntegerProps(json, 'fixedInteger', TFhirInteger(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirString) then 
  begin
    ComposeStringValue(json, 'fixedString', TFhirString(elem.fixed), false);
    ComposeStringProps(json, 'fixedString', TFhirString(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'fixedTime', TFhirTime(elem.fixed), false);
    ComposeTimeProps(json, 'fixedTime', TFhirTime(elem.fixed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUri) then 
  begin
    ComposeUriValue(json, 'fixedUri', TFhirUri(elem.fixed), false);
    ComposeUriProps(json, 'fixedUri', TFhirUri(elem.fixed), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'patternCode', TFhirCode(elem.pattern), false);
    ComposeCodeProps(json, 'patternCode', TFhirCode(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirId) then 
  begin
    ComposeIdValue(json, 'patternId', TFhirId(elem.pattern), false);
    ComposeIdProps(json, 'patternId', TFhirId(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'patternMarkdown', TFhirMarkdown(elem.pattern), false);
    ComposeMarkdownProps(json, 'patternMarkdown', TFhirMarkdown(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirOid) then 
  begin
    ComposeOidValue(json, 'patternOid', TFhirOid(elem.pattern), false);
    ComposeOidProps(json, 'patternOid', TFhirOid(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'patternPositiveInt', TFhirPositiveInt(elem.pattern), false);
    ComposePositiveIntProps(json, 'patternPositiveInt', TFhirPositiveInt(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'patternUnsignedInt', TFhirUnsignedInt(elem.pattern), false);
    ComposeUnsignedIntProps(json, 'patternUnsignedInt', TFhirUnsignedInt(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAddress) then 
    ComposeAddress(json, 'patternAddress', TFhirAddress(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAge) then 
    ComposeAge(json, 'patternAge', TFhirAge(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAnnotation) then 
    ComposeAnnotation(json, 'patternAnnotation', TFhirAnnotation(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAttachment) then 
    ComposeAttachment(json, 'patternAttachment', TFhirAttachment(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'patternCodeableConcept', TFhirCodeableConcept(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCoding) then 
    ComposeCoding(json, 'patternCoding', TFhirCoding(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirContactPoint) then 
    ComposeContactPoint(json, 'patternContactPoint', TFhirContactPoint(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCount) then 
    ComposeCount(json, 'patternCount', TFhirCount(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDistance) then 
    ComposeDistance(json, 'patternDistance', TFhirDistance(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDuration) then 
    ComposeDuration(json, 'patternDuration', TFhirDuration(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirHumanName) then 
    ComposeHumanName(json, 'patternHumanName', TFhirHumanName(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirIdentifier) then 
    ComposeIdentifier(json, 'patternIdentifier', TFhirIdentifier(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirMoney) then 
    ComposeMoney(json, 'patternMoney', TFhirMoney(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirPeriod) then 
    ComposePeriod(json, 'patternPeriod', TFhirPeriod(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirQuantity) then 
    ComposeQuantity(json, 'patternQuantity', TFhirQuantity(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirRange) then 
    ComposeRange(json, 'patternRange', TFhirRange(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirRatio) then 
    ComposeRatio(json, 'patternRatio', TFhirRatio(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirReference) then 
    ComposeReference(json, 'patternReference', TFhirReference(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirSampledData) then 
    ComposeSampledData(json, 'patternSampledData', TFhirSampledData(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirSignature) then 
    ComposeSignature(json, 'patternSignature', TFhirSignature(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirTiming) then 
    ComposeTiming(json, 'patternTiming', TFhirTiming(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDosage) then 
    ComposeDosage(json, 'patternDosage', TFhirDosage(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirContactDetail) then 
    ComposeContactDetail(json, 'patternContactDetail', TFhirContactDetail(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirContributor) then 
    ComposeContributor(json, 'patternContributor', TFhirContributor(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'patternDataRequirement', TFhirDataRequirement(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'patternParameterDefinition', TFhirParameterDefinition(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'patternRelatedArtifact', TFhirRelatedArtifact(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'patternTriggerDefinition', TFhirTriggerDefinition(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUsageContext) then 
    ComposeUsageContext(json, 'patternUsageContext', TFhirUsageContext(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirMeta) then 
    ComposeMeta(json, 'patternMeta', TFhirMeta(elem.pattern)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'patternBase64Binary', TFhirBase64Binary(elem.pattern), false);
    ComposeBase64BinaryProps(json, 'patternBase64Binary', TFhirBase64Binary(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'patternBoolean', TFhirBoolean(elem.pattern), false);
    ComposeBooleanProps(json, 'patternBoolean', TFhirBoolean(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDate) then 
  begin
    ComposeDateValue(json, 'patternDate', TFhirDate(elem.pattern), false);
    ComposeDateProps(json, 'patternDate', TFhirDate(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'patternDateTime', TFhirDateTime(elem.pattern), false);
    ComposeDateTimeProps(json, 'patternDateTime', TFhirDateTime(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'patternDecimal', TFhirDecimal(elem.pattern), false);
    ComposeDecimalProps(json, 'patternDecimal', TFhirDecimal(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'patternInstant', TFhirInstant(elem.pattern), false);
    ComposeInstantProps(json, 'patternInstant', TFhirInstant(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'patternInteger', TFhirInteger(elem.pattern), false);
    ComposeIntegerProps(json, 'patternInteger', TFhirInteger(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirString) then 
  begin
    ComposeStringValue(json, 'patternString', TFhirString(elem.pattern), false);
    ComposeStringProps(json, 'patternString', TFhirString(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'patternTime', TFhirTime(elem.pattern), false);
    ComposeTimeProps(json, 'patternTime', TFhirTime(elem.pattern), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUri) then 
  begin
    ComposeUriValue(json, 'patternUri', TFhirUri(elem.pattern), false);
    ComposeUriProps(json, 'patternUri', TFhirUri(elem.pattern), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.exampleList.Count > 0) then
  begin
    json.valueArray('example');
    for i := 0 to elem.exampleList.Count - 1 do
      ComposeElementDefinitionExample(json, '', elem.exampleList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'minValuePositiveInt', TFhirPositiveInt(elem.minValue), false);
    ComposePositiveIntProps(json, 'minValuePositiveInt', TFhirPositiveInt(elem.minValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'minValueUnsignedInt', TFhirUnsignedInt(elem.minValue), false);
    ComposeUnsignedIntProps(json, 'minValueUnsignedInt', TFhirUnsignedInt(elem.minValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirQuantity) then 
    ComposeQuantity(json, 'minValueQuantity', TFhirQuantity(elem.minValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'minValueDate', TFhirDate(elem.minValue), false);
    ComposeDateProps(json, 'minValueDate', TFhirDate(elem.minValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'minValueDateTime', TFhirDateTime(elem.minValue), false);
    ComposeDateTimeProps(json, 'minValueDateTime', TFhirDateTime(elem.minValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'minValueInstant', TFhirInstant(elem.minValue), false);
    ComposeInstantProps(json, 'minValueInstant', TFhirInstant(elem.minValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'minValueTime', TFhirTime(elem.minValue), false);
    ComposeTimeProps(json, 'minValueTime', TFhirTime(elem.minValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'minValueDecimal', TFhirDecimal(elem.minValue), false);
    ComposeDecimalProps(json, 'minValueDecimal', TFhirDecimal(elem.minValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'minValueInteger', TFhirInteger(elem.minValue), false);
    ComposeIntegerProps(json, 'minValueInteger', TFhirInteger(elem.minValue), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'maxValuePositiveInt', TFhirPositiveInt(elem.maxValue), false);
    ComposePositiveIntProps(json, 'maxValuePositiveInt', TFhirPositiveInt(elem.maxValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'maxValueUnsignedInt', TFhirUnsignedInt(elem.maxValue), false);
    ComposeUnsignedIntProps(json, 'maxValueUnsignedInt', TFhirUnsignedInt(elem.maxValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirQuantity) then 
    ComposeQuantity(json, 'maxValueQuantity', TFhirQuantity(elem.maxValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'maxValueDate', TFhirDate(elem.maxValue), false);
    ComposeDateProps(json, 'maxValueDate', TFhirDate(elem.maxValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'maxValueDateTime', TFhirDateTime(elem.maxValue), false);
    ComposeDateTimeProps(json, 'maxValueDateTime', TFhirDateTime(elem.maxValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'maxValueInstant', TFhirInstant(elem.maxValue), false);
    ComposeInstantProps(json, 'maxValueInstant', TFhirInstant(elem.maxValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'maxValueTime', TFhirTime(elem.maxValue), false);
    ComposeTimeProps(json, 'maxValueTime', TFhirTime(elem.maxValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'maxValueDecimal', TFhirDecimal(elem.maxValue), false);
    ComposeDecimalProps(json, 'maxValueDecimal', TFhirDecimal(elem.maxValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'maxValueInteger', TFhirInteger(elem.maxValue), false);
    ComposeIntegerProps(json, 'maxValueInteger', TFhirInteger(elem.maxValue), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerValue(json, 'maxLength', elem.maxLengthElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerProps(json, 'maxLength', elem.maxLengthElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.conditionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.conditionList.Count - 1 do
    begin
      ext := ext or ((elem.conditionList[i].id <> '') or (elem.conditionList[i].hasExtensionList) {no-comments or (elem.conditionList[i].hasComments)});
      val := val or (elem.conditionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('condition');
      for i := 0 to elem.conditionList.Count - 1 do
        ComposeIdValue(json, '',elem.conditionList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_condition');
      for i := 0 to elem.conditionList.Count - 1 do
        ComposeIdProps(json, '',elem.conditionList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.constraintList.Count > 0) then
  begin
    json.valueArray('constraint');
    for i := 0 to elem.constraintList.Count - 1 do
      ComposeElementDefinitionConstraint(json, '', elem.constraintList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.mustSupport <> false)) and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanValue(json, 'mustSupport', elem.mustSupportElement, false);
  if not elem.noCompose and (not isCanonical or (elem.mustSupport <> false)) and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanProps(json, 'mustSupport', elem.mustSupportElement, false);
  if not elem.noCompose and (not isCanonical or (elem.isModifier <> false)) and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanValue(json, 'isModifier', elem.isModifierElement, false);
  if not elem.noCompose and (not isCanonical or (elem.isModifier <> false)) and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanProps(json, 'isModifier', elem.isModifierElement, false);
  if not elem.noCompose and (not isCanonical or (elem.isSummary <> false)) and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanValue(json, 'isSummary', elem.isSummaryElement, false);
  if not elem.noCompose and (not isCanonical or (elem.isSummary <> false)) and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanProps(json, 'isSummary', elem.isSummaryElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeElementDefinitionBinding(json, 'binding', elem.binding); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.mappingList.Count > 0) then
  begin
    json.valueArray('mapping');
    for i := 0 to elem.mappingList.Count - 1 do
      ComposeElementDefinitionMapping(json, '', elem.mappingList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTimingRepeat(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTimingRepeat(jsn)); {2}
end;

function TFHIRJsonParser.ParseTimingRepeat(jsn : TJsonObject) : TFhirTimingRepeat;
begin
  result := TFhirTimingRepeat.create;
  try
    ParseTimingRepeatProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTimingRepeatProperties(jsn : TJsonObject; result : TFhirTimingRepeat);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('boundsDuration') {a4} then
      result.bounds := ParseDuration(jsn.vObj['boundsDuration']);
    if jsn.has('boundsRange') {a4} then
      result.bounds := ParseRange(jsn.vObj['boundsRange']);
    if jsn.has('boundsPeriod') {a4} then
      result.bounds := ParsePeriod(jsn.vObj['boundsPeriod']);
    if jsn.has('count') or jsn.has('_count') then
        result.countElement := ParseInteger(jsn['count'], jsn.vObj['_count']);{q}
    if jsn.has('countMax') or jsn.has('_countMax') then
        result.countMaxElement := ParseInteger(jsn['countMax'], jsn.vObj['_countMax']);{q}
    if jsn.has('duration') or jsn.has('_duration') then
        result.durationElement := ParseDecimal(jsn['duration'], jsn.vObj['_duration']);{q}
    if jsn.has('durationMax') or jsn.has('_durationMax') then
        result.durationMaxElement := ParseDecimal(jsn['durationMax'], jsn.vObj['_durationMax']);{q}
    if jsn.has('durationUnit') or jsn.has('_durationUnit')  then
      result.durationUnitElement := parseEnum(jsn.path+'/durationUnit', jsn['durationUnit'], jsn.vObj['_durationUnit'], CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum);
    if jsn.has('frequency') or jsn.has('_frequency') then
        result.frequencyElement := ParseInteger(jsn['frequency'], jsn.vObj['_frequency']);{q}
    if jsn.has('frequencyMax') or jsn.has('_frequencyMax') then
        result.frequencyMaxElement := ParseInteger(jsn['frequencyMax'], jsn.vObj['_frequencyMax']);{q}
    if jsn.has('period') or jsn.has('_period') then
        result.periodElement := ParseDecimal(jsn['period'], jsn.vObj['_period']);{q}
    if jsn.has('periodMax') or jsn.has('_periodMax') then
        result.periodMaxElement := ParseDecimal(jsn['periodMax'], jsn.vObj['_periodMax']);{q}
    if jsn.has('periodUnit') or jsn.has('_periodUnit')  then
      result.periodUnitElement := parseEnum(jsn.path+'/periodUnit', jsn['periodUnit'], jsn.vObj['_periodUnit'], CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum);
    if jsn.has('dayOfWeek') or jsn.has('_dayOfWeek') then
      iterateEnumArray(jsn.vArr['dayOfWeek'], jsn.vArr['_dayOfWeek'], jsn.path+'/dayOfWeek', result.dayOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
      if jsn.has('timeOfDay') or jsn.has('_timeOfDay') then
      iteratePrimitiveArray(jsn.vArr['timeOfDay'], jsn.vArr['_timeOfDay'], result.timeOfDayList, parseTime);
    if jsn.has('when') or jsn.has('_when') then
      iterateEnumArray(jsn.vArr['when'], jsn.vArr['_when'], jsn.path+'/when', result.whenList, parseEnum, CODES_TFhirEventTimingEnum, SYSTEMS_TFhirEventTimingEnum);
    if jsn.has('offset') or jsn.has('_offset') then
        result.offsetElement := ParseUnsignedInt(jsn['offset'], jsn.vObj['_offset']);{q}
end;

procedure TFHIRJsonComposer.ComposeTimingRepeat(json : TJSONWriter; name : string; elem : TFhirTimingRepeat; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.bounds is TFhirDuration) then 
    ComposeDuration(json, 'boundsDuration', TFhirDuration(elem.bounds)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.bounds is TFhirRange) then 
    ComposeRange(json, 'boundsRange', TFhirRange(elem.bounds)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.bounds is TFhirPeriod) then 
    ComposePeriod(json, 'boundsPeriod', TFhirPeriod(elem.bounds)) ;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'count', elem.countElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'count', elem.countElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'countMax', elem.countMaxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'countMax', elem.countMaxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'duration', elem.durationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'duration', elem.durationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'durationMax', elem.durationMaxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'durationMax', elem.durationMaxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'durationUnit', elem.DurationUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'durationUnit', elem.DurationUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if not elem.noCompose and (not isCanonical or (elem.frequency <> '1')) and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'frequency', elem.frequencyElement, false);
  if not elem.noCompose and (not isCanonical or (elem.frequency <> '1')) and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'frequency', elem.frequencyElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'frequencyMax', elem.frequencyMaxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'frequencyMax', elem.frequencyMaxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'period', elem.periodElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'period', elem.periodElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'periodMax', elem.periodMaxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'periodMax', elem.periodMaxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'periodUnit', elem.PeriodUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'periodUnit', elem.PeriodUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.dayOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.dayOfWeekList.Count - 1 do
    begin
      val := val or (elem.dayOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((elem.dayOfWeekList[i].id <> '') or (elem.dayOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('dayOfWeek');
      for i := 0 to elem.dayOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', elem.dayOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_dayOfWeek');
      for i := 0 to elem.dayOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', elem.dayOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.timeOfDayList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.timeOfDayList.Count - 1 do
    begin
      ext := ext or ((elem.timeOfDayList[i].id <> '') or (elem.timeOfDayList[i].hasExtensionList) {no-comments or (elem.timeOfDayList[i].hasComments)});
      val := val or (elem.timeOfDayList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('timeOfDay');
      for i := 0 to elem.timeOfDayList.Count - 1 do
        ComposeTimeValue(json, '',elem.timeOfDayList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_timeOfDay');
      for i := 0 to elem.timeOfDayList.Count - 1 do
        ComposeTimeProps(json, '',elem.timeOfDayList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.whenList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.whenList.Count - 1 do
    begin
      val := val or (elem.whenList[i].hasPrimitiveValue);
      ext := ext or ((elem.whenList[i].id <> '') or (elem.whenList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('when');
      for i := 0 to elem.whenList.Count - 1 do
        ComposeEnumValue(json, '', elem.whenList[i], CODES_TFhirEventTimingEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_when');
      for i := 0 to elem.whenList.Count - 1 do
        ComposeEnumProps(json, '', elem.whenList[i], CODES_TFhirEventTimingEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'offset', elem.offsetElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'offset', elem.offsetElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTiming(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTiming(jsn)); {2}
end;

function TFHIRJsonParser.ParseTiming(jsn : TJsonObject) : TFhirTiming;
begin
  result := TFhirTiming.create;
  try
    ParseTimingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTimingProperties(jsn : TJsonObject; result : TFhirTiming);
begin
    ParseElementProperties(jsn, result);
      if jsn.has('event') or jsn.has('_event') then
      iteratePrimitiveArray(jsn.vArr['event'], jsn.vArr['_event'], result.eventList, parseDateTime);
    if jsn.has('repeat') then
        result.repeat_ := ParseTimingRepeat(jsn.vObj['repeat']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTiming(json : TJSONWriter; name : string; elem : TFhirTiming; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.eventList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.eventList.Count - 1 do
    begin
      ext := ext or ((elem.eventList[i].id <> '') or (elem.eventList[i].hasExtensionList) {no-comments or (elem.eventList[i].hasComments)});
      val := val or (elem.eventList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('event');
      for i := 0 to elem.eventList.Count - 1 do
        ComposeDateTimeValue(json, '',elem.eventList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_event');
      for i := 0 to elem.eventList.Count - 1 do
        ComposeDateTimeProps(json, '',elem.eventList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeTimingRepeat(json, 'repeat', elem.repeat_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCount(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCount(jsn)); {2}
end;

function TFHIRJsonParser.ParseCount(jsn : TJsonObject) : TFhirCount;
begin
  result := TFhirCount.create;
  try
    ParseCountProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCountProperties(jsn : TJsonObject; result : TFhirCount);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeCount(json : TJSONWriter; name : string; elem : TFhirCount; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMoney(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMoney(jsn)); {2}
end;

function TFHIRJsonParser.ParseMoney(jsn : TJsonObject) : TFhirMoney;
begin
  result := TFhirMoney.create;
  try
    ParseMoneyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMoneyProperties(jsn : TJsonObject; result : TFhirMoney);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeMoney(json : TJSONWriter; name : string; elem : TFhirMoney; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAge(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAge(jsn)); {2}
end;

function TFHIRJsonParser.ParseAge(jsn : TJsonObject) : TFhirAge;
begin
  result := TFhirAge.create;
  try
    ParseAgeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAgeProperties(jsn : TJsonObject; result : TFhirAge);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeAge(json : TJSONWriter; name : string; elem : TFhirAge; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDistance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDistance(jsn)); {2}
end;

function TFHIRJsonParser.ParseDistance(jsn : TJsonObject) : TFhirDistance;
begin
  result := TFhirDistance.create;
  try
    ParseDistanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDistanceProperties(jsn : TJsonObject; result : TFhirDistance);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeDistance(json : TJSONWriter; name : string; elem : TFhirDistance; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDuration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDuration(jsn)); {2}
end;

function TFHIRJsonParser.ParseDuration(jsn : TJsonObject) : TFhirDuration;
begin
  result := TFhirDuration.create;
  try
    ParseDurationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDurationProperties(jsn : TJsonObject; result : TFhirDuration);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeDuration(json : TJSONWriter; name : string; elem : TFhirDuration; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

{$IFDEF FHIR_ACCOUNT}
procedure TFHIRJsonParser.ParseAccountCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAccountCoverage(jsn)); {2}
end;

function TFHIRJsonParser.ParseAccountCoverage(jsn : TJsonObject) : TFhirAccountCoverage;
begin
  result := TFhirAccountCoverage.create;
  try
    ParseAccountCoverageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAccountCoverageProperties(jsn : TJsonObject; result : TFhirAccountCoverage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('priority') or jsn.has('_priority') then
        result.priorityElement := ParsePositiveInt(jsn['priority'], jsn.vObj['_priority']);{q}
end;

procedure TFHIRJsonComposer.ComposeAccountCoverage(json : TJSONWriter; name : string; elem : TFhirAccountCoverage; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'priority', elem.priorityElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'priority', elem.priorityElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAccountGuarantor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAccountGuarantor(jsn)); {2}
end;

function TFHIRJsonParser.ParseAccountGuarantor(jsn : TJsonObject) : TFhirAccountGuarantor;
begin
  result := TFhirAccountGuarantor.create;
  try
    ParseAccountGuarantorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAccountGuarantorProperties(jsn : TJsonObject; result : TFhirAccountGuarantor);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
    if jsn.has('onHold') or jsn.has('_onHold') then
        result.onHoldElement := ParseBoolean(jsn['onHold'], jsn.vObj['_onHold']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeAccountGuarantor(json : TJSONWriter; name : string; elem : TFhirAccountGuarantor; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'party', elem.party); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'onHold', elem.onHoldElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'onHold', elem.onHoldElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAccount(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAccount(jsn)); {2}
end;

function TFHIRJsonParser.ParseAccount(jsn : TJsonObject) : TFhirAccount;
begin
  result := TFhirAccount.create;
  try
    ParseAccountProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAccountProperties(jsn : TJsonObject; result : TFhirAccount);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirAccountStatusEnum, SYSTEMS_TFhirAccountStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('active') then
        result.active := ParsePeriod(jsn.vObj['active']);{q3}
    if jsn.has('coverage') then
      iterateArray(jsn.vArr['coverage'], result.coverageList, parseAccountCoverage);
    if jsn.has('owner') then
        result.owner := ParseReference{TFhirOrganization}(jsn.vObj['owner']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('guarantor') then
      iterateArray(jsn.vArr['guarantor'], result.guarantorList, parseAccountGuarantor);
    if jsn.has('partOf') then
        result.partOf := ParseReference{TFhirAccount}(jsn.vObj['partOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeAccount(json : TJSONWriter; name : string; elem : TFhirAccount; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirAccountStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirAccountStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'active', elem.active); {a}
  if not elem.noCompose and doCompose('coverage') and (SummaryOption in [soFull, soSummary, soData]) and (elem.coverageList.Count > 0) then
  begin
    json.valueArray('coverage');
    for i := 0 to elem.coverageList.Count - 1 do
      ComposeAccountCoverage(json, '', elem.coverageList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('owner') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'owner', elem.owner); {a}
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('guarantor') and (SummaryOption in [soFull, soData]) and (elem.guarantorList.Count > 0) then
  begin
    json.valueArray('guarantor');
    for i := 0 to elem.guarantorList.Count - 1 do
      ComposeAccountGuarantor(json, '', elem.guarantorList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirAccount}(json, 'partOf', elem.partOf); {a}
end;

{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
procedure TFHIRJsonParser.ParseActivityDefinitionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseActivityDefinitionParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseActivityDefinitionParticipant(jsn : TJsonObject) : TFhirActivityDefinitionParticipant;
begin
  result := TFhirActivityDefinitionParticipant.create;
  try
    ParseActivityDefinitionParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionParticipantProperties(jsn : TJsonObject; result : TFhirActivityDefinitionParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
end;

procedure TFHIRJsonComposer.ComposeActivityDefinitionParticipant(json : TJSONWriter; name : string; elem : TFhirActivityDefinitionParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseActivityDefinitionDynamicValue(jsn)); {2}
end;

function TFHIRJsonParser.ParseActivityDefinitionDynamicValue(jsn : TJsonObject) : TFhirActivityDefinitionDynamicValue;
begin
  result := TFhirActivityDefinitionDynamicValue.create;
  try
    ParseActivityDefinitionDynamicValueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionDynamicValueProperties(jsn : TJsonObject; result : TFhirActivityDefinitionDynamicValue);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseString(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposeActivityDefinitionDynamicValue(json : TJSONWriter; name : string; elem : TFhirActivityDefinitionDynamicValue; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseActivityDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseActivityDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseActivityDefinition(jsn : TJsonObject) : TFhirActivityDefinition;
begin
  result := TFhirActivityDefinition.create;
  try
    ParseActivityDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionProperties(jsn : TJsonObject; result : TFhirActivityDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := ParseString(jsn['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := ParseDate(jsn['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := ParseDate(jsn['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('library') then
      iterateArray(jsn.vArr['library'], result.library_List, parseReference{TFhirLibrary});
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('doNotPerform') or jsn.has('_doNotPerform') then
        result.doNotPerformElement := ParseBoolean(jsn['doNotPerform'], jsn.vObj['_doNotPerform']);{q}
    if jsn.has('timingTiming') {a4} then
      result.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingAge') {a4} then
      result.timing := ParseAge(jsn.vObj['timingAge']);
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingRange') {a4} then
      result.timing := ParseRange(jsn.vObj['timingRange']);
    if jsn.has('timingDuration') {a4} then
      result.timing := ParseDuration(jsn.vObj['timingDuration']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      result.timing := parseDateTime(jsn['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseActivityDefinitionParticipant);
    if jsn.has('productReference') {a3} then
      result.product := ParseReference(jsn.vObj['productReference']);
    if jsn.has('productCodeableConcept') {a4} then
      result.product := ParseCodeableConcept(jsn.vObj['productCodeableConcept']);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('dosage') then
      iterateArray(jsn.vArr['dosage'], result.dosageList, parseDosage);
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], result.bodySiteList, parseCodeableConcept);
    if jsn.has('specimenRequirement') then
      iterateArray(jsn.vArr['specimenRequirement'], result.specimenRequirementList, parseReference{TFhirSpecimenDefinition});
    if jsn.has('transform') then
        result.transform := ParseReference{TFhirStructureMap}(jsn.vObj['transform']);{q3}
    if jsn.has('dynamicValue') then
      iterateArray(jsn.vArr['dynamicValue'], result.dynamicValueList, parseActivityDefinitionDynamicValue);
end;

procedure TFHIRJsonComposer.ComposeActivityDefinition(json : TJSONWriter; name : string; elem : TFhirActivityDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('effectivePeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('topic') and (SummaryOption in [soFull, soData]) and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contributor') and (SummaryOption in [soFull, soData]) and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('relatedArtifact') and (SummaryOption in [soFull, soData]) and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('library_') and (SummaryOption in [soFull, soData]) and (elem.library_List.Count > 0) then
  begin
    json.valueArray('library');
    for i := 0 to elem.library_List.Count - 1 do
      ComposeReference{TFhirLibrary}(json, '', elem.library_List[i]); {z - Reference(Library)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('doNotPerform') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'doNotPerform', elem.doNotPerformElement, false);
  if not elem.noCompose and doCompose('doNotPerform') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'doNotPerform', elem.doNotPerformElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirAge) then 
    ComposeAge(json, 'timingAge', TFhirAge(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirRange) then 
    ComposeRange(json, 'timingRange', TFhirRange(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDuration) then 
    ComposeDuration(json, 'timingDuration', TFhirDuration(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and doCompose('participant') and (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeActivityDefinitionParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.product is TFhirReference) then
    ComposeReference(json, 'productReference', TFhirReference(elem.product))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.product is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'productCodeableConcept', TFhirCodeableConcept(elem.product)) ;
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and doCompose('dosage') and (SummaryOption in [soFull, soData]) and (elem.dosageList.Count > 0) then
  begin
    json.valueArray('dosage');
    for i := 0 to elem.dosageList.Count - 1 do
      ComposeDosage(json, '', elem.dosageList[i]); {z - Dosage}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('bodySite') and (SummaryOption in [soFull, soData]) and (elem.bodySiteList.Count > 0) then
  begin
    json.valueArray('bodySite');
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodySiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specimenRequirement') and (SummaryOption in [soFull, soData]) and (elem.specimenRequirementList.Count > 0) then
  begin
    json.valueArray('specimenRequirement');
    for i := 0 to elem.specimenRequirementList.Count - 1 do
      ComposeReference{TFhirSpecimenDefinition}(json, '', elem.specimenRequirementList[i]); {z - Reference(SpecimenDefinition)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('transform') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureMap}(json, 'transform', elem.transform); {a}
  if not elem.noCompose and doCompose('dynamicValue') and (SummaryOption in [soFull, soData]) and (elem.dynamicValueList.Count > 0) then
  begin
    json.valueArray('dynamicValue');
    for i := 0 to elem.dynamicValueList.Count - 1 do
      ComposeActivityDefinitionDynamicValue(json, '', elem.dynamicValueList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
procedure TFHIRJsonParser.ParseAdverseEventSuspectEntity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdverseEventSuspectEntity(jsn)); {2}
end;

function TFHIRJsonParser.ParseAdverseEventSuspectEntity(jsn : TJsonObject) : TFhirAdverseEventSuspectEntity;
begin
  result := TFhirAdverseEventSuspectEntity.create;
  try
    ParseAdverseEventSuspectEntityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdverseEventSuspectEntityProperties(jsn : TJsonObject; result : TFhirAdverseEventSuspectEntity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('instance') then
        result.instance := ParseReference{Resource}(jsn.vObj['instance']);{q3}
    if jsn.has('causality') then
      iterateArray(jsn.vArr['causality'], result.causalityList, parseAdverseEventSuspectEntityCausality);
end;

procedure TFHIRJsonComposer.ComposeAdverseEventSuspectEntity(json : TJSONWriter; name : string; elem : TFhirAdverseEventSuspectEntity; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'instance', elem.instance); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.causalityList.Count > 0) then
  begin
    json.valueArray('causality');
    for i := 0 to elem.causalityList.Count - 1 do
      ComposeAdverseEventSuspectEntityCausality(json, '', elem.causalityList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAdverseEventSuspectEntityCausality(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdverseEventSuspectEntityCausality(jsn)); {2}
end;

function TFHIRJsonParser.ParseAdverseEventSuspectEntityCausality(jsn : TJsonObject) : TFhirAdverseEventSuspectEntityCausality;
begin
  result := TFhirAdverseEventSuspectEntityCausality.create;
  try
    ParseAdverseEventSuspectEntityCausalityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdverseEventSuspectEntityCausalityProperties(jsn : TJsonObject; result : TFhirAdverseEventSuspectEntityCausality);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('assessment') then
        result.assessment := ParseCodeableConcept(jsn.vObj['assessment']);{q3}
    if jsn.has('productRelatedness') or jsn.has('_productRelatedness') then
        result.productRelatednessElement := ParseString(jsn['productRelatedness'], jsn.vObj['_productRelatedness']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
end;

procedure TFHIRJsonComposer.ComposeAdverseEventSuspectEntityCausality(json : TJSONWriter; name : string; elem : TFhirAdverseEventSuspectEntityCausality; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'assessment', elem.assessment); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'productRelatedness', elem.productRelatednessElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'productRelatedness', elem.productRelatednessElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAdverseEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdverseEvent(jsn)); {2}
end;

function TFHIRJsonParser.ParseAdverseEvent(jsn : TJsonObject) : TFhirAdverseEvent;
begin
  result := TFhirAdverseEvent.create;
  try
    ParseAdverseEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdverseEventProperties(jsn : TJsonObject; result : TFhirAdverseEvent);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('actuality') or jsn.has('_actuality')  then
      result.actualityElement := parseEnum(jsn.path+'/actuality', jsn['actuality'], jsn.vObj['_actuality'], CODES_TFhirAdverseEventActualityEnum, SYSTEMS_TFhirAdverseEventActualityEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('event') then
        result.event := ParseCodeableConcept(jsn.vObj['event']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('resultingCondition') then
      iterateArray(jsn.vArr['resultingCondition'], result.resultingConditionList, parseReference{TFhirCondition});
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('seriousness') then
        result.seriousness := ParseCodeableConcept(jsn.vObj['seriousness']);{q3}
    if jsn.has('severity') then
        result.severity := ParseCodeableConcept(jsn.vObj['severity']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('recorder') then
        result.recorder := ParseReference{Resource}(jsn.vObj['recorder']);{q3}
    if jsn.has('eventParticipant') then
        result.eventParticipant := ParseReference{Resource}(jsn.vObj['eventParticipant']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('suspectEntity') then
      iterateArray(jsn.vArr['suspectEntity'], result.suspectEntityList, parseAdverseEventSuspectEntity);
    if jsn.has('subjectMedicalHistory') then
      iterateArray(jsn.vArr['subjectMedicalHistory'], result.subjectMedicalHistoryList, parseReference{Resource});
    if jsn.has('referenceDocument') then
      iterateArray(jsn.vArr['referenceDocument'], result.referenceDocumentList, parseReference{TFhirDocumentReference});
    if jsn.has('study') then
      iterateArray(jsn.vArr['study'], result.studyList, parseReference{TFhirResearchStudy});
end;

procedure TFHIRJsonComposer.ComposeAdverseEvent(json : TJSONWriter; name : string; elem : TFhirAdverseEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('actuality') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'actuality', elem.ActualityElement, CODES_TFhirAdverseEventActualityEnum, false);
  if not elem.noCompose and doCompose('actuality') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'actuality', elem.ActualityElement, CODES_TFhirAdverseEventActualityEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('event') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'event', elem.event); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('resultingCondition') and (SummaryOption in [soFull, soSummary, soData]) and (elem.resultingConditionList.Count > 0) then
  begin
    json.valueArray('resultingCondition');
    for i := 0 to elem.resultingConditionList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.resultingConditionList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and doCompose('seriousness') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'seriousness', elem.seriousness); {a}
  if not elem.noCompose and doCompose('severity') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'severity', elem.severity); {a}
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if not elem.noCompose and doCompose('recorder') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'recorder', elem.recorder); {a}
  if not elem.noCompose and doCompose('eventParticipant') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'eventParticipant', elem.eventParticipant); {a}
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('suspectEntity') and (SummaryOption in [soFull, soSummary, soData]) and (elem.suspectEntityList.Count > 0) then
  begin
    json.valueArray('suspectEntity');
    for i := 0 to elem.suspectEntityList.Count - 1 do
      ComposeAdverseEventSuspectEntity(json, '', elem.suspectEntityList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('subjectMedicalHistory') and (SummaryOption in [soFull, soSummary, soData]) and (elem.subjectMedicalHistoryList.Count > 0) then
  begin
    json.valueArray('subjectMedicalHistory');
    for i := 0 to elem.subjectMedicalHistoryList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.subjectMedicalHistoryList[i]); {z - Reference(Condition|Observation|AllergyIntolerance|FamilyMemberHistory|Immunization|Procedure)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('referenceDocument') and (SummaryOption in [soFull, soSummary, soData]) and (elem.referenceDocumentList.Count > 0) then
  begin
    json.valueArray('referenceDocument');
    for i := 0 to elem.referenceDocumentList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.referenceDocumentList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('study') and (SummaryOption in [soFull, soSummary, soData]) and (elem.studyList.Count > 0) then
  begin
    json.valueArray('study');
    for i := 0 to elem.studyList.Count - 1 do
      ComposeReference{TFhirResearchStudy}(json, '', elem.studyList[i]); {z - Reference(ResearchStudy)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
procedure TFHIRJsonParser.ParseAllergyIntoleranceReaction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAllergyIntoleranceReaction(jsn)); {2}
end;

function TFHIRJsonParser.ParseAllergyIntoleranceReaction(jsn : TJsonObject) : TFhirAllergyIntoleranceReaction;
begin
  result := TFhirAllergyIntoleranceReaction.create;
  try
    ParseAllergyIntoleranceReactionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAllergyIntoleranceReactionProperties(jsn : TJsonObject; result : TFhirAllergyIntoleranceReaction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('substance') then
        result.substance := ParseCodeableConcept(jsn.vObj['substance']);{q3}
    if jsn.has('manifestation') then
      iterateArray(jsn.vArr['manifestation'], result.manifestationList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('onset') or jsn.has('_onset') then
        result.onsetElement := ParseDateTime(jsn['onset'], jsn.vObj['_onset']);{q}
    if jsn.has('severity') or jsn.has('_severity')  then
      result.severityElement := parseEnum(jsn.path+'/severity', jsn['severity'], jsn.vObj['_severity'], CODES_TFhirReactionEventSeverityEnum, SYSTEMS_TFhirReactionEventSeverityEnum);
    if jsn.has('exposureRoute') then
        result.exposureRoute := ParseCodeableConcept(jsn.vObj['exposureRoute']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeAllergyIntoleranceReaction(json : TJSONWriter; name : string; elem : TFhirAllergyIntoleranceReaction; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'substance', elem.substance); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.manifestationList.Count > 0) then
  begin
    json.valueArray('manifestation');
    for i := 0 to elem.manifestationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.manifestationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'onset', elem.onsetElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'onset', elem.onsetElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'severity', elem.SeverityElement, CODES_TFhirReactionEventSeverityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'severity', elem.SeverityElement, CODES_TFhirReactionEventSeverityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'exposureRoute', elem.exposureRoute); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAllergyIntolerance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAllergyIntolerance(jsn)); {2}
end;

function TFHIRJsonParser.ParseAllergyIntolerance(jsn : TJsonObject) : TFhirAllergyIntolerance;
begin
  result := TFhirAllergyIntolerance.create;
  try
    ParseAllergyIntoleranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAllergyIntoleranceProperties(jsn : TJsonObject; result : TFhirAllergyIntolerance);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('clinicalStatus') or jsn.has('_clinicalStatus')  then
      result.clinicalStatusElement := parseEnum(jsn.path+'/clinicalStatus', jsn['clinicalStatus'], jsn.vObj['_clinicalStatus'], CODES_TFhirAllergyClinicalStatusEnum, SYSTEMS_TFhirAllergyClinicalStatusEnum);
    if jsn.has('verificationStatus') or jsn.has('_verificationStatus')  then
      result.verificationStatusElement := parseEnum(jsn.path+'/verificationStatus', jsn['verificationStatus'], jsn.vObj['_verificationStatus'], CODES_TFhirAllergyVerificationStatusEnum, SYSTEMS_TFhirAllergyVerificationStatusEnum);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirAllergyIntoleranceTypeEnum, SYSTEMS_TFhirAllergyIntoleranceTypeEnum);
    if jsn.has('category') or jsn.has('_category') then
      iterateEnumArray(jsn.vArr['category'], jsn.vArr['_category'], jsn.path+'/category', result.categoryList, parseEnum, CODES_TFhirAllergyIntoleranceCategoryEnum, SYSTEMS_TFhirAllergyIntoleranceCategoryEnum);
    if jsn.has('criticality') or jsn.has('_criticality')  then
      result.criticalityElement := parseEnum(jsn.path+'/criticality', jsn['criticality'], jsn.vObj['_criticality'], CODES_TFhirAllergyIntoleranceCriticalityEnum, SYSTEMS_TFhirAllergyIntoleranceCriticalityEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('onsetAge') {a4} then
      result.onset := ParseAge(jsn.vObj['onsetAge']);
    if jsn.has('onsetPeriod') {a4} then
      result.onset := ParsePeriod(jsn.vObj['onsetPeriod']);
    if jsn.has('onsetRange') {a4} then
      result.onset := ParseRange(jsn.vObj['onsetRange']);
    if jsn.has('onsetDateTime') or jsn.has('_onsetDateTime') then
      result.onset := parseDateTime(jsn['onsetDateTime'], jsn.vObj['_onsetDateTime']);
    if jsn.has('onsetString') or jsn.has('_onsetString') then
      result.onset := parseString(jsn['onsetString'], jsn.vObj['_onsetString']);
    if jsn.has('assertedDate') or jsn.has('_assertedDate') then
        result.assertedDateElement := ParseDateTime(jsn['assertedDate'], jsn.vObj['_assertedDate']);{q}
    if jsn.has('recorder') then
        result.recorder := ParseReference{Resource}(jsn.vObj['recorder']);{q3}
    if jsn.has('asserter') then
        result.asserter := ParseReference{Resource}(jsn.vObj['asserter']);{q3}
    if jsn.has('lastOccurrence') or jsn.has('_lastOccurrence') then
        result.lastOccurrenceElement := ParseDateTime(jsn['lastOccurrence'], jsn.vObj['_lastOccurrence']);{q}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('reaction') then
      iterateArray(jsn.vArr['reaction'], result.reactionList, parseAllergyIntoleranceReaction);
end;

procedure TFHIRJsonComposer.ComposeAllergyIntolerance(json : TJSONWriter; name : string; elem : TFhirAllergyIntolerance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('clinicalStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'clinicalStatus', elem.ClinicalStatusElement, CODES_TFhirAllergyClinicalStatusEnum, false);
  if not elem.noCompose and doCompose('clinicalStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'clinicalStatus', elem.ClinicalStatusElement, CODES_TFhirAllergyClinicalStatusEnum, false);
  if not elem.noCompose and doCompose('verificationStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'verificationStatus', elem.VerificationStatusElement, CODES_TFhirAllergyVerificationStatusEnum, false);
  if not elem.noCompose and doCompose('verificationStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'verificationStatus', elem.VerificationStatusElement, CODES_TFhirAllergyVerificationStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAllergyIntoleranceTypeEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAllergyIntoleranceTypeEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.categoryList.Count - 1 do
    begin
      val := val or (elem.categoryList[i].hasPrimitiveValue);
      ext := ext or ((elem.categoryList[i].id <> '') or (elem.categoryList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('category');
      for i := 0 to elem.categoryList.Count - 1 do
        ComposeEnumValue(json, '', elem.categoryList[i], CODES_TFhirAllergyIntoleranceCategoryEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_category');
      for i := 0 to elem.categoryList.Count - 1 do
        ComposeEnumProps(json, '', elem.categoryList[i], CODES_TFhirAllergyIntoleranceCategoryEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('criticality') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'criticality', elem.CriticalityElement, CODES_TFhirAllergyIntoleranceCriticalityEnum, false);
  if not elem.noCompose and doCompose('criticality') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'criticality', elem.CriticalityElement, CODES_TFhirAllergyIntoleranceCriticalityEnum, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onset is TFhirAge) then 
    ComposeAge(json, 'onsetAge', TFhirAge(elem.onset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onset is TFhirPeriod) then 
    ComposePeriod(json, 'onsetPeriod', TFhirPeriod(elem.onset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onset is TFhirRange) then 
    ComposeRange(json, 'onsetRange', TFhirRange(elem.onset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onset is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'onsetDateTime', TFhirDateTime(elem.onset), false);
    ComposeDateTimeProps(json, 'onsetDateTime', TFhirDateTime(elem.onset), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onset is TFhirString) then 
  begin
    ComposeStringValue(json, 'onsetString', TFhirString(elem.onset), false);
    ComposeStringProps(json, 'onsetString', TFhirString(elem.onset), false);
  end;
  if not elem.noCompose and doCompose('assertedDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'assertedDate', elem.assertedDateElement, false);
  if not elem.noCompose and doCompose('assertedDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'assertedDate', elem.assertedDateElement, false);
  if not elem.noCompose and doCompose('recorder') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'recorder', elem.recorder); {a}
  if not elem.noCompose and doCompose('asserter') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'asserter', elem.asserter); {a}
  if not elem.noCompose and doCompose('lastOccurrence') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'lastOccurrence', elem.lastOccurrenceElement, false);
  if not elem.noCompose and doCompose('lastOccurrence') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'lastOccurrence', elem.lastOccurrenceElement, false);
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reaction') and (SummaryOption in [soFull, soData]) and (elem.reactionList.Count > 0) then
  begin
    json.valueArray('reaction');
    for i := 0 to elem.reactionList.Count - 1 do
      ComposeAllergyIntoleranceReaction(json, '', elem.reactionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
procedure TFHIRJsonParser.ParseAppointmentParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAppointmentParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseAppointmentParticipant(jsn : TJsonObject) : TFhirAppointmentParticipant;
begin
  result := TFhirAppointmentParticipant.create;
  try
    ParseAppointmentParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAppointmentParticipantProperties(jsn : TJsonObject; result : TFhirAppointmentParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('required') or jsn.has('_required')  then
      result.requiredElement := parseEnum(jsn.path+'/required', jsn['required'], jsn.vObj['_required'], CODES_TFhirParticipantrequiredEnum, SYSTEMS_TFhirParticipantrequiredEnum);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirParticipationstatusEnum, SYSTEMS_TFhirParticipationstatusEnum);
end;

procedure TFHIRJsonComposer.ComposeAppointmentParticipant(json : TJSONWriter; name : string; elem : TFhirAppointmentParticipant; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'required', elem.RequiredElement, CODES_TFhirParticipantrequiredEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'required', elem.RequiredElement, CODES_TFhirParticipantrequiredEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirParticipationstatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirParticipationstatusEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAppointment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAppointment(jsn)); {2}
end;

function TFHIRJsonParser.ParseAppointment(jsn : TJsonObject) : TFhirAppointment;
begin
  result := TFhirAppointment.create;
  try
    ParseAppointmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAppointmentProperties(jsn : TJsonObject; result : TFhirAppointment);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirAppointmentstatusEnum, SYSTEMS_TFhirAppointmentstatusEnum);
    if jsn.has('serviceCategory') then
        result.serviceCategory := ParseCodeableConcept(jsn.vObj['serviceCategory']);{q3}
    if jsn.has('serviceType') then
      iterateArray(jsn.vArr['serviceType'], result.serviceTypeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('appointmentType') then
        result.appointmentType := ParseCodeableConcept(jsn.vObj['appointmentType']);{q3}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('indication') then
      iterateArray(jsn.vArr['indication'], result.indicationList, parseReference{Resource});
    if jsn.has('priority') or jsn.has('_priority') then
        result.priorityElement := ParseUnsignedInt(jsn['priority'], jsn.vObj['_priority']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := ParseInstant(jsn['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := ParseInstant(jsn['end'], jsn.vObj['_end']);{q}
    if jsn.has('minutesDuration') or jsn.has('_minutesDuration') then
        result.minutesDurationElement := ParsePositiveInt(jsn['minutesDuration'], jsn.vObj['_minutesDuration']);{q}
    if jsn.has('slot') then
      iterateArray(jsn.vArr['slot'], result.slotList, parseReference{TFhirSlot});
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('patientInstruction') or jsn.has('_patientInstruction') then
        result.patientInstructionElement := ParseString(jsn['patientInstruction'], jsn.vObj['_patientInstruction']);{q}
    if jsn.has('incomingReferral') then
      iterateArray(jsn.vArr['incomingReferral'], result.incomingReferralList, parseReference{TFhirServiceRequest});
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseAppointmentParticipant);
    if jsn.has('requestedPeriod') then
      iterateArray(jsn.vArr['requestedPeriod'], result.requestedPeriodList, parsePeriod);
end;

procedure TFHIRJsonComposer.ComposeAppointment(json : TJSONWriter; name : string; elem : TFhirAppointment; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirAppointmentstatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirAppointmentstatusEnum, false);
  if not elem.noCompose and doCompose('serviceCategory') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'serviceCategory', elem.serviceCategory); {a}
  if not elem.noCompose and doCompose('serviceType') and (SummaryOption in [soFull, soSummary, soData]) and (elem.serviceTypeList.Count > 0) then
  begin
    json.valueArray('serviceType');
    for i := 0 to elem.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specialty') and (SummaryOption in [soFull, soSummary, soData]) and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('appointmentType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'appointmentType', elem.appointmentType); {a}
  if not elem.noCompose and doCompose('reason') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('indication') and (SummaryOption in [soFull, soData]) and (elem.indicationList.Count > 0) then
  begin
    json.valueArray('indication');
    for i := 0 to elem.indicationList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.indicationList[i]); {z - Reference(Condition|Procedure)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'priority', elem.priorityElement, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'priority', elem.priorityElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('supportingInformation') and (SummaryOption in [soFull, soData]) and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('start') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'start', elem.startElement, false);
  if not elem.noCompose and doCompose('start') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'start', elem.startElement, false);
  if not elem.noCompose and doCompose('end_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'end', elem.end_Element, false);
  if not elem.noCompose and doCompose('end_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'end', elem.end_Element, false);
  if not elem.noCompose and doCompose('minutesDuration') and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'minutesDuration', elem.minutesDurationElement, false);
  if not elem.noCompose and doCompose('minutesDuration') and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'minutesDuration', elem.minutesDurationElement, false);
  if not elem.noCompose and doCompose('slot') and (SummaryOption in [soFull, soData]) and (elem.slotList.Count > 0) then
  begin
    json.valueArray('slot');
    for i := 0 to elem.slotList.Count - 1 do
      ComposeReference{TFhirSlot}(json, '', elem.slotList[i]); {z - Reference(Slot)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('patientInstruction') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'patientInstruction', elem.patientInstructionElement, false);
  if not elem.noCompose and doCompose('patientInstruction') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'patientInstruction', elem.patientInstructionElement, false);
  if not elem.noCompose and doCompose('incomingReferral') and (SummaryOption in [soFull, soData]) and (elem.incomingReferralList.Count > 0) then
  begin
    json.valueArray('incomingReferral');
    for i := 0 to elem.incomingReferralList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(json, '', elem.incomingReferralList[i]); {z - Reference(ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('participant') and (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeAppointmentParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('requestedPeriod') and (SummaryOption in [soFull, soData]) and (elem.requestedPeriodList.Count > 0) then
  begin
    json.valueArray('requestedPeriod');
    for i := 0 to elem.requestedPeriodList.Count - 1 do
      ComposePeriod(json, '', elem.requestedPeriodList[i]); {z - Period}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
procedure TFHIRJsonParser.ParseAppointmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAppointmentResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseAppointmentResponse(jsn : TJsonObject) : TFhirAppointmentResponse;
begin
  result := TFhirAppointmentResponse.create;
  try
    ParseAppointmentResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAppointmentResponseProperties(jsn : TJsonObject; result : TFhirAppointmentResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('appointment') then
        result.appointment := ParseReference{TFhirAppointment}(jsn.vObj['appointment']);{q3}
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := ParseInstant(jsn['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := ParseInstant(jsn['end'], jsn.vObj['_end']);{q}
    if jsn.has('participantType') then
      iterateArray(jsn.vArr['participantType'], result.participantTypeList, parseCodeableConcept);
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('participantStatus') or jsn.has('_participantStatus')  then
      result.participantStatusElement := parseEnum(jsn.path+'/participantStatus', jsn['participantStatus'], jsn.vObj['_participantStatus'], CODES_TFhirParticipationstatusEnum, SYSTEMS_TFhirParticipationstatusEnum);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeAppointmentResponse(json : TJSONWriter; name : string; elem : TFhirAppointmentResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('appointment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirAppointment}(json, 'appointment', elem.appointment); {a}
  if not elem.noCompose and doCompose('start') and (SummaryOption in [soFull, soData]) then
    ComposeInstantValue(json, 'start', elem.startElement, false);
  if not elem.noCompose and doCompose('start') and (SummaryOption in [soFull, soData]) then
    ComposeInstantProps(json, 'start', elem.startElement, false);
  if not elem.noCompose and doCompose('end_') and (SummaryOption in [soFull, soData]) then
    ComposeInstantValue(json, 'end', elem.end_Element, false);
  if not elem.noCompose and doCompose('end_') and (SummaryOption in [soFull, soData]) then
    ComposeInstantProps(json, 'end', elem.end_Element, false);
  if not elem.noCompose and doCompose('participantType') and (SummaryOption in [soFull, soSummary, soData]) and (elem.participantTypeList.Count > 0) then
  begin
    json.valueArray('participantType');
    for i := 0 to elem.participantTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.participantTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('actor') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not elem.noCompose and doCompose('participantStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'participantStatus', elem.ParticipantStatusElement, CODES_TFhirParticipationstatusEnum, false);
  if not elem.noCompose and doCompose('participantStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'participantStatus', elem.ParticipantStatusElement, CODES_TFhirParticipationstatusEnum, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
end;

{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
procedure TFHIRJsonParser.ParseAuditEventAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventAgent(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventAgent(jsn : TJsonObject) : TFhirAuditEventAgent;
begin
  result := TFhirAuditEventAgent.create;
  try
    ParseAuditEventAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventAgentProperties(jsn : TJsonObject; result : TFhirAuditEventAgent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], result.roleList, parseCodeableConcept);
    if jsn.has('reference') then
        result.reference := ParseReference{Resource}(jsn.vObj['reference']);{q3}
    if jsn.has('userId') then
        result.userId := ParseIdentifier(jsn.vObj['userId']);{q3}
    if jsn.has('altId') or jsn.has('_altId') then
        result.altIdElement := ParseString(jsn['altId'], jsn.vObj['_altId']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('requestor') or jsn.has('_requestor') then
        result.requestorElement := ParseBoolean(jsn['requestor'], jsn.vObj['_requestor']);{q}
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
      if jsn.has('policy') or jsn.has('_policy') then
      iteratePrimitiveArray(jsn.vArr['policy'], jsn.vArr['_policy'], result.policyList, parseUri);
    if jsn.has('media') then
        result.media := ParseCoding(jsn.vObj['media']);{q3}
    if jsn.has('network') then
        result.network := ParseAuditEventAgentNetwork(jsn.vObj['network']);{q3}
    if jsn.has('purposeOfUse') then
      iterateArray(jsn.vArr['purposeOfUse'], result.purposeOfUseList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeAuditEventAgent(json : TJSONWriter; name : string; elem : TFhirAuditEventAgent; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.roleList.Count > 0) then
  begin
    json.valueArray('role');
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.roleList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'reference', elem.reference); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'userId', elem.userId); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'altId', elem.altIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'altId', elem.altIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'requestor', elem.requestorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'requestor', elem.requestorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.policyList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.policyList.Count - 1 do
    begin
      ext := ext or ((elem.policyList[i].id <> '') or (elem.policyList[i].hasExtensionList) {no-comments or (elem.policyList[i].hasComments)});
      val := val or (elem.policyList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('policy');
      for i := 0 to elem.policyList.Count - 1 do
        ComposeUriValue(json, '',elem.policyList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_policy');
      for i := 0 to elem.policyList.Count - 1 do
        ComposeUriProps(json, '',elem.policyList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'media', elem.media); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeAuditEventAgentNetwork(json, 'network', elem.network); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.purposeOfUseList.Count > 0) then
  begin
    json.valueArray('purposeOfUse');
    for i := 0 to elem.purposeOfUseList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.purposeOfUseList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEventAgentNetwork(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventAgentNetwork(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventAgentNetwork(jsn : TJsonObject) : TFhirAuditEventAgentNetwork;
begin
  result := TFhirAuditEventAgentNetwork.create;
  try
    ParseAuditEventAgentNetworkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventAgentNetworkProperties(jsn : TJsonObject; result : TFhirAuditEventAgentNetwork);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('address') or jsn.has('_address') then
        result.addressElement := ParseString(jsn['address'], jsn.vObj['_address']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirNetworkTypeEnum, SYSTEMS_TFhirNetworkTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeAuditEventAgentNetwork(json : TJSONWriter; name : string; elem : TFhirAuditEventAgentNetwork; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'address', elem.addressElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'address', elem.addressElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirNetworkTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirNetworkTypeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEventSource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventSource(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventSource(jsn : TJsonObject) : TFhirAuditEventSource;
begin
  result := TFhirAuditEventSource.create;
  try
    ParseAuditEventSourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventSourceProperties(jsn : TJsonObject; result : TFhirAuditEventSource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('site') or jsn.has('_site') then
        result.siteElement := ParseString(jsn['site'], jsn.vObj['_site']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeAuditEventSource(json : TJSONWriter; name : string; elem : TFhirAuditEventSource; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'site', elem.siteElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'site', elem.siteElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCoding(json, '', elem.type_List[i]); {z - Coding}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEventEntity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventEntity(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventEntity(jsn : TJsonObject) : TFhirAuditEventEntity;
begin
  result := TFhirAuditEventEntity.create;
  try
    ParseAuditEventEntityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventEntityProperties(jsn : TJsonObject; result : TFhirAuditEventEntity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('reference') then
        result.reference := ParseReference{TFhirReference}(jsn.vObj['reference']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('role') then
        result.role := ParseCoding(jsn.vObj['role']);{q3}
    if jsn.has('lifecycle') then
        result.lifecycle := ParseCoding(jsn.vObj['lifecycle']);{q3}
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCoding);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('query') or jsn.has('_query') then
        result.queryElement := ParseBase64Binary(jsn['query'], jsn.vObj['_query']);{q}
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseAuditEventEntityDetail);
end;

procedure TFHIRJsonComposer.ComposeAuditEventEntity(json : TJSONWriter; name : string; elem : TFhirAuditEventEntity; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'reference', elem.reference); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'lifecycle', elem.lifecycle); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(json, '', elem.securityLabelList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryValue(json, 'query', elem.queryElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryProps(json, 'query', elem.queryElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeAuditEventEntityDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEventEntityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventEntityDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventEntityDetail(jsn : TJsonObject) : TFhirAuditEventEntityDetail;
begin
  result := TFhirAuditEventEntityDetail.create;
  try
    ParseAuditEventEntityDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventEntityDetailProperties(jsn : TJsonObject; result : TFhirAuditEventEntityDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := ParseString(jsn['type'], jsn.vObj['_type']);{q}
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
end;

procedure TFHIRJsonComposer.ComposeAuditEventEntityDetail(json : TJSONWriter; name : string; elem : TFhirAuditEventEntityDetail; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEvent(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEvent(jsn : TJsonObject) : TFhirAuditEvent;
begin
  result := TFhirAuditEvent.create;
  try
    ParseAuditEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventProperties(jsn : TJsonObject; result : TFhirAuditEvent);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('subtype') then
      iterateArray(jsn.vArr['subtype'], result.subtypeList, parseCoding);
    if jsn.has('action') or jsn.has('_action')  then
      result.actionElement := parseEnum(jsn.path+'/action', jsn['action'], jsn.vObj['_action'], CODES_TFhirAuditEventActionEnum, SYSTEMS_TFhirAuditEventActionEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('recorded') or jsn.has('_recorded') then
        result.recordedElement := ParseInstant(jsn['recorded'], jsn.vObj['_recorded']);{q}
    if jsn.has('outcome') or jsn.has('_outcome')  then
      result.outcomeElement := parseEnum(jsn.path+'/outcome', jsn['outcome'], jsn.vObj['_outcome'], CODES_TFhirAuditEventOutcomeEnum, SYSTEMS_TFhirAuditEventOutcomeEnum);
    if jsn.has('outcomeDesc') or jsn.has('_outcomeDesc') then
        result.outcomeDescElement := ParseString(jsn['outcomeDesc'], jsn.vObj['_outcomeDesc']);{q}
    if jsn.has('purposeOfEvent') then
      iterateArray(jsn.vArr['purposeOfEvent'], result.purposeOfEventList, parseCodeableConcept);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseAuditEventAgent);
    if jsn.has('source') then
        result.source := ParseAuditEventSource(jsn.vObj['source']);{q3}
    if jsn.has('entity') then
      iterateArray(jsn.vArr['entity'], result.entityList, parseAuditEventEntity);
end;

procedure TFHIRJsonComposer.ComposeAuditEvent(json : TJSONWriter; name : string; elem : TFhirAuditEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('subtype') and (SummaryOption in [soFull, soSummary, soData]) and (elem.subtypeList.Count > 0) then
  begin
    json.valueArray('subtype');
    for i := 0 to elem.subtypeList.Count - 1 do
      ComposeCoding(json, '', elem.subtypeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('action') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'action', elem.ActionElement, CODES_TFhirAuditEventActionEnum, false);
  if not elem.noCompose and doCompose('action') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'action', elem.ActionElement, CODES_TFhirAuditEventActionEnum, false);
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('recorded') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'recorded', elem.recordedElement, false);
  if not elem.noCompose and doCompose('recorded') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'recorded', elem.recordedElement, false);
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'outcome', elem.OutcomeElement, CODES_TFhirAuditEventOutcomeEnum, false);
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'outcome', elem.OutcomeElement, CODES_TFhirAuditEventOutcomeEnum, false);
  if not elem.noCompose and doCompose('outcomeDesc') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'outcomeDesc', elem.outcomeDescElement, false);
  if not elem.noCompose and doCompose('outcomeDesc') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'outcomeDesc', elem.outcomeDescElement, false);
  if not elem.noCompose and doCompose('purposeOfEvent') and (SummaryOption in [soFull, soSummary, soData]) and (elem.purposeOfEventList.Count > 0) then
  begin
    json.valueArray('purposeOfEvent');
    for i := 0 to elem.purposeOfEventList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.purposeOfEventList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('agent') and (SummaryOption in [soFull, soData]) and (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeAuditEventAgent(json, '', elem.agentList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('source') and (SummaryOption in [soFull, soData]) then
    ComposeAuditEventSource(json, 'source', elem.source); {a}
  if not elem.noCompose and doCompose('entity') and (SummaryOption in [soFull, soData]) and (elem.entityList.Count > 0) then
  begin
    json.valueArray('entity');
    for i := 0 to elem.entityList.Count - 1 do
      ComposeAuditEventEntity(json, '', elem.entityList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
procedure TFHIRJsonParser.ParseBasic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBasic(jsn)); {2}
end;

function TFHIRJsonParser.ParseBasic(jsn : TJsonObject) : TFhirBasic;
begin
  result := TFhirBasic.create;
  try
    ParseBasicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBasicProperties(jsn : TJsonObject; result : TFhirBasic);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirReference}(jsn.vObj['subject']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDate(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBasic(json : TJSONWriter; name : string; elem : TFhirBasic; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
end;

{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
procedure TFHIRJsonParser.ParseBinary(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBinary(jsn)); {2}
end;

function TFHIRJsonParser.ParseBinary(jsn : TJsonObject) : TFhirBinary;
begin
  result := TFhirBinary.create;
  try
    ParseBinaryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBinaryProperties(jsn : TJsonObject; result : TFhirBinary);
begin
    ParseResourceProperties(jsn, result);
    if jsn.has('contentType') or jsn.has('_contentType') then
        result.contentTypeElement := ParseCode(jsn['contentType'], jsn.vObj['_contentType']);{q}
    if jsn.has('securityContext') then
        result.securityContext := ParseReference{TFhirReference}(jsn.vObj['securityContext']);{q3}
    if jsn.has('content') or jsn.has('_content') then
        result.contentElement := ParseBase64Binary(jsn['content'], jsn.vObj['_content']);{q}
end;

procedure TFHIRJsonComposer.ComposeBinary(json : TJSONWriter; name : string; elem : TFhirBinary; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  ComposeResourceProperties(json, elem);
  if not elem.noCompose and doCompose('contentType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'contentType', elem.contentTypeElement, false);
  if not elem.noCompose and doCompose('contentType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'contentType', elem.contentTypeElement, false);
  if not elem.noCompose and doCompose('securityContext') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'securityContext', elem.securityContext); {a}
  if not elem.noCompose and doCompose('content') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryValue(json, 'content', elem.contentElement, false);
  if not elem.noCompose and doCompose('content') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryProps(json, 'content', elem.contentElement, false);
end;

{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
procedure TFHIRJsonParser.ParseBiologicallyDerivedProductCollection(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProductCollection(jsn)); {2}
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProductCollection(jsn : TJsonObject) : TFhirBiologicallyDerivedProductCollection;
begin
  result := TFhirBiologicallyDerivedProductCollection.create;
  try
    ParseBiologicallyDerivedProductCollectionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductCollectionProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProductCollection);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('collector') then
        result.collector := ParseReference{Resource}(jsn.vObj['collector']);{q3}
    if jsn.has('source') then
        result.source := ParseReference{Resource}(jsn.vObj['source']);{q3}
    if jsn.has('collectedPeriod') {a4} then
      result.collected := ParsePeriod(jsn.vObj['collectedPeriod']);
    if jsn.has('collectedDateTime') or jsn.has('_collectedDateTime') then
      result.collected := parseDateTime(jsn['collectedDateTime'], jsn.vObj['_collectedDateTime']);
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProductCollection(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProductCollection; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'collector', elem.collector); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'source', elem.source); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.collected is TFhirPeriod) then 
    ComposePeriod(json, 'collectedPeriod', TFhirPeriod(elem.collected)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.collected is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'collectedDateTime', TFhirDateTime(elem.collected), false);
    ComposeDateTimeProps(json, 'collectedDateTime', TFhirDateTime(elem.collected), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProductProcessing(jsn)); {2}
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProductProcessing(jsn : TJsonObject) : TFhirBiologicallyDerivedProductProcessing;
begin
  result := TFhirBiologicallyDerivedProductProcessing.create;
  try
    ParseBiologicallyDerivedProductProcessingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductProcessingProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProductProcessing);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('procedure') then
        result.procedure_ := ParseCodeableConcept(jsn.vObj['procedure']);{q3}
    if jsn.has('additive') then
        result.additive := ParseReference{TFhirSubstance}(jsn.vObj['additive']);{q3}
    if jsn.has('timePeriod') {a4} then
      result.time := ParsePeriod(jsn.vObj['timePeriod']);
    if jsn.has('timeDateTime') or jsn.has('_timeDateTime') then
      result.time := parseDateTime(jsn['timeDateTime'], jsn.vObj['_timeDateTime']);
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProductProcessing(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProductProcessing; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'procedure', elem.procedure_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirSubstance}(json, 'additive', elem.additive); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.time is TFhirPeriod) then 
    ComposePeriod(json, 'timePeriod', TFhirPeriod(elem.time)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.time is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timeDateTime', TFhirDateTime(elem.time), false);
    ComposeDateTimeProps(json, 'timeDateTime', TFhirDateTime(elem.time), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductManipulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProductManipulation(jsn)); {2}
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProductManipulation(jsn : TJsonObject) : TFhirBiologicallyDerivedProductManipulation;
begin
  result := TFhirBiologicallyDerivedProductManipulation.create;
  try
    ParseBiologicallyDerivedProductManipulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductManipulationProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProductManipulation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('timePeriod') {a4} then
      result.time := ParsePeriod(jsn.vObj['timePeriod']);
    if jsn.has('timeDateTime') or jsn.has('_timeDateTime') then
      result.time := parseDateTime(jsn['timeDateTime'], jsn.vObj['_timeDateTime']);
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProductManipulation(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProductManipulation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.time is TFhirPeriod) then 
    ComposePeriod(json, 'timePeriod', TFhirPeriod(elem.time)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.time is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timeDateTime', TFhirDateTime(elem.time), false);
    ComposeDateTimeProps(json, 'timeDateTime', TFhirDateTime(elem.time), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductStorage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProductStorage(jsn)); {2}
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProductStorage(jsn : TJsonObject) : TFhirBiologicallyDerivedProductStorage;
begin
  result := TFhirBiologicallyDerivedProductStorage.create;
  try
    ParseBiologicallyDerivedProductStorageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductStorageProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProductStorage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('temperature') or jsn.has('_temperature') then
        result.temperatureElement := ParseDecimal(jsn['temperature'], jsn.vObj['_temperature']);{q}
    if jsn.has('scale') or jsn.has('_scale')  then
      result.scaleElement := parseEnum(jsn.path+'/scale', jsn['scale'], jsn.vObj['_scale'], CODES_TFhirProductStorageScaleEnum, SYSTEMS_TFhirProductStorageScaleEnum);
    if jsn.has('duration') then
        result.duration := ParsePeriod(jsn.vObj['duration']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProductStorage(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProductStorage; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'temperature', elem.temperatureElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'temperature', elem.temperatureElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'scale', elem.ScaleElement, CODES_TFhirProductStorageScaleEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'scale', elem.ScaleElement, CODES_TFhirProductStorageScaleEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'duration', elem.duration); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProduct(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProduct(jsn)); {2}
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProduct(jsn : TJsonObject) : TFhirBiologicallyDerivedProduct;
begin
  result := TFhirBiologicallyDerivedProduct.create;
  try
    ParseBiologicallyDerivedProductProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductProperties(jsn : TJsonObject; result : TFhirBiologicallyDerivedProduct);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('productCategory') or jsn.has('_productCategory')  then
      result.productCategoryElement := parseEnum(jsn.path+'/productCategory', jsn['productCategory'], jsn.vObj['_productCategory'], CODES_TFhirProductCategoryEnum, SYSTEMS_TFhirProductCategoryEnum);
    if jsn.has('productCode') then
        result.productCode := ParseCodeableConcept(jsn.vObj['productCode']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirProductStatusEnum, SYSTEMS_TFhirProductStatusEnum);
    if jsn.has('request') then
      iterateArray(jsn.vArr['request'], result.requestList, parseReference{TFhirServiceRequest});
    if jsn.has('quantity') or jsn.has('_quantity') then
        result.quantityElement := ParseInteger(jsn['quantity'], jsn.vObj['_quantity']);{q}
    if jsn.has('parent') then
        result.parent := ParseReference{TFhirReference}(jsn.vObj['parent']);{q3}
    if jsn.has('collection') then
        result.collection := ParseBiologicallyDerivedProductCollection(jsn.vObj['collection']);{q3}
    if jsn.has('processing') then
      iterateArray(jsn.vArr['processing'], result.processingList, parseBiologicallyDerivedProductProcessing);
    if jsn.has('manipulation') then
        result.manipulation := ParseBiologicallyDerivedProductManipulation(jsn.vObj['manipulation']);{q3}
    if jsn.has('storage') then
      iterateArray(jsn.vArr['storage'], result.storageList, parseBiologicallyDerivedProductStorage);
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProduct(json : TJSONWriter; name : string; elem : TFhirBiologicallyDerivedProduct; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('productCategory') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'productCategory', elem.ProductCategoryElement, CODES_TFhirProductCategoryEnum, false);
  if not elem.noCompose and doCompose('productCategory') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'productCategory', elem.ProductCategoryElement, CODES_TFhirProductCategoryEnum, false);
  if not elem.noCompose and doCompose('productCode') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'productCode', elem.productCode); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirProductStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirProductStatusEnum, false);
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) and (elem.requestList.Count > 0) then
  begin
    json.valueArray('request');
    for i := 0 to elem.requestList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(json, '', elem.requestList[i]); {z - Reference(ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'quantity', elem.quantityElement, false);
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'quantity', elem.quantityElement, false);
  if not elem.noCompose and doCompose('parent') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'parent', elem.parent); {a}
  if not elem.noCompose and doCompose('collection') and (SummaryOption in [soFull, soData]) then
    ComposeBiologicallyDerivedProductCollection(json, 'collection', elem.collection); {a}
  if not elem.noCompose and doCompose('processing') and (SummaryOption in [soFull, soData]) and (elem.processingList.Count > 0) then
  begin
    json.valueArray('processing');
    for i := 0 to elem.processingList.Count - 1 do
      ComposeBiologicallyDerivedProductProcessing(json, '', elem.processingList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('manipulation') and (SummaryOption in [soFull, soData]) then
    ComposeBiologicallyDerivedProductManipulation(json, 'manipulation', elem.manipulation); {a}
  if not elem.noCompose and doCompose('storage') and (SummaryOption in [soFull, soData]) and (elem.storageList.Count > 0) then
  begin
    json.valueArray('storage');
    for i := 0 to elem.storageList.Count - 1 do
      ComposeBiologicallyDerivedProductStorage(json, '', elem.storageList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
procedure TFHIRJsonParser.ParseBodyStructure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBodyStructure(jsn)); {2}
end;

function TFHIRJsonParser.ParseBodyStructure(jsn : TJsonObject) : TFhirBodyStructure;
begin
  result := TFhirBodyStructure.create;
  try
    ParseBodyStructureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBodyStructureProperties(jsn : TJsonObject; result : TFhirBodyStructure);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('morphology') then
        result.morphology := ParseCodeableConcept(jsn.vObj['morphology']);{q3}
    if jsn.has('location') then
        result.location := ParseCodeableConcept(jsn.vObj['location']);{q3}
    if jsn.has('locationQualifier') then
      iterateArray(jsn.vArr['locationQualifier'], result.locationQualifierList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('image') then
      iterateArray(jsn.vArr['image'], result.imageList, parseAttachment);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBodyStructure(json : TJSONWriter; name : string; elem : TFhirBodyStructure; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('morphology') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'morphology', elem.morphology); {a}
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'location', elem.location); {a}
  if not elem.noCompose and doCompose('locationQualifier') and (SummaryOption in [soFull, soData]) and (elem.locationQualifierList.Count > 0) then
  begin
    json.valueArray('locationQualifier');
    for i := 0 to elem.locationQualifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.locationQualifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('image') and (SummaryOption in [soFull, soData]) and (elem.imageList.Count > 0) then
  begin
    json.valueArray('image');
    for i := 0 to elem.imageList.Count - 1 do
      ComposeAttachment(json, '', elem.imageList[i]); {z - Attachment}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
end;

{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
procedure TFHIRJsonParser.ParseBundleLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleLink(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleLink(jsn : TJsonObject) : TFhirBundleLink;
begin
  result := TFhirBundleLink.create;
  try
    ParseBundleLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleLinkProperties(jsn : TJsonObject; result : TFhirBundleLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('relation') or jsn.has('_relation') then
        result.relationElement := ParseString(jsn['relation'], jsn.vObj['_relation']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
end;

procedure TFHIRJsonComposer.ComposeBundleLink(json : TJSONWriter; name : string; elem : TFhirBundleLink; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'relation', elem.relationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'relation', elem.relationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundleEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntry(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleEntry(jsn : TJsonObject) : TFhirBundleEntry;
begin
  result := TFhirBundleEntry.create;
  try
    ParseBundleEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntryProperties(jsn : TJsonObject; result : TFhirBundleEntry);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseBundleLink);
    if jsn.has('fullUrl') or jsn.has('_fullUrl') then
        result.fullUrlElement := ParseUri(jsn['fullUrl'], jsn.vObj['_fullUrl']);{q}
    if jsn.has('resource') then
        result.resource := ParseInnerResource(jsn.vObj['resource']);{q3}
    if jsn.has('search') then
        result.search := ParseBundleEntrySearch(jsn.vObj['search']);{q3}
    if jsn.has('request') then
        result.request := ParseBundleEntryRequest(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseBundleEntryResponse(jsn.vObj['response']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBundleEntry(json : TJSONWriter; name : string; elem : TFhirBundleEntry; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeBundleLink(json, '', elem.link_List[i]); {z - @Bundle.link}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'fullUrl', elem.fullUrlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'fullUrl', elem.fullUrlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(json, 'resource', elem, elem.resource); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntrySearch(json, 'search', elem.search); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryRequest(json, 'request', elem.request); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryResponse(json, 'response', elem.response); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundleEntrySearch(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntrySearch(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleEntrySearch(jsn : TJsonObject) : TFhirBundleEntrySearch;
begin
  result := TFhirBundleEntrySearch.create;
  try
    ParseBundleEntrySearchProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntrySearchProperties(jsn : TJsonObject; result : TFhirBundleEntrySearch);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirSearchEntryModeEnum, SYSTEMS_TFhirSearchEntryModeEnum);
    if jsn.has('score') or jsn.has('_score') then
        result.scoreElement := ParseDecimal(jsn['score'], jsn.vObj['_score']);{q}
end;

procedure TFHIRJsonComposer.ComposeBundleEntrySearch(json : TJSONWriter; name : string; elem : TFhirBundleEntrySearch; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirSearchEntryModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirSearchEntryModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'score', elem.scoreElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'score', elem.scoreElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundleEntryRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntryRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleEntryRequest(jsn : TJsonObject) : TFhirBundleEntryRequest;
begin
  result := TFhirBundleEntryRequest.create;
  try
    ParseBundleEntryRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntryRequestProperties(jsn : TJsonObject; result : TFhirBundleEntryRequest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('method') or jsn.has('_method')  then
      result.methodElement := parseEnum(jsn.path+'/method', jsn['method'], jsn.vObj['_method'], CODES_TFhirHttpVerbEnum, SYSTEMS_TFhirHttpVerbEnum);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('ifNoneMatch') or jsn.has('_ifNoneMatch') then
        result.ifNoneMatchElement := ParseString(jsn['ifNoneMatch'], jsn.vObj['_ifNoneMatch']);{q}
    if jsn.has('ifModifiedSince') or jsn.has('_ifModifiedSince') then
        result.ifModifiedSinceElement := ParseInstant(jsn['ifModifiedSince'], jsn.vObj['_ifModifiedSince']);{q}
    if jsn.has('ifMatch') or jsn.has('_ifMatch') then
        result.ifMatchElement := ParseString(jsn['ifMatch'], jsn.vObj['_ifMatch']);{q}
    if jsn.has('ifNoneExist') or jsn.has('_ifNoneExist') then
        result.ifNoneExistElement := ParseString(jsn['ifNoneExist'], jsn.vObj['_ifNoneExist']);{q}
end;

procedure TFHIRJsonComposer.ComposeBundleEntryRequest(json : TJSONWriter; name : string; elem : TFhirBundleEntryRequest; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'method', elem.MethodElement, CODES_TFhirHttpVerbEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'method', elem.MethodElement, CODES_TFhirHttpVerbEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'ifNoneMatch', elem.ifNoneMatchElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'ifNoneMatch', elem.ifNoneMatchElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'ifModifiedSince', elem.ifModifiedSinceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'ifModifiedSince', elem.ifModifiedSinceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'ifMatch', elem.ifMatchElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'ifMatch', elem.ifMatchElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'ifNoneExist', elem.ifNoneExistElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'ifNoneExist', elem.ifNoneExistElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundleEntryResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntryResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleEntryResponse(jsn : TJsonObject) : TFhirBundleEntryResponse;
begin
  result := TFhirBundleEntryResponse.create;
  try
    ParseBundleEntryResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntryResponseProperties(jsn : TJsonObject; result : TFhirBundleEntryResponse);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status') then
        result.statusElement := ParseString(jsn['status'], jsn.vObj['_status']);{q}
    if jsn.has('location') or jsn.has('_location') then
        result.locationElement := ParseUri(jsn['location'], jsn.vObj['_location']);{q}
    if jsn.has('etag') or jsn.has('_etag') then
        result.etagElement := ParseString(jsn['etag'], jsn.vObj['_etag']);{q}
    if jsn.has('lastModified') or jsn.has('_lastModified') then
        result.lastModifiedElement := ParseInstant(jsn['lastModified'], jsn.vObj['_lastModified']);{q}
    if jsn.has('outcome') then
        result.outcome := ParseInnerResource(jsn.vObj['outcome']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBundleEntryResponse(json : TJSONWriter; name : string; elem : TFhirBundleEntryResponse; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'status', elem.statusElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'status', elem.statusElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'location', elem.locationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'location', elem.locationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'etag', elem.etagElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'etag', elem.etagElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'lastModified', elem.lastModifiedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'lastModified', elem.lastModifiedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(json, 'outcome', elem, elem.outcome); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundle(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundle(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundle(jsn : TJsonObject) : TFhirBundle;
begin
  result := TFhirBundle.create;
  try
    ParseBundleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleProperties(jsn : TJsonObject; result : TFhirBundle);
begin
    ParseResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirBundleTypeEnum, SYSTEMS_TFhirBundleTypeEnum);
    if jsn.has('timestamp') or jsn.has('_timestamp') then
        result.timestampElement := ParseInstant(jsn['timestamp'], jsn.vObj['_timestamp']);{q}
    if jsn.has('total') or jsn.has('_total') then
        result.totalElement := ParseUnsignedInt(jsn['total'], jsn.vObj['_total']);{q}
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseBundleLink);
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], result.entryList, parseBundleEntry);
    if jsn.has('signature') then
        result.signature := ParseSignature(jsn.vObj['signature']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBundle(json : TJSONWriter; name : string; elem : TFhirBundle; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeResourceProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirBundleTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirBundleTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'timestamp', elem.timestampElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'timestamp', elem.timestampElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData, soCount]) then
    ComposeUnsignedIntValue(json, 'total', elem.totalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData, soCount]) then
    ComposeUnsignedIntProps(json, 'total', elem.totalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeBundleLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.entryList.Count > 0) then
  begin
    json.valueArray('entry');
    for i := 0 to elem.entryList.Count - 1 do
      ComposeBundleEntry(json, '', elem.entryList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeSignature(json, 'signature', elem.signature); {a}
end;

{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
procedure TFHIRJsonParser.ParseCapabilityStatementSoftware(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementSoftware(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementSoftware(jsn : TJsonObject) : TFhirCapabilityStatementSoftware;
begin
  result := TFhirCapabilityStatementSoftware.create;
  try
    ParseCapabilityStatementSoftwareProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementSoftwareProperties(jsn : TJsonObject; result : TFhirCapabilityStatementSoftware);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('releaseDate') or jsn.has('_releaseDate') then
        result.releaseDateElement := ParseDateTime(jsn['releaseDate'], jsn.vObj['_releaseDate']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementSoftware(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementSoftware; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'releaseDate', elem.releaseDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'releaseDate', elem.releaseDateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementImplementation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementImplementation(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementImplementation(jsn : TJsonObject) : TFhirCapabilityStatementImplementation;
begin
  result := TFhirCapabilityStatementImplementation.create;
  try
    ParseCapabilityStatementImplementationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementImplementationProperties(jsn : TJsonObject; result : TFhirCapabilityStatementImplementation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementImplementation(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementImplementation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRest(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRest(jsn : TJsonObject) : TFhirCapabilityStatementRest;
begin
  result := TFhirCapabilityStatementRest.create;
  try
    ParseCapabilityStatementRestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirRestfulCapabilityModeEnum, SYSTEMS_TFhirRestfulCapabilityModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('security') then
        result.security := ParseCapabilityStatementRestSecurity(jsn.vObj['security']);{q3}
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], result.resourceList, parseCapabilityStatementRestResource);
    if jsn.has('interaction') then
      iterateArray(jsn.vArr['interaction'], result.interactionList, parseCapabilityStatementRestInteraction);
    if jsn.has('searchParam') then
      iterateArray(jsn.vArr['searchParam'], result.searchParamList, parseCapabilityStatementRestResourceSearchParam);
    if jsn.has('operation') then
      iterateArray(jsn.vArr['operation'], result.operationList, parseCapabilityStatementRestResourceOperation);
      if jsn.has('compartment') or jsn.has('_compartment') then
      iteratePrimitiveArray(jsn.vArr['compartment'], jsn.vArr['_compartment'], result.compartmentList, parseUri);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRest(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirRestfulCapabilityModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirRestfulCapabilityModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementRestSecurity(json, 'security', elem.security); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.resourceList.Count > 0) then
  begin
    json.valueArray('resource');
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeCapabilityStatementRestResource(json, '', elem.resourceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.interactionList.Count > 0) then
  begin
    json.valueArray('interaction');
    for i := 0 to elem.interactionList.Count - 1 do
      ComposeCapabilityStatementRestInteraction(json, '', elem.interactionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.searchParamList.Count > 0) then
  begin
    json.valueArray('searchParam');
    for i := 0 to elem.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(json, '', elem.searchParamList[i]); {z - @CapabilityStatement.rest.resource.searchParam}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.operationList.Count > 0) then
  begin
    json.valueArray('operation');
    for i := 0 to elem.operationList.Count - 1 do
      ComposeCapabilityStatementRestResourceOperation(json, '', elem.operationList[i]); {z - @CapabilityStatement.rest.resource.operation}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.compartmentList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.compartmentList.Count - 1 do
    begin
      ext := ext or ((elem.compartmentList[i].id <> '') or (elem.compartmentList[i].hasExtensionList) {no-comments or (elem.compartmentList[i].hasComments)});
      val := val or (elem.compartmentList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('compartment');
      for i := 0 to elem.compartmentList.Count - 1 do
        ComposeUriValue(json, '',elem.compartmentList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_compartment');
      for i := 0 to elem.compartmentList.Count - 1 do
        ComposeUriProps(json, '',elem.compartmentList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestSecurity(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestSecurity(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurity;
begin
  result := TFhirCapabilityStatementRestSecurity.create;
  try
    ParseCapabilityStatementRestSecurityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurityProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestSecurity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('cors') or jsn.has('_cors') then
        result.corsElement := ParseBoolean(jsn['cors'], jsn.vObj['_cors']);{q}
    if jsn.has('service') then
      iterateArray(jsn.vArr['service'], result.serviceList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('certificate') then
      iterateArray(jsn.vArr['certificate'], result.certificateList, parseCapabilityStatementRestSecurityCertificate);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestSecurity(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestSecurity; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'cors', elem.corsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'cors', elem.corsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.serviceList.Count > 0) then
  begin
    json.valueArray('service');
    for i := 0 to elem.serviceList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.certificateList.Count > 0) then
  begin
    json.valueArray('certificate');
    for i := 0 to elem.certificateList.Count - 1 do
      ComposeCapabilityStatementRestSecurityCertificate(json, '', elem.certificateList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurityCertificate(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestSecurityCertificate(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestSecurityCertificate(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurityCertificate;
begin
  result := TFhirCapabilityStatementRestSecurityCertificate.create;
  try
    ParseCapabilityStatementRestSecurityCertificateProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurityCertificateProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestSecurityCertificate);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := ParseCode(jsn['type'], jsn.vObj['_type']);{q}
    if jsn.has('blob') or jsn.has('_blob') then
        result.blobElement := ParseBase64Binary(jsn['blob'], jsn.vObj['_blob']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestSecurityCertificate(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestSecurityCertificate; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryValue(json, 'blob', elem.blobElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryProps(json, 'blob', elem.blobElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResource(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResource(jsn : TJsonObject) : TFhirCapabilityStatementRestResource;
begin
  result := TFhirCapabilityStatementRestResource.create;
  try
    ParseCapabilityStatementRestResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
    if jsn.has('supportedProfile') then
      iterateArray(jsn.vArr['supportedProfile'], result.supportedProfileList, parseReference{TFhirStructureDefinition});
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseMarkdown(jsn['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('interaction') then
      iterateArray(jsn.vArr['interaction'], result.interactionList, parseCapabilityStatementRestResourceInteraction);
    if jsn.has('versioning') or jsn.has('_versioning')  then
      result.versioningElement := parseEnum(jsn.path+'/versioning', jsn['versioning'], jsn.vObj['_versioning'], CODES_TFhirVersioningPolicyEnum, SYSTEMS_TFhirVersioningPolicyEnum);
    if jsn.has('readHistory') or jsn.has('_readHistory') then
        result.readHistoryElement := ParseBoolean(jsn['readHistory'], jsn.vObj['_readHistory']);{q}
    if jsn.has('updateCreate') or jsn.has('_updateCreate') then
        result.updateCreateElement := ParseBoolean(jsn['updateCreate'], jsn.vObj['_updateCreate']);{q}
    if jsn.has('conditionalCreate') or jsn.has('_conditionalCreate') then
        result.conditionalCreateElement := ParseBoolean(jsn['conditionalCreate'], jsn.vObj['_conditionalCreate']);{q}
    if jsn.has('conditionalRead') or jsn.has('_conditionalRead')  then
      result.conditionalReadElement := parseEnum(jsn.path+'/conditionalRead', jsn['conditionalRead'], jsn.vObj['_conditionalRead'], CODES_TFhirConditionalReadStatusEnum, SYSTEMS_TFhirConditionalReadStatusEnum);
    if jsn.has('conditionalUpdate') or jsn.has('_conditionalUpdate') then
        result.conditionalUpdateElement := ParseBoolean(jsn['conditionalUpdate'], jsn.vObj['_conditionalUpdate']);{q}
    if jsn.has('conditionalDelete') or jsn.has('_conditionalDelete')  then
      result.conditionalDeleteElement := parseEnum(jsn.path+'/conditionalDelete', jsn['conditionalDelete'], jsn.vObj['_conditionalDelete'], CODES_TFhirConditionalDeleteStatusEnum, SYSTEMS_TFhirConditionalDeleteStatusEnum);
    if jsn.has('referencePolicy') or jsn.has('_referencePolicy') then
      iterateEnumArray(jsn.vArr['referencePolicy'], jsn.vArr['_referencePolicy'], jsn.path+'/referencePolicy', result.referencePolicyList, parseEnum, CODES_TFhirReferenceHandlingPolicyEnum, SYSTEMS_TFhirReferenceHandlingPolicyEnum);
      if jsn.has('searchInclude') or jsn.has('_searchInclude') then
      iteratePrimitiveArray(jsn.vArr['searchInclude'], jsn.vArr['_searchInclude'], result.searchIncludeList, parseString);
      if jsn.has('searchRevInclude') or jsn.has('_searchRevInclude') then
      iteratePrimitiveArray(jsn.vArr['searchRevInclude'], jsn.vArr['_searchRevInclude'], result.searchRevIncludeList, parseString);
    if jsn.has('searchParam') then
      iterateArray(jsn.vArr['searchParam'], result.searchParamList, parseCapabilityStatementRestResourceSearchParam);
    if jsn.has('operation') then
      iterateArray(jsn.vArr['operation'], result.operationList, parseCapabilityStatementRestResourceOperation);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResource(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResource; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.supportedProfileList.Count > 0) then
  begin
    json.valueArray('supportedProfile');
    for i := 0 to elem.supportedProfileList.Count - 1 do
      ComposeReference{TFhirStructureDefinition}(json, '', elem.supportedProfileList[i]); {z - Reference(StructureDefinition)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.interactionList.Count > 0) then
  begin
    json.valueArray('interaction');
    for i := 0 to elem.interactionList.Count - 1 do
      ComposeCapabilityStatementRestResourceInteraction(json, '', elem.interactionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'versioning', elem.VersioningElement, CODES_TFhirVersioningPolicyEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'versioning', elem.VersioningElement, CODES_TFhirVersioningPolicyEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'readHistory', elem.readHistoryElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'readHistory', elem.readHistoryElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'updateCreate', elem.updateCreateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'updateCreate', elem.updateCreateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'conditionalCreate', elem.conditionalCreateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'conditionalCreate', elem.conditionalCreateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'conditionalRead', elem.ConditionalReadElement, CODES_TFhirConditionalReadStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'conditionalRead', elem.ConditionalReadElement, CODES_TFhirConditionalReadStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'conditionalUpdate', elem.conditionalUpdateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'conditionalUpdate', elem.conditionalUpdateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'conditionalDelete', elem.ConditionalDeleteElement, CODES_TFhirConditionalDeleteStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'conditionalDelete', elem.ConditionalDeleteElement, CODES_TFhirConditionalDeleteStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.referencePolicyList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.referencePolicyList.Count - 1 do
    begin
      val := val or (elem.referencePolicyList[i].hasPrimitiveValue);
      ext := ext or ((elem.referencePolicyList[i].id <> '') or (elem.referencePolicyList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('referencePolicy');
      for i := 0 to elem.referencePolicyList.Count - 1 do
        ComposeEnumValue(json, '', elem.referencePolicyList[i], CODES_TFhirReferenceHandlingPolicyEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_referencePolicy');
      for i := 0 to elem.referencePolicyList.Count - 1 do
        ComposeEnumProps(json, '', elem.referencePolicyList[i], CODES_TFhirReferenceHandlingPolicyEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.searchIncludeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.searchIncludeList.Count - 1 do
    begin
      ext := ext or ((elem.searchIncludeList[i].id <> '') or (elem.searchIncludeList[i].hasExtensionList) {no-comments or (elem.searchIncludeList[i].hasComments)});
      val := val or (elem.searchIncludeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('searchInclude');
      for i := 0 to elem.searchIncludeList.Count - 1 do
        ComposeStringValue(json, '',elem.searchIncludeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_searchInclude');
      for i := 0 to elem.searchIncludeList.Count - 1 do
        ComposeStringProps(json, '',elem.searchIncludeList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.searchRevIncludeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.searchRevIncludeList.Count - 1 do
    begin
      ext := ext or ((elem.searchRevIncludeList[i].id <> '') or (elem.searchRevIncludeList[i].hasExtensionList) {no-comments or (elem.searchRevIncludeList[i].hasComments)});
      val := val or (elem.searchRevIncludeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('searchRevInclude');
      for i := 0 to elem.searchRevIncludeList.Count - 1 do
        ComposeStringValue(json, '',elem.searchRevIncludeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_searchRevInclude');
      for i := 0 to elem.searchRevIncludeList.Count - 1 do
        ComposeStringProps(json, '',elem.searchRevIncludeList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.searchParamList.Count > 0) then
  begin
    json.valueArray('searchParam');
    for i := 0 to elem.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(json, '', elem.searchParamList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.operationList.Count > 0) then
  begin
    json.valueArray('operation');
    for i := 0 to elem.operationList.Count - 1 do
      ComposeCapabilityStatementRestResourceOperation(json, '', elem.operationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResourceInteraction(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceInteraction;
begin
  result := TFhirCapabilityStatementRestResourceInteraction.create;
  try
    ParseCapabilityStatementRestResourceInteractionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceInteractionProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceInteraction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirTypeRestfulInteractionEnum, SYSTEMS_TFhirTypeRestfulInteractionEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResourceInteraction(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceInteraction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirTypeRestfulInteractionEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirTypeRestfulInteractionEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResourceSearchParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceSearchParam;
begin
  result := TFhirCapabilityStatementRestResourceSearchParam.create;
  try
    ParseCapabilityStatementRestResourceSearchParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceSearchParamProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceSearchParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := ParseUri(jsn['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResourceSearchParam(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceSearchParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResourceOperation(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResourceOperation(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceOperation;
begin
  result := TFhirCapabilityStatementRestResourceOperation.create;
  try
    ParseCapabilityStatementRestResourceOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceOperationProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceOperation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('definition') then
        result.definition := ParseReference{TFhirOperationDefinition}(jsn.vObj['definition']);{q3}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseMarkdown(jsn['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResourceOperation(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceOperation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOperationDefinition}(json, 'definition', elem.definition); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestInteraction(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestInteraction;
begin
  result := TFhirCapabilityStatementRestInteraction.create;
  try
    ParseCapabilityStatementRestInteractionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestInteractionProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestInteraction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirSystemRestfulInteractionEnum, SYSTEMS_TFhirSystemRestfulInteractionEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestInteraction(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestInteraction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirSystemRestfulInteractionEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirSystemRestfulInteractionEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessaging(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessaging(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementMessaging(jsn : TJsonObject) : TFhirCapabilityStatementMessaging;
begin
  result := TFhirCapabilityStatementMessaging.create;
  try
    ParseCapabilityStatementMessagingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessaging);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseCapabilityStatementMessagingEndpoint);
    if jsn.has('reliableCache') or jsn.has('_reliableCache') then
        result.reliableCacheElement := ParseUnsignedInt(jsn['reliableCache'], jsn.vObj['_reliableCache']);{q}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('supportedMessage') then
      iterateArray(jsn.vArr['supportedMessage'], result.supportedMessageList, parseCapabilityStatementMessagingSupportedMessage);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessaging(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessaging; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeCapabilityStatementMessagingEndpoint(json, '', elem.endpointList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'reliableCache', elem.reliableCacheElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'reliableCache', elem.reliableCacheElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.supportedMessageList.Count > 0) then
  begin
    json.valueArray('supportedMessage');
    for i := 0 to elem.supportedMessageList.Count - 1 do
      ComposeCapabilityStatementMessagingSupportedMessage(json, '', elem.supportedMessageList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessagingEndpoint(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject) : TFhirCapabilityStatementMessagingEndpoint;
begin
  result := TFhirCapabilityStatementMessagingEndpoint.create;
  try
    ParseCapabilityStatementMessagingEndpointProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingEndpointProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingEndpoint);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('protocol') then
        result.protocol := ParseCoding(jsn.vObj['protocol']);{q3}
    if jsn.has('address') or jsn.has('_address') then
        result.addressElement := ParseUri(jsn['address'], jsn.vObj['_address']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessagingEndpoint(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingEndpoint; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'protocol', elem.protocol); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'address', elem.addressElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'address', elem.addressElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessagingSupportedMessage(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject) : TFhirCapabilityStatementMessagingSupportedMessage;
begin
  result := TFhirCapabilityStatementMessagingSupportedMessage.create;
  try
    ParseCapabilityStatementMessagingSupportedMessageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingSupportedMessageProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingSupportedMessage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirEventCapabilityModeEnum, SYSTEMS_TFhirEventCapabilityModeEnum);
    if jsn.has('definition') then
        result.definition := ParseReference{TFhirMessageDefinition}(jsn.vObj['definition']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessagingSupportedMessage(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingSupportedMessage; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirEventCapabilityModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirEventCapabilityModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirMessageDefinition}(json, 'definition', elem.definition); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementDocument(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementDocument(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementDocument(jsn : TJsonObject) : TFhirCapabilityStatementDocument;
begin
  result := TFhirCapabilityStatementDocument.create;
  try
    ParseCapabilityStatementDocumentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementDocumentProperties(jsn : TJsonObject; result : TFhirCapabilityStatementDocument);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirDocumentModeEnum, SYSTEMS_TFhirDocumentModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementDocument(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementDocument; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirDocumentModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirDocumentModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatement(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatement(jsn : TJsonObject) : TFhirCapabilityStatement;
begin
  result := TFhirCapabilityStatement.create;
  try
    ParseCapabilityStatementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementProperties(jsn : TJsonObject; result : TFhirCapabilityStatement);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirCapabilityStatementKindEnum, SYSTEMS_TFhirCapabilityStatementKindEnum);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('software') then
        result.software := ParseCapabilityStatementSoftware(jsn.vObj['software']);{q3}
    if jsn.has('implementation') then
        result.implementation_ := ParseCapabilityStatementImplementation(jsn.vObj['implementation']);{q3}
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        result.fhirVersionElement := ParseId(jsn['fhirVersion'], jsn.vObj['_fhirVersion']);{q}
    if jsn.has('acceptUnknown') or jsn.has('_acceptUnknown')  then
      result.acceptUnknownElement := parseEnum(jsn.path+'/acceptUnknown', jsn['acceptUnknown'], jsn.vObj['_acceptUnknown'], CODES_TFhirUnknownContentCodeEnum, SYSTEMS_TFhirUnknownContentCodeEnum);
      if jsn.has('format') or jsn.has('_format') then
      iteratePrimitiveArray(jsn.vArr['format'], jsn.vArr['_format'], result.formatList, parseCode);
      if jsn.has('patchFormat') or jsn.has('_patchFormat') then
      iteratePrimitiveArray(jsn.vArr['patchFormat'], jsn.vArr['_patchFormat'], result.patchFormatList, parseCode);
      if jsn.has('implementationGuide') or jsn.has('_implementationGuide') then
      iteratePrimitiveArray(jsn.vArr['implementationGuide'], jsn.vArr['_implementationGuide'], result.implementationGuideList, parseUri);
    if jsn.has('rest') then
      iterateArray(jsn.vArr['rest'], result.restList, parseCapabilityStatementRest);
    if jsn.has('messaging') then
      iterateArray(jsn.vArr['messaging'], result.messagingList, parseCapabilityStatementMessaging);
    if jsn.has('document') then
      iterateArray(jsn.vArr['document'], result.documentList, parseCapabilityStatementDocument);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatement(json : TJSONWriter; name : string; elem : TFhirCapabilityStatement; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirCapabilityStatementKindEnum, false);
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirCapabilityStatementKindEnum, false);
  if not elem.noCompose and doCompose('instantiates') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('software') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementSoftware(json, 'software', elem.software); {a}
  if not elem.noCompose and doCompose('implementation_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementImplementation(json, 'implementation', elem.implementation_); {a}
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('acceptUnknown') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'acceptUnknown', elem.AcceptUnknownElement, CODES_TFhirUnknownContentCodeEnum, false);
  if not elem.noCompose and doCompose('acceptUnknown') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'acceptUnknown', elem.AcceptUnknownElement, CODES_TFhirUnknownContentCodeEnum, false);
  if not elem.noCompose and doCompose('format') and (SummaryOption in [soFull, soSummary, soData]) and (elem.formatList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.formatList.Count - 1 do
    begin
      ext := ext or ((elem.formatList[i].id <> '') or (elem.formatList[i].hasExtensionList) {no-comments or (elem.formatList[i].hasComments)});
      val := val or (elem.formatList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('format');
      for i := 0 to elem.formatList.Count - 1 do
        ComposeCodeValue(json, '',elem.formatList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_format');
      for i := 0 to elem.formatList.Count - 1 do
        ComposeCodeProps(json, '',elem.formatList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('patchFormat') and (SummaryOption in [soFull, soSummary, soData]) and (elem.patchFormatList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.patchFormatList.Count - 1 do
    begin
      ext := ext or ((elem.patchFormatList[i].id <> '') or (elem.patchFormatList[i].hasExtensionList) {no-comments or (elem.patchFormatList[i].hasComments)});
      val := val or (elem.patchFormatList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('patchFormat');
      for i := 0 to elem.patchFormatList.Count - 1 do
        ComposeCodeValue(json, '',elem.patchFormatList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_patchFormat');
      for i := 0 to elem.patchFormatList.Count - 1 do
        ComposeCodeProps(json, '',elem.patchFormatList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('implementationGuide') and (SummaryOption in [soFull, soSummary, soData]) and (elem.implementationGuideList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.implementationGuideList.Count - 1 do
    begin
      ext := ext or ((elem.implementationGuideList[i].id <> '') or (elem.implementationGuideList[i].hasExtensionList) {no-comments or (elem.implementationGuideList[i].hasComments)});
      val := val or (elem.implementationGuideList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('implementationGuide');
      for i := 0 to elem.implementationGuideList.Count - 1 do
        ComposeUriValue(json, '',elem.implementationGuideList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_implementationGuide');
      for i := 0 to elem.implementationGuideList.Count - 1 do
        ComposeUriProps(json, '',elem.implementationGuideList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('rest') and (SummaryOption in [soFull, soSummary, soData]) and (elem.restList.Count > 0) then
  begin
    json.valueArray('rest');
    for i := 0 to elem.restList.Count - 1 do
      ComposeCapabilityStatementRest(json, '', elem.restList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('messaging') and (SummaryOption in [soFull, soSummary, soData]) and (elem.messagingList.Count > 0) then
  begin
    json.valueArray('messaging');
    for i := 0 to elem.messagingList.Count - 1 do
      ComposeCapabilityStatementMessaging(json, '', elem.messagingList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('document') and (SummaryOption in [soFull, soSummary, soData]) and (elem.documentList.Count > 0) then
  begin
    json.valueArray('document');
    for i := 0 to elem.documentList.Count - 1 do
      ComposeCapabilityStatementDocument(json, '', elem.documentList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
procedure TFHIRJsonParser.ParseCarePlanActivity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCarePlanActivity(jsn)); {2}
end;

function TFHIRJsonParser.ParseCarePlanActivity(jsn : TJsonObject) : TFhirCarePlanActivity;
begin
  result := TFhirCarePlanActivity.create;
  try
    ParseCarePlanActivityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCarePlanActivityProperties(jsn : TJsonObject; result : TFhirCarePlanActivity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('outcomeCodeableConcept') then
      iterateArray(jsn.vArr['outcomeCodeableConcept'], result.outcomeCodeableConceptList, parseCodeableConcept);
    if jsn.has('outcomeReference') then
      iterateArray(jsn.vArr['outcomeReference'], result.outcomeReferenceList, parseReference{TFhirReference});
    if jsn.has('progress') then
      iterateArray(jsn.vArr['progress'], result.progressList, parseAnnotation);
    if jsn.has('reference') then
        result.reference := ParseReference{Resource}(jsn.vObj['reference']);{q3}
    if jsn.has('detail') then
        result.detail := ParseCarePlanActivityDetail(jsn.vObj['detail']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCarePlanActivity(json : TJSONWriter; name : string; elem : TFhirCarePlanActivity; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.outcomeCodeableConceptList.Count > 0) then
  begin
    json.valueArray('outcomeCodeableConcept');
    for i := 0 to elem.outcomeCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.outcomeCodeableConceptList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.outcomeReferenceList.Count > 0) then
  begin
    json.valueArray('outcomeReference');
    for i := 0 to elem.outcomeReferenceList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.outcomeReferenceList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.progressList.Count > 0) then
  begin
    json.valueArray('progress');
    for i := 0 to elem.progressList.Count - 1 do
      ComposeAnnotation(json, '', elem.progressList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'reference', elem.reference); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCarePlanActivityDetail(json, 'detail', elem.detail); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCarePlanActivityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCarePlanActivityDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseCarePlanActivityDetail(jsn : TJsonObject) : TFhirCarePlanActivityDetail;
begin
  result := TFhirCarePlanActivityDetail.create;
  try
    ParseCarePlanActivityDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCarePlanActivityDetailProperties(jsn : TJsonObject; result : TFhirCarePlanActivityDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirCarePlanActivityKindEnum, SYSTEMS_TFhirCarePlanActivityKindEnum);
    if jsn.has('instantiates') or jsn.has('_instantiates') then
        result.instantiatesElement := ParseUri(jsn['instantiates'], jsn.vObj['_instantiates']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('goal') then
      iterateArray(jsn.vArr['goal'], result.goalList, parseReference{TFhirGoal});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirCarePlanActivityStatusEnum, SYSTEMS_TFhirCarePlanActivityStatusEnum);
    if jsn.has('statusReason') or jsn.has('_statusReason') then
        result.statusReasonElement := ParseString(jsn['statusReason'], jsn.vObj['_statusReason']);{q}
    if jsn.has('prohibited') or jsn.has('_prohibited') then
        result.prohibitedElement := ParseBoolean(jsn['prohibited'], jsn.vObj['_prohibited']);{q}
    if jsn.has('scheduledTiming') {a4} then
      result.scheduled := ParseTiming(jsn.vObj['scheduledTiming']);
    if jsn.has('scheduledPeriod') {a4} then
      result.scheduled := ParsePeriod(jsn.vObj['scheduledPeriod']);
    if jsn.has('scheduledString') or jsn.has('_scheduledString') then
      result.scheduled := parseString(jsn['scheduledString'], jsn.vObj['_scheduledString']);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseReference{Resource});
    if jsn.has('productCodeableConcept') {a4} then
      result.product := ParseCodeableConcept(jsn.vObj['productCodeableConcept']);
    if jsn.has('productReference') {a3} then
      result.product := ParseReference(jsn.vObj['productReference']);
    if jsn.has('dailyAmount') then
        result.dailyAmount := ParseQuantity(jsn.vObj['dailyAmount']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeCarePlanActivityDetail(json : TJSONWriter; name : string; elem : TFhirCarePlanActivityDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirCarePlanActivityKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirCarePlanActivityKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'instantiates', elem.instantiatesElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'instantiates', elem.instantiatesElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|DiagnosticReport|DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.goalList.Count > 0) then
  begin
    json.valueArray('goal');
    for i := 0 to elem.goalList.Count - 1 do
      ComposeReference{TFhirGoal}(json, '', elem.goalList[i]); {z - Reference(Goal)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirCarePlanActivityStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirCarePlanActivityStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'statusReason', elem.statusReasonElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'statusReason', elem.statusReasonElement, false);
  if not elem.noCompose and (not isCanonical or (elem.prohibited <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'prohibited', elem.prohibitedElement, false);
  if not elem.noCompose and (not isCanonical or (elem.prohibited <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'prohibited', elem.prohibitedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.scheduled is TFhirTiming) then 
    ComposeTiming(json, 'scheduledTiming', TFhirTiming(elem.scheduled)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.scheduled is TFhirPeriod) then 
    ComposePeriod(json, 'scheduledPeriod', TFhirPeriod(elem.scheduled)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.scheduled is TFhirString) then 
  begin
    ComposeStringValue(json, 'scheduledString', TFhirString(elem.scheduled), false);
    ComposeStringProps(json, 'scheduledString', TFhirString(elem.scheduled), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.performerList[i]); {z - Reference(Practitioner|PractitionerRole|Organization|RelatedPerson|Patient|CareTeam|HealthcareService|Device)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.product is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'productCodeableConcept', TFhirCodeableConcept(elem.product)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.product is TFhirReference) then
    ComposeReference(json, 'productReference', TFhirReference(elem.product));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'dailyAmount', elem.dailyAmount); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCarePlan(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCarePlan(jsn)); {2}
end;

function TFHIRJsonParser.ParseCarePlan(jsn : TJsonObject) : TFhirCarePlan;
begin
  result := TFhirCarePlan.create;
  try
    ParseCarePlanProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCarePlanProperties(jsn : TJsonObject; result : TFhirCarePlan);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirCarePlan});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirCarePlan});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirCarePlan});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirCarePlanStatusEnum, SYSTEMS_TFhirCarePlanStatusEnum);
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn['intent'], jsn.vObj['_intent'], CODES_TFhirCarePlanIntentEnum, SYSTEMS_TFhirCarePlanIntentEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], result.authorList, parseReference{Resource});
    if jsn.has('careTeam') then
      iterateArray(jsn.vArr['careTeam'], result.careTeamList, parseReference{TFhirCareTeam});
    if jsn.has('addresses') then
      iterateArray(jsn.vArr['addresses'], result.addressesList, parseReference{TFhirCondition});
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], result.supportingInfoList, parseReference{TFhirReference});
    if jsn.has('goal') then
      iterateArray(jsn.vArr['goal'], result.goalList, parseReference{TFhirGoal});
    if jsn.has('activity') then
      iterateArray(jsn.vArr['activity'], result.activityList, parseCarePlanActivity);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCarePlan(json : TJSONWriter; name : string; elem : TFhirCarePlan; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('instantiates') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('replaces') and (SummaryOption in [soFull, soSummary, soData]) and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirCarePlan}(json, '', elem.replacesList[i]); {z - Reference(CarePlan)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirCarePlan}(json, '', elem.partOfList[i]); {z - Reference(CarePlan)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirCarePlanStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirCarePlanStatusEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirCarePlanIntentEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirCarePlanIntentEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soSummary, soData]) and (elem.authorList.Count > 0) then
  begin
    json.valueArray('author');
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.authorList[i]); {z - Reference(Patient|Practitioner|PractitionerRole|Device|RelatedPerson|Organization|CareTeam)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('careTeam') and (SummaryOption in [soFull, soData]) and (elem.careTeamList.Count > 0) then
  begin
    json.valueArray('careTeam');
    for i := 0 to elem.careTeamList.Count - 1 do
      ComposeReference{TFhirCareTeam}(json, '', elem.careTeamList[i]); {z - Reference(CareTeam)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('addresses') and (SummaryOption in [soFull, soSummary, soData]) and (elem.addressesList.Count > 0) then
  begin
    json.valueArray('addresses');
    for i := 0 to elem.addressesList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.addressesList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('supportingInfo') and (SummaryOption in [soFull, soData]) and (elem.supportingInfoList.Count > 0) then
  begin
    json.valueArray('supportingInfo');
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInfoList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('goal') and (SummaryOption in [soFull, soData]) and (elem.goalList.Count > 0) then
  begin
    json.valueArray('goal');
    for i := 0 to elem.goalList.Count - 1 do
      ComposeReference{TFhirGoal}(json, '', elem.goalList[i]); {z - Reference(Goal)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('activity') and (SummaryOption in [soFull, soData]) and (elem.activityList.Count > 0) then
  begin
    json.valueArray('activity');
    for i := 0 to elem.activityList.Count - 1 do
      ComposeCarePlanActivity(json, '', elem.activityList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
procedure TFHIRJsonParser.ParseCareTeamParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCareTeamParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseCareTeamParticipant(jsn : TJsonObject) : TFhirCareTeamParticipant;
begin
  result := TFhirCareTeamParticipant.create;
  try
    ParseCareTeamParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCareTeamParticipantProperties(jsn : TJsonObject; result : TFhirCareTeamParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('member') then
        result.member := ParseReference{Resource}(jsn.vObj['member']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCareTeamParticipant(json : TJSONWriter; name : string; elem : TFhirCareTeamParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'member', elem.member); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCareTeam(jsn)); {2}
end;

function TFHIRJsonParser.ParseCareTeam(jsn : TJsonObject) : TFhirCareTeam;
begin
  result := TFhirCareTeam.create;
  try
    ParseCareTeamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCareTeamProperties(jsn : TJsonObject; result : TFhirCareTeam);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirCareTeamStatusEnum, SYSTEMS_TFhirCareTeamStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseCareTeamParticipant);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{TFhirCondition});
    if jsn.has('managingOrganization') then
      iterateArray(jsn.vArr['managingOrganization'], result.managingOrganizationList, parseReference{TFhirOrganization});
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCareTeam(json : TJSONWriter; name : string; elem : TFhirCareTeam; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirCareTeamStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirCareTeamStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('participant') and (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeCareTeamParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('managingOrganization') and (SummaryOption in [soFull, soSummary, soData]) and (elem.managingOrganizationList.Count > 0) then
  begin
    json.valueArray('managingOrganization');
    for i := 0 to elem.managingOrganizationList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.managingOrganizationList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
procedure TFHIRJsonParser.ParseChargeItemParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItemParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseChargeItemParticipant(jsn : TJsonObject) : TFhirChargeItemParticipant;
begin
  result := TFhirChargeItemParticipant.create;
  try
    ParseChargeItemParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemParticipantProperties(jsn : TJsonObject; result : TFhirChargeItemParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeChargeItemParticipant(json : TJSONWriter; name : string; elem : TFhirChargeItemParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseChargeItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseChargeItem(jsn : TJsonObject) : TFhirChargeItem;
begin
  result := TFhirChargeItem.create;
  try
    ParseChargeItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemProperties(jsn : TJsonObject; result : TFhirChargeItem);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
      if jsn.has('definition') or jsn.has('_definition') then
      iteratePrimitiveArray(jsn.vArr['definition'], jsn.vArr['_definition'], result.definitionList, parseUri);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirChargeitemStatusEnum, SYSTEMS_TFhirChargeitemStatusEnum);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirChargeItem});
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseChargeItemParticipant);
    if jsn.has('performingOrganization') then
        result.performingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['performingOrganization']);{q3}
    if jsn.has('requestingOrganization') then
        result.requestingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestingOrganization']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('bodysite') then
      iterateArray(jsn.vArr['bodysite'], result.bodysiteList, parseCodeableConcept);
    if jsn.has('factorOverride') or jsn.has('_factorOverride') then
        result.factorOverrideElement := ParseDecimal(jsn['factorOverride'], jsn.vObj['_factorOverride']);{q}
    if jsn.has('priceOverride') then
        result.priceOverride := ParseMoney(jsn.vObj['priceOverride']);{q3}
    if jsn.has('overrideReason') or jsn.has('_overrideReason') then
        result.overrideReasonElement := ParseString(jsn['overrideReason'], jsn.vObj['_overrideReason']);{q}
    if jsn.has('enterer') then
        result.enterer := ParseReference{Resource}(jsn.vObj['enterer']);{q3}
    if jsn.has('enteredDate') or jsn.has('_enteredDate') then
        result.enteredDateElement := ParseDateTime(jsn['enteredDate'], jsn.vObj['_enteredDate']);{q}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('service') then
      iterateArray(jsn.vArr['service'], result.serviceList, parseReference{Resource});
    if jsn.has('account') then
      iterateArray(jsn.vArr['account'], result.accountList, parseReference{TFhirAccount});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
end;

procedure TFHIRJsonComposer.ComposeChargeItem(json : TJSONWriter; name : string; elem : TFhirChargeItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('definition') and (SummaryOption in [soFull, soData]) and (elem.definitionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.definitionList.Count - 1 do
    begin
      ext := ext or ((elem.definitionList[i].id <> '') or (elem.definitionList[i].hasExtensionList) {no-comments or (elem.definitionList[i].hasComments)});
      val := val or (elem.definitionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('definition');
      for i := 0 to elem.definitionList.Count - 1 do
        ComposeUriValue(json, '',elem.definitionList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_definition');
      for i := 0 to elem.definitionList.Count - 1 do
        ComposeUriProps(json, '',elem.definitionList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirChargeitemStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirChargeitemStatusEnum, false);
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirChargeItem}(json, '', elem.partOfList[i]); {z - Reference(ChargeItem)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if not elem.noCompose and doCompose('participant') and (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeChargeItemParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('performingOrganization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'performingOrganization', elem.performingOrganization); {a}
  if not elem.noCompose and doCompose('requestingOrganization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'requestingOrganization', elem.requestingOrganization); {a}
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and doCompose('bodysite') and (SummaryOption in [soFull, soSummary, soData]) and (elem.bodysiteList.Count > 0) then
  begin
    json.valueArray('bodysite');
    for i := 0 to elem.bodysiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodysiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('factorOverride') and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factorOverride', elem.factorOverrideElement, false);
  if not elem.noCompose and doCompose('factorOverride') and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factorOverride', elem.factorOverrideElement, false);
  if not elem.noCompose and doCompose('priceOverride') and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'priceOverride', elem.priceOverride); {a}
  if not elem.noCompose and doCompose('overrideReason') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'overrideReason', elem.overrideReasonElement, false);
  if not elem.noCompose and doCompose('overrideReason') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'overrideReason', elem.overrideReasonElement, false);
  if not elem.noCompose and doCompose('enterer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'enterer', elem.enterer); {a}
  if not elem.noCompose and doCompose('enteredDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'enteredDate', elem.enteredDateElement, false);
  if not elem.noCompose and doCompose('enteredDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'enteredDate', elem.enteredDateElement, false);
  if not elem.noCompose and doCompose('reason') and (SummaryOption in [soFull, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('service') and (SummaryOption in [soFull, soData]) and (elem.serviceList.Count > 0) then
  begin
    json.valueArray('service');
    for i := 0 to elem.serviceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.serviceList[i]); {z - Reference(DiagnosticReport|ImagingStudy|Immunization|MedicationAdministration|MedicationDispense|Observation|Procedure|SupplyDelivery)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('account') and (SummaryOption in [soFull, soSummary, soData]) and (elem.accountList.Count > 0) then
  begin
    json.valueArray('account');
    for i := 0 to elem.accountList.Count - 1 do
      ComposeReference{TFhirAccount}(json, '', elem.accountList[i]); {z - Reference(Account)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('supportingInformation') and (SummaryOption in [soFull, soData]) and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
procedure TFHIRJsonParser.ParseClaimRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimRelated(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimRelated(jsn : TJsonObject) : TFhirClaimRelated;
begin
  result := TFhirClaimRelated.create;
  try
    ParseClaimRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimRelatedProperties(jsn : TJsonObject; result : TFhirClaimRelated);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('claim') then
        result.claim := ParseReference{TFhirClaim}(jsn.vObj['claim']);{q3}
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('reference') then
        result.reference := ParseIdentifier(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimRelated(json : TJSONWriter; name : string; elem : TFhirClaimRelated; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaim}(json, 'claim', elem.claim); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimPayee(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimPayee(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimPayee(jsn : TJsonObject) : TFhirClaimPayee;
begin
  result := TFhirClaimPayee.create;
  try
    ParseClaimPayeeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimPayeeProperties(jsn : TJsonObject; result : TFhirClaimPayee);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('resource') then
        result.resource := ParseCoding(jsn.vObj['resource']);{q3}
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimPayee(json : TJSONWriter; name : string; elem : TFhirClaimPayee; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'resource', elem.resource); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'party', elem.party); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimCareTeam(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimCareTeam(jsn : TJsonObject) : TFhirClaimCareTeam;
begin
  result := TFhirClaimCareTeam.create;
  try
    ParseClaimCareTeamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimCareTeamProperties(jsn : TJsonObject; result : TFhirClaimCareTeam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('provider') then
        result.provider := ParseReference{Resource}(jsn.vObj['provider']);{q3}
    if jsn.has('responsible') or jsn.has('_responsible') then
        result.responsibleElement := ParseBoolean(jsn['responsible'], jsn.vObj['_responsible']);{q}
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('qualification') then
        result.qualification := ParseCodeableConcept(jsn.vObj['qualification']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimCareTeam(json : TJSONWriter; name : string; elem : TFhirClaimCareTeam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'provider', elem.provider); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'responsible', elem.responsibleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'responsible', elem.responsibleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'qualification', elem.qualification); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimInformation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimInformation(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimInformation(jsn : TJsonObject) : TFhirClaimInformation;
begin
  result := TFhirClaimInformation.create;
  try
    ParseClaimInformationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimInformationProperties(jsn : TJsonObject; result : TFhirClaimInformation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDate') or jsn.has('_timingDate') then
      result.timing := parseDate(jsn['timingDate'], jsn.vObj['_timingDate']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueReference') {a3} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimInformation(json : TJSONWriter; name : string; elem : TFhirClaimInformation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDate) then 
  begin
    ComposeDateValue(json, 'timingDate', TFhirDate(elem.timing), false);
    ComposeDateProps(json, 'timingDate', TFhirDate(elem.timing), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(elem.value))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimDiagnosis(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimDiagnosis(jsn : TJsonObject) : TFhirClaimDiagnosis;
begin
  result := TFhirClaimDiagnosis.create;
  try
    ParseClaimDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimDiagnosisProperties(jsn : TJsonObject; result : TFhirClaimDiagnosis);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('diagnosisCodeableConcept') {a4} then
      result.diagnosis := ParseCodeableConcept(jsn.vObj['diagnosisCodeableConcept']);
    if jsn.has('diagnosisReference') {a3} then
      result.diagnosis := ParseReference(jsn.vObj['diagnosisReference']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('packageCode') then
        result.packageCode := ParseCodeableConcept(jsn.vObj['packageCode']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimDiagnosis(json : TJSONWriter; name : string; elem : TFhirClaimDiagnosis; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.diagnosis is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'diagnosisCodeableConcept', TFhirCodeableConcept(elem.diagnosis)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.diagnosis is TFhirReference) then
    ComposeReference(json, 'diagnosisReference', TFhirReference(elem.diagnosis));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'packageCode', elem.packageCode); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimProcedure(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimProcedure(jsn : TJsonObject) : TFhirClaimProcedure;
begin
  result := TFhirClaimProcedure.create;
  try
    ParseClaimProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimProcedureProperties(jsn : TJsonObject; result : TFhirClaimProcedure);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('procedureCodeableConcept') {a4} then
      result.procedure_ := ParseCodeableConcept(jsn.vObj['procedureCodeableConcept']);
    if jsn.has('procedureReference') {a3} then
      result.procedure_ := ParseReference(jsn.vObj['procedureReference']);
end;

procedure TFHIRJsonComposer.ComposeClaimProcedure(json : TJSONWriter; name : string; elem : TFhirClaimProcedure; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.procedure_ is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'procedureCodeableConcept', TFhirCodeableConcept(elem.procedure_)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.procedure_ is TFhirReference) then
    ComposeReference(json, 'procedureReference', TFhirReference(elem.procedure_));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimInsurance(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimInsurance(jsn : TJsonObject) : TFhirClaimInsurance;
begin
  result := TFhirClaimInsurance.create;
  try
    ParseClaimInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimInsuranceProperties(jsn : TJsonObject; result : TFhirClaimInsurance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('focal') or jsn.has('_focal') then
        result.focalElement := ParseBoolean(jsn['focal'], jsn.vObj['_focal']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('businessArrangement') or jsn.has('_businessArrangement') then
        result.businessArrangementElement := ParseString(jsn['businessArrangement'], jsn.vObj['_businessArrangement']);{q}
      if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
      iteratePrimitiveArray(jsn.vArr['preAuthRef'], jsn.vArr['_preAuthRef'], result.preAuthRefList, parseString);
    if jsn.has('claimResponse') then
        result.claimResponse := ParseReference{TFhirClaimResponse}(jsn.vObj['claimResponse']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimInsurance(json : TJSONWriter; name : string; elem : TFhirClaimInsurance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'focal', elem.focalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'focal', elem.focalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'businessArrangement', elem.businessArrangementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'businessArrangement', elem.businessArrangementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.preAuthRefList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.preAuthRefList.Count - 1 do
    begin
      ext := ext or ((elem.preAuthRefList[i].id <> '') or (elem.preAuthRefList[i].hasExtensionList) {no-comments or (elem.preAuthRefList[i].hasComments)});
      val := val or (elem.preAuthRefList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringValue(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringProps(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaimResponse}(json, 'claimResponse', elem.claimResponse); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimAccident(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimAccident(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimAccident(jsn : TJsonObject) : TFhirClaimAccident;
begin
  result := TFhirClaimAccident.create;
  try
    ParseClaimAccidentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimAccidentProperties(jsn : TJsonObject; result : TFhirClaimAccident);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDate(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('locationAddress') {a4} then
      result.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      result.location := ParseReference(jsn.vObj['locationReference']);
end;

procedure TFHIRJsonComposer.ComposeClaimAccident(json : TJSONWriter; name : string; elem : TFhirClaimAccident; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(elem.location)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(elem.location));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimItem(jsn : TJsonObject) : TFhirClaimItem;
begin
  result := TFhirClaimItem.create;
  try
    ParseClaimItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimItemProperties(jsn : TJsonObject; result : TFhirClaimItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
      if jsn.has('careTeamSequence') or jsn.has('_careTeamSequence') then
      iteratePrimitiveArray(jsn.vArr['careTeamSequence'], jsn.vArr['_careTeamSequence'], result.careTeamSequenceList, parsePositiveInt);
      if jsn.has('diagnosisSequence') or jsn.has('_diagnosisSequence') then
      iteratePrimitiveArray(jsn.vArr['diagnosisSequence'], jsn.vArr['_diagnosisSequence'], result.diagnosisSequenceList, parsePositiveInt);
      if jsn.has('procedureSequence') or jsn.has('_procedureSequence') then
      iteratePrimitiveArray(jsn.vArr['procedureSequence'], jsn.vArr['_procedureSequence'], result.procedureSequenceList, parsePositiveInt);
      if jsn.has('informationSequence') or jsn.has('_informationSequence') then
      iteratePrimitiveArray(jsn.vArr['informationSequence'], jsn.vArr['_informationSequence'], result.informationSequenceList, parsePositiveInt);
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('servicedPeriod') {a4} then
      result.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      result.serviced := parseDate(jsn['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('locationCodeableConcept') {a4} then
      result.location := ParseCodeableConcept(jsn.vObj['locationCodeableConcept']);
    if jsn.has('locationAddress') {a4} then
      result.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      result.location := ParseReference(jsn.vObj['locationReference']);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := ParseDecimal(jsn['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('subSite') then
      iterateArray(jsn.vArr['subSite'], result.subSiteList, parseCodeableConcept);
    if jsn.has('encounter') then
      iterateArray(jsn.vArr['encounter'], result.encounterList, parseReference{TFhirEncounter});
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseClaimItemDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimItem(json : TJSONWriter; name : string; elem : TFhirClaimItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.careTeamSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.careTeamSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.careTeamSequenceList[i].id <> '') or (elem.careTeamSequenceList[i].hasExtensionList) {no-comments or (elem.careTeamSequenceList[i].hasComments)});
      val := val or (elem.careTeamSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('careTeamSequence');
      for i := 0 to elem.careTeamSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.careTeamSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_careTeamSequence');
      for i := 0 to elem.careTeamSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.careTeamSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.diagnosisSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.diagnosisSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.diagnosisSequenceList[i].id <> '') or (elem.diagnosisSequenceList[i].hasExtensionList) {no-comments or (elem.diagnosisSequenceList[i].hasComments)});
      val := val or (elem.diagnosisSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('diagnosisSequence');
      for i := 0 to elem.diagnosisSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.diagnosisSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_diagnosisSequence');
      for i := 0 to elem.diagnosisSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.diagnosisSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.procedureSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.procedureSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.procedureSequenceList[i].id <> '') or (elem.procedureSequenceList[i].hasExtensionList) {no-comments or (elem.procedureSequenceList[i].hasComments)});
      val := val or (elem.procedureSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('procedureSequence');
      for i := 0 to elem.procedureSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.procedureSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_procedureSequence');
      for i := 0 to elem.procedureSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.procedureSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.informationSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.informationSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.informationSequenceList[i].id <> '') or (elem.informationSequenceList[i].hasExtensionList) {no-comments or (elem.informationSequenceList[i].hasComments)});
      val := val or (elem.informationSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('informationSequence');
      for i := 0 to elem.informationSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.informationSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_informationSequence');
      for i := 0 to elem.informationSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.informationSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(elem.serviced)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(elem.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(elem.serviced), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'locationCodeableConcept', TFhirCodeableConcept(elem.location)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(elem.location)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(elem.location));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.subSiteList.Count > 0) then
  begin
    json.valueArray('subSite');
    for i := 0 to elem.subSiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subSiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.encounterList.Count > 0) then
  begin
    json.valueArray('encounter');
    for i := 0 to elem.encounterList.Count - 1 do
      ComposeReference{TFhirEncounter}(json, '', elem.encounterList[i]); {z - Reference(Encounter)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeClaimItemDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimItemDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimItemDetail(jsn : TJsonObject) : TFhirClaimItemDetail;
begin
  result := TFhirClaimItemDetail.create;
  try
    ParseClaimItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimItemDetailProperties(jsn : TJsonObject; result : TFhirClaimItemDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := ParseDecimal(jsn['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], result.subDetailList, parseClaimItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimItemDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.subDetailList.Count > 0) then
  begin
    json.valueArray('subDetail');
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeClaimItemDetailSubDetail(json, '', elem.subDetailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimItemDetailSubDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimItemDetailSubDetail;
begin
  result := TFhirClaimItemDetailSubDetail.create;
  try
    ParseClaimItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirClaimItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := ParseDecimal(jsn['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
end;

procedure TFHIRJsonComposer.ComposeClaimItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirClaimItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaim(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaim(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaim(jsn : TJsonObject) : TFhirClaim;
begin
  result := TFhirClaim.create;
  try
    ParseClaimProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimProperties(jsn : TJsonObject; result : TFhirClaim);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subType') then
      iterateArray(jsn.vArr['subType'], result.subTypeList, parseCodeableConcept);
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn['use'], jsn.vObj['_use'], CODES_TFhirClaimUseEnum, SYSTEMS_TFhirClaimUseEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('billablePeriod') then
        result.billablePeriod := ParsePeriod(jsn.vObj['billablePeriod']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('enterer') then
        result.enterer := ParseReference{TFhirPractitioner}(jsn.vObj['enterer']);{q3}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('fundsReserve') then
        result.fundsReserve := ParseCodeableConcept(jsn.vObj['fundsReserve']);{q3}
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], result.relatedList, parseClaimRelated);
    if jsn.has('prescription') then
        result.prescription := ParseReference{Resource}(jsn.vObj['prescription']);{q3}
    if jsn.has('originalPrescription') then
        result.originalPrescription := ParseReference{TFhirMedicationRequest}(jsn.vObj['originalPrescription']);{q3}
    if jsn.has('payee') then
        result.payee := ParseClaimPayee(jsn.vObj['payee']);{q3}
    if jsn.has('referral') then
        result.referral := ParseReference{TFhirServiceRequest}(jsn.vObj['referral']);{q3}
    if jsn.has('facility') then
        result.facility := ParseReference{TFhirLocation}(jsn.vObj['facility']);{q3}
    if jsn.has('careTeam') then
      iterateArray(jsn.vArr['careTeam'], result.careTeamList, parseClaimCareTeam);
    if jsn.has('information') then
      iterateArray(jsn.vArr['information'], result.informationList, parseClaimInformation);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], result.diagnosisList, parseClaimDiagnosis);
    if jsn.has('procedure') then
      iterateArray(jsn.vArr['procedure'], result.procedure_List, parseClaimProcedure);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], result.insuranceList, parseClaimInsurance);
    if jsn.has('accident') then
        result.accident := ParseClaimAccident(jsn.vObj['accident']);{q3}
    if jsn.has('employmentImpacted') then
        result.employmentImpacted := ParsePeriod(jsn.vObj['employmentImpacted']);{q3}
    if jsn.has('hospitalization') then
        result.hospitalization := ParsePeriod(jsn.vObj['hospitalization']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseClaimItem);
    if jsn.has('total') then
        result.total := ParseMoney(jsn.vObj['total']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaim(json : TJSONWriter; name : string; elem : TFhirClaim; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('subType') and (SummaryOption in [soFull, soData]) and (elem.subTypeList.Count > 0) then
  begin
    json.valueArray('subType');
    for i := 0 to elem.subTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('use') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirClaimUseEnum, false);
  if not elem.noCompose and doCompose('use') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirClaimUseEnum, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('billablePeriod') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'billablePeriod', elem.billablePeriod); {a}
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('enterer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'enterer', elem.enterer); {a}
  if not elem.noCompose and doCompose('insurer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if not elem.noCompose and doCompose('provider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  if not elem.noCompose and doCompose('fundsReserve') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'fundsReserve', elem.fundsReserve); {a}
  if not elem.noCompose and doCompose('related') and (SummaryOption in [soFull, soData]) and (elem.relatedList.Count > 0) then
  begin
    json.valueArray('related');
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeClaimRelated(json, '', elem.relatedList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('prescription') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'prescription', elem.prescription); {a}
  if not elem.noCompose and doCompose('originalPrescription') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirMedicationRequest}(json, 'originalPrescription', elem.originalPrescription); {a}
  if not elem.noCompose and doCompose('payee') and (SummaryOption in [soFull, soData]) then
    ComposeClaimPayee(json, 'payee', elem.payee); {a}
  if not elem.noCompose and doCompose('referral') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirServiceRequest}(json, 'referral', elem.referral); {a}
  if not elem.noCompose and doCompose('facility') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'facility', elem.facility); {a}
  if not elem.noCompose and doCompose('careTeam') and (SummaryOption in [soFull, soData]) and (elem.careTeamList.Count > 0) then
  begin
    json.valueArray('careTeam');
    for i := 0 to elem.careTeamList.Count - 1 do
      ComposeClaimCareTeam(json, '', elem.careTeamList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('information') and (SummaryOption in [soFull, soData]) and (elem.informationList.Count > 0) then
  begin
    json.valueArray('information');
    for i := 0 to elem.informationList.Count - 1 do
      ComposeClaimInformation(json, '', elem.informationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('diagnosis') and (SummaryOption in [soFull, soData]) and (elem.diagnosisList.Count > 0) then
  begin
    json.valueArray('diagnosis');
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeClaimDiagnosis(json, '', elem.diagnosisList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('procedure_') and (SummaryOption in [soFull, soData]) and (elem.procedure_List.Count > 0) then
  begin
    json.valueArray('procedure');
    for i := 0 to elem.procedure_List.Count - 1 do
      ComposeClaimProcedure(json, '', elem.procedure_List[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('insurance') and (SummaryOption in [soFull, soData]) and (elem.insuranceList.Count > 0) then
  begin
    json.valueArray('insurance');
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeClaimInsurance(json, '', elem.insuranceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('accident') and (SummaryOption in [soFull, soData]) then
    ComposeClaimAccident(json, 'accident', elem.accident); {a}
  if not elem.noCompose and doCompose('employmentImpacted') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'employmentImpacted', elem.employmentImpacted); {a}
  if not elem.noCompose and doCompose('hospitalization') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'hospitalization', elem.hospitalization); {a}
  if not elem.noCompose and doCompose('item') and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeClaimItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('total') and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'total', elem.total); {a}
end;

{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
procedure TFHIRJsonParser.ParseClaimResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseItem(jsn : TJsonObject) : TFhirClaimResponseItem;
begin
  result := TFhirClaimResponseItem.create;
  try
    ParseClaimResponseItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemProperties(jsn : TJsonObject; result : TFhirClaimResponseItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('itemSequence') or jsn.has('_itemSequence') then
        result.itemSequenceElement := ParsePositiveInt(jsn['itemSequence'], jsn.vObj['_itemSequence']);{q}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseClaimResponseItemDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItem(json : TJSONWriter; name : string; elem : TFhirClaimResponseItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'itemSequence', elem.itemSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'itemSequence', elem.itemSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', elem.adjudicationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeClaimResponseItemDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItemAdjudication(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseItemAdjudication(jsn : TJsonObject) : TFhirClaimResponseItemAdjudication;
begin
  result := TFhirClaimResponseItemAdjudication.create;
  try
    ParseClaimResponseItemAdjudicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemAdjudicationProperties(jsn : TJsonObject; result : TFhirClaimResponseItemAdjudication);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseDecimal(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItemAdjudication(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemAdjudication; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItemDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseItemDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetail;
begin
  result := TFhirClaimResponseItemDetail.create;
  try
    ParseClaimResponseItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseItemDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('detailSequence') or jsn.has('_detailSequence') then
        result.detailSequenceElement := ParsePositiveInt(jsn['detailSequence'], jsn.vObj['_detailSequence']);{q}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], result.subDetailList, parseClaimResponseItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'detailSequence', elem.detailSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'detailSequence', elem.detailSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ClaimResponse.item.adjudication}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.subDetailList.Count > 0) then
  begin
    json.valueArray('subDetail');
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeClaimResponseItemDetailSubDetail(json, '', elem.subDetailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItemDetailSubDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetailSubDetail;
begin
  result := TFhirClaimResponseItemDetailSubDetail.create;
  try
    ParseClaimResponseItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('subDetailSequence') or jsn.has('_subDetailSequence') then
        result.subDetailSequenceElement := ParsePositiveInt(jsn['subDetailSequence'], jsn.vObj['_subDetailSequence']);{q}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseClaimResponseItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'subDetailSequence', elem.subDetailSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'subDetailSequence', elem.subDetailSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ClaimResponse.item.adjudication}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseAddItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseAddItem(jsn : TJsonObject) : TFhirClaimResponseAddItem;
begin
  result := TFhirClaimResponseAddItem.create;
  try
    ParseClaimResponseAddItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItemProperties(jsn : TJsonObject; result : TFhirClaimResponseAddItem);
begin
    ParseBackboneElementProperties(jsn, result);
      if jsn.has('itemSequence') or jsn.has('_itemSequence') then
      iteratePrimitiveArray(jsn.vArr['itemSequence'], jsn.vArr['_itemSequence'], result.itemSequenceList, parsePositiveInt);
      if jsn.has('detailSequence') or jsn.has('_detailSequence') then
      iteratePrimitiveArray(jsn.vArr['detailSequence'], jsn.vArr['_detailSequence'], result.detailSequenceList, parsePositiveInt);
      if jsn.has('subdetailSequence') or jsn.has('_subdetailSequence') then
      iteratePrimitiveArray(jsn.vArr['subdetailSequence'], jsn.vArr['_subdetailSequence'], result.subdetailSequenceList, parsePositiveInt);
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('fee') then
        result.fee := ParseMoney(jsn.vObj['fee']);{q3}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseClaimResponseItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseAddItem(json : TJSONWriter; name : string; elem : TFhirClaimResponseAddItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.itemSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.itemSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.itemSequenceList[i].id <> '') or (elem.itemSequenceList[i].hasExtensionList) {no-comments or (elem.itemSequenceList[i].hasComments)});
      val := val or (elem.itemSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('itemSequence');
      for i := 0 to elem.itemSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.itemSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_itemSequence');
      for i := 0 to elem.itemSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.itemSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.detailSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.detailSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.detailSequenceList[i].id <> '') or (elem.detailSequenceList[i].hasExtensionList) {no-comments or (elem.detailSequenceList[i].hasComments)});
      val := val or (elem.detailSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('detailSequence');
      for i := 0 to elem.detailSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.detailSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_detailSequence');
      for i := 0 to elem.detailSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.detailSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.subdetailSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.subdetailSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.subdetailSequenceList[i].id <> '') or (elem.subdetailSequenceList[i].hasExtensionList) {no-comments or (elem.subdetailSequenceList[i].hasComments)});
      val := val or (elem.subdetailSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('subdetailSequence');
      for i := 0 to elem.subdetailSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.subdetailSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_subdetailSequence');
      for i := 0 to elem.subdetailSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.subdetailSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'fee', elem.fee); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ClaimResponse.item.adjudication}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseError(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseError(jsn : TJsonObject) : TFhirClaimResponseError;
begin
  result := TFhirClaimResponseError.create;
  try
    ParseClaimResponseErrorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseErrorProperties(jsn : TJsonObject; result : TFhirClaimResponseError);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('itemSequence') or jsn.has('_itemSequence') then
        result.itemSequenceElement := ParsePositiveInt(jsn['itemSequence'], jsn.vObj['_itemSequence']);{q}
    if jsn.has('detailSequence') or jsn.has('_detailSequence') then
        result.detailSequenceElement := ParsePositiveInt(jsn['detailSequence'], jsn.vObj['_detailSequence']);{q}
    if jsn.has('subDetailSequence') or jsn.has('_subDetailSequence') then
        result.subDetailSequenceElement := ParsePositiveInt(jsn['subDetailSequence'], jsn.vObj['_subDetailSequence']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimResponseError(json : TJSONWriter; name : string; elem : TFhirClaimResponseError; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'itemSequence', elem.itemSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'itemSequence', elem.itemSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'detailSequence', elem.detailSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'detailSequence', elem.detailSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'subDetailSequence', elem.subDetailSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'subDetailSequence', elem.subDetailSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponsePayment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponsePayment(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponsePayment(jsn : TJsonObject) : TFhirClaimResponsePayment;
begin
  result := TFhirClaimResponsePayment.create;
  try
    ParseClaimResponsePaymentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponsePaymentProperties(jsn : TJsonObject; result : TFhirClaimResponsePayment);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('adjustment') then
        result.adjustment := ParseMoney(jsn.vObj['adjustment']);{q3}
    if jsn.has('adjustmentReason') then
        result.adjustmentReason := ParseCodeableConcept(jsn.vObj['adjustmentReason']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDate(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimResponsePayment(json : TJSONWriter; name : string; elem : TFhirClaimResponsePayment; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'adjustment', elem.adjustment); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'adjustmentReason', elem.adjustmentReason); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseProcessNote(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseProcessNote(jsn : TJsonObject) : TFhirClaimResponseProcessNote;
begin
  result := TFhirClaimResponseProcessNote.create;
  try
    ParseClaimResponseProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseProcessNoteProperties(jsn : TJsonObject; result : TFhirClaimResponseProcessNote);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('number') or jsn.has('_number') then
        result.numberElement := ParsePositiveInt(jsn['number'], jsn.vObj['_number']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
    if jsn.has('language') then
        result.language := ParseCodeableConcept(jsn.vObj['language']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimResponseProcessNote(json : TJSONWriter; name : string; elem : TFhirClaimResponseProcessNote; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'language', elem.language); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseInsurance(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseInsurance(jsn : TJsonObject) : TFhirClaimResponseInsurance;
begin
  result := TFhirClaimResponseInsurance.create;
  try
    ParseClaimResponseInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseInsuranceProperties(jsn : TJsonObject; result : TFhirClaimResponseInsurance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('focal') or jsn.has('_focal') then
        result.focalElement := ParseBoolean(jsn['focal'], jsn.vObj['_focal']);{q}
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('businessArrangement') or jsn.has('_businessArrangement') then
        result.businessArrangementElement := ParseString(jsn['businessArrangement'], jsn.vObj['_businessArrangement']);{q}
      if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
      iteratePrimitiveArray(jsn.vArr['preAuthRef'], jsn.vArr['_preAuthRef'], result.preAuthRefList, parseString);
    if jsn.has('claimResponse') then
        result.claimResponse := ParseReference{TFhirClaimResponse}(jsn.vObj['claimResponse']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimResponseInsurance(json : TJSONWriter; name : string; elem : TFhirClaimResponseInsurance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'focal', elem.focalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'focal', elem.focalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'businessArrangement', elem.businessArrangementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'businessArrangement', elem.businessArrangementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.preAuthRefList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.preAuthRefList.Count - 1 do
    begin
      ext := ext or ((elem.preAuthRefList[i].id <> '') or (elem.preAuthRefList[i].hasExtensionList) {no-comments or (elem.preAuthRefList[i].hasComments)});
      val := val or (elem.preAuthRefList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringValue(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringProps(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaimResponse}(json, 'claimResponse', elem.claimResponse); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponse(jsn : TJsonObject) : TFhirClaimResponse;
begin
  result := TFhirClaimResponse.create;
  try
    ParseClaimResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseProperties(jsn : TJsonObject; result : TFhirClaimResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirClaim}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') or jsn.has('_outcome')  then
      result.outcomeElement := parseEnum(jsn.path+'/outcome', jsn['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := ParseString(jsn['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('payeeType') then
        result.payeeType := ParseCodeableConcept(jsn.vObj['payeeType']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseClaimResponseItem);
    if jsn.has('addItem') then
      iterateArray(jsn.vArr['addItem'], result.addItemList, parseClaimResponseAddItem);
    if jsn.has('error') then
      iterateArray(jsn.vArr['error'], result.errorList, parseClaimResponseError);
    if jsn.has('totalCost') then
        result.totalCost := ParseMoney(jsn.vObj['totalCost']);{q3}
    if jsn.has('unallocDeductable') then
        result.unallocDeductable := ParseMoney(jsn.vObj['unallocDeductable']);{q3}
    if jsn.has('totalBenefit') then
        result.totalBenefit := ParseMoney(jsn.vObj['totalBenefit']);{q3}
    if jsn.has('payment') then
        result.payment := ParseClaimResponsePayment(jsn.vObj['payment']);{q3}
    if jsn.has('reserved') then
        result.reserved := ParseCoding(jsn.vObj['reserved']);{q3}
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], result.processNoteList, parseClaimResponseProcessNote);
    if jsn.has('communicationRequest') then
      iterateArray(jsn.vArr['communicationRequest'], result.communicationRequestList, parseReference{TFhirCommunicationRequest});
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], result.insuranceList, parseClaimResponseInsurance);
end;

procedure TFHIRJsonComposer.ComposeClaimResponse(json : TJSONWriter; name : string; elem : TFhirClaimResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('insurer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if not elem.noCompose and doCompose('requestProvider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if not elem.noCompose and doCompose('requestOrganization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaim}(json, 'request', elem.request); {a}
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('payeeType') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'payeeType', elem.payeeType); {a}
  if not elem.noCompose and doCompose('item') and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeClaimResponseItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('addItem') and (SummaryOption in [soFull, soData]) and (elem.addItemList.Count > 0) then
  begin
    json.valueArray('addItem');
    for i := 0 to elem.addItemList.Count - 1 do
      ComposeClaimResponseAddItem(json, '', elem.addItemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('error') and (SummaryOption in [soFull, soData]) and (elem.errorList.Count > 0) then
  begin
    json.valueArray('error');
    for i := 0 to elem.errorList.Count - 1 do
      ComposeClaimResponseError(json, '', elem.errorList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('totalCost') and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'totalCost', elem.totalCost); {a}
  if not elem.noCompose and doCompose('unallocDeductable') and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unallocDeductable', elem.unallocDeductable); {a}
  if not elem.noCompose and doCompose('totalBenefit') and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'totalBenefit', elem.totalBenefit); {a}
  if not elem.noCompose and doCompose('payment') and (SummaryOption in [soFull, soData]) then
    ComposeClaimResponsePayment(json, 'payment', elem.payment); {a}
  if not elem.noCompose and doCompose('reserved') and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'reserved', elem.reserved); {a}
  if not elem.noCompose and doCompose('form') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if not elem.noCompose and doCompose('processNote') and (SummaryOption in [soFull, soData]) and (elem.processNoteList.Count > 0) then
  begin
    json.valueArray('processNote');
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposeClaimResponseProcessNote(json, '', elem.processNoteList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('communicationRequest') and (SummaryOption in [soFull, soData]) and (elem.communicationRequestList.Count > 0) then
  begin
    json.valueArray('communicationRequest');
    for i := 0 to elem.communicationRequestList.Count - 1 do
      ComposeReference{TFhirCommunicationRequest}(json, '', elem.communicationRequestList[i]); {z - Reference(CommunicationRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('insurance') and (SummaryOption in [soFull, soData]) and (elem.insuranceList.Count > 0) then
  begin
    json.valueArray('insurance');
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeClaimResponseInsurance(json, '', elem.insuranceList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
procedure TFHIRJsonParser.ParseClinicalImpressionInvestigation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalImpressionInvestigation(jsn)); {2}
end;

function TFHIRJsonParser.ParseClinicalImpressionInvestigation(jsn : TJsonObject) : TFhirClinicalImpressionInvestigation;
begin
  result := TFhirClinicalImpressionInvestigation.create;
  try
    ParseClinicalImpressionInvestigationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionInvestigationProperties(jsn : TJsonObject; result : TFhirClinicalImpressionInvestigation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseReference{Resource});
end;

procedure TFHIRJsonComposer.ComposeClinicalImpressionInvestigation(json : TJSONWriter; name : string; elem : TFhirClinicalImpressionInvestigation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.itemList[i]); {z - Reference(Observation|QuestionnaireResponse|FamilyMemberHistory|DiagnosticReport|RiskAssessment|ImagingStudy)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionFinding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalImpressionFinding(jsn)); {2}
end;

function TFHIRJsonParser.ParseClinicalImpressionFinding(jsn : TJsonObject) : TFhirClinicalImpressionFinding;
begin
  result := TFhirClinicalImpressionFinding.create;
  try
    ParseClinicalImpressionFindingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionFindingProperties(jsn : TJsonObject; result : TFhirClinicalImpressionFinding);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('itemCodeableConcept') {a4} then
      result.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      result.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('basis') or jsn.has('_basis') then
        result.basisElement := ParseString(jsn['basis'], jsn.vObj['_basis']);{q}
end;

procedure TFHIRJsonComposer.ComposeClinicalImpressionFinding(json : TJSONWriter; name : string; elem : TFhirClinicalImpressionFinding; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(elem.item)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(elem.item));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'basis', elem.basisElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'basis', elem.basisElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClinicalImpression(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalImpression(jsn)); {2}
end;

function TFHIRJsonParser.ParseClinicalImpression(jsn : TJsonObject) : TFhirClinicalImpression;
begin
  result := TFhirClinicalImpression.create;
  try
    ParseClinicalImpressionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionProperties(jsn : TJsonObject; result : TFhirClinicalImpression);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirClinicalImpressionStatusEnum, SYSTEMS_TFhirClinicalImpressionStatusEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('assessor') then
        result.assessor := ParseReference{TFhirPractitioner}(jsn.vObj['assessor']);{q3}
    if jsn.has('previous') then
        result.previous := ParseReference{TFhirClinicalImpression}(jsn.vObj['previous']);{q3}
    if jsn.has('problem') then
      iterateArray(jsn.vArr['problem'], result.problemList, parseReference{Resource});
    if jsn.has('investigation') then
      iterateArray(jsn.vArr['investigation'], result.investigationList, parseClinicalImpressionInvestigation);
      if jsn.has('protocol') or jsn.has('_protocol') then
      iteratePrimitiveArray(jsn.vArr['protocol'], jsn.vArr['_protocol'], result.protocolList, parseUri);
    if jsn.has('summary') or jsn.has('_summary') then
        result.summaryElement := ParseString(jsn['summary'], jsn.vObj['_summary']);{q}
    if jsn.has('finding') then
      iterateArray(jsn.vArr['finding'], result.findingList, parseClinicalImpressionFinding);
    if jsn.has('prognosisCodeableConcept') then
      iterateArray(jsn.vArr['prognosisCodeableConcept'], result.prognosisCodeableConceptList, parseCodeableConcept);
    if jsn.has('prognosisReference') then
      iterateArray(jsn.vArr['prognosisReference'], result.prognosisReferenceList, parseReference{TFhirRiskAssessment});
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeClinicalImpression(json : TJSONWriter; name : string; elem : TFhirClinicalImpression; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirClinicalImpressionStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirClinicalImpressionStatusEnum, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('assessor') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'assessor', elem.assessor); {a}
  if not elem.noCompose and doCompose('previous') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClinicalImpression}(json, 'previous', elem.previous); {a}
  if not elem.noCompose and doCompose('problem') and (SummaryOption in [soFull, soSummary, soData]) and (elem.problemList.Count > 0) then
  begin
    json.valueArray('problem');
    for i := 0 to elem.problemList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.problemList[i]); {z - Reference(Condition|AllergyIntolerance)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('investigation') and (SummaryOption in [soFull, soData]) and (elem.investigationList.Count > 0) then
  begin
    json.valueArray('investigation');
    for i := 0 to elem.investigationList.Count - 1 do
      ComposeClinicalImpressionInvestigation(json, '', elem.investigationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('protocol') and (SummaryOption in [soFull, soData]) and (elem.protocolList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.protocolList.Count - 1 do
    begin
      ext := ext or ((elem.protocolList[i].id <> '') or (elem.protocolList[i].hasExtensionList) {no-comments or (elem.protocolList[i].hasComments)});
      val := val or (elem.protocolList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('protocol');
      for i := 0 to elem.protocolList.Count - 1 do
        ComposeUriValue(json, '',elem.protocolList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_protocol');
      for i := 0 to elem.protocolList.Count - 1 do
        ComposeUriProps(json, '',elem.protocolList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('summary') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'summary', elem.summaryElement, false);
  if not elem.noCompose and doCompose('summary') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'summary', elem.summaryElement, false);
  if not elem.noCompose and doCompose('finding') and (SummaryOption in [soFull, soData]) and (elem.findingList.Count > 0) then
  begin
    json.valueArray('finding');
    for i := 0 to elem.findingList.Count - 1 do
      ComposeClinicalImpressionFinding(json, '', elem.findingList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('prognosisCodeableConcept') and (SummaryOption in [soFull, soData]) and (elem.prognosisCodeableConceptList.Count > 0) then
  begin
    json.valueArray('prognosisCodeableConcept');
    for i := 0 to elem.prognosisCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.prognosisCodeableConceptList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('prognosisReference') and (SummaryOption in [soFull, soData]) and (elem.prognosisReferenceList.Count > 0) then
  begin
    json.valueArray('prognosisReference');
    for i := 0 to elem.prognosisReferenceList.Count - 1 do
      ComposeReference{TFhirRiskAssessment}(json, '', elem.prognosisReferenceList[i]); {z - Reference(RiskAssessment)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('action') and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.actionList[i]); {z - Reference(ServiceRequest|Procedure|MedicationRequest|Appointment)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
procedure TFHIRJsonParser.ParseCodeSystemFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemFilter(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemFilter(jsn : TJsonObject) : TFhirCodeSystemFilter;
begin
  result := TFhirCodeSystemFilter.create;
  try
    ParseCodeSystemFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemFilterProperties(jsn : TJsonObject; result : TFhirCodeSystemFilter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('operator') or jsn.has('_operator') then
      iterateEnumArray(jsn.vArr['operator'], jsn.vArr['_operator'], jsn.path+'/operator', result.operatorList, parseEnum, CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeCodeSystemFilter(json : TJSONWriter; name : string; elem : TFhirCodeSystemFilter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.operatorList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.operatorList.Count - 1 do
    begin
      val := val or (elem.operatorList[i].hasPrimitiveValue);
      ext := ext or ((elem.operatorList[i].id <> '') or (elem.operatorList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('operator');
      for i := 0 to elem.operatorList.Count - 1 do
        ComposeEnumValue(json, '', elem.operatorList[i], CODES_TFhirFilterOperatorEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_operator');
      for i := 0 to elem.operatorList.Count - 1 do
        ComposeEnumProps(json, '', elem.operatorList[i], CODES_TFhirFilterOperatorEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystemProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemProperty(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemProperty(jsn : TJsonObject) : TFhirCodeSystemProperty;
begin
  result := TFhirCodeSystemProperty.create;
  try
    ParseCodeSystemPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemPropertyProperties(jsn : TJsonObject; result : TFhirCodeSystemProperty);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := ParseUri(jsn['uri'], jsn.vObj['_uri']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirConceptPropertyTypeEnum, SYSTEMS_TFhirConceptPropertyTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemProperty(json : TJSONWriter; name : string; elem : TFhirCodeSystemProperty; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirConceptPropertyTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirConceptPropertyTypeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystemConcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemConcept(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemConcept(jsn : TJsonObject) : TFhirCodeSystemConcept;
begin
  result := TFhirCodeSystemConcept.create;
  try
    ParseCodeSystemConceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptProperties(jsn : TJsonObject; result : TFhirCodeSystemConcept);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := ParseString(jsn['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseCodeSystemConceptDesignation);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], result.property_List, parseCodeSystemConceptProperty);
    if jsn.has('concept') then
      iterateArray(jsn.vArr['concept'], result.conceptList, parseCodeSystemConcept);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemConcept(json : TJSONWriter; name : string; elem : TFhirCodeSystemConcept; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeCodeSystemConceptDesignation(json, '', elem.designationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.property_List.Count > 0) then
  begin
    json.valueArray('property');
    for i := 0 to elem.property_List.Count - 1 do
      ComposeCodeSystemConceptProperty(json, '', elem.property_List[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.conceptList.Count > 0) then
  begin
    json.valueArray('concept');
    for i := 0 to elem.conceptList.Count - 1 do
      ComposeCodeSystemConcept(json, '', elem.conceptList[i]); {z - @CodeSystem.concept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemConceptDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemConceptDesignation(jsn : TJsonObject) : TFhirCodeSystemConceptDesignation;
begin
  result := TFhirCodeSystemConceptDesignation.create;
  try
    ParseCodeSystemConceptDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptDesignationProperties(jsn : TJsonObject; result : TFhirCodeSystemConceptDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseCode(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('use') then
        result.use := ParseCoding(jsn.vObj['use']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeCodeSystemConceptDesignation(json : TJSONWriter; name : string; elem : TFhirCodeSystemConceptDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'use', elem.use); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemConceptProperty(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemConceptProperty(jsn : TJsonObject) : TFhirCodeSystemConceptProperty;
begin
  result := TFhirCodeSystemConceptProperty.create;
  try
    ParseCodeSystemConceptPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptPropertyProperties(jsn : TJsonObject; result : TFhirCodeSystemConceptProperty);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemConceptProperty(json : TJSONWriter; name : string; elem : TFhirCodeSystemConceptProperty; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystem(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystem(jsn : TJsonObject) : TFhirCodeSystem;
begin
  result := TFhirCodeSystem.create;
  try
    ParseCodeSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemProperties(jsn : TJsonObject; result : TFhirCodeSystem);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('caseSensitive') or jsn.has('_caseSensitive') then
        result.caseSensitiveElement := ParseBoolean(jsn['caseSensitive'], jsn.vObj['_caseSensitive']);{q}
    if jsn.has('valueSet') or jsn.has('_valueSet') then
        result.valueSetElement := ParseUri(jsn['valueSet'], jsn.vObj['_valueSet']);{q}
    if jsn.has('hierarchyMeaning') or jsn.has('_hierarchyMeaning')  then
      result.hierarchyMeaningElement := parseEnum(jsn.path+'/hierarchyMeaning', jsn['hierarchyMeaning'], jsn.vObj['_hierarchyMeaning'], CODES_TFhirCodesystemHierarchyMeaningEnum, SYSTEMS_TFhirCodesystemHierarchyMeaningEnum);
    if jsn.has('compositional') or jsn.has('_compositional') then
        result.compositionalElement := ParseBoolean(jsn['compositional'], jsn.vObj['_compositional']);{q}
    if jsn.has('versionNeeded') or jsn.has('_versionNeeded') then
        result.versionNeededElement := ParseBoolean(jsn['versionNeeded'], jsn.vObj['_versionNeeded']);{q}
    if jsn.has('content') or jsn.has('_content')  then
      result.contentElement := parseEnum(jsn.path+'/content', jsn['content'], jsn.vObj['_content'], CODES_TFhirCodesystemContentModeEnum, SYSTEMS_TFhirCodesystemContentModeEnum);
    if jsn.has('supplements') then
        result.supplements := ParseReference{TFhirCodeSystem}(jsn.vObj['supplements']);{q3}
    if jsn.has('count') or jsn.has('_count') then
        result.countElement := ParseUnsignedInt(jsn['count'], jsn.vObj['_count']);{q}
    if jsn.has('filter') then
      iterateArray(jsn.vArr['filter'], result.filterList, parseCodeSystemFilter);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], result.property_List, parseCodeSystemProperty);
    if jsn.has('concept') then
      iterateArray(jsn.vArr['concept'], result.conceptList, parseCodeSystemConcept);
end;

procedure TFHIRJsonComposer.ComposeCodeSystem(json : TJSONWriter; name : string; elem : TFhirCodeSystem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('caseSensitive') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'caseSensitive', elem.caseSensitiveElement, false);
  if not elem.noCompose and doCompose('caseSensitive') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'caseSensitive', elem.caseSensitiveElement, false);
  if not elem.noCompose and doCompose('valueSet') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'valueSet', elem.valueSetElement, false);
  if not elem.noCompose and doCompose('valueSet') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'valueSet', elem.valueSetElement, false);
  if not elem.noCompose and doCompose('hierarchyMeaning') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'hierarchyMeaning', elem.HierarchyMeaningElement, CODES_TFhirCodesystemHierarchyMeaningEnum, false);
  if not elem.noCompose and doCompose('hierarchyMeaning') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'hierarchyMeaning', elem.HierarchyMeaningElement, CODES_TFhirCodesystemHierarchyMeaningEnum, false);
  if not elem.noCompose and doCompose('compositional') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'compositional', elem.compositionalElement, false);
  if not elem.noCompose and doCompose('compositional') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'compositional', elem.compositionalElement, false);
  if not elem.noCompose and doCompose('versionNeeded') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'versionNeeded', elem.versionNeededElement, false);
  if not elem.noCompose and doCompose('versionNeeded') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'versionNeeded', elem.versionNeededElement, false);
  if not elem.noCompose and doCompose('content') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'content', elem.ContentElement, CODES_TFhirCodesystemContentModeEnum, false);
  if not elem.noCompose and doCompose('content') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'content', elem.ContentElement, CODES_TFhirCodesystemContentModeEnum, false);
  if not elem.noCompose and doCompose('supplements') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirCodeSystem}(json, 'supplements', elem.supplements); {a}
  if not elem.noCompose and doCompose('count') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'count', elem.countElement, false);
  if not elem.noCompose and doCompose('count') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'count', elem.countElement, false);
  if not elem.noCompose and doCompose('filter') and (SummaryOption in [soFull, soSummary, soData]) and (elem.filterList.Count > 0) then
  begin
    json.valueArray('filter');
    for i := 0 to elem.filterList.Count - 1 do
      ComposeCodeSystemFilter(json, '', elem.filterList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('property_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.property_List.Count > 0) then
  begin
    json.valueArray('property');
    for i := 0 to elem.property_List.Count - 1 do
      ComposeCodeSystemProperty(json, '', elem.property_List[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('concept') and (SummaryOption in [soFull, soData]) and (elem.conceptList.Count > 0) then
  begin
    json.valueArray('concept');
    for i := 0 to elem.conceptList.Count - 1 do
      ComposeCodeSystemConcept(json, '', elem.conceptList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
procedure TFHIRJsonParser.ParseCommunicationPayload(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationPayload(jsn)); {2}
end;

function TFHIRJsonParser.ParseCommunicationPayload(jsn : TJsonObject) : TFhirCommunicationPayload;
begin
  result := TFhirCommunicationPayload.create;
  try
    ParseCommunicationPayloadProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationPayloadProperties(jsn : TJsonObject; result : TFhirCommunicationPayload);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
    if jsn.has('contentString') or jsn.has('_contentString') then
      result.content := parseString(jsn['contentString'], jsn.vObj['_contentString']);
end;

procedure TFHIRJsonComposer.ComposeCommunicationPayload(json : TJSONWriter; name : string; elem : TFhirCommunicationPayload; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirString) then 
  begin
    ComposeStringValue(json, 'contentString', TFhirString(elem.content), false);
    ComposeStringProps(json, 'contentString', TFhirString(elem.content), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunication(jsn)); {2}
end;

function TFHIRJsonParser.ParseCommunication(jsn : TJsonObject) : TFhirCommunication;
begin
  result := TFhirCommunication.create;
  try
    ParseCommunicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationProperties(jsn : TJsonObject; result : TFhirCommunication);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirReference});
    if jsn.has('inResponseTo') then
      iterateArray(jsn.vArr['inResponseTo'], result.inResponseToList, parseReference{TFhirCommunication});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum);
    if jsn.has('statusReason') then
        result.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);{q3}
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('medium') then
      iterateArray(jsn.vArr['medium'], result.mediumList, parseCodeableConcept);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], result.recipientList, parseReference{Resource});
    if jsn.has('topic') then
        result.topic := ParseCodeableConcept(jsn.vObj['topic']);{q3}
    if jsn.has('about') then
      iterateArray(jsn.vArr['about'], result.aboutList, parseReference{TFhirReference});
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('sent') or jsn.has('_sent') then
        result.sentElement := ParseDateTime(jsn['sent'], jsn.vObj['_sent']);{q}
    if jsn.has('received') or jsn.has('_received') then
        result.receivedElement := ParseDateTime(jsn['received'], jsn.vObj['_received']);{q}
    if jsn.has('sender') then
        result.sender := ParseReference{Resource}(jsn.vObj['sender']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('payload') then
      iterateArray(jsn.vArr['payload'], result.payloadList, parseCommunicationPayload);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCommunication(json : TJSONWriter; name : string; elem : TFhirCommunication; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('instantiates') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.partOfList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('inResponseTo') and (SummaryOption in [soFull, soData]) and (elem.inResponseToList.Count > 0) then
  begin
    json.valueArray('inResponseTo');
    for i := 0 to elem.inResponseToList.Count - 1 do
      ComposeReference{TFhirCommunication}(json, '', elem.inResponseToList[i]); {z - Reference(Communication)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum, false);
  if not elem.noCompose and doCompose('statusReason') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'statusReason', elem.statusReason); {a}
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('medium') and (SummaryOption in [soFull, soData]) and (elem.mediumList.Count > 0) then
  begin
    json.valueArray('medium');
    for i := 0 to elem.mediumList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.mediumList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('recipient') and (SummaryOption in [soFull, soData]) and (elem.recipientList.Count > 0) then
  begin
    json.valueArray('recipient');
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.recipientList[i]); {z - Reference(Device|Organization|Patient|Practitioner|PractitionerRole|RelatedPerson|Group|CareTeam)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('topic') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'topic', elem.topic); {a}
  if not elem.noCompose and doCompose('about') and (SummaryOption in [soFull, soData]) and (elem.aboutList.Count > 0) then
  begin
    json.valueArray('about');
    for i := 0 to elem.aboutList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.aboutList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('sent') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'sent', elem.sentElement, false);
  if not elem.noCompose and doCompose('sent') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'sent', elem.sentElement, false);
  if not elem.noCompose and doCompose('received') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'received', elem.receivedElement, false);
  if not elem.noCompose and doCompose('received') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'received', elem.receivedElement, false);
  if not elem.noCompose and doCompose('sender') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'sender', elem.sender); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|DiagnosticReport|DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('payload') and (SummaryOption in [soFull, soData]) and (elem.payloadList.Count > 0) then
  begin
    json.valueArray('payload');
    for i := 0 to elem.payloadList.Count - 1 do
      ComposeCommunicationPayload(json, '', elem.payloadList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
procedure TFHIRJsonParser.ParseCommunicationRequestPayload(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationRequestPayload(jsn)); {2}
end;

function TFHIRJsonParser.ParseCommunicationRequestPayload(jsn : TJsonObject) : TFhirCommunicationRequestPayload;
begin
  result := TFhirCommunicationRequestPayload.create;
  try
    ParseCommunicationRequestPayloadProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationRequestPayloadProperties(jsn : TJsonObject; result : TFhirCommunicationRequestPayload);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
    if jsn.has('contentString') or jsn.has('_contentString') then
      result.content := parseString(jsn['contentString'], jsn.vObj['_contentString']);
end;

procedure TFHIRJsonComposer.ComposeCommunicationRequestPayload(json : TJSONWriter; name : string; elem : TFhirCommunicationRequestPayload; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirString) then 
  begin
    ComposeStringValue(json, 'contentString', TFhirString(elem.content), false);
    ComposeStringProps(json, 'contentString', TFhirString(elem.content), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCommunicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseCommunicationRequest(jsn : TJsonObject) : TFhirCommunicationRequest;
begin
  result := TFhirCommunicationRequest.create;
  try
    ParseCommunicationRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationRequestProperties(jsn : TJsonObject; result : TFhirCommunicationRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirCommunicationRequest});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('medium') then
      iterateArray(jsn.vArr['medium'], result.mediumList, parseCodeableConcept);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], result.recipientList, parseReference{Resource});
    if jsn.has('about') then
      iterateArray(jsn.vArr['about'], result.aboutList, parseReference{TFhirReference});
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('payload') then
      iterateArray(jsn.vArr['payload'], result.payloadList, parseCommunicationRequestPayload);
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := ParseDateTime(jsn['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseReference{Resource}(jsn.vObj['requester']);{q3}
    if jsn.has('sender') then
        result.sender := ParseReference{Resource}(jsn.vObj['sender']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCommunicationRequest(json : TJSONWriter; name : string; elem : TFhirCommunicationRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('replaces') and (SummaryOption in [soFull, soSummary, soData]) and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirCommunicationRequest}(json, '', elem.replacesList[i]); {z - Reference(CommunicationRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('groupIdentifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('medium') and (SummaryOption in [soFull, soData]) and (elem.mediumList.Count > 0) then
  begin
    json.valueArray('medium');
    for i := 0 to elem.mediumList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.mediumList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('recipient') and (SummaryOption in [soFull, soData]) and (elem.recipientList.Count > 0) then
  begin
    json.valueArray('recipient');
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.recipientList[i]); {z - Reference(Device|Organization|Patient|Practitioner|RelatedPerson|Group|CareTeam)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('about') and (SummaryOption in [soFull, soData]) and (elem.aboutList.Count > 0) then
  begin
    json.valueArray('about');
    for i := 0 to elem.aboutList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.aboutList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('payload') and (SummaryOption in [soFull, soData]) and (elem.payloadList.Count > 0) then
  begin
    json.valueArray('payload');
    for i := 0 to elem.payloadList.Count - 1 do
      ComposeCommunicationRequestPayload(json, '', elem.payloadList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('requester') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'requester', elem.requester); {a}
  if not elem.noCompose and doCompose('sender') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'sender', elem.sender); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|DiagnosticReport|DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
procedure TFHIRJsonParser.ParseCompartmentDefinitionResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompartmentDefinitionResource(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompartmentDefinitionResource(jsn : TJsonObject) : TFhirCompartmentDefinitionResource;
begin
  result := TFhirCompartmentDefinitionResource.create;
  try
    ParseCompartmentDefinitionResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompartmentDefinitionResourceProperties(jsn : TJsonObject; result : TFhirCompartmentDefinitionResource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
      if jsn.has('param') or jsn.has('_param') then
      iteratePrimitiveArray(jsn.vArr['param'], jsn.vArr['_param'], result.paramList, parseString);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCompartmentDefinitionResource(json : TJSONWriter; name : string; elem : TFhirCompartmentDefinitionResource; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.paramList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.paramList.Count - 1 do
    begin
      ext := ext or ((elem.paramList[i].id <> '') or (elem.paramList[i].hasExtensionList) {no-comments or (elem.paramList[i].hasComments)});
      val := val or (elem.paramList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('param');
      for i := 0 to elem.paramList.Count - 1 do
        ComposeStringValue(json, '',elem.paramList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_param');
      for i := 0 to elem.paramList.Count - 1 do
        ComposeStringProps(json, '',elem.paramList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCompartmentDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompartmentDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompartmentDefinition(jsn : TJsonObject) : TFhirCompartmentDefinition;
begin
  result := TFhirCompartmentDefinition.create;
  try
    ParseCompartmentDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompartmentDefinitionProperties(jsn : TJsonObject; result : TFhirCompartmentDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum);
    if jsn.has('search') or jsn.has('_search') then
        result.searchElement := ParseBoolean(jsn['search'], jsn.vObj['_search']);{q}
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], result.resourceList, parseCompartmentDefinitionResource);
end;

procedure TFHIRJsonComposer.ComposeCompartmentDefinition(json : TJSONWriter; name : string; elem : TFhirCompartmentDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum, false);
  if not elem.noCompose and doCompose('search') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'search', elem.searchElement, false);
  if not elem.noCompose and doCompose('search') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'search', elem.searchElement, false);
  if not elem.noCompose and doCompose('resource') and (SummaryOption in [soFull, soSummary, soData]) and (elem.resourceList.Count > 0) then
  begin
    json.valueArray('resource');
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeCompartmentDefinitionResource(json, '', elem.resourceList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
procedure TFHIRJsonParser.ParseCompositionAttester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionAttester(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompositionAttester(jsn : TJsonObject) : TFhirCompositionAttester;
begin
  result := TFhirCompositionAttester.create;
  try
    ParseCompositionAttesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionAttesterProperties(jsn : TJsonObject; result : TFhirCompositionAttester);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode') then
      iterateEnumArray(jsn.vArr['mode'], jsn.vArr['_mode'], jsn.path+'/mode', result.modeList, parseEnum, CODES_TFhirCompositionAttestationModeEnum, SYSTEMS_TFhirCompositionAttestationModeEnum);
    if jsn.has('time') or jsn.has('_time') then
        result.timeElement := ParseDateTime(jsn['time'], jsn.vObj['_time']);{q}
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCompositionAttester(json : TJSONWriter; name : string; elem : TFhirCompositionAttester; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.modeList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.modeList.Count - 1 do
    begin
      val := val or (elem.modeList[i].hasPrimitiveValue);
      ext := ext or ((elem.modeList[i].id <> '') or (elem.modeList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('mode');
      for i := 0 to elem.modeList.Count - 1 do
        ComposeEnumValue(json, '', elem.modeList[i], CODES_TFhirCompositionAttestationModeEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_mode');
      for i := 0 to elem.modeList.Count - 1 do
        ComposeEnumProps(json, '', elem.modeList[i], CODES_TFhirCompositionAttestationModeEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'time', elem.timeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'time', elem.timeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'party', elem.party); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCompositionRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionRelatesTo(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompositionRelatesTo(jsn : TJsonObject) : TFhirCompositionRelatesTo;
begin
  result := TFhirCompositionRelatesTo.create;
  try
    ParseCompositionRelatesToProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionRelatesToProperties(jsn : TJsonObject; result : TFhirCompositionRelatesTo);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum);
    if jsn.has('targetIdentifier') {a4} then
      result.target := ParseIdentifier(jsn.vObj['targetIdentifier']);
    if jsn.has('targetReference') {a3} then
      result.target := ParseReference(jsn.vObj['targetReference']);
end;

procedure TFHIRJsonComposer.ComposeCompositionRelatesTo(json : TJSONWriter; name : string; elem : TFhirCompositionRelatesTo; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.target is TFhirIdentifier) then 
    ComposeIdentifier(json, 'targetIdentifier', TFhirIdentifier(elem.target)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.target is TFhirReference) then
    ComposeReference(json, 'targetReference', TFhirReference(elem.target));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCompositionEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionEvent(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompositionEvent(jsn : TJsonObject) : TFhirCompositionEvent;
begin
  result := TFhirCompositionEvent.create;
  try
    ParseCompositionEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionEventProperties(jsn : TJsonObject; result : TFhirCompositionEvent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseReference{TFhirReference});
end;

procedure TFHIRJsonComposer.ComposeCompositionEvent(json : TJSONWriter; name : string; elem : TFhirCompositionEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.detailList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCompositionSection(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionSection(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompositionSection(jsn : TJsonObject) : TFhirCompositionSection;
begin
  result := TFhirCompositionSection.create;
  try
    ParseCompositionSectionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionSectionProperties(jsn : TJsonObject; result : TFhirCompositionSection);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('text') then
        result.text := ParseNarrative(jsn.vObj['text']);{q3}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum);
    if jsn.has('orderedBy') then
        result.orderedBy := ParseCodeableConcept(jsn.vObj['orderedBy']);{q3}
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], result.entryList, parseReference{TFhirReference});
    if jsn.has('emptyReason') then
        result.emptyReason := ParseCodeableConcept(jsn.vObj['emptyReason']);{q3}
    if jsn.has('section') then
      iterateArray(jsn.vArr['section'], result.sectionList, parseCompositionSection);
end;

procedure TFHIRJsonComposer.ComposeCompositionSection(json : TJSONWriter; name : string; elem : TFhirCompositionSection; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeNarrative(json, 'text', elem.text); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirListModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirListModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'orderedBy', elem.orderedBy); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.entryList.Count > 0) then
  begin
    json.valueArray('entry');
    for i := 0 to elem.entryList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.entryList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'emptyReason', elem.emptyReason); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.sectionList.Count > 0) then
  begin
    json.valueArray('section');
    for i := 0 to elem.sectionList.Count - 1 do
      ComposeCompositionSection(json, '', elem.sectionList[i]); {z - @Composition.section}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseComposition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseComposition(jsn)); {2}
end;

function TFHIRJsonParser.ParseComposition(jsn : TJsonObject) : TFhirComposition;
begin
  result := TFhirComposition.create;
  try
    ParseCompositionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionProperties(jsn : TJsonObject; result : TFhirComposition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('class') then
        result.class_ := ParseCodeableConcept(jsn.vObj['class']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirReference}(jsn.vObj['subject']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], result.authorList, parseReference{Resource});
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('confidentiality') or jsn.has('_confidentiality')  then
      result.confidentialityElement := parseEnum(jsn.path+'/confidentiality', jsn['confidentiality'], jsn.vObj['_confidentiality'], CODES_TFhirV3ConfidentialityClassificationEnum, SYSTEMS_TFhirV3ConfidentialityClassificationEnum);
    if jsn.has('attester') then
      iterateArray(jsn.vArr['attester'], result.attesterList, parseCompositionAttester);
    if jsn.has('custodian') then
        result.custodian := ParseReference{TFhirOrganization}(jsn.vObj['custodian']);{q3}
    if jsn.has('relatesTo') then
      iterateArray(jsn.vArr['relatesTo'], result.relatesToList, parseCompositionRelatesTo);
    if jsn.has('event') then
      iterateArray(jsn.vArr['event'], result.eventList, parseCompositionEvent);
    if jsn.has('section') then
      iterateArray(jsn.vArr['section'], result.sectionList, parseCompositionSection);
end;

procedure TFHIRJsonComposer.ComposeComposition(json : TJSONWriter; name : string; elem : TFhirComposition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirCompositionStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirCompositionStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('class_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'class', elem.class_); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('encounter') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soSummary, soData]) and (elem.authorList.Count > 0) then
  begin
    json.valueArray('author');
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.authorList[i]); {z - Reference(Practitioner|PractitionerRole|Device|Patient|RelatedPerson|Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('confidentiality') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'confidentiality', elem.ConfidentialityElement, CODES_TFhirV3ConfidentialityClassificationEnum, false);
  if not elem.noCompose and doCompose('confidentiality') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'confidentiality', elem.ConfidentialityElement, CODES_TFhirV3ConfidentialityClassificationEnum, false);
  if not elem.noCompose and doCompose('attester') and (SummaryOption in [soFull, soSummary, soData]) and (elem.attesterList.Count > 0) then
  begin
    json.valueArray('attester');
    for i := 0 to elem.attesterList.Count - 1 do
      ComposeCompositionAttester(json, '', elem.attesterList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('custodian') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'custodian', elem.custodian); {a}
  if not elem.noCompose and doCompose('relatesTo') and (SummaryOption in [soFull, soSummary, soData]) and (elem.relatesToList.Count > 0) then
  begin
    json.valueArray('relatesTo');
    for i := 0 to elem.relatesToList.Count - 1 do
      ComposeCompositionRelatesTo(json, '', elem.relatesToList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('event') and (SummaryOption in [soFull, soSummary, soData]) and (elem.eventList.Count > 0) then
  begin
    json.valueArray('event');
    for i := 0 to elem.eventList.Count - 1 do
      ComposeCompositionEvent(json, '', elem.eventList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('section') and (SummaryOption in [soFull, soData]) and (elem.sectionList.Count > 0) then
  begin
    json.valueArray('section');
    for i := 0 to elem.sectionList.Count - 1 do
      ComposeCompositionSection(json, '', elem.sectionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
procedure TFHIRJsonParser.ParseConceptMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroup(jsn : TJsonObject) : TFhirConceptMapGroup;
begin
  result := TFhirConceptMapGroup.create;
  try
    ParseConceptMapGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupProperties(jsn : TJsonObject; result : TFhirConceptMapGroup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('source') or jsn.has('_source') then
        result.sourceElement := ParseUri(jsn['source'], jsn.vObj['_source']);{q}
    if jsn.has('sourceVersion') or jsn.has('_sourceVersion') then
        result.sourceVersionElement := ParseString(jsn['sourceVersion'], jsn.vObj['_sourceVersion']);{q}
    if jsn.has('target') or jsn.has('_target') then
        result.targetElement := ParseUri(jsn['target'], jsn.vObj['_target']);{q}
    if jsn.has('targetVersion') or jsn.has('_targetVersion') then
        result.targetVersionElement := ParseString(jsn['targetVersion'], jsn.vObj['_targetVersion']);{q}
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], result.elementList, parseConceptMapGroupElement);
    if jsn.has('unmapped') then
        result.unmapped := ParseConceptMapGroupUnmapped(jsn.vObj['unmapped']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroup(json : TJSONWriter; name : string; elem : TFhirConceptMapGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'source', elem.sourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'source', elem.sourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'sourceVersion', elem.sourceVersionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'sourceVersion', elem.sourceVersionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'target', elem.targetElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'target', elem.targetElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'targetVersion', elem.targetVersionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'targetVersion', elem.targetVersionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.elementList.Count > 0) then
  begin
    json.valueArray('element');
    for i := 0 to elem.elementList.Count - 1 do
      ComposeConceptMapGroupElement(json, '', elem.elementList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeConceptMapGroupUnmapped(json, 'unmapped', elem.unmapped); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupElement(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroupElement(jsn : TJsonObject) : TFhirConceptMapGroupElement;
begin
  result := TFhirConceptMapGroupElement.create;
  try
    ParseConceptMapGroupElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElement);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseConceptMapGroupElementTarget);
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupElement(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeConceptMapGroupElementTarget(json, '', elem.targetList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupElementTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroupElementTarget(jsn : TJsonObject) : TFhirConceptMapGroupElementTarget;
begin
  result := TFhirConceptMapGroupElementTarget.create;
  try
    ParseConceptMapGroupElementTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTargetProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElementTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
    if jsn.has('equivalence') or jsn.has('_equivalence')  then
      result.equivalenceElement := parseEnum(jsn.path+'/equivalence', jsn['equivalence'], jsn.vObj['_equivalence'], CODES_TFhirConceptMapEquivalenceEnum, SYSTEMS_TFhirConceptMapEquivalenceEnum);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('dependsOn') then
      iterateArray(jsn.vArr['dependsOn'], result.dependsOnList, parseConceptMapGroupElementTargetDependsOn);
    if jsn.has('product') then
      iterateArray(jsn.vArr['product'], result.productList, parseConceptMapGroupElementTargetDependsOn);
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupElementTarget(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElementTarget; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (not isCanonical or (elem.equivalenceElement <> nil) and (elem.equivalenceElement.primitiveValue <> 'equivalent')) and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'equivalence', elem.EquivalenceElement, CODES_TFhirConceptMapEquivalenceEnum, false);
  if not elem.noCompose and (not isCanonical or (elem.equivalenceElement <> nil) and (elem.equivalenceElement.primitiveValue <> 'equivalent')) and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'equivalence', elem.EquivalenceElement, CODES_TFhirConceptMapEquivalenceEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.dependsOnList.Count > 0) then
  begin
    json.valueArray('dependsOn');
    for i := 0 to elem.dependsOnList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(json, '', elem.dependsOnList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.productList.Count > 0) then
  begin
    json.valueArray('product');
    for i := 0 to elem.productList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(json, '', elem.productList[i]); {z - @ConceptMap.group.element.target.dependsOn}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupElementTargetDependsOn(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject) : TFhirConceptMapGroupElementTargetDependsOn;
begin
  result := TFhirConceptMapGroupElementTargetDependsOn.create;
  try
    ParseConceptMapGroupElementTargetDependsOnProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTargetDependsOnProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElementTargetDependsOn);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('property') or jsn.has('_property') then
        result.property_Element := ParseUri(jsn['property'], jsn.vObj['_property']);{q}
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := ParseUri(jsn['system'], jsn.vObj['_system']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseString(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupElementTargetDependsOn(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElementTargetDependsOn; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'property', elem.property_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'property', elem.property_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupUnmapped(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupUnmapped(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroupUnmapped(jsn : TJsonObject) : TFhirConceptMapGroupUnmapped;
begin
  result := TFhirConceptMapGroupUnmapped.create;
  try
    ParseConceptMapGroupUnmappedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupUnmappedProperties(jsn : TJsonObject; result : TFhirConceptMapGroupUnmapped);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirConceptmapUnmappedModeEnum, SYSTEMS_TFhirConceptmapUnmappedModeEnum);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupUnmapped(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupUnmapped; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirConceptmapUnmappedModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirConceptmapUnmappedModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMap(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMap(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMap(jsn : TJsonObject) : TFhirConceptMap;
begin
  result := TFhirConceptMap.create;
  try
    ParseConceptMapProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapProperties(jsn : TJsonObject; result : TFhirConceptMap);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('sourceReference') {a3} then
      result.source := ParseReference(jsn.vObj['sourceReference']);
    if jsn.has('sourceUri') or jsn.has('_sourceUri') then
      result.source := parseUri(jsn['sourceUri'], jsn.vObj['_sourceUri']);
    if jsn.has('targetReference') {a3} then
      result.target := ParseReference(jsn.vObj['targetReference']);
    if jsn.has('targetUri') or jsn.has('_targetUri') then
      result.target := parseUri(jsn['targetUri'], jsn.vObj['_targetUri']);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseConceptMapGroup);
end;

procedure TFHIRJsonComposer.ComposeConceptMap(json : TJSONWriter; name : string; elem : TFhirConceptMap; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirReference) then
    ComposeReference(json, 'sourceReference', TFhirReference(elem.source))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirUri) then 
  begin
    ComposeUriValue(json, 'sourceUri', TFhirUri(elem.source), false);
    ComposeUriProps(json, 'sourceUri', TFhirUri(elem.source), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.target is TFhirReference) then
    ComposeReference(json, 'targetReference', TFhirReference(elem.target))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.target is TFhirUri) then 
  begin
    ComposeUriValue(json, 'targetUri', TFhirUri(elem.target), false);
    ComposeUriProps(json, 'targetUri', TFhirUri(elem.target), false);
  end;
  if not elem.noCompose and doCompose('group') and (SummaryOption in [soFull, soData]) and (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeConceptMapGroup(json, '', elem.groupList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
procedure TFHIRJsonParser.ParseConditionStage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConditionStage(jsn)); {2}
end;

function TFHIRJsonParser.ParseConditionStage(jsn : TJsonObject) : TFhirConditionStage;
begin
  result := TFhirConditionStage.create;
  try
    ParseConditionStageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConditionStageProperties(jsn : TJsonObject; result : TFhirConditionStage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('summary') then
        result.summary := ParseCodeableConcept(jsn.vObj['summary']);{q3}
    if jsn.has('assessment') then
      iterateArray(jsn.vArr['assessment'], result.assessmentList, parseReference{Resource});
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConditionStage(json : TJSONWriter; name : string; elem : TFhirConditionStage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'summary', elem.summary); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.assessmentList.Count > 0) then
  begin
    json.valueArray('assessment');
    for i := 0 to elem.assessmentList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.assessmentList[i]); {z - Reference(ClinicalImpression|DiagnosticReport|Observation)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConditionEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConditionEvidence(jsn)); {2}
end;

function TFHIRJsonParser.ParseConditionEvidence(jsn : TJsonObject) : TFhirConditionEvidence;
begin
  result := TFhirConditionEvidence.create;
  try
    ParseConditionEvidenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConditionEvidenceProperties(jsn : TJsonObject; result : TFhirConditionEvidence);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseReference{TFhirReference});
end;

procedure TFHIRJsonComposer.ComposeConditionEvidence(json : TJSONWriter; name : string; elem : TFhirConditionEvidence; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.detailList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCondition(jsn)); {2}
end;

function TFHIRJsonParser.ParseCondition(jsn : TJsonObject) : TFhirCondition;
begin
  result := TFhirCondition.create;
  try
    ParseConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConditionProperties(jsn : TJsonObject; result : TFhirCondition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('clinicalStatus') or jsn.has('_clinicalStatus')  then
      result.clinicalStatusElement := parseEnum(jsn.path+'/clinicalStatus', jsn['clinicalStatus'], jsn.vObj['_clinicalStatus'], CODES_TFhirConditionClinicalEnum, SYSTEMS_TFhirConditionClinicalEnum);
    if jsn.has('verificationStatus') or jsn.has('_verificationStatus')  then
      result.verificationStatusElement := parseEnum(jsn.path+'/verificationStatus', jsn['verificationStatus'], jsn.vObj['_verificationStatus'], CODES_TFhirConditionVerStatusEnum, SYSTEMS_TFhirConditionVerStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('severity') then
        result.severity := ParseCodeableConcept(jsn.vObj['severity']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], result.bodySiteList, parseCodeableConcept);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('onsetAge') {a4} then
      result.onset := ParseAge(jsn.vObj['onsetAge']);
    if jsn.has('onsetPeriod') {a4} then
      result.onset := ParsePeriod(jsn.vObj['onsetPeriod']);
    if jsn.has('onsetRange') {a4} then
      result.onset := ParseRange(jsn.vObj['onsetRange']);
    if jsn.has('onsetDateTime') or jsn.has('_onsetDateTime') then
      result.onset := parseDateTime(jsn['onsetDateTime'], jsn.vObj['_onsetDateTime']);
    if jsn.has('onsetString') or jsn.has('_onsetString') then
      result.onset := parseString(jsn['onsetString'], jsn.vObj['_onsetString']);
    if jsn.has('abatementAge') {a4} then
      result.abatement := ParseAge(jsn.vObj['abatementAge']);
    if jsn.has('abatementPeriod') {a4} then
      result.abatement := ParsePeriod(jsn.vObj['abatementPeriod']);
    if jsn.has('abatementRange') {a4} then
      result.abatement := ParseRange(jsn.vObj['abatementRange']);
    if jsn.has('abatementDateTime') or jsn.has('_abatementDateTime') then
      result.abatement := parseDateTime(jsn['abatementDateTime'], jsn.vObj['_abatementDateTime']);
    if jsn.has('abatementString') or jsn.has('_abatementString') then
      result.abatement := parseString(jsn['abatementString'], jsn.vObj['_abatementString']);
    if jsn.has('assertedDate') or jsn.has('_assertedDate') then
        result.assertedDateElement := ParseDateTime(jsn['assertedDate'], jsn.vObj['_assertedDate']);{q}
    if jsn.has('recorder') then
        result.recorder := ParseReference{Resource}(jsn.vObj['recorder']);{q3}
    if jsn.has('asserter') then
        result.asserter := ParseReference{Resource}(jsn.vObj['asserter']);{q3}
    if jsn.has('stage') then
      iterateArray(jsn.vArr['stage'], result.stageList, parseConditionStage);
    if jsn.has('evidence') then
      iterateArray(jsn.vArr['evidence'], result.evidenceList, parseConditionEvidence);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCondition(json : TJSONWriter; name : string; elem : TFhirCondition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('clinicalStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'clinicalStatus', elem.ClinicalStatusElement, CODES_TFhirConditionClinicalEnum, false);
  if not elem.noCompose and doCompose('clinicalStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'clinicalStatus', elem.ClinicalStatusElement, CODES_TFhirConditionClinicalEnum, false);
  if not elem.noCompose and (not isCanonical or (elem.verificationStatusElement <> nil) and (elem.verificationStatusElement.primitiveValue <> 'unknown')) and doCompose('verificationStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'verificationStatus', elem.VerificationStatusElement, CODES_TFhirConditionVerStatusEnum, false);
  if not elem.noCompose and (not isCanonical or (elem.verificationStatusElement <> nil) and (elem.verificationStatusElement.primitiveValue <> 'unknown')) and doCompose('verificationStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'verificationStatus', elem.VerificationStatusElement, CODES_TFhirConditionVerStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('severity') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'severity', elem.severity); {a}
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('bodySite') and (SummaryOption in [soFull, soSummary, soData]) and (elem.bodySiteList.Count > 0) then
  begin
    json.valueArray('bodySite');
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodySiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirAge) then 
    ComposeAge(json, 'onsetAge', TFhirAge(elem.onset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirPeriod) then 
    ComposePeriod(json, 'onsetPeriod', TFhirPeriod(elem.onset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirRange) then 
    ComposeRange(json, 'onsetRange', TFhirRange(elem.onset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'onsetDateTime', TFhirDateTime(elem.onset), false);
    ComposeDateTimeProps(json, 'onsetDateTime', TFhirDateTime(elem.onset), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirString) then 
  begin
    ComposeStringValue(json, 'onsetString', TFhirString(elem.onset), false);
    ComposeStringProps(json, 'onsetString', TFhirString(elem.onset), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirAge) then 
    ComposeAge(json, 'abatementAge', TFhirAge(elem.abatement)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirPeriod) then 
    ComposePeriod(json, 'abatementPeriod', TFhirPeriod(elem.abatement)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirRange) then 
    ComposeRange(json, 'abatementRange', TFhirRange(elem.abatement)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'abatementDateTime', TFhirDateTime(elem.abatement), false);
    ComposeDateTimeProps(json, 'abatementDateTime', TFhirDateTime(elem.abatement), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirString) then 
  begin
    ComposeStringValue(json, 'abatementString', TFhirString(elem.abatement), false);
    ComposeStringProps(json, 'abatementString', TFhirString(elem.abatement), false);
  end;
  if not elem.noCompose and doCompose('assertedDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'assertedDate', elem.assertedDateElement, false);
  if not elem.noCompose and doCompose('assertedDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'assertedDate', elem.assertedDateElement, false);
  if not elem.noCompose and doCompose('recorder') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'recorder', elem.recorder); {a}
  if not elem.noCompose and doCompose('asserter') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'asserter', elem.asserter); {a}
  if not elem.noCompose and doCompose('stage') and (SummaryOption in [soFull, soData]) and (elem.stageList.Count > 0) then
  begin
    json.valueArray('stage');
    for i := 0 to elem.stageList.Count - 1 do
      ComposeConditionStage(json, '', elem.stageList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('evidence') and (SummaryOption in [soFull, soData]) and (elem.evidenceList.Count > 0) then
  begin
    json.valueArray('evidence');
    for i := 0 to elem.evidenceList.Count - 1 do
      ComposeConditionEvidence(json, '', elem.evidenceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
procedure TFHIRJsonParser.ParseConsentPolicy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentPolicy(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentPolicy(jsn : TJsonObject) : TFhirConsentPolicy;
begin
  result := TFhirConsentPolicy.create;
  try
    ParseConsentPolicyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentPolicyProperties(jsn : TJsonObject; result : TFhirConsentPolicy);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('authority') or jsn.has('_authority') then
        result.authorityElement := ParseUri(jsn['authority'], jsn.vObj['_authority']);{q}
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := ParseUri(jsn['uri'], jsn.vObj['_uri']);{q}
end;

procedure TFHIRJsonComposer.ComposeConsentPolicy(json : TJSONWriter; name : string; elem : TFhirConsentPolicy; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'authority', elem.authorityElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'authority', elem.authorityElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsentVerification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentVerification(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentVerification(jsn : TJsonObject) : TFhirConsentVerification;
begin
  result := TFhirConsentVerification.create;
  try
    ParseConsentVerificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentVerificationProperties(jsn : TJsonObject; result : TFhirConsentVerification);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('verified') or jsn.has('_verified') then
        result.verifiedElement := ParseBoolean(jsn['verified'], jsn.vObj['_verified']);{q}
    if jsn.has('verifiedWith') then
        result.verifiedWith := ParseReference{Resource}(jsn.vObj['verifiedWith']);{q3}
    if jsn.has('verificationDate') or jsn.has('_verificationDate') then
        result.verificationDateElement := ParseDateTime(jsn['verificationDate'], jsn.vObj['_verificationDate']);{q}
end;

procedure TFHIRJsonComposer.ComposeConsentVerification(json : TJSONWriter; name : string; elem : TFhirConsentVerification; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'verified', elem.verifiedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'verified', elem.verifiedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'verifiedWith', elem.verifiedWith); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'verificationDate', elem.verificationDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'verificationDate', elem.verificationDateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsentProvision(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentProvision(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentProvision(jsn : TJsonObject) : TFhirConsentProvision;
begin
  result := TFhirConsentProvision.create;
  try
    ParseConsentProvisionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentProvisionProperties(jsn : TJsonObject; result : TFhirConsentProvision);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirConsentProvisionTypeEnum, SYSTEMS_TFhirConsentProvisionTypeEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('actor') then
      iterateArray(jsn.vArr['actor'], result.actorList, parseConsentProvisionActor);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseCodeableConcept);
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCoding);
    if jsn.has('purpose') then
      iterateArray(jsn.vArr['purpose'], result.purposeList, parseCoding);
    if jsn.has('class') then
      iterateArray(jsn.vArr['class'], result.class_List, parseCoding);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('dataPeriod') then
        result.dataPeriod := ParsePeriod(jsn.vObj['dataPeriod']);{q3}
    if jsn.has('data') then
      iterateArray(jsn.vArr['data'], result.dataList, parseConsentProvisionData);
    if jsn.has('provision') then
      iterateArray(jsn.vArr['provision'], result.provisionList, parseConsentProvision);
end;

procedure TFHIRJsonComposer.ComposeConsentProvision(json : TJSONWriter; name : string; elem : TFhirConsentProvision; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirConsentProvisionTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirConsentProvisionTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actorList.Count > 0) then
  begin
    json.valueArray('actor');
    for i := 0 to elem.actorList.Count - 1 do
      ComposeConsentProvisionActor(json, '', elem.actorList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.actionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(json, '', elem.securityLabelList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.purposeList.Count > 0) then
  begin
    json.valueArray('purpose');
    for i := 0 to elem.purposeList.Count - 1 do
      ComposeCoding(json, '', elem.purposeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.class_List.Count > 0) then
  begin
    json.valueArray('class');
    for i := 0 to elem.class_List.Count - 1 do
      ComposeCoding(json, '', elem.class_List[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'dataPeriod', elem.dataPeriod); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.dataList.Count > 0) then
  begin
    json.valueArray('data');
    for i := 0 to elem.dataList.Count - 1 do
      ComposeConsentProvisionData(json, '', elem.dataList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.provisionList.Count > 0) then
  begin
    json.valueArray('provision');
    for i := 0 to elem.provisionList.Count - 1 do
      ComposeConsentProvision(json, '', elem.provisionList[i]); {z - @Consent.provision}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsentProvisionActor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentProvisionActor(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentProvisionActor(jsn : TJsonObject) : TFhirConsentProvisionActor;
begin
  result := TFhirConsentProvisionActor.create;
  try
    ParseConsentProvisionActorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentProvisionActorProperties(jsn : TJsonObject; result : TFhirConsentProvisionActor);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('reference') then
        result.reference := ParseReference{Resource}(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConsentProvisionActor(json : TJSONWriter; name : string; elem : TFhirConsentProvisionActor; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsentProvisionData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentProvisionData(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentProvisionData(jsn : TJsonObject) : TFhirConsentProvisionData;
begin
  result := TFhirConsentProvisionData.create;
  try
    ParseConsentProvisionDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentProvisionDataProperties(jsn : TJsonObject; result : TFhirConsentProvisionData);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('meaning') or jsn.has('_meaning')  then
      result.meaningElement := parseEnum(jsn.path+'/meaning', jsn['meaning'], jsn.vObj['_meaning'], CODES_TFhirConsentDataMeaningEnum, SYSTEMS_TFhirConsentDataMeaningEnum);
    if jsn.has('reference') then
        result.reference := ParseReference{TFhirReference}(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConsentProvisionData(json : TJSONWriter; name : string; elem : TFhirConsentProvisionData; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'meaning', elem.MeaningElement, CODES_TFhirConsentDataMeaningEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'meaning', elem.MeaningElement, CODES_TFhirConsentDataMeaningEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsent(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsent(jsn : TJsonObject) : TFhirConsent;
begin
  result := TFhirConsent.create;
  try
    ParseConsentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentProperties(jsn : TJsonObject; result : TFhirConsent);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirConsentStateCodesEnum, SYSTEMS_TFhirConsentStateCodesEnum);
    if jsn.has('scope') or jsn.has('_scope')  then
      result.scopeElement := parseEnum(jsn.path+'/scope', jsn['scope'], jsn.vObj['_scope'], CODES_TFhirConsentScopeEnum, SYSTEMS_TFhirConsentScopeEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('dateTime') or jsn.has('_dateTime') then
        result.dateTimeElement := ParseDateTime(jsn['dateTime'], jsn.vObj['_dateTime']);{q}
    if jsn.has('consentingParty') then
      iterateArray(jsn.vArr['consentingParty'], result.consentingPartyList, parseReference{Resource});
    if jsn.has('organization') then
      iterateArray(jsn.vArr['organization'], result.organizationList, parseReference{TFhirOrganization});
    if jsn.has('sourceAttachment') {a4} then
      result.source := ParseAttachment(jsn.vObj['sourceAttachment']);
    if jsn.has('sourceIdentifier') {a4} then
      result.source := ParseIdentifier(jsn.vObj['sourceIdentifier']);
    if jsn.has('sourceReference') {a3} then
      result.source := ParseReference(jsn.vObj['sourceReference']);
    if jsn.has('policy') then
      iterateArray(jsn.vArr['policy'], result.policyList, parseConsentPolicy);
    if jsn.has('policyRule') then
        result.policyRule := ParseCodeableConcept(jsn.vObj['policyRule']);{q3}
    if jsn.has('verification') then
      iterateArray(jsn.vArr['verification'], result.verificationList, parseConsentVerification);
    if jsn.has('provision') then
        result.provision := ParseConsentProvision(jsn.vObj['provision']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConsent(json : TJSONWriter; name : string; elem : TFhirConsent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirConsentStateCodesEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirConsentStateCodesEnum, false);
  if not elem.noCompose and doCompose('scope') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'scope', elem.ScopeElement, CODES_TFhirConsentScopeEnum, false);
  if not elem.noCompose and doCompose('scope') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'scope', elem.ScopeElement, CODES_TFhirConsentScopeEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('dateTime') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'dateTime', elem.dateTimeElement, false);
  if not elem.noCompose and doCompose('dateTime') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'dateTime', elem.dateTimeElement, false);
  if not elem.noCompose and doCompose('consentingParty') and (SummaryOption in [soFull, soSummary, soData]) and (elem.consentingPartyList.Count > 0) then
  begin
    json.valueArray('consentingParty');
    for i := 0 to elem.consentingPartyList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.consentingPartyList[i]); {z - Reference(Organization|Patient|Practitioner|RelatedPerson)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soSummary, soData]) and (elem.organizationList.Count > 0) then
  begin
    json.valueArray('organization');
    for i := 0 to elem.organizationList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.organizationList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirAttachment) then 
    ComposeAttachment(json, 'sourceAttachment', TFhirAttachment(elem.source)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirIdentifier) then 
    ComposeIdentifier(json, 'sourceIdentifier', TFhirIdentifier(elem.source)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirReference) then
    ComposeReference(json, 'sourceReference', TFhirReference(elem.source));
  if not elem.noCompose and doCompose('policy') and (SummaryOption in [soFull, soData]) and (elem.policyList.Count > 0) then
  begin
    json.valueArray('policy');
    for i := 0 to elem.policyList.Count - 1 do
      ComposeConsentPolicy(json, '', elem.policyList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('policyRule') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'policyRule', elem.policyRule); {a}
  if not elem.noCompose and doCompose('verification') and (SummaryOption in [soFull, soSummary, soData]) and (elem.verificationList.Count > 0) then
  begin
    json.valueArray('verification');
    for i := 0 to elem.verificationList.Count - 1 do
      ComposeConsentVerification(json, '', elem.verificationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('provision') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeConsentProvision(json, 'provision', elem.provision); {a}
end;

{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
procedure TFHIRJsonParser.ParseContractTerm(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTerm(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractTerm(jsn : TJsonObject) : TFhirContractTerm;
begin
  result := TFhirContractTerm.create;
  try
    ParseContractTermProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermProperties(jsn : TJsonObject; result : TFhirContractTerm);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := ParseDateTime(jsn['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('applies') then
        result.applies := ParsePeriod(jsn.vObj['applies']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subType') then
        result.subType := ParseCodeableConcept(jsn.vObj['subType']);{q3}
    if jsn.has('offer') then
        result.offer := ParseContractTermOffer(jsn.vObj['offer']);{q3}
    if jsn.has('asset') then
      iterateArray(jsn.vArr['asset'], result.assetList, parseContractTermAsset);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseContractTermAgent);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseCodeableConcept);
    if jsn.has('actionReason') then
      iterateArray(jsn.vArr['actionReason'], result.actionReasonList, parseCodeableConcept);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseContractTerm);
end;

procedure TFHIRJsonComposer.ComposeContractTerm(json : TJSONWriter; name : string; elem : TFhirContractTerm; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'applies', elem.applies); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subType', elem.subType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeContractTermOffer(json, 'offer', elem.offer); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.assetList.Count > 0) then
  begin
    json.valueArray('asset');
    for i := 0 to elem.assetList.Count - 1 do
      ComposeContractTermAsset(json, '', elem.assetList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeContractTermAgent(json, '', elem.agentList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.actionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionReasonList.Count > 0) then
  begin
    json.valueArray('actionReason');
    for i := 0 to elem.actionReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.actionReasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeContractTerm(json, '', elem.groupList[i]); {z - @Contract.term}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractTermOffer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermOffer(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractTermOffer(jsn : TJsonObject) : TFhirContractTermOffer;
begin
  result := TFhirContractTermOffer.create;
  try
    ParseContractTermOfferProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermOfferProperties(jsn : TJsonObject; result : TFhirContractTermOffer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('topic') then
        result.topic := ParseReference{TFhirReference}(jsn.vObj['topic']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('decision') then
        result.decision := ParseCodeableConcept(jsn.vObj['decision']);{q3}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
    if jsn.has('linkId') or jsn.has('_linkId') then
        result.linkIdElement := ParseString(jsn['linkId'], jsn.vObj['_linkId']);{q}
end;

procedure TFHIRJsonComposer.ComposeContractTermOffer(json : TJSONWriter; name : string; elem : TFhirContractTermOffer; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'topic', elem.topic); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'decision', elem.decision); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'linkId', elem.linkIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'linkId', elem.linkIdElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractTermAsset(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermAsset(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractTermAsset(jsn : TJsonObject) : TFhirContractTermAsset;
begin
  result := TFhirContractTermAsset.create;
  try
    ParseContractTermAssetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermAssetProperties(jsn : TJsonObject; result : TFhirContractTermAsset);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('class') then
        result.class_ := ParseCoding(jsn.vObj['class']);{q3}
    if jsn.has('code') then
        result.code := ParseCoding(jsn.vObj['code']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('dataPeriod') then
        result.dataPeriod := ParsePeriod(jsn.vObj['dataPeriod']);{q3}
    if jsn.has('data') then
      iterateArray(jsn.vArr['data'], result.dataList, parseContractTermAssetData);
    if jsn.has('valuedItem') then
      iterateArray(jsn.vArr['valuedItem'], result.valuedItemList, parseContractTermAssetValuedItem);
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeContractTermAsset(json : TJSONWriter; name : string; elem : TFhirContractTermAsset; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'class', elem.class_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'dataPeriod', elem.dataPeriod); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.dataList.Count > 0) then
  begin
    json.valueArray('data');
    for i := 0 to elem.dataList.Count - 1 do
      ComposeContractTermAssetData(json, '', elem.dataList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.valuedItemList.Count > 0) then
  begin
    json.valueArray('valuedItem');
    for i := 0 to elem.valuedItemList.Count - 1 do
      ComposeContractTermAssetValuedItem(json, '', elem.valuedItemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(json, '', elem.securityLabelList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractTermAssetData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermAssetData(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractTermAssetData(jsn : TJsonObject) : TFhirContractTermAssetData;
begin
  result := TFhirContractTermAssetData.create;
  try
    ParseContractTermAssetDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermAssetDataProperties(jsn : TJsonObject; result : TFhirContractTermAssetData);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('meaning') or jsn.has('_meaning')  then
      result.meaningElement := parseEnum(jsn.path+'/meaning', jsn['meaning'], jsn.vObj['_meaning'], CODES_TFhirContractDataMeaningEnum, SYSTEMS_TFhirContractDataMeaningEnum);
    if jsn.has('reference') then
        result.reference := ParseReference{TFhirReference}(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeContractTermAssetData(json : TJSONWriter; name : string; elem : TFhirContractTermAssetData; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'meaning', elem.MeaningElement, CODES_TFhirContractDataMeaningEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'meaning', elem.MeaningElement, CODES_TFhirContractDataMeaningEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractTermAssetValuedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermAssetValuedItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractTermAssetValuedItem(jsn : TJsonObject) : TFhirContractTermAssetValuedItem;
begin
  result := TFhirContractTermAssetValuedItem.create;
  try
    ParseContractTermAssetValuedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermAssetValuedItemProperties(jsn : TJsonObject; result : TFhirContractTermAssetValuedItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('entityCodeableConcept') {a4} then
      result.entity := ParseCodeableConcept(jsn.vObj['entityCodeableConcept']);
    if jsn.has('entityReference') {a3} then
      result.entity := ParseReference(jsn.vObj['entityReference']);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('effectiveTime') or jsn.has('_effectiveTime') then
        result.effectiveTimeElement := ParseDateTime(jsn['effectiveTime'], jsn.vObj['_effectiveTime']);{q}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := ParseDecimal(jsn['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('points') or jsn.has('_points') then
        result.pointsElement := ParseDecimal(jsn['points'], jsn.vObj['_points']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
end;

procedure TFHIRJsonComposer.ComposeContractTermAssetValuedItem(json : TJSONWriter; name : string; elem : TFhirContractTermAssetValuedItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.entity is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'entityCodeableConcept', TFhirCodeableConcept(elem.entity)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.entity is TFhirReference) then
    ComposeReference(json, 'entityReference', TFhirReference(elem.entity));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'effectiveTime', elem.effectiveTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'effectiveTime', elem.effectiveTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'points', elem.pointsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'points', elem.pointsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractTermAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermAgent(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractTermAgent(jsn : TJsonObject) : TFhirContractTermAgent;
begin
  result := TFhirContractTermAgent.create;
  try
    ParseContractTermAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermAgentProperties(jsn : TJsonObject; result : TFhirContractTermAgent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], result.roleList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeContractTermAgent(json : TJSONWriter; name : string; elem : TFhirContractTermAgent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.roleList.Count > 0) then
  begin
    json.valueArray('role');
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.roleList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractSigner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractSigner(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractSigner(jsn : TJsonObject) : TFhirContractSigner;
begin
  result := TFhirContractSigner.create;
  try
    ParseContractSignerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractSignerProperties(jsn : TJsonObject; result : TFhirContractSigner);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
    if jsn.has('signature') then
      iterateArray(jsn.vArr['signature'], result.signatureList, parseSignature);
end;

procedure TFHIRJsonComposer.ComposeContractSigner(json : TJSONWriter; name : string; elem : TFhirContractSigner; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'party', elem.party); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.signatureList.Count > 0) then
  begin
    json.valueArray('signature');
    for i := 0 to elem.signatureList.Count - 1 do
      ComposeSignature(json, '', elem.signatureList[i]); {z - Signature}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractFriendly(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractFriendly(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractFriendly(jsn : TJsonObject) : TFhirContractFriendly;
begin
  result := TFhirContractFriendly.create;
  try
    ParseContractFriendlyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractFriendlyProperties(jsn : TJsonObject; result : TFhirContractFriendly);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
end;

procedure TFHIRJsonComposer.ComposeContractFriendly(json : TJSONWriter; name : string; elem : TFhirContractFriendly; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractLegal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractLegal(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractLegal(jsn : TJsonObject) : TFhirContractLegal;
begin
  result := TFhirContractLegal.create;
  try
    ParseContractLegalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractLegalProperties(jsn : TJsonObject; result : TFhirContractLegal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
end;

procedure TFHIRJsonComposer.ComposeContractLegal(json : TJSONWriter; name : string; elem : TFhirContractLegal; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractRule(jsn : TJsonObject) : TFhirContractRule;
begin
  result := TFhirContractRule.create;
  try
    ParseContractRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractRuleProperties(jsn : TJsonObject; result : TFhirContractRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
end;

procedure TFHIRJsonComposer.ComposeContractRule(json : TJSONWriter; name : string; elem : TFhirContractRule; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContract(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContract(jsn)); {2}
end;

function TFHIRJsonParser.ParseContract(jsn : TJsonObject) : TFhirContract;
begin
  result := TFhirContract.create;
  try
    ParseContractProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractProperties(jsn : TJsonObject; result : TFhirContract);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirContractStatusEnum, SYSTEMS_TFhirContractStatusEnum);
    if jsn.has('contentDerivative') then
        result.contentDerivative := ParseCodeableConcept(jsn.vObj['contentDerivative']);{q3}
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := ParseDateTime(jsn['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('applies') then
        result.applies := ParsePeriod(jsn.vObj['applies']);{q3}
    if jsn.has('subject') then
      iterateArray(jsn.vArr['subject'], result.subjectList, parseReference{TFhirReference});
    if jsn.has('authority') then
      iterateArray(jsn.vArr['authority'], result.authorityList, parseReference{TFhirOrganization});
    if jsn.has('domain') then
      iterateArray(jsn.vArr['domain'], result.domainList, parseReference{TFhirLocation});
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subType') then
      iterateArray(jsn.vArr['subType'], result.subTypeList, parseCodeableConcept);
    if jsn.has('term') then
      iterateArray(jsn.vArr['term'], result.termList, parseContractTerm);
    if jsn.has('signer') then
      iterateArray(jsn.vArr['signer'], result.signerList, parseContractSigner);
    if jsn.has('friendly') then
      iterateArray(jsn.vArr['friendly'], result.friendlyList, parseContractFriendly);
    if jsn.has('legal') then
      iterateArray(jsn.vArr['legal'], result.legalList, parseContractLegal);
    if jsn.has('rule') then
        result.rule := ParseContractRule(jsn.vObj['rule']);{q3}
    if jsn.has('legallyBindingAttachment') {a4} then
      result.legallyBinding := ParseAttachment(jsn.vObj['legallyBindingAttachment']);
    if jsn.has('legallyBindingReference') {a3} then
      result.legallyBinding := ParseReference(jsn.vObj['legallyBindingReference']);
end;

procedure TFHIRJsonComposer.ComposeContract(json : TJSONWriter; name : string; elem : TFhirContract; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirContractStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirContractStatusEnum, false);
  if not elem.noCompose and doCompose('contentDerivative') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'contentDerivative', elem.contentDerivative); {a}
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('applies') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'applies', elem.applies); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) and (elem.subjectList.Count > 0) then
  begin
    json.valueArray('subject');
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.subjectList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('authority') and (SummaryOption in [soFull, soData]) and (elem.authorityList.Count > 0) then
  begin
    json.valueArray('authority');
    for i := 0 to elem.authorityList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.authorityList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('domain') and (SummaryOption in [soFull, soData]) and (elem.domainList.Count > 0) then
  begin
    json.valueArray('domain');
    for i := 0 to elem.domainList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.domainList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('subType') and (SummaryOption in [soFull, soSummary, soData]) and (elem.subTypeList.Count > 0) then
  begin
    json.valueArray('subType');
    for i := 0 to elem.subTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('term') and (SummaryOption in [soFull, soData]) and (elem.termList.Count > 0) then
  begin
    json.valueArray('term');
    for i := 0 to elem.termList.Count - 1 do
      ComposeContractTerm(json, '', elem.termList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('signer') and (SummaryOption in [soFull, soData]) and (elem.signerList.Count > 0) then
  begin
    json.valueArray('signer');
    for i := 0 to elem.signerList.Count - 1 do
      ComposeContractSigner(json, '', elem.signerList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('friendly') and (SummaryOption in [soFull, soData]) and (elem.friendlyList.Count > 0) then
  begin
    json.valueArray('friendly');
    for i := 0 to elem.friendlyList.Count - 1 do
      ComposeContractFriendly(json, '', elem.friendlyList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('legal') and (SummaryOption in [soFull, soData]) and (elem.legalList.Count > 0) then
  begin
    json.valueArray('legal');
    for i := 0 to elem.legalList.Count - 1 do
      ComposeContractLegal(json, '', elem.legalList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('rule') and (SummaryOption in [soFull, soData]) then
    ComposeContractRule(json, 'rule', elem.rule); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.legallyBinding is TFhirAttachment) then 
    ComposeAttachment(json, 'legallyBindingAttachment', TFhirAttachment(elem.legallyBinding)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.legallyBinding is TFhirReference) then
    ComposeReference(json, 'legallyBindingReference', TFhirReference(elem.legallyBinding));
end;

{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
procedure TFHIRJsonParser.ParseCoverageClass(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageClass(jsn)); {2}
end;

function TFHIRJsonParser.ParseCoverageClass(jsn : TJsonObject) : TFhirCoverageClass;
begin
  result := TFhirCoverageClass.create;
  try
    ParseCoverageClassProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageClassProperties(jsn : TJsonObject; result : TFhirCoverageClass);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
end;

procedure TFHIRJsonComposer.ComposeCoverageClass(json : TJSONWriter; name : string; elem : TFhirCoverageClass; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCoverageGrouping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageGrouping(jsn)); {2}
end;

function TFHIRJsonParser.ParseCoverageGrouping(jsn : TJsonObject) : TFhirCoverageGrouping;
begin
  result := TFhirCoverageGrouping.create;
  try
    ParseCoverageGroupingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageGroupingProperties(jsn : TJsonObject; result : TFhirCoverageGrouping);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('group') or jsn.has('_group') then
        result.groupElement := ParseString(jsn['group'], jsn.vObj['_group']);{q}
    if jsn.has('groupDisplay') or jsn.has('_groupDisplay') then
        result.groupDisplayElement := ParseString(jsn['groupDisplay'], jsn.vObj['_groupDisplay']);{q}
    if jsn.has('subGroup') or jsn.has('_subGroup') then
        result.subGroupElement := ParseString(jsn['subGroup'], jsn.vObj['_subGroup']);{q}
    if jsn.has('subGroupDisplay') or jsn.has('_subGroupDisplay') then
        result.subGroupDisplayElement := ParseString(jsn['subGroupDisplay'], jsn.vObj['_subGroupDisplay']);{q}
    if jsn.has('plan') or jsn.has('_plan') then
        result.planElement := ParseString(jsn['plan'], jsn.vObj['_plan']);{q}
    if jsn.has('planDisplay') or jsn.has('_planDisplay') then
        result.planDisplayElement := ParseString(jsn['planDisplay'], jsn.vObj['_planDisplay']);{q}
    if jsn.has('subPlan') or jsn.has('_subPlan') then
        result.subPlanElement := ParseString(jsn['subPlan'], jsn.vObj['_subPlan']);{q}
    if jsn.has('subPlanDisplay') or jsn.has('_subPlanDisplay') then
        result.subPlanDisplayElement := ParseString(jsn['subPlanDisplay'], jsn.vObj['_subPlanDisplay']);{q}
    if jsn.has('class') or jsn.has('_class') then
        result.class_Element := ParseString(jsn['class'], jsn.vObj['_class']);{q}
    if jsn.has('classDisplay') or jsn.has('_classDisplay') then
        result.classDisplayElement := ParseString(jsn['classDisplay'], jsn.vObj['_classDisplay']);{q}
    if jsn.has('subClass') or jsn.has('_subClass') then
        result.subClassElement := ParseString(jsn['subClass'], jsn.vObj['_subClass']);{q}
    if jsn.has('subClassDisplay') or jsn.has('_subClassDisplay') then
        result.subClassDisplayElement := ParseString(jsn['subClassDisplay'], jsn.vObj['_subClassDisplay']);{q}
end;

procedure TFHIRJsonComposer.ComposeCoverageGrouping(json : TJSONWriter; name : string; elem : TFhirCoverageGrouping; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'group', elem.groupElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'group', elem.groupElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'groupDisplay', elem.groupDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'groupDisplay', elem.groupDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subGroup', elem.subGroupElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subGroup', elem.subGroupElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subGroupDisplay', elem.subGroupDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subGroupDisplay', elem.subGroupDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'plan', elem.planElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'plan', elem.planElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'planDisplay', elem.planDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'planDisplay', elem.planDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subPlan', elem.subPlanElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subPlan', elem.subPlanElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subPlanDisplay', elem.subPlanDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subPlanDisplay', elem.subPlanDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'class', elem.class_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'class', elem.class_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'classDisplay', elem.classDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'classDisplay', elem.classDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subClass', elem.subClassElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subClass', elem.subClassElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subClassDisplay', elem.subClassDisplayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subClassDisplay', elem.subClassDisplayElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCoverageCopay(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageCopay(jsn)); {2}
end;

function TFHIRJsonParser.ParseCoverageCopay(jsn : TJsonObject) : TFhirCoverageCopay;
begin
  result := TFhirCoverageCopay.create;
  try
    ParseCoverageCopayProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageCopayProperties(jsn : TJsonObject; result : TFhirCoverageCopay);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('value') then
        result.value := ParseQuantity(jsn.vObj['value']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCoverageCopay(json : TJSONWriter; name : string; elem : TFhirCoverageCopay; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'value', elem.value); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverage(jsn)); {2}
end;

function TFHIRJsonParser.ParseCoverage(jsn : TJsonObject) : TFhirCoverage;
begin
  result := TFhirCoverage.create;
  try
    ParseCoverageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageProperties(jsn : TJsonObject; result : TFhirCoverage);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('policyHolder') then
        result.policyHolder := ParseReference{Resource}(jsn.vObj['policyHolder']);{q3}
    if jsn.has('subscriber') then
        result.subscriber := ParseReference{Resource}(jsn.vObj['subscriber']);{q3}
    if jsn.has('subscriberId') or jsn.has('_subscriberId') then
        result.subscriberIdElement := ParseString(jsn['subscriberId'], jsn.vObj['_subscriberId']);{q}
    if jsn.has('beneficiary') then
        result.beneficiary := ParseReference{TFhirPatient}(jsn.vObj['beneficiary']);{q3}
    if jsn.has('dependent') or jsn.has('_dependent') then
        result.dependentElement := ParseString(jsn['dependent'], jsn.vObj['_dependent']);{q}
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('payor') then
      iterateArray(jsn.vArr['payor'], result.payorList, parseReference{Resource});
    if jsn.has('class') then
      iterateArray(jsn.vArr['class'], result.class_List, parseCoverageClass);
    if jsn.has('grouping') then
        result.grouping := ParseCoverageGrouping(jsn.vObj['grouping']);{q3}
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParseString(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('order') or jsn.has('_order') then
        result.orderElement := ParsePositiveInt(jsn['order'], jsn.vObj['_order']);{q}
    if jsn.has('network') or jsn.has('_network') then
        result.networkElement := ParseString(jsn['network'], jsn.vObj['_network']);{q}
    if jsn.has('copay') then
      iterateArray(jsn.vArr['copay'], result.copayList, parseCoverageCopay);
    if jsn.has('contract') then
      iterateArray(jsn.vArr['contract'], result.contractList, parseReference{TFhirContract});
end;

procedure TFHIRJsonComposer.ComposeCoverage(json : TJSONWriter; name : string; elem : TFhirCoverage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('policyHolder') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'policyHolder', elem.policyHolder); {a}
  if not elem.noCompose and doCompose('subscriber') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subscriber', elem.subscriber); {a}
  if not elem.noCompose and doCompose('subscriberId') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subscriberId', elem.subscriberIdElement, false);
  if not elem.noCompose and doCompose('subscriberId') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subscriberId', elem.subscriberIdElement, false);
  if not elem.noCompose and doCompose('beneficiary') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'beneficiary', elem.beneficiary); {a}
  if not elem.noCompose and doCompose('dependent') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'dependent', elem.dependentElement, false);
  if not elem.noCompose and doCompose('dependent') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'dependent', elem.dependentElement, false);
  if not elem.noCompose and doCompose('relationship') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('payor') and (SummaryOption in [soFull, soSummary, soData]) and (elem.payorList.Count > 0) then
  begin
    json.valueArray('payor');
    for i := 0 to elem.payorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.payorList[i]); {z - Reference(Organization|Patient|RelatedPerson)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('class_') and (SummaryOption in [soFull, soData]) and (elem.class_List.Count > 0) then
  begin
    json.valueArray('class');
    for i := 0 to elem.class_List.Count - 1 do
      ComposeCoverageClass(json, '', elem.class_List[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('grouping') and (SummaryOption in [soFull, soData]) then
    ComposeCoverageGrouping(json, 'grouping', elem.grouping); {a}
  if not elem.noCompose and doCompose('sequence') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and doCompose('sequence') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and doCompose('order') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'order', elem.orderElement, false);
  if not elem.noCompose and doCompose('order') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'order', elem.orderElement, false);
  if not elem.noCompose and doCompose('network') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'network', elem.networkElement, false);
  if not elem.noCompose and doCompose('network') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'network', elem.networkElement, false);
  if not elem.noCompose and doCompose('copay') and (SummaryOption in [soFull, soData]) and (elem.copayList.Count > 0) then
  begin
    json.valueArray('copay');
    for i := 0 to elem.copayList.Count - 1 do
      ComposeCoverageCopay(json, '', elem.copayList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contract') and (SummaryOption in [soFull, soData]) and (elem.contractList.Count > 0) then
  begin
    json.valueArray('contract');
    for i := 0 to elem.contractList.Count - 1 do
      ComposeReference{TFhirContract}(json, '', elem.contractList[i]); {z - Reference(Contract)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DETECTEDISSUE}
procedure TFHIRJsonParser.ParseDetectedIssueMitigation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDetectedIssueMitigation(jsn)); {2}
end;

function TFHIRJsonParser.ParseDetectedIssueMitigation(jsn : TJsonObject) : TFhirDetectedIssueMitigation;
begin
  result := TFhirDetectedIssueMitigation.create;
  try
    ParseDetectedIssueMitigationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDetectedIssueMitigationProperties(jsn : TJsonObject; result : TFhirDetectedIssueMitigation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
        result.action := ParseCodeableConcept(jsn.vObj['action']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('author') then
        result.author := ParseReference{TFhirPractitioner}(jsn.vObj['author']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDetectedIssueMitigation(json : TJSONWriter; name : string; elem : TFhirDetectedIssueMitigation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'action', elem.action); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'author', elem.author); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDetectedIssue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDetectedIssue(jsn)); {2}
end;

function TFHIRJsonParser.ParseDetectedIssue(jsn : TJsonObject) : TFhirDetectedIssue;
begin
  result := TFhirDetectedIssue.create;
  try
    ParseDetectedIssueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDetectedIssueProperties(jsn : TJsonObject; result : TFhirDetectedIssue);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('severity') or jsn.has('_severity')  then
      result.severityElement := parseEnum(jsn.path+'/severity', jsn['severity'], jsn.vObj['_severity'], CODES_TFhirDetectedissueSeverityEnum, SYSTEMS_TFhirDetectedissueSeverityEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('implicated') then
      iterateArray(jsn.vArr['implicated'], result.implicatedList, parseReference{TFhirReference});
    if jsn.has('detail') or jsn.has('_detail') then
        result.detailElement := ParseString(jsn['detail'], jsn.vObj['_detail']);{q}
    if jsn.has('reference') or jsn.has('_reference') then
        result.referenceElement := ParseUri(jsn['reference'], jsn.vObj['_reference']);{q}
    if jsn.has('mitigation') then
      iterateArray(jsn.vArr['mitigation'], result.mitigationList, parseDetectedIssueMitigation);
end;

procedure TFHIRJsonComposer.ComposeDetectedIssue(json : TJSONWriter; name : string; elem : TFhirDetectedIssue; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and doCompose('severity') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'severity', elem.SeverityElement, CODES_TFhirDetectedissueSeverityEnum, false);
  if not elem.noCompose and doCompose('severity') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'severity', elem.SeverityElement, CODES_TFhirDetectedissueSeverityEnum, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if not elem.noCompose and doCompose('implicated') and (SummaryOption in [soFull, soSummary, soData]) and (elem.implicatedList.Count > 0) then
  begin
    json.valueArray('implicated');
    for i := 0 to elem.implicatedList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.implicatedList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('detail') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'detail', elem.detailElement, false);
  if not elem.noCompose and doCompose('detail') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'detail', elem.detailElement, false);
  if not elem.noCompose and doCompose('reference') and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'reference', elem.referenceElement, false);
  if not elem.noCompose and doCompose('reference') and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'reference', elem.referenceElement, false);
  if not elem.noCompose and doCompose('mitigation') and (SummaryOption in [soFull, soData]) and (elem.mitigationList.Count > 0) then
  begin
    json.valueArray('mitigation');
    for i := 0 to elem.mitigationList.Count - 1 do
      ComposeDetectedIssueMitigation(json, '', elem.mitigationList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
procedure TFHIRJsonParser.ParseDeviceUdi(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceUdi(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceUdi(jsn : TJsonObject) : TFhirDeviceUdi;
begin
  result := TFhirDeviceUdi.create;
  try
    ParseDeviceUdiProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceUdiProperties(jsn : TJsonObject; result : TFhirDeviceUdi);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('deviceIdentifier') or jsn.has('_deviceIdentifier') then
        result.deviceIdentifierElement := ParseString(jsn['deviceIdentifier'], jsn.vObj['_deviceIdentifier']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('jurisdiction') or jsn.has('_jurisdiction') then
        result.jurisdictionElement := ParseUri(jsn['jurisdiction'], jsn.vObj['_jurisdiction']);{q}
    if jsn.has('carrierHRF') or jsn.has('_carrierHRF') then
        result.carrierHRFElement := ParseString(jsn['carrierHRF'], jsn.vObj['_carrierHRF']);{q}
    if jsn.has('carrierAIDC') or jsn.has('_carrierAIDC') then
        result.carrierAIDCElement := ParseBase64Binary(jsn['carrierAIDC'], jsn.vObj['_carrierAIDC']);{q}
    if jsn.has('issuer') or jsn.has('_issuer') then
        result.issuerElement := ParseUri(jsn['issuer'], jsn.vObj['_issuer']);{q}
    if jsn.has('entryType') or jsn.has('_entryType')  then
      result.entryTypeElement := parseEnum(jsn.path+'/entryType', jsn['entryType'], jsn.vObj['_entryType'], CODES_TFhirUdiEntryTypeEnum, SYSTEMS_TFhirUdiEntryTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeDeviceUdi(json : TJSONWriter; name : string; elem : TFhirDeviceUdi; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'deviceIdentifier', elem.deviceIdentifierElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'deviceIdentifier', elem.deviceIdentifierElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'jurisdiction', elem.jurisdictionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'jurisdiction', elem.jurisdictionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'carrierHRF', elem.carrierHRFElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'carrierHRF', elem.carrierHRFElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryValue(json, 'carrierAIDC', elem.carrierAIDCElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryProps(json, 'carrierAIDC', elem.carrierAIDCElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'issuer', elem.issuerElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'issuer', elem.issuerElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'entryType', elem.EntryTypeElement, CODES_TFhirUdiEntryTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'entryType', elem.EntryTypeElement, CODES_TFhirUdiEntryTypeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDevice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDevice(jsn)); {2}
end;

function TFHIRJsonParser.ParseDevice(jsn : TJsonObject) : TFhirDevice;
begin
  result := TFhirDevice.create;
  try
    ParseDeviceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceProperties(jsn : TJsonObject; result : TFhirDevice);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('udi') then
        result.udi := ParseDeviceUdi(jsn.vObj['udi']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirDeviceStatusEnum, SYSTEMS_TFhirDeviceStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        result.lotNumberElement := ParseString(jsn['lotNumber'], jsn.vObj['_lotNumber']);{q}
    if jsn.has('manufacturer') or jsn.has('_manufacturer') then
        result.manufacturerElement := ParseString(jsn['manufacturer'], jsn.vObj['_manufacturer']);{q}
    if jsn.has('manufactureDate') or jsn.has('_manufactureDate') then
        result.manufactureDateElement := ParseDateTime(jsn['manufactureDate'], jsn.vObj['_manufactureDate']);{q}
    if jsn.has('expirationDate') or jsn.has('_expirationDate') then
        result.expirationDateElement := ParseDateTime(jsn['expirationDate'], jsn.vObj['_expirationDate']);{q}
    if jsn.has('model') or jsn.has('_model') then
        result.modelElement := ParseString(jsn['model'], jsn.vObj['_model']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('owner') then
        result.owner := ParseReference{TFhirOrganization}(jsn.vObj['owner']);{q3}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactPoint);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('safety') then
      iterateArray(jsn.vArr['safety'], result.safetyList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeDevice(json : TJSONWriter; name : string; elem : TFhirDevice; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('udi') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDeviceUdi(json, 'udi', elem.udi); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDeviceStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDeviceStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('lotNumber') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lotNumber', elem.lotNumberElement, false);
  if not elem.noCompose and doCompose('lotNumber') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lotNumber', elem.lotNumberElement, false);
  if not elem.noCompose and doCompose('manufacturer') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'manufacturer', elem.manufacturerElement, false);
  if not elem.noCompose and doCompose('manufacturer') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'manufacturer', elem.manufacturerElement, false);
  if not elem.noCompose and doCompose('manufactureDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'manufactureDate', elem.manufactureDateElement, false);
  if not elem.noCompose and doCompose('manufactureDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'manufactureDate', elem.manufactureDateElement, false);
  if not elem.noCompose and doCompose('expirationDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'expirationDate', elem.expirationDateElement, false);
  if not elem.noCompose and doCompose('expirationDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'expirationDate', elem.expirationDateElement, false);
  if not elem.noCompose and doCompose('model') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'model', elem.modelElement, false);
  if not elem.noCompose and doCompose('model') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'model', elem.modelElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('owner') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'owner', elem.owner); {a}
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(json, '', elem.contactList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('safety') and (SummaryOption in [soFull, soSummary, soData]) and (elem.safetyList.Count > 0) then
  begin
    json.valueArray('safety');
    for i := 0 to elem.safetyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.safetyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
procedure TFHIRJsonParser.ParseDeviceComponentProductionSpecification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceComponentProductionSpecification(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceComponentProductionSpecification(jsn : TJsonObject) : TFhirDeviceComponentProductionSpecification;
begin
  result := TFhirDeviceComponentProductionSpecification.create;
  try
    ParseDeviceComponentProductionSpecificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceComponentProductionSpecificationProperties(jsn : TJsonObject; result : TFhirDeviceComponentProductionSpecification);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('specType') then
        result.specType := ParseCodeableConcept(jsn.vObj['specType']);{q3}
    if jsn.has('componentId') then
        result.componentId := ParseIdentifier(jsn.vObj['componentId']);{q3}
    if jsn.has('productionSpec') or jsn.has('_productionSpec') then
        result.productionSpecElement := ParseString(jsn['productionSpec'], jsn.vObj['_productionSpec']);{q}
end;

procedure TFHIRJsonComposer.ComposeDeviceComponentProductionSpecification(json : TJSONWriter; name : string; elem : TFhirDeviceComponentProductionSpecification; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'specType', elem.specType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'componentId', elem.componentId); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'productionSpec', elem.productionSpecElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'productionSpec', elem.productionSpecElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDeviceComponentProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceComponentProperty(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceComponentProperty(jsn : TJsonObject) : TFhirDeviceComponentProperty;
begin
  result := TFhirDeviceComponentProperty.create;
  try
    ParseDeviceComponentPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceComponentPropertyProperties(jsn : TJsonObject; result : TFhirDeviceComponentProperty);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('valueQuantity') then
      iterateArray(jsn.vArr['valueQuantity'], result.valueQuantityList, parseQuantity);
    if jsn.has('valueCode') then
      iterateArray(jsn.vArr['valueCode'], result.valueCodeList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeDeviceComponentProperty(json : TJSONWriter; name : string; elem : TFhirDeviceComponentProperty; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.valueQuantityList.Count > 0) then
  begin
    json.valueArray('valueQuantity');
    for i := 0 to elem.valueQuantityList.Count - 1 do
      ComposeQuantity(json, '', elem.valueQuantityList[i]); {z - Quantity}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.valueCodeList.Count > 0) then
  begin
    json.valueArray('valueCode');
    for i := 0 to elem.valueCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.valueCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDeviceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceComponent(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceComponent(jsn : TJsonObject) : TFhirDeviceComponent;
begin
  result := TFhirDeviceComponent.create;
  try
    ParseDeviceComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceComponentProperties(jsn : TJsonObject; result : TFhirDeviceComponent);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('lastSystemChange') or jsn.has('_lastSystemChange') then
        result.lastSystemChangeElement := ParseInstant(jsn['lastSystemChange'], jsn.vObj['_lastSystemChange']);{q}
    if jsn.has('source') then
        result.source := ParseReference{TFhirDevice}(jsn.vObj['source']);{q3}
    if jsn.has('parent') then
        result.parent := ParseReference{TFhirDeviceComponent}(jsn.vObj['parent']);{q3}
    if jsn.has('operationalStatus') then
      iterateArray(jsn.vArr['operationalStatus'], result.operationalStatusList, parseCodeableConcept);
    if jsn.has('parameterGroup') then
        result.parameterGroup := ParseCodeableConcept(jsn.vObj['parameterGroup']);{q3}
    if jsn.has('measurementPrinciple') or jsn.has('_measurementPrinciple')  then
      result.measurementPrincipleElement := parseEnum(jsn.path+'/measurementPrinciple', jsn['measurementPrinciple'], jsn.vObj['_measurementPrinciple'], CODES_TFhirMeasurementPrincipleEnum, SYSTEMS_TFhirMeasurementPrincipleEnum);
    if jsn.has('productionSpecification') then
      iterateArray(jsn.vArr['productionSpecification'], result.productionSpecificationList, parseDeviceComponentProductionSpecification);
    if jsn.has('languageCode') then
        result.languageCode := ParseCodeableConcept(jsn.vObj['languageCode']);{q3}
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], result.property_List, parseDeviceComponentProperty);
end;

procedure TFHIRJsonComposer.ComposeDeviceComponent(json : TJSONWriter; name : string; elem : TFhirDeviceComponent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('lastSystemChange') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'lastSystemChange', elem.lastSystemChangeElement, false);
  if not elem.noCompose and doCompose('lastSystemChange') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'lastSystemChange', elem.lastSystemChangeElement, false);
  if not elem.noCompose and doCompose('source') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDevice}(json, 'source', elem.source); {a}
  if not elem.noCompose and doCompose('parent') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDeviceComponent}(json, 'parent', elem.parent); {a}
  if not elem.noCompose and doCompose('operationalStatus') and (SummaryOption in [soFull, soSummary, soData]) and (elem.operationalStatusList.Count > 0) then
  begin
    json.valueArray('operationalStatus');
    for i := 0 to elem.operationalStatusList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.operationalStatusList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('parameterGroup') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'parameterGroup', elem.parameterGroup); {a}
  if not elem.noCompose and doCompose('measurementPrinciple') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'measurementPrinciple', elem.MeasurementPrincipleElement, CODES_TFhirMeasurementPrincipleEnum, false);
  if not elem.noCompose and doCompose('measurementPrinciple') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'measurementPrinciple', elem.MeasurementPrincipleElement, CODES_TFhirMeasurementPrincipleEnum, false);
  if not elem.noCompose and doCompose('productionSpecification') and (SummaryOption in [soFull, soSummary, soData]) and (elem.productionSpecificationList.Count > 0) then
  begin
    json.valueArray('productionSpecification');
    for i := 0 to elem.productionSpecificationList.Count - 1 do
      ComposeDeviceComponentProductionSpecification(json, '', elem.productionSpecificationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('languageCode') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'languageCode', elem.languageCode); {a}
  if not elem.noCompose and doCompose('property_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.property_List.Count > 0) then
  begin
    json.valueArray('property');
    for i := 0 to elem.property_List.Count - 1 do
      ComposeDeviceComponentProperty(json, '', elem.property_List[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
procedure TFHIRJsonParser.ParseDeviceMetricCalibration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceMetricCalibration(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceMetricCalibration(jsn : TJsonObject) : TFhirDeviceMetricCalibration;
begin
  result := TFhirDeviceMetricCalibration.create;
  try
    ParseDeviceMetricCalibrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceMetricCalibrationProperties(jsn : TJsonObject; result : TFhirDeviceMetricCalibration);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirMetricCalibrationTypeEnum, SYSTEMS_TFhirMetricCalibrationTypeEnum);
    if jsn.has('state') or jsn.has('_state')  then
      result.stateElement := parseEnum(jsn.path+'/state', jsn['state'], jsn.vObj['_state'], CODES_TFhirMetricCalibrationStateEnum, SYSTEMS_TFhirMetricCalibrationStateEnum);
    if jsn.has('time') or jsn.has('_time') then
        result.timeElement := ParseInstant(jsn['time'], jsn.vObj['_time']);{q}
end;

procedure TFHIRJsonComposer.ComposeDeviceMetricCalibration(json : TJSONWriter; name : string; elem : TFhirDeviceMetricCalibration; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirMetricCalibrationTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirMetricCalibrationTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'state', elem.StateElement, CODES_TFhirMetricCalibrationStateEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'state', elem.StateElement, CODES_TFhirMetricCalibrationStateEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'time', elem.timeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'time', elem.timeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDeviceMetric(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceMetric(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceMetric(jsn : TJsonObject) : TFhirDeviceMetric;
begin
  result := TFhirDeviceMetric.create;
  try
    ParseDeviceMetricProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceMetricProperties(jsn : TJsonObject; result : TFhirDeviceMetric);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('unit') then
        result.unit_ := ParseCodeableConcept(jsn.vObj['unit']);{q3}
    if jsn.has('source') then
        result.source := ParseReference{TFhirDevice}(jsn.vObj['source']);{q3}
    if jsn.has('parent') then
        result.parent := ParseReference{TFhirDeviceComponent}(jsn.vObj['parent']);{q3}
    if jsn.has('operationalStatus') or jsn.has('_operationalStatus')  then
      result.operationalStatusElement := parseEnum(jsn.path+'/operationalStatus', jsn['operationalStatus'], jsn.vObj['_operationalStatus'], CODES_TFhirMetricOperationalStatusEnum, SYSTEMS_TFhirMetricOperationalStatusEnum);
    if jsn.has('color') or jsn.has('_color')  then
      result.colorElement := parseEnum(jsn.path+'/color', jsn['color'], jsn.vObj['_color'], CODES_TFhirMetricColorEnum, SYSTEMS_TFhirMetricColorEnum);
    if jsn.has('category') or jsn.has('_category')  then
      result.categoryElement := parseEnum(jsn.path+'/category', jsn['category'], jsn.vObj['_category'], CODES_TFhirMetricCategoryEnum, SYSTEMS_TFhirMetricCategoryEnum);
    if jsn.has('measurementPeriod') then
        result.measurementPeriod := ParseTiming(jsn.vObj['measurementPeriod']);{q3}
    if jsn.has('calibration') then
      iterateArray(jsn.vArr['calibration'], result.calibrationList, parseDeviceMetricCalibration);
end;

procedure TFHIRJsonComposer.ComposeDeviceMetric(json : TJSONWriter; name : string; elem : TFhirDeviceMetric; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('unit_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'unit', elem.unit_); {a}
  if not elem.noCompose and doCompose('source') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDevice}(json, 'source', elem.source); {a}
  if not elem.noCompose and doCompose('parent') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDeviceComponent}(json, 'parent', elem.parent); {a}
  if not elem.noCompose and doCompose('operationalStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'operationalStatus', elem.OperationalStatusElement, CODES_TFhirMetricOperationalStatusEnum, false);
  if not elem.noCompose and doCompose('operationalStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'operationalStatus', elem.OperationalStatusElement, CODES_TFhirMetricOperationalStatusEnum, false);
  if not elem.noCompose and doCompose('color') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'color', elem.ColorElement, CODES_TFhirMetricColorEnum, false);
  if not elem.noCompose and doCompose('color') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'color', elem.ColorElement, CODES_TFhirMetricColorEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'category', elem.CategoryElement, CODES_TFhirMetricCategoryEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'category', elem.CategoryElement, CODES_TFhirMetricCategoryEnum, false);
  if not elem.noCompose and doCompose('measurementPeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTiming(json, 'measurementPeriod', elem.measurementPeriod); {a}
  if not elem.noCompose and doCompose('calibration') and (SummaryOption in [soFull, soSummary, soData]) and (elem.calibrationList.Count > 0) then
  begin
    json.valueArray('calibration');
    for i := 0 to elem.calibrationList.Count - 1 do
      ComposeDeviceMetricCalibration(json, '', elem.calibrationList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
procedure TFHIRJsonParser.ParseDeviceRequestParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceRequestParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceRequestParameter(jsn : TJsonObject) : TFhirDeviceRequestParameter;
begin
  result := TFhirDeviceRequestParameter.create;
  try
    ParseDeviceRequestParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceRequestParameterProperties(jsn : TJsonObject; result : TFhirDeviceRequestParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
end;

procedure TFHIRJsonComposer.ComposeDeviceRequestParameter(json : TJSONWriter; name : string; elem : TFhirDeviceRequestParameter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDeviceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceRequest(jsn : TJsonObject) : TFhirDeviceRequest;
begin
  result := TFhirDeviceRequest.create;
  try
    ParseDeviceRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceRequestProperties(jsn : TJsonObject; result : TFhirDeviceRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('priorRequest') then
      iterateArray(jsn.vArr['priorRequest'], result.priorRequestList, parseReference{TFhirReference});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') then
        result.intent := ParseCodeableConcept(jsn.vObj['intent']);{q3}
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('codeReference') {a3} then
      result.code := ParseReference(jsn.vObj['codeReference']);
    if jsn.has('codeCodeableConcept') {a4} then
      result.code := ParseCodeableConcept(jsn.vObj['codeCodeableConcept']);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseDeviceRequestParameter);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := ParseDateTime(jsn['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseReference{Resource}(jsn.vObj['requester']);{q3}
    if jsn.has('performerType') then
        result.performerType := ParseCodeableConcept(jsn.vObj['performerType']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{Resource}(jsn.vObj['performer']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], result.insuranceList, parseReference{Resource});
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], result.supportingInfoList, parseReference{TFhirReference});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], result.relevantHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeDeviceRequest(json : TJSONWriter; name : string; elem : TFhirDeviceRequest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('instantiates') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('priorRequest') and (SummaryOption in [soFull, soSummary, soData]) and (elem.priorRequestList.Count > 0) then
  begin
    json.valueArray('priorRequest');
    for i := 0 to elem.priorRequestList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.priorRequestList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('groupIdentifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'intent', elem.intent); {a}
  if not elem.noCompose and (not isCanonical or (elem.priorityElement <> nil) and (elem.priorityElement.primitiveValue <> 'If missing, normal priority')) and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and (not isCanonical or (elem.priorityElement <> nil) and (elem.priorityElement.primitiveValue <> 'If missing, normal priority')) and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.code is TFhirReference) then
    ComposeReference(json, 'codeReference', TFhirReference(elem.code))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.code is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'codeCodeableConcept', TFhirCodeableConcept(elem.code)) ;
  if not elem.noCompose and doCompose('parameter') and (SummaryOption in [soFull, soData]) and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeDeviceRequestParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('requester') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'requester', elem.requester); {a}
  if not elem.noCompose and doCompose('performerType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'performerType', elem.performerType); {a}
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'performer', elem.performer); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|DiagnosticReport|DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('insurance') and (SummaryOption in [soFull, soData]) and (elem.insuranceList.Count > 0) then
  begin
    json.valueArray('insurance');
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.insuranceList[i]); {z - Reference(Coverage|ClaimResponse)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('supportingInfo') and (SummaryOption in [soFull, soData]) and (elem.supportingInfoList.Count > 0) then
  begin
    json.valueArray('supportingInfo');
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInfoList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('relevantHistory') and (SummaryOption in [soFull, soData]) and (elem.relevantHistoryList.Count > 0) then
  begin
    json.valueArray('relevantHistory');
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.relevantHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
procedure TFHIRJsonParser.ParseDeviceUseStatement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceUseStatement(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceUseStatement(jsn : TJsonObject) : TFhirDeviceUseStatement;
begin
  result := TFhirDeviceUseStatement.create;
  try
    ParseDeviceUseStatementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceUseStatementProperties(jsn : TJsonObject; result : TFhirDeviceUseStatement);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirServiceRequest});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirDeviceStatementStatusEnum, SYSTEMS_TFhirDeviceStatementStatusEnum);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('derivedFrom') then
      iterateArray(jsn.vArr['derivedFrom'], result.derivedFromList, parseReference{Resource});
    if jsn.has('timingTiming') {a4} then
      result.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      result.timing := parseDateTime(jsn['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('recordedOn') or jsn.has('_recordedOn') then
        result.recordedOnElement := ParseDateTime(jsn['recordedOn'], jsn.vObj['_recordedOn']);{q}
    if jsn.has('source') then
        result.source := ParseReference{Resource}(jsn.vObj['source']);{q3}
    if jsn.has('device') then
        result.device := ParseReference{TFhirDevice}(jsn.vObj['device']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeDeviceUseStatement(json : TJSONWriter; name : string; elem : TFhirDeviceUseStatement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(json, '', elem.basedOnList[i]); {z - Reference(ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDeviceStatementStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDeviceStatementStatusEnum, false);
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('derivedFrom') and (SummaryOption in [soFull, soSummary, soData]) and (elem.derivedFromList.Count > 0) then
  begin
    json.valueArray('derivedFrom');
    for i := 0 to elem.derivedFromList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.derivedFromList[i]); {z - Reference(ServiceRequest|Procedure|Claim|Observation|QuestionnaireResponse|DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
  end;
  if not elem.noCompose and doCompose('recordedOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'recordedOn', elem.recordedOnElement, false);
  if not elem.noCompose and doCompose('recordedOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'recordedOn', elem.recordedOnElement, false);
  if not elem.noCompose and doCompose('source') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'source', elem.source); {a}
  if not elem.noCompose and doCompose('device') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDevice}(json, 'device', elem.device); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|DiagnosticReport|DocumentReference|Media)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('bodySite') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
procedure TFHIRJsonParser.ParseDiagnosticReportMedia(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDiagnosticReportMedia(jsn)); {2}
end;

function TFHIRJsonParser.ParseDiagnosticReportMedia(jsn : TJsonObject) : TFhirDiagnosticReportMedia;
begin
  result := TFhirDiagnosticReportMedia.create;
  try
    ParseDiagnosticReportMediaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDiagnosticReportMediaProperties(jsn : TJsonObject; result : TFhirDiagnosticReportMedia);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('link') then
        result.link_ := ParseReference{TFhirMedia}(jsn.vObj['link']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDiagnosticReportMedia(json : TJSONWriter; name : string; elem : TFhirDiagnosticReportMedia; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirMedia}(json, 'link', elem.link_); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDiagnosticReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDiagnosticReport(jsn)); {2}
end;

function TFHIRJsonParser.ParseDiagnosticReport(jsn : TJsonObject) : TFhirDiagnosticReport;
begin
  result := TFhirDiagnosticReport.create;
  try
    ParseDiagnosticReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDiagnosticReportProperties(jsn : TJsonObject; result : TFhirDiagnosticReport);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirDiagnosticReportStatusEnum, SYSTEMS_TFhirDiagnosticReportStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := ParseInstant(jsn['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseReference{Resource});
    if jsn.has('resultsInterpreter') then
      iterateArray(jsn.vArr['resultsInterpreter'], result.resultsInterpreterList, parseReference{Resource});
    if jsn.has('specimen') then
      iterateArray(jsn.vArr['specimen'], result.specimenList, parseReference{TFhirSpecimen});
    if jsn.has('result') then
      iterateArray(jsn.vArr['result'], result.resultList, parseReference{TFhirObservation});
    if jsn.has('imagingStudy') then
      iterateArray(jsn.vArr['imagingStudy'], result.imagingStudyList, parseReference{TFhirImagingStudy});
    if jsn.has('media') then
      iterateArray(jsn.vArr['media'], result.mediaList, parseDiagnosticReportMedia);
    if jsn.has('conclusion') or jsn.has('_conclusion') then
        result.conclusionElement := ParseString(jsn['conclusion'], jsn.vObj['_conclusion']);{q}
    if jsn.has('codedDiagnosis') then
      iterateArray(jsn.vArr['codedDiagnosis'], result.codedDiagnosisList, parseCodeableConcept);
    if jsn.has('presentedForm') then
      iterateArray(jsn.vArr['presentedForm'], result.presentedFormList, parseAttachment);
end;

procedure TFHIRJsonComposer.ComposeDiagnosticReport(json : TJSONWriter; name : string; elem : TFhirDiagnosticReport; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|ImmunizationRecommendation|MedicationRequest|NutritionOrder|ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDiagnosticReportStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDiagnosticReportStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soSummary, soData]) and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.performerList[i]); {z - Reference(Practitioner|PractitionerRole|Organization|CareTeam)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('resultsInterpreter') and (SummaryOption in [soFull, soSummary, soData]) and (elem.resultsInterpreterList.Count > 0) then
  begin
    json.valueArray('resultsInterpreter');
    for i := 0 to elem.resultsInterpreterList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.resultsInterpreterList[i]); {z - Reference(Practitioner|PractitionerRole|Organization|CareTeam)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specimen') and (SummaryOption in [soFull, soData]) and (elem.specimenList.Count > 0) then
  begin
    json.valueArray('specimen');
    for i := 0 to elem.specimenList.Count - 1 do
      ComposeReference{TFhirSpecimen}(json, '', elem.specimenList[i]); {z - Reference(Specimen)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('result') and (SummaryOption in [soFull, soData]) and (elem.resultList.Count > 0) then
  begin
    json.valueArray('result');
    for i := 0 to elem.resultList.Count - 1 do
      ComposeReference{TFhirObservation}(json, '', elem.resultList[i]); {z - Reference(Observation)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('imagingStudy') and (SummaryOption in [soFull, soData]) and (elem.imagingStudyList.Count > 0) then
  begin
    json.valueArray('imagingStudy');
    for i := 0 to elem.imagingStudyList.Count - 1 do
      ComposeReference{TFhirImagingStudy}(json, '', elem.imagingStudyList[i]); {z - Reference(ImagingStudy)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('media') and (SummaryOption in [soFull, soSummary, soData]) and (elem.mediaList.Count > 0) then
  begin
    json.valueArray('media');
    for i := 0 to elem.mediaList.Count - 1 do
      ComposeDiagnosticReportMedia(json, '', elem.mediaList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('conclusion') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'conclusion', elem.conclusionElement, false);
  if not elem.noCompose and doCompose('conclusion') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'conclusion', elem.conclusionElement, false);
  if not elem.noCompose and doCompose('codedDiagnosis') and (SummaryOption in [soFull, soData]) and (elem.codedDiagnosisList.Count > 0) then
  begin
    json.valueArray('codedDiagnosis');
    for i := 0 to elem.codedDiagnosisList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codedDiagnosisList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('presentedForm') and (SummaryOption in [soFull, soData]) and (elem.presentedFormList.Count > 0) then
  begin
    json.valueArray('presentedForm');
    for i := 0 to elem.presentedFormList.Count - 1 do
      ComposeAttachment(json, '', elem.presentedFormList[i]); {z - Attachment}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
procedure TFHIRJsonParser.ParseDocumentManifestAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentManifestAgent(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentManifestAgent(jsn : TJsonObject) : TFhirDocumentManifestAgent;
begin
  result := TFhirDocumentManifestAgent.create;
  try
    ParseDocumentManifestAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentManifestAgentProperties(jsn : TJsonObject; result : TFhirDocumentManifestAgent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('who') then
        result.who := ParseReference{Resource}(jsn.vObj['who']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentManifestAgent(json : TJSONWriter; name : string; elem : TFhirDocumentManifestAgent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'who', elem.who); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentManifestRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentManifestRelated(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentManifestRelated(jsn : TJsonObject) : TFhirDocumentManifestRelated;
begin
  result := TFhirDocumentManifestRelated.create;
  try
    ParseDocumentManifestRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentManifestRelatedProperties(jsn : TJsonObject; result : TFhirDocumentManifestRelated);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('ref') then
        result.ref := ParseReference{TFhirReference}(jsn.vObj['ref']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentManifestRelated(json : TJSONWriter; name : string; elem : TFhirDocumentManifestRelated; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'ref', elem.ref); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentManifest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentManifest(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentManifest(jsn : TJsonObject) : TFhirDocumentManifest;
begin
  result := TFhirDocumentManifest.create;
  try
    ParseDocumentManifestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentManifestProperties(jsn : TJsonObject; result : TFhirDocumentManifest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('masterIdentifier') then
        result.masterIdentifier := ParseIdentifier(jsn.vObj['masterIdentifier']);{q3}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseDocumentManifestAgent);
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], result.recipientList, parseReference{Resource});
    if jsn.has('source') or jsn.has('_source') then
        result.sourceElement := ParseUri(jsn['source'], jsn.vObj['_source']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], result.contentList, parseReference{TFhirReference});
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], result.relatedList, parseDocumentManifestRelated);
end;

procedure TFHIRJsonComposer.ComposeDocumentManifest(json : TJSONWriter; name : string; elem : TFhirDocumentManifest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('masterIdentifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'masterIdentifier', elem.masterIdentifier); {a}
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('agent') and (SummaryOption in [soFull, soSummary, soData]) and (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeDocumentManifestAgent(json, '', elem.agentList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('recipient') and (SummaryOption in [soFull, soData]) and (elem.recipientList.Count > 0) then
  begin
    json.valueArray('recipient');
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.recipientList[i]); {z - Reference(Patient|Practitioner|PractitionerRole|RelatedPerson|Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('source') and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'source', elem.sourceElement, false);
  if not elem.noCompose and doCompose('source') and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'source', elem.sourceElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('content') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contentList.Count > 0) then
  begin
    json.valueArray('content');
    for i := 0 to elem.contentList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.contentList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('related') and (SummaryOption in [soFull, soData]) and (elem.relatedList.Count > 0) then
  begin
    json.valueArray('related');
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeDocumentManifestRelated(json, '', elem.relatedList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
procedure TFHIRJsonParser.ParseDocumentReferenceAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceAgent(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReferenceAgent(jsn : TJsonObject) : TFhirDocumentReferenceAgent;
begin
  result := TFhirDocumentReferenceAgent.create;
  try
    ParseDocumentReferenceAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceAgentProperties(jsn : TJsonObject; result : TFhirDocumentReferenceAgent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('who') then
        result.who := ParseReference{Resource}(jsn.vObj['who']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceAgent(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceAgent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'who', elem.who); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceRelatesTo(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReferenceRelatesTo(jsn : TJsonObject) : TFhirDocumentReferenceRelatesTo;
begin
  result := TFhirDocumentReferenceRelatesTo.create;
  try
    ParseDocumentReferenceRelatesToProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceRelatesToProperties(jsn : TJsonObject; result : TFhirDocumentReferenceRelatesTo);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum);
    if jsn.has('target') then
        result.target := ParseReference{TFhirDocumentReference}(jsn.vObj['target']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceRelatesTo(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceRelatesTo; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDocumentReference}(json, 'target', elem.target); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceContent(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReferenceContent(jsn : TJsonObject) : TFhirDocumentReferenceContent;
begin
  result := TFhirDocumentReferenceContent.create;
  try
    ParseDocumentReferenceContentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContentProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('attachment') then
        result.attachment := ParseAttachment(jsn.vObj['attachment']);{q3}
    if jsn.has('format') then
        result.format := ParseCoding(jsn.vObj['format']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceContent(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(json, 'attachment', elem.attachment); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'format', elem.format); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContext(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceContext(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReferenceContext(jsn : TJsonObject) : TFhirDocumentReferenceContext;
begin
  result := TFhirDocumentReferenceContext.create;
  try
    ParseDocumentReferenceContextProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContextProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContext);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('event') then
      iterateArray(jsn.vArr['event'], result.eventList, parseCodeableConcept);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('facilityType') then
        result.facilityType := ParseCodeableConcept(jsn.vObj['facilityType']);{q3}
    if jsn.has('practiceSetting') then
        result.practiceSetting := ParseCodeableConcept(jsn.vObj['practiceSetting']);{q3}
    if jsn.has('sourcePatientInfo') then
        result.sourcePatientInfo := ParseReference{TFhirPatient}(jsn.vObj['sourcePatientInfo']);{q3}
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], result.relatedList, parseDocumentReferenceContextRelated);
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceContext(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContext; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.eventList.Count > 0) then
  begin
    json.valueArray('event');
    for i := 0 to elem.eventList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.eventList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'facilityType', elem.facilityType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'practiceSetting', elem.practiceSetting); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(json, 'sourcePatientInfo', elem.sourcePatientInfo); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.relatedList.Count > 0) then
  begin
    json.valueArray('related');
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeDocumentReferenceContextRelated(json, '', elem.relatedList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContextRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceContextRelated(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReferenceContextRelated(jsn : TJsonObject) : TFhirDocumentReferenceContextRelated;
begin
  result := TFhirDocumentReferenceContextRelated.create;
  try
    ParseDocumentReferenceContextRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContextRelatedProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContextRelated);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('ref') then
        result.ref := ParseReference{TFhirReference}(jsn.vObj['ref']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceContextRelated(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContextRelated; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'ref', elem.ref); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentReference(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReference(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReference(jsn : TJsonObject) : TFhirDocumentReference;
begin
  result := TFhirDocumentReference.create;
  try
    ParseDocumentReferenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceProperties(jsn : TJsonObject; result : TFhirDocumentReference);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('masterIdentifier') then
        result.masterIdentifier := ParseIdentifier(jsn.vObj['masterIdentifier']);{q3}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum);
    if jsn.has('docStatus') or jsn.has('_docStatus')  then
      result.docStatusElement := parseEnum(jsn.path+'/docStatus', jsn['docStatus'], jsn.vObj['_docStatus'], CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('class') then
        result.class_ := ParseCodeableConcept(jsn.vObj['class']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseInstant(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseDocumentReferenceAgent);
    if jsn.has('authenticator') then
        result.authenticator := ParseReference{Resource}(jsn.vObj['authenticator']);{q3}
    if jsn.has('custodian') then
        result.custodian := ParseReference{TFhirOrganization}(jsn.vObj['custodian']);{q3}
    if jsn.has('relatesTo') then
      iterateArray(jsn.vArr['relatesTo'], result.relatesToList, parseDocumentReferenceRelatesTo);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCodeableConcept);
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], result.contentList, parseDocumentReferenceContent);
    if jsn.has('context') then
        result.context := ParseDocumentReferenceContext(jsn.vObj['context']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentReference(json : TJSONWriter; name : string; elem : TFhirDocumentReference; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('masterIdentifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'masterIdentifier', elem.masterIdentifier); {a}
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  if not elem.noCompose and doCompose('docStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'docStatus', elem.DocStatusElement, CODES_TFhirCompositionStatusEnum, false);
  if not elem.noCompose and doCompose('docStatus') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'docStatus', elem.DocStatusElement, CODES_TFhirCompositionStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('class_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'class', elem.class_); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('agent') and (SummaryOption in [soFull, soSummary, soData]) and (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeDocumentReferenceAgent(json, '', elem.agentList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('authenticator') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'authenticator', elem.authenticator); {a}
  if not elem.noCompose and doCompose('custodian') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'custodian', elem.custodian); {a}
  if not elem.noCompose and doCompose('relatesTo') and (SummaryOption in [soFull, soSummary, soData]) and (elem.relatesToList.Count > 0) then
  begin
    json.valueArray('relatesTo');
    for i := 0 to elem.relatesToList.Count - 1 do
      ComposeDocumentReferenceRelatesTo(json, '', elem.relatesToList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('securityLabel') and (SummaryOption in [soFull, soSummary, soData]) and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.securityLabelList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('content') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contentList.Count > 0) then
  begin
    json.valueArray('content');
    for i := 0 to elem.contentList.Count - 1 do
      ComposeDocumentReferenceContent(json, '', elem.contentList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDocumentReferenceContext(json, 'context', elem.context); {a}
end;

{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
procedure TFHIRJsonParser.ParseEligibilityRequestAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityRequestAuthorization(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityRequestAuthorization(jsn : TJsonObject) : TFhirEligibilityRequestAuthorization;
begin
  result := TFhirEligibilityRequestAuthorization.create;
  try
    ParseEligibilityRequestAuthorizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityRequestAuthorizationProperties(jsn : TJsonObject; result : TFhirEligibilityRequestAuthorization);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('facility') then
        result.facility := ParseReference{Resource}(jsn.vObj['facility']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEligibilityRequestAuthorization(json : TJSONWriter; name : string; elem : TFhirEligibilityRequestAuthorization; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'facility', elem.facility); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityRequest(jsn : TJsonObject) : TFhirEligibilityRequest;
begin
  result := TFhirEligibilityRequest.create;
  try
    ParseEligibilityRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityRequestProperties(jsn : TJsonObject; result : TFhirEligibilityRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('servicedPeriod') {a4} then
      result.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      result.serviced := parseDate(jsn['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('enterer') then
        result.enterer := ParseReference{TFhirPractitioner}(jsn.vObj['enterer']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('facility') then
        result.facility := ParseReference{TFhirLocation}(jsn.vObj['facility']);{q3}
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('businessArrangement') or jsn.has('_businessArrangement') then
        result.businessArrangementElement := ParseString(jsn['businessArrangement'], jsn.vObj['_businessArrangement']);{q}
    if jsn.has('benefitCategory') then
        result.benefitCategory := ParseCodeableConcept(jsn.vObj['benefitCategory']);{q3}
    if jsn.has('benefitSubCategory') then
        result.benefitSubCategory := ParseCodeableConcept(jsn.vObj['benefitSubCategory']);{q3}
    if jsn.has('authorization') then
      iterateArray(jsn.vArr['authorization'], result.authorizationList, parseEligibilityRequestAuthorization);
end;

procedure TFHIRJsonComposer.ComposeEligibilityRequest(json : TJSONWriter; name : string; elem : TFhirEligibilityRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(elem.serviced)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(elem.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(elem.serviced), false);
  end;
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('enterer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'enterer', elem.enterer); {a}
  if not elem.noCompose and doCompose('provider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('insurer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if not elem.noCompose and doCompose('facility') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'facility', elem.facility); {a}
  if not elem.noCompose and doCompose('coverage') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if not elem.noCompose and doCompose('businessArrangement') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'businessArrangement', elem.businessArrangementElement, false);
  if not elem.noCompose and doCompose('businessArrangement') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'businessArrangement', elem.businessArrangementElement, false);
  if not elem.noCompose and doCompose('benefitCategory') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'benefitCategory', elem.benefitCategory); {a}
  if not elem.noCompose and doCompose('benefitSubCategory') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'benefitSubCategory', elem.benefitSubCategory); {a}
  if not elem.noCompose and doCompose('authorization') and (SummaryOption in [soFull, soData]) and (elem.authorizationList.Count > 0) then
  begin
    json.valueArray('authorization');
    for i := 0 to elem.authorizationList.Count - 1 do
      ComposeEligibilityRequestAuthorization(json, '', elem.authorizationList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
procedure TFHIRJsonParser.ParseEligibilityResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponseInsurance(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponseInsurance(jsn : TJsonObject) : TFhirEligibilityResponseInsurance;
begin
  result := TFhirEligibilityResponseInsurance.create;
  try
    ParseEligibilityResponseInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsurance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('contract') then
        result.contract := ParseReference{TFhirContract}(jsn.vObj['contract']);{q3}
    if jsn.has('benefitBalance') then
      iterateArray(jsn.vArr['benefitBalance'], result.benefitBalanceList, parseEligibilityResponseInsuranceBenefitBalance);
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponseInsurance(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsurance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirContract}(json, 'contract', elem.contract); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.benefitBalanceList.Count > 0) then
  begin
    json.valueArray('benefitBalance');
    for i := 0 to elem.benefitBalanceList.Count - 1 do
      ComposeEligibilityResponseInsuranceBenefitBalance(json, '', elem.benefitBalanceList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponseInsuranceBenefitBalance(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalance(jsn : TJsonObject) : TFhirEligibilityResponseInsuranceBenefitBalance;
begin
  result := TFhirEligibilityResponseInsuranceBenefitBalance.create;
  try
    ParseEligibilityResponseInsuranceBenefitBalanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalanceProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsuranceBenefitBalance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('subCategory') then
        result.subCategory := ParseCodeableConcept(jsn.vObj['subCategory']);{q3}
    if jsn.has('excluded') or jsn.has('_excluded') then
        result.excludedElement := ParseBoolean(jsn['excluded'], jsn.vObj['_excluded']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('network') then
        result.network := ParseCodeableConcept(jsn.vObj['network']);{q3}
    if jsn.has('unit') then
        result.unit_ := ParseCodeableConcept(jsn.vObj['unit']);{q3}
    if jsn.has('term') then
        result.term := ParseCodeableConcept(jsn.vObj['term']);{q3}
    if jsn.has('financial') then
      iterateArray(jsn.vArr['financial'], result.financialList, parseEligibilityResponseInsuranceBenefitBalanceFinancial);
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponseInsuranceBenefitBalance(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsuranceBenefitBalance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subCategory', elem.subCategory); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'excluded', elem.excludedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'excluded', elem.excludedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'network', elem.network); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'unit', elem.unit_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'term', elem.term); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.financialList.Count > 0) then
  begin
    json.valueArray('financial');
    for i := 0 to elem.financialList.Count - 1 do
      ComposeEligibilityResponseInsuranceBenefitBalanceFinancial(json, '', elem.financialList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn : TJsonObject) : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial;
begin
  result := TFhirEligibilityResponseInsuranceBenefitBalanceFinancial.create;
  try
    ParseEligibilityResponseInsuranceBenefitBalanceFinancialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalanceFinancialProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('allowedUnsignedInt') or jsn.has('_allowedUnsignedInt') then
      result.allowed := parseUnsignedInt(jsn['allowedUnsignedInt'], jsn.vObj['_allowedUnsignedInt']);
    if jsn.has('allowedMoney') {a4} then
      result.allowed := ParseMoney(jsn.vObj['allowedMoney']);
    if jsn.has('allowedString') or jsn.has('_allowedString') then
      result.allowed := parseString(jsn['allowedString'], jsn.vObj['_allowedString']);
    if jsn.has('usedUnsignedInt') or jsn.has('_usedUnsignedInt') then
      result.used := parseUnsignedInt(jsn['usedUnsignedInt'], jsn.vObj['_usedUnsignedInt']);
    if jsn.has('usedMoney') {a4} then
      result.used := ParseMoney(jsn.vObj['usedMoney']);
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponseInsuranceBenefitBalanceFinancial(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed), false);
    ComposeUnsignedIntProps(json, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirMoney) then 
    ComposeMoney(json, 'allowedMoney', TFhirMoney(elem.allowed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirString) then 
  begin
    ComposeStringValue(json, 'allowedString', TFhirString(elem.allowed), false);
    ComposeStringProps(json, 'allowedString', TFhirString(elem.allowed), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.used is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'usedUnsignedInt', TFhirUnsignedInt(elem.used), false);
    ComposeUnsignedIntProps(json, 'usedUnsignedInt', TFhirUnsignedInt(elem.used), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.used is TFhirMoney) then 
    ComposeMoney(json, 'usedMoney', TFhirMoney(elem.used)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponseAuthorization(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponseAuthorization(jsn : TJsonObject) : TFhirEligibilityResponseAuthorization;
begin
  result := TFhirEligibilityResponseAuthorization.create;
  try
    ParseEligibilityResponseAuthorizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseAuthorizationProperties(jsn : TJsonObject; result : TFhirEligibilityResponseAuthorization);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('authorizationSequence') or jsn.has('_authorizationSequence') then
        result.authorizationSequenceElement := ParsePositiveInt(jsn['authorizationSequence'], jsn.vObj['_authorizationSequence']);{q}
    if jsn.has('required') or jsn.has('_required') then
        result.requiredElement := ParseBoolean(jsn['required'], jsn.vObj['_required']);{q}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponseAuthorization(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseAuthorization; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'authorizationSequence', elem.authorizationSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'authorizationSequence', elem.authorizationSequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'required', elem.requiredElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'required', elem.requiredElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponseError(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponseError(jsn : TJsonObject) : TFhirEligibilityResponseError;
begin
  result := TFhirEligibilityResponseError.create;
  try
    ParseEligibilityResponseErrorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseErrorProperties(jsn : TJsonObject; result : TFhirEligibilityResponseError);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponseError(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseError; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponse(jsn : TJsonObject) : TFhirEligibilityResponse;
begin
  result := TFhirEligibilityResponse.create;
  try
    ParseEligibilityResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseProperties(jsn : TJsonObject; result : TFhirEligibilityResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirEligibilityRequest}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') or jsn.has('_outcome')  then
      result.outcomeElement := parseEnum(jsn.path+'/outcome', jsn['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := ParseString(jsn['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('inforce') or jsn.has('_inforce') then
        result.inforceElement := ParseBoolean(jsn['inforce'], jsn.vObj['_inforce']);{q}
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], result.insuranceList, parseEligibilityResponseInsurance);
    if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
        result.preAuthRefElement := ParseString(jsn['preAuthRef'], jsn.vObj['_preAuthRef']);{q}
    if jsn.has('authorization') then
      iterateArray(jsn.vArr['authorization'], result.authorizationList, parseEligibilityResponseAuthorization);
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('error') then
      iterateArray(jsn.vArr['error'], result.errorList, parseEligibilityResponseError);
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponse(json : TJSONWriter; name : string; elem : TFhirEligibilityResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('requestProvider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if not elem.noCompose and doCompose('requestOrganization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirEligibilityRequest}(json, 'request', elem.request); {a}
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('insurer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if not elem.noCompose and doCompose('inforce') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'inforce', elem.inforceElement, false);
  if not elem.noCompose and doCompose('inforce') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'inforce', elem.inforceElement, false);
  if not elem.noCompose and doCompose('insurance') and (SummaryOption in [soFull, soData]) and (elem.insuranceList.Count > 0) then
  begin
    json.valueArray('insurance');
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeEligibilityResponseInsurance(json, '', elem.insuranceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('preAuthRef') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'preAuthRef', elem.preAuthRefElement, false);
  if not elem.noCompose and doCompose('preAuthRef') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'preAuthRef', elem.preAuthRefElement, false);
  if not elem.noCompose and doCompose('authorization') and (SummaryOption in [soFull, soData]) and (elem.authorizationList.Count > 0) then
  begin
    json.valueArray('authorization');
    for i := 0 to elem.authorizationList.Count - 1 do
      ComposeEligibilityResponseAuthorization(json, '', elem.authorizationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('form') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if not elem.noCompose and doCompose('error') and (SummaryOption in [soFull, soData]) and (elem.errorList.Count > 0) then
  begin
    json.valueArray('error');
    for i := 0 to elem.errorList.Count - 1 do
      ComposeEligibilityResponseError(json, '', elem.errorList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
procedure TFHIRJsonParser.ParseEncounterStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterStatusHistory(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterStatusHistory(jsn : TJsonObject) : TFhirEncounterStatusHistory;
begin
  result := TFhirEncounterStatusHistory.create;
  try
    ParseEncounterStatusHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterStatusHistoryProperties(jsn : TJsonObject; result : TFhirEncounterStatusHistory);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterStatusHistory(json : TJSONWriter; name : string; elem : TFhirEncounterStatusHistory; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterClassHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterClassHistory(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterClassHistory(jsn : TJsonObject) : TFhirEncounterClassHistory;
begin
  result := TFhirEncounterClassHistory.create;
  try
    ParseEncounterClassHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterClassHistoryProperties(jsn : TJsonObject; result : TFhirEncounterClassHistory);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('class') then
        result.class_ := ParseCoding(jsn.vObj['class']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterClassHistory(json : TJSONWriter; name : string; elem : TFhirEncounterClassHistory; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'class', elem.class_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterParticipant(jsn : TJsonObject) : TFhirEncounterParticipant;
begin
  result := TFhirEncounterParticipant.create;
  try
    ParseEncounterParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterParticipantProperties(jsn : TJsonObject; result : TFhirEncounterParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('individual') then
        result.individual := ParseReference{Resource}(jsn.vObj['individual']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterParticipant(json : TJSONWriter; name : string; elem : TFhirEncounterParticipant; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'individual', elem.individual); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterDiagnosis(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterDiagnosis(jsn : TJsonObject) : TFhirEncounterDiagnosis;
begin
  result := TFhirEncounterDiagnosis.create;
  try
    ParseEncounterDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterDiagnosisProperties(jsn : TJsonObject; result : TFhirEncounterDiagnosis);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('condition') then
        result.condition := ParseReference{Resource}(jsn.vObj['condition']);{q3}
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('rank') or jsn.has('_rank') then
        result.rankElement := ParsePositiveInt(jsn['rank'], jsn.vObj['_rank']);{q}
end;

procedure TFHIRJsonComposer.ComposeEncounterDiagnosis(json : TJSONWriter; name : string; elem : TFhirEncounterDiagnosis; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'condition', elem.condition); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'rank', elem.rankElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'rank', elem.rankElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterHospitalization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterHospitalization(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterHospitalization(jsn : TJsonObject) : TFhirEncounterHospitalization;
begin
  result := TFhirEncounterHospitalization.create;
  try
    ParseEncounterHospitalizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterHospitalizationProperties(jsn : TJsonObject; result : TFhirEncounterHospitalization);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('preAdmissionIdentifier') then
        result.preAdmissionIdentifier := ParseIdentifier(jsn.vObj['preAdmissionIdentifier']);{q3}
    if jsn.has('origin') then
        result.origin := ParseReference{TFhirLocation}(jsn.vObj['origin']);{q3}
    if jsn.has('admitSource') then
        result.admitSource := ParseCodeableConcept(jsn.vObj['admitSource']);{q3}
    if jsn.has('reAdmission') then
        result.reAdmission := ParseCodeableConcept(jsn.vObj['reAdmission']);{q3}
    if jsn.has('dietPreference') then
      iterateArray(jsn.vArr['dietPreference'], result.dietPreferenceList, parseCodeableConcept);
    if jsn.has('specialCourtesy') then
      iterateArray(jsn.vArr['specialCourtesy'], result.specialCourtesyList, parseCodeableConcept);
    if jsn.has('specialArrangement') then
      iterateArray(jsn.vArr['specialArrangement'], result.specialArrangementList, parseCodeableConcept);
    if jsn.has('destination') then
        result.destination := ParseReference{TFhirLocation}(jsn.vObj['destination']);{q3}
    if jsn.has('dischargeDisposition') then
        result.dischargeDisposition := ParseCodeableConcept(jsn.vObj['dischargeDisposition']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterHospitalization(json : TJSONWriter; name : string; elem : TFhirEncounterHospitalization; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'preAdmissionIdentifier', elem.preAdmissionIdentifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'origin', elem.origin); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'admitSource', elem.admitSource); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reAdmission', elem.reAdmission); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.dietPreferenceList.Count > 0) then
  begin
    json.valueArray('dietPreference');
    for i := 0 to elem.dietPreferenceList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.dietPreferenceList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.specialCourtesyList.Count > 0) then
  begin
    json.valueArray('specialCourtesy');
    for i := 0 to elem.specialCourtesyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialCourtesyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.specialArrangementList.Count > 0) then
  begin
    json.valueArray('specialArrangement');
    for i := 0 to elem.specialArrangementList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialArrangementList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'destination', elem.destination); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'dischargeDisposition', elem.dischargeDisposition); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterLocation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterLocation(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterLocation(jsn : TJsonObject) : TFhirEncounterLocation;
begin
  result := TFhirEncounterLocation.create;
  try
    ParseEncounterLocationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterLocationProperties(jsn : TJsonObject; result : TFhirEncounterLocation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirEncounterLocationStatusEnum, SYSTEMS_TFhirEncounterLocationStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterLocation(json : TJSONWriter; name : string; elem : TFhirEncounterLocation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEncounterLocationStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEncounterLocationStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounter(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounter(jsn : TJsonObject) : TFhirEncounter;
begin
  result := TFhirEncounter.create;
  try
    ParseEncounterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterProperties(jsn : TJsonObject; result : TFhirEncounter);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum);
    if jsn.has('statusHistory') then
      iterateArray(jsn.vArr['statusHistory'], result.statusHistoryList, parseEncounterStatusHistory);
    if jsn.has('class') then
        result.class_ := ParseCoding(jsn.vObj['class']);{q3}
    if jsn.has('classHistory') then
      iterateArray(jsn.vArr['classHistory'], result.classHistoryList, parseEncounterClassHistory);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('serviceType') then
        result.serviceType := ParseCodeableConcept(jsn.vObj['serviceType']);{q3}
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('episodeOfCare') then
      iterateArray(jsn.vArr['episodeOfCare'], result.episodeOfCareList, parseReference{TFhirEpisodeOfCare});
    if jsn.has('incomingReferral') then
      iterateArray(jsn.vArr['incomingReferral'], result.incomingReferralList, parseReference{TFhirServiceRequest});
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseEncounterParticipant);
    if jsn.has('appointment') then
        result.appointment := ParseReference{TFhirAppointment}(jsn.vObj['appointment']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('length') then
        result.length := ParseDuration(jsn.vObj['length']);{q3}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], result.diagnosisList, parseEncounterDiagnosis);
    if jsn.has('account') then
      iterateArray(jsn.vArr['account'], result.accountList, parseReference{TFhirAccount});
    if jsn.has('hospitalization') then
        result.hospitalization := ParseEncounterHospitalization(jsn.vObj['hospitalization']);{q3}
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], result.locationList, parseEncounterLocation);
    if jsn.has('serviceProvider') then
        result.serviceProvider := ParseReference{TFhirOrganization}(jsn.vObj['serviceProvider']);{q3}
    if jsn.has('partOf') then
        result.partOf := ParseReference{TFhirEncounter}(jsn.vObj['partOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounter(json : TJSONWriter; name : string; elem : TFhirEncounter; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum, false);
  if not elem.noCompose and doCompose('statusHistory') and (SummaryOption in [soFull, soData]) and (elem.statusHistoryList.Count > 0) then
  begin
    json.valueArray('statusHistory');
    for i := 0 to elem.statusHistoryList.Count - 1 do
      ComposeEncounterStatusHistory(json, '', elem.statusHistoryList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('class_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'class', elem.class_); {a}
  if not elem.noCompose and doCompose('classHistory') and (SummaryOption in [soFull, soData]) and (elem.classHistoryList.Count > 0) then
  begin
    json.valueArray('classHistory');
    for i := 0 to elem.classHistoryList.Count - 1 do
      ComposeEncounterClassHistory(json, '', elem.classHistoryList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('serviceType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'serviceType', elem.serviceType); {a}
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('episodeOfCare') and (SummaryOption in [soFull, soSummary, soData]) and (elem.episodeOfCareList.Count > 0) then
  begin
    json.valueArray('episodeOfCare');
    for i := 0 to elem.episodeOfCareList.Count - 1 do
      ComposeReference{TFhirEpisodeOfCare}(json, '', elem.episodeOfCareList[i]); {z - Reference(EpisodeOfCare)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('incomingReferral') and (SummaryOption in [soFull, soData]) and (elem.incomingReferralList.Count > 0) then
  begin
    json.valueArray('incomingReferral');
    for i := 0 to elem.incomingReferralList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(json, '', elem.incomingReferralList[i]); {z - Reference(ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('participant') and (SummaryOption in [soFull, soSummary, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeEncounterParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('appointment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirAppointment}(json, 'appointment', elem.appointment); {a}
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('length') and (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'length', elem.length); {a}
  if not elem.noCompose and doCompose('reason') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('diagnosis') and (SummaryOption in [soFull, soSummary, soData]) and (elem.diagnosisList.Count > 0) then
  begin
    json.valueArray('diagnosis');
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeEncounterDiagnosis(json, '', elem.diagnosisList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('account') and (SummaryOption in [soFull, soData]) and (elem.accountList.Count > 0) then
  begin
    json.valueArray('account');
    for i := 0 to elem.accountList.Count - 1 do
      ComposeReference{TFhirAccount}(json, '', elem.accountList[i]); {z - Reference(Account)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('hospitalization') and (SummaryOption in [soFull, soData]) then
    ComposeEncounterHospitalization(json, 'hospitalization', elem.hospitalization); {a}
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soData]) and (elem.locationList.Count > 0) then
  begin
    json.valueArray('location');
    for i := 0 to elem.locationList.Count - 1 do
      ComposeEncounterLocation(json, '', elem.locationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('serviceProvider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'serviceProvider', elem.serviceProvider); {a}
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirEncounter}(json, 'partOf', elem.partOf); {a}
end;

{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
procedure TFHIRJsonParser.ParseEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEndpoint(jsn)); {2}
end;

function TFHIRJsonParser.ParseEndpoint(jsn : TJsonObject) : TFhirEndpoint;
begin
  result := TFhirEndpoint.create;
  try
    ParseEndpointProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEndpointProperties(jsn : TJsonObject; result : TFhirEndpoint);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirEndpointStatusEnum, SYSTEMS_TFhirEndpointStatusEnum);
    if jsn.has('connectionType') then
        result.connectionType := ParseCoding(jsn.vObj['connectionType']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactPoint);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('payloadType') then
      iterateArray(jsn.vArr['payloadType'], result.payloadTypeList, parseCodeableConcept);
      if jsn.has('payloadMimeType') or jsn.has('_payloadMimeType') then
      iteratePrimitiveArray(jsn.vArr['payloadMimeType'], jsn.vArr['_payloadMimeType'], result.payloadMimeTypeList, parseCode);
    if jsn.has('address') or jsn.has('_address') then
        result.addressElement := ParseUri(jsn['address'], jsn.vObj['_address']);{q}
      if jsn.has('header') or jsn.has('_header') then
      iteratePrimitiveArray(jsn.vArr['header'], jsn.vArr['_header'], result.headerList, parseString);
end;

procedure TFHIRJsonComposer.ComposeEndpoint(json : TJSONWriter; name : string; elem : TFhirEndpoint; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEndpointStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEndpointStatusEnum, false);
  if not elem.noCompose and doCompose('connectionType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'connectionType', elem.connectionType); {a}
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('managingOrganization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(json, '', elem.contactList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('payloadType') and (SummaryOption in [soFull, soSummary, soData]) and (elem.payloadTypeList.Count > 0) then
  begin
    json.valueArray('payloadType');
    for i := 0 to elem.payloadTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.payloadTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('payloadMimeType') and (SummaryOption in [soFull, soSummary, soData]) and (elem.payloadMimeTypeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.payloadMimeTypeList.Count - 1 do
    begin
      ext := ext or ((elem.payloadMimeTypeList[i].id <> '') or (elem.payloadMimeTypeList[i].hasExtensionList) {no-comments or (elem.payloadMimeTypeList[i].hasComments)});
      val := val or (elem.payloadMimeTypeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('payloadMimeType');
      for i := 0 to elem.payloadMimeTypeList.Count - 1 do
        ComposeCodeValue(json, '',elem.payloadMimeTypeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_payloadMimeType');
      for i := 0 to elem.payloadMimeTypeList.Count - 1 do
        ComposeCodeProps(json, '',elem.payloadMimeTypeList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('address') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'address', elem.addressElement, false);
  if not elem.noCompose and doCompose('address') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'address', elem.addressElement, false);
  if not elem.noCompose and doCompose('header') and (SummaryOption in [soFull, soData]) and (elem.headerList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.headerList.Count - 1 do
    begin
      ext := ext or ((elem.headerList[i].id <> '') or (elem.headerList[i].hasExtensionList) {no-comments or (elem.headerList[i].hasComments)});
      val := val or (elem.headerList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('header');
      for i := 0 to elem.headerList.Count - 1 do
        ComposeStringValue(json, '',elem.headerList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_header');
      for i := 0 to elem.headerList.Count - 1 do
        ComposeStringProps(json, '',elem.headerList[i], true);
      json.FinishArray;
    end;
  end;
end;

{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
procedure TFHIRJsonParser.ParseEnrollmentRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEnrollmentRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseEnrollmentRequest(jsn : TJsonObject) : TFhirEnrollmentRequest;
begin
  result := TFhirEnrollmentRequest.create;
  try
    ParseEnrollmentRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEnrollmentRequestProperties(jsn : TJsonObject; result : TFhirEnrollmentRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('candidate') then
        result.candidate := ParseReference{TFhirPatient}(jsn.vObj['candidate']);{q3}
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEnrollmentRequest(json : TJSONWriter; name : string; elem : TFhirEnrollmentRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('insurer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if not elem.noCompose and doCompose('provider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('candidate') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(json, 'candidate', elem.candidate); {a}
  if not elem.noCompose and doCompose('coverage') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
end;

{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
procedure TFHIRJsonParser.ParseEnrollmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEnrollmentResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseEnrollmentResponse(jsn : TJsonObject) : TFhirEnrollmentResponse;
begin
  result := TFhirEnrollmentResponse.create;
  try
    ParseEnrollmentResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEnrollmentResponseProperties(jsn : TJsonObject; result : TFhirEnrollmentResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('request') then
        result.request := ParseReference{TFhirEnrollmentRequest}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') or jsn.has('_outcome')  then
      result.outcomeElement := parseEnum(jsn.path+'/outcome', jsn['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := ParseString(jsn['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEnrollmentResponse(json : TJSONWriter; name : string; elem : TFhirEnrollmentResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirEnrollmentRequest}(json, 'request', elem.request); {a}
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('requestProvider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if not elem.noCompose and doCompose('requestOrganization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
end;

{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_ENTRYDEFINITION}
procedure TFHIRJsonParser.ParseEntryDefinitionRelatedEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEntryDefinitionRelatedEntry(jsn)); {2}
end;

function TFHIRJsonParser.ParseEntryDefinitionRelatedEntry(jsn : TJsonObject) : TFhirEntryDefinitionRelatedEntry;
begin
  result := TFhirEntryDefinitionRelatedEntry.create;
  try
    ParseEntryDefinitionRelatedEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEntryDefinitionRelatedEntryProperties(jsn : TJsonObject; result : TFhirEntryDefinitionRelatedEntry);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('relationtype') then
        result.relationtype := ParseCodeableConcept(jsn.vObj['relationtype']);{q3}
    if jsn.has('item') then
        result.item := ParseReference{TFhirEntryDefinition}(jsn.vObj['item']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEntryDefinitionRelatedEntry(json : TJSONWriter; name : string; elem : TFhirEntryDefinitionRelatedEntry; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'relationtype', elem.relationtype); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirEntryDefinition}(json, 'item', elem.item); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEntryDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEntryDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseEntryDefinition(jsn : TJsonObject) : TFhirEntryDefinition;
begin
  result := TFhirEntryDefinition.create;
  try
    ParseEntryDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEntryDefinitionProperties(jsn : TJsonObject; result : TFhirEntryDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('purpose') then
        result.purpose := ParseCodeableConcept(jsn.vObj['purpose']);{q3}
    if jsn.has('referencedItem') then
        result.referencedItem := ParseReference{Resource}(jsn.vObj['referencedItem']);{q3}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('additionalIdentifier') then
      iterateArray(jsn.vArr['additionalIdentifier'], result.additionalIdentifierList, parseIdentifier);
    if jsn.has('classification') then
      iterateArray(jsn.vArr['classification'], result.classificationList, parseCodeableConcept);
    if jsn.has('status') then
        result.status := ParseCodeableConcept(jsn.vObj['status']);{q3}
    if jsn.has('validityPeriod') then
        result.validityPeriod := ParsePeriod(jsn.vObj['validityPeriod']);{q3}
    if jsn.has('lastUpdated') or jsn.has('_lastUpdated') then
        result.lastUpdatedElement := ParseDateTime(jsn['lastUpdated'], jsn.vObj['_lastUpdated']);{q}
    if jsn.has('additionalCharacteristic') then
      iterateArray(jsn.vArr['additionalCharacteristic'], result.additionalCharacteristicList, parseCodeableConcept);
    if jsn.has('additionalClassification') then
      iterateArray(jsn.vArr['additionalClassification'], result.additionalClassificationList, parseCodeableConcept);
    if jsn.has('relatedEntry') then
      iterateArray(jsn.vArr['relatedEntry'], result.relatedEntryList, parseEntryDefinitionRelatedEntry);
end;

procedure TFHIRJsonComposer.ComposeEntryDefinition(json : TJSONWriter; name : string; elem : TFhirEntryDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'purpose', elem.purpose); {a}
  if not elem.noCompose and doCompose('referencedItem') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'referencedItem', elem.referencedItem); {a}
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('additionalIdentifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.additionalIdentifierList.Count > 0) then
  begin
    json.valueArray('additionalIdentifier');
    for i := 0 to elem.additionalIdentifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.additionalIdentifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('classification') and (SummaryOption in [soFull, soSummary, soData]) and (elem.classificationList.Count > 0) then
  begin
    json.valueArray('classification');
    for i := 0 to elem.classificationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.classificationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', elem.status); {a}
  if not elem.noCompose and doCompose('validityPeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'validityPeriod', elem.validityPeriod); {a}
  if not elem.noCompose and doCompose('lastUpdated') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'lastUpdated', elem.lastUpdatedElement, false);
  if not elem.noCompose and doCompose('lastUpdated') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'lastUpdated', elem.lastUpdatedElement, false);
  if not elem.noCompose and doCompose('additionalCharacteristic') and (SummaryOption in [soFull, soSummary, soData]) and (elem.additionalCharacteristicList.Count > 0) then
  begin
    json.valueArray('additionalCharacteristic');
    for i := 0 to elem.additionalCharacteristicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.additionalCharacteristicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('additionalClassification') and (SummaryOption in [soFull, soSummary, soData]) and (elem.additionalClassificationList.Count > 0) then
  begin
    json.valueArray('additionalClassification');
    for i := 0 to elem.additionalClassificationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.additionalClassificationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('relatedEntry') and (SummaryOption in [soFull, soSummary, soData]) and (elem.relatedEntryList.Count > 0) then
  begin
    json.valueArray('relatedEntry');
    for i := 0 to elem.relatedEntryList.Count - 1 do
      ComposeEntryDefinitionRelatedEntry(json, '', elem.relatedEntryList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ENTRYDEFINITION}
{$IFDEF FHIR_EPISODEOFCARE}
procedure TFHIRJsonParser.ParseEpisodeOfCareStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEpisodeOfCareStatusHistory(jsn)); {2}
end;

function TFHIRJsonParser.ParseEpisodeOfCareStatusHistory(jsn : TJsonObject) : TFhirEpisodeOfCareStatusHistory;
begin
  result := TFhirEpisodeOfCareStatusHistory.create;
  try
    ParseEpisodeOfCareStatusHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareStatusHistoryProperties(jsn : TJsonObject; result : TFhirEpisodeOfCareStatusHistory);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEpisodeOfCareStatusHistory(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCareStatusHistory; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEpisodeOfCareDiagnosis(jsn)); {2}
end;

function TFHIRJsonParser.ParseEpisodeOfCareDiagnosis(jsn : TJsonObject) : TFhirEpisodeOfCareDiagnosis;
begin
  result := TFhirEpisodeOfCareDiagnosis.create;
  try
    ParseEpisodeOfCareDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareDiagnosisProperties(jsn : TJsonObject; result : TFhirEpisodeOfCareDiagnosis);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('condition') then
        result.condition := ParseReference{TFhirCondition}(jsn.vObj['condition']);{q3}
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('rank') or jsn.has('_rank') then
        result.rankElement := ParsePositiveInt(jsn['rank'], jsn.vObj['_rank']);{q}
end;

procedure TFHIRJsonComposer.ComposeEpisodeOfCareDiagnosis(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCareDiagnosis; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirCondition}(json, 'condition', elem.condition); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'rank', elem.rankElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'rank', elem.rankElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCare(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEpisodeOfCare(jsn)); {2}
end;

function TFHIRJsonParser.ParseEpisodeOfCare(jsn : TJsonObject) : TFhirEpisodeOfCare;
begin
  result := TFhirEpisodeOfCare.create;
  try
    ParseEpisodeOfCareProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareProperties(jsn : TJsonObject; result : TFhirEpisodeOfCare);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum);
    if jsn.has('statusHistory') then
      iterateArray(jsn.vArr['statusHistory'], result.statusHistoryList, parseEpisodeOfCareStatusHistory);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], result.diagnosisList, parseEpisodeOfCareDiagnosis);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('referralRequest') then
      iterateArray(jsn.vArr['referralRequest'], result.referralRequestList, parseReference{TFhirServiceRequest});
    if jsn.has('careManager') then
        result.careManager := ParseReference{TFhirPractitioner}(jsn.vObj['careManager']);{q3}
    if jsn.has('team') then
      iterateArray(jsn.vArr['team'], result.teamList, parseReference{TFhirCareTeam});
    if jsn.has('account') then
      iterateArray(jsn.vArr['account'], result.accountList, parseReference{TFhirAccount});
end;

procedure TFHIRJsonComposer.ComposeEpisodeOfCare(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCare; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  if not elem.noCompose and doCompose('statusHistory') and (SummaryOption in [soFull, soData]) and (elem.statusHistoryList.Count > 0) then
  begin
    json.valueArray('statusHistory');
    for i := 0 to elem.statusHistoryList.Count - 1 do
      ComposeEpisodeOfCareStatusHistory(json, '', elem.statusHistoryList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('diagnosis') and (SummaryOption in [soFull, soSummary, soData]) and (elem.diagnosisList.Count > 0) then
  begin
    json.valueArray('diagnosis');
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeEpisodeOfCareDiagnosis(json, '', elem.diagnosisList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('managingOrganization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('referralRequest') and (SummaryOption in [soFull, soData]) and (elem.referralRequestList.Count > 0) then
  begin
    json.valueArray('referralRequest');
    for i := 0 to elem.referralRequestList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(json, '', elem.referralRequestList[i]); {z - Reference(ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('careManager') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'careManager', elem.careManager); {a}
  if not elem.noCompose and doCompose('team') and (SummaryOption in [soFull, soData]) and (elem.teamList.Count > 0) then
  begin
    json.valueArray('team');
    for i := 0 to elem.teamList.Count - 1 do
      ComposeReference{TFhirCareTeam}(json, '', elem.teamList[i]); {z - Reference(CareTeam)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('account') and (SummaryOption in [soFull, soData]) and (elem.accountList.Count > 0) then
  begin
    json.valueArray('account');
    for i := 0 to elem.accountList.Count - 1 do
      ComposeReference{TFhirAccount}(json, '', elem.accountList[i]); {z - Reference(Account)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
procedure TFHIRJsonParser.ParseEventDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEventDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseEventDefinition(jsn : TJsonObject) : TFhirEventDefinition;
begin
  result := TFhirEventDefinition.create;
  try
    ParseEventDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEventDefinitionProperties(jsn : TJsonObject; result : TFhirEventDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := ParseString(jsn['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := ParseDate(jsn['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := ParseDate(jsn['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('trigger') then
        result.trigger := ParseTriggerDefinition(jsn.vObj['trigger']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEventDefinition(json : TJSONWriter; name : string; elem : TFhirEventDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('effectivePeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('topic') and (SummaryOption in [soFull, soData]) and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contributor') and (SummaryOption in [soFull, soData]) and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('relatedArtifact') and (SummaryOption in [soFull, soData]) and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('trigger') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTriggerDefinition(json, 'trigger', elem.trigger); {a}
end;

{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EXAMPLESCENARIO}
procedure TFHIRJsonParser.ParseExampleScenarioActor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioActor(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenarioActor(jsn : TJsonObject) : TFhirExampleScenarioActor;
begin
  result := TFhirExampleScenarioActor.create;
  try
    ParseExampleScenarioActorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioActorProperties(jsn : TJsonObject; result : TFhirExampleScenarioActor);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actorId') or jsn.has('_actorId') then
        result.actorIdElement := ParseString(jsn['actorId'], jsn.vObj['_actorId']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirExamplescenarioActorTypeEnum, SYSTEMS_TFhirExamplescenarioActorTypeEnum);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioActor(json : TJSONWriter; name : string; elem : TFhirExampleScenarioActor; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'actorId', elem.actorIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'actorId', elem.actorIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirExamplescenarioActorTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirExamplescenarioActorTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioInstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenarioInstance(jsn : TJsonObject) : TFhirExampleScenarioInstance;
begin
  result := TFhirExampleScenarioInstance.create;
  try
    ParseExampleScenarioInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceProperties(jsn : TJsonObject; result : TFhirExampleScenarioInstance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('resourceId') or jsn.has('_resourceId') then
        result.resourceIdElement := ParseString(jsn['resourceId'], jsn.vObj['_resourceId']);{q}
    if jsn.has('resourceType') or jsn.has('_resourceType')  then
      result.resourceTypeElement := parseEnum(jsn.path+'/resourceType', jsn['resourceType'], jsn.vObj['_resourceType'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('version') then
      iterateArray(jsn.vArr['version'], result.versionList, parseExampleScenarioInstanceVersion);
    if jsn.has('containedInstance') then
      iterateArray(jsn.vArr['containedInstance'], result.containedInstanceList, parseExampleScenarioInstanceContainedInstance);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioInstance(json : TJSONWriter; name : string; elem : TFhirExampleScenarioInstance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'resourceId', elem.resourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'resourceId', elem.resourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'resourceType', elem.ResourceTypeElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'resourceType', elem.ResourceTypeElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.versionList.Count > 0) then
  begin
    json.valueArray('version');
    for i := 0 to elem.versionList.Count - 1 do
      ComposeExampleScenarioInstanceVersion(json, '', elem.versionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.containedInstanceList.Count > 0) then
  begin
    json.valueArray('containedInstance');
    for i := 0 to elem.containedInstanceList.Count - 1 do
      ComposeExampleScenarioInstanceContainedInstance(json, '', elem.containedInstanceList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceVersion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioInstanceVersion(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenarioInstanceVersion(jsn : TJsonObject) : TFhirExampleScenarioInstanceVersion;
begin
  result := TFhirExampleScenarioInstanceVersion.create;
  try
    ParseExampleScenarioInstanceVersionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceVersionProperties(jsn : TJsonObject; result : TFhirExampleScenarioInstanceVersion);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('versionId') or jsn.has('_versionId') then
        result.versionIdElement := ParseString(jsn['versionId'], jsn.vObj['_versionId']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioInstanceVersion(json : TJSONWriter; name : string; elem : TFhirExampleScenarioInstanceVersion; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'versionId', elem.versionIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'versionId', elem.versionIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceContainedInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioInstanceContainedInstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenarioInstanceContainedInstance(jsn : TJsonObject) : TFhirExampleScenarioInstanceContainedInstance;
begin
  result := TFhirExampleScenarioInstanceContainedInstance.create;
  try
    ParseExampleScenarioInstanceContainedInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceContainedInstanceProperties(jsn : TJsonObject; result : TFhirExampleScenarioInstanceContainedInstance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('resourceId') or jsn.has('_resourceId') then
        result.resourceIdElement := ParseString(jsn['resourceId'], jsn.vObj['_resourceId']);{q}
    if jsn.has('versionId') or jsn.has('_versionId') then
        result.versionIdElement := ParseString(jsn['versionId'], jsn.vObj['_versionId']);{q}
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioInstanceContainedInstance(json : TJSONWriter; name : string; elem : TFhirExampleScenarioInstanceContainedInstance; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'resourceId', elem.resourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'resourceId', elem.resourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'versionId', elem.versionIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'versionId', elem.versionIdElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcess(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioProcess(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenarioProcess(jsn : TJsonObject) : TFhirExampleScenarioProcess;
begin
  result := TFhirExampleScenarioProcess.create;
  try
    ParseExampleScenarioProcessProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcess);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('preConditions') or jsn.has('_preConditions') then
        result.preConditionsElement := ParseMarkdown(jsn['preConditions'], jsn.vObj['_preConditions']);{q}
    if jsn.has('postConditions') or jsn.has('_postConditions') then
        result.postConditionsElement := ParseMarkdown(jsn['postConditions'], jsn.vObj['_postConditions']);{q}
    if jsn.has('step') then
      iterateArray(jsn.vArr['step'], result.stepList, parseExampleScenarioProcessStep);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioProcess(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcess; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'preConditions', elem.preConditionsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'preConditions', elem.preConditionsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'postConditions', elem.postConditionsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'postConditions', elem.postConditionsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.stepList.Count > 0) then
  begin
    json.valueArray('step');
    for i := 0 to elem.stepList.Count - 1 do
      ComposeExampleScenarioProcessStep(json, '', elem.stepList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStep(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioProcessStep(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenarioProcessStep(jsn : TJsonObject) : TFhirExampleScenarioProcessStep;
begin
  result := TFhirExampleScenarioProcessStep.create;
  try
    ParseExampleScenarioProcessStepProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcessStep);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('process') then
      iterateArray(jsn.vArr['process'], result.processList, parseExampleScenarioProcess);
    if jsn.has('pause') or jsn.has('_pause') then
        result.pauseElement := ParseBoolean(jsn['pause'], jsn.vObj['_pause']);{q}
    if jsn.has('operation') then
        result.operation := ParseExampleScenarioProcessStepOperation(jsn.vObj['operation']);{q3}
    if jsn.has('alternative') then
        result.alternative := ParseExampleScenarioProcessStepAlternative(jsn.vObj['alternative']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioProcessStep(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcessStep; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.processList.Count > 0) then
  begin
    json.valueArray('process');
    for i := 0 to elem.processList.Count - 1 do
      ComposeExampleScenarioProcess(json, '', elem.processList[i]); {z - @ExampleScenario.process}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'pause', elem.pauseElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'pause', elem.pauseElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioProcessStepOperation(json, 'operation', elem.operation); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioProcessStepAlternative(json, 'alternative', elem.alternative); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioProcessStepOperation(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenarioProcessStepOperation(jsn : TJsonObject) : TFhirExampleScenarioProcessStepOperation;
begin
  result := TFhirExampleScenarioProcessStepOperation.create;
  try
    ParseExampleScenarioProcessStepOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepOperationProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcessStepOperation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('number') or jsn.has('_number') then
        result.numberElement := ParseString(jsn['number'], jsn.vObj['_number']);{q}
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := ParseString(jsn['type'], jsn.vObj['_type']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('initiator') or jsn.has('_initiator') then
        result.initiatorElement := ParseString(jsn['initiator'], jsn.vObj['_initiator']);{q}
    if jsn.has('receiver') or jsn.has('_receiver') then
        result.receiverElement := ParseString(jsn['receiver'], jsn.vObj['_receiver']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('initiatorActive') or jsn.has('_initiatorActive') then
        result.initiatorActiveElement := ParseBoolean(jsn['initiatorActive'], jsn.vObj['_initiatorActive']);{q}
    if jsn.has('receiverActive') or jsn.has('_receiverActive') then
        result.receiverActiveElement := ParseBoolean(jsn['receiverActive'], jsn.vObj['_receiverActive']);{q}
    if jsn.has('request') then
        result.request := ParseExampleScenarioInstanceContainedInstance(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseExampleScenarioInstanceContainedInstance(jsn.vObj['response']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioProcessStepOperation(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcessStepOperation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'initiator', elem.initiatorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'initiator', elem.initiatorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'receiver', elem.receiverElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'receiver', elem.receiverElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'initiatorActive', elem.initiatorActiveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'initiatorActive', elem.initiatorActiveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'receiverActive', elem.receiverActiveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'receiverActive', elem.receiverActiveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioInstanceContainedInstance(json, 'request', elem.request); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioInstanceContainedInstance(json, 'response', elem.response); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepAlternative(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioProcessStepAlternative(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenarioProcessStepAlternative(jsn : TJsonObject) : TFhirExampleScenarioProcessStepAlternative;
begin
  result := TFhirExampleScenarioProcessStepAlternative.create;
  try
    ParseExampleScenarioProcessStepAlternativeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepAlternativeProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcessStepAlternative);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('option') then
      iterateArray(jsn.vArr['option'], result.optionList, parseExampleScenarioProcessStepAlternativeOption);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioProcessStepAlternative(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcessStepAlternative; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.optionList.Count > 0) then
  begin
    json.valueArray('option');
    for i := 0 to elem.optionList.Count - 1 do
      ComposeExampleScenarioProcessStepAlternativeOption(json, '', elem.optionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepAlternativeOption(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioProcessStepAlternativeOption(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenarioProcessStepAlternativeOption(jsn : TJsonObject) : TFhirExampleScenarioProcessStepAlternativeOption;
begin
  result := TFhirExampleScenarioProcessStepAlternativeOption.create;
  try
    ParseExampleScenarioProcessStepAlternativeOptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepAlternativeOptionProperties(jsn : TJsonObject; result : TFhirExampleScenarioProcessStepAlternativeOption);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('step') then
      iterateArray(jsn.vArr['step'], result.stepList, parseExampleScenarioProcessStep);
      if jsn.has('pause') or jsn.has('_pause') then
      iteratePrimitiveArray(jsn.vArr['pause'], jsn.vArr['_pause'], result.pauseList, parseBoolean);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioProcessStepAlternativeOption(json : TJSONWriter; name : string; elem : TFhirExampleScenarioProcessStepAlternativeOption; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.stepList.Count > 0) then
  begin
    json.valueArray('step');
    for i := 0 to elem.stepList.Count - 1 do
      ComposeExampleScenarioProcessStep(json, '', elem.stepList[i]); {z - @ExampleScenario.process.step}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.pauseList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.pauseList.Count - 1 do
    begin
      ext := ext or ((elem.pauseList[i].id <> '') or (elem.pauseList[i].hasExtensionList) {no-comments or (elem.pauseList[i].hasComments)});
      val := val or (elem.pauseList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('pause');
      for i := 0 to elem.pauseList.Count - 1 do
        ComposeBooleanValue(json, '',elem.pauseList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_pause');
      for i := 0 to elem.pauseList.Count - 1 do
        ComposeBooleanProps(json, '',elem.pauseList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExampleScenario(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenario(jsn)); {2}
end;

function TFHIRJsonParser.ParseExampleScenario(jsn : TJsonObject) : TFhirExampleScenario;
begin
  result := TFhirExampleScenario.create;
  try
    ParseExampleScenarioProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProperties(jsn : TJsonObject; result : TFhirExampleScenario);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('actor') then
      iterateArray(jsn.vArr['actor'], result.actorList, parseExampleScenarioActor);
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], result.instanceList, parseExampleScenarioInstance);
    if jsn.has('process') then
      iterateArray(jsn.vArr['process'], result.processList, parseExampleScenarioProcess);
    if jsn.has('workflow') then
      iterateArray(jsn.vArr['workflow'], result.workflowList, parseReference{TFhirExampleScenario});
end;

procedure TFHIRJsonComposer.ComposeExampleScenario(json : TJSONWriter; name : string; elem : TFhirExampleScenario; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('actor') and (SummaryOption in [soFull, soData]) and (elem.actorList.Count > 0) then
  begin
    json.valueArray('actor');
    for i := 0 to elem.actorList.Count - 1 do
      ComposeExampleScenarioActor(json, '', elem.actorList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('instance') and (SummaryOption in [soFull, soData]) and (elem.instanceList.Count > 0) then
  begin
    json.valueArray('instance');
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeExampleScenarioInstance(json, '', elem.instanceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('process') and (SummaryOption in [soFull, soData]) and (elem.processList.Count > 0) then
  begin
    json.valueArray('process');
    for i := 0 to elem.processList.Count - 1 do
      ComposeExampleScenarioProcess(json, '', elem.processList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('workflow') and (SummaryOption in [soFull, soData]) and (elem.workflowList.Count > 0) then
  begin
    json.valueArray('workflow');
    for i := 0 to elem.workflowList.Count - 1 do
      ComposeReference{TFhirExampleScenario}(json, '', elem.workflowList[i]); {z - Reference(ExampleScenario)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPANSIONPROFILE}
procedure TFHIRJsonParser.ParseExpansionProfileFixedVersion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileFixedVersion(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileFixedVersion(jsn : TJsonObject) : TFhirExpansionProfileFixedVersion;
begin
  result := TFhirExpansionProfileFixedVersion.create;
  try
    ParseExpansionProfileFixedVersionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileFixedVersionProperties(jsn : TJsonObject; result : TFhirExpansionProfileFixedVersion);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := ParseUri(jsn['system'], jsn.vObj['_system']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirSystemVersionProcessingModeEnum, SYSTEMS_TFhirSystemVersionProcessingModeEnum);
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileFixedVersion(json : TJSONWriter; name : string; elem : TFhirExpansionProfileFixedVersion; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirSystemVersionProcessingModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirSystemVersionProcessingModeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileExcludedSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileExcludedSystem(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileExcludedSystem(jsn : TJsonObject) : TFhirExpansionProfileExcludedSystem;
begin
  result := TFhirExpansionProfileExcludedSystem.create;
  try
    ParseExpansionProfileExcludedSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileExcludedSystemProperties(jsn : TJsonObject; result : TFhirExpansionProfileExcludedSystem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := ParseUri(jsn['system'], jsn.vObj['_system']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileExcludedSystem(json : TJSONWriter; name : string; elem : TFhirExpansionProfileExcludedSystem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignation;
begin
  result := TFhirExpansionProfileDesignation.create;
  try
    ParseExpansionProfileDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('include') then
        result.include := ParseExpansionProfileDesignationInclude(jsn.vObj['include']);{q3}
    if jsn.has('exclude') then
        result.exclude := ParseExpansionProfileDesignationExclude(jsn.vObj['exclude']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeExpansionProfileDesignationInclude(json, 'include', elem.include); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeExpansionProfileDesignationExclude(json, 'exclude', elem.exclude); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationInclude(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignationInclude(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignationInclude(jsn : TJsonObject) : TFhirExpansionProfileDesignationInclude;
begin
  result := TFhirExpansionProfileDesignationInclude.create;
  try
    ParseExpansionProfileDesignationIncludeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationIncludeProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationInclude);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseExpansionProfileDesignationIncludeDesignation);
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignationInclude(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationInclude; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeExpansionProfileDesignationIncludeDesignation(json, '', elem.designationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationIncludeDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignationIncludeDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignationIncludeDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignationIncludeDesignation;
begin
  result := TFhirExpansionProfileDesignationIncludeDesignation.create;
  try
    ParseExpansionProfileDesignationIncludeDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationIncludeDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationIncludeDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseCode(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('use') then
        result.use := ParseCoding(jsn.vObj['use']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignationIncludeDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationIncludeDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'use', elem.use); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationExclude(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignationExclude(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignationExclude(jsn : TJsonObject) : TFhirExpansionProfileDesignationExclude;
begin
  result := TFhirExpansionProfileDesignationExclude.create;
  try
    ParseExpansionProfileDesignationExcludeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationExcludeProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationExclude);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseExpansionProfileDesignationExcludeDesignation);
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignationExclude(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationExclude; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeExpansionProfileDesignationExcludeDesignation(json, '', elem.designationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationExcludeDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignationExcludeDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignationExcludeDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignationExcludeDesignation;
begin
  result := TFhirExpansionProfileDesignationExcludeDesignation.create;
  try
    ParseExpansionProfileDesignationExcludeDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationExcludeDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationExcludeDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseCode(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('use') then
        result.use := ParseCoding(jsn.vObj['use']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignationExcludeDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationExcludeDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'use', elem.use); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfile(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfile(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfile(jsn : TJsonObject) : TFhirExpansionProfile;
begin
  result := TFhirExpansionProfile.create;
  try
    ParseExpansionProfileProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileProperties(jsn : TJsonObject; result : TFhirExpansionProfile);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('fixedVersion') then
      iterateArray(jsn.vArr['fixedVersion'], result.fixedVersionList, parseExpansionProfileFixedVersion);
    if jsn.has('excludedSystem') then
        result.excludedSystem := ParseExpansionProfileExcludedSystem(jsn.vObj['excludedSystem']);{q3}
    if jsn.has('includeDesignations') or jsn.has('_includeDesignations') then
        result.includeDesignationsElement := ParseBoolean(jsn['includeDesignations'], jsn.vObj['_includeDesignations']);{q}
    if jsn.has('designation') then
        result.designation := ParseExpansionProfileDesignation(jsn.vObj['designation']);{q3}
    if jsn.has('includeDefinition') or jsn.has('_includeDefinition') then
        result.includeDefinitionElement := ParseBoolean(jsn['includeDefinition'], jsn.vObj['_includeDefinition']);{q}
    if jsn.has('activeOnly') or jsn.has('_activeOnly') then
        result.activeOnlyElement := ParseBoolean(jsn['activeOnly'], jsn.vObj['_activeOnly']);{q}
    if jsn.has('excludeNested') or jsn.has('_excludeNested') then
        result.excludeNestedElement := ParseBoolean(jsn['excludeNested'], jsn.vObj['_excludeNested']);{q}
    if jsn.has('excludeNotForUI') or jsn.has('_excludeNotForUI') then
        result.excludeNotForUIElement := ParseBoolean(jsn['excludeNotForUI'], jsn.vObj['_excludeNotForUI']);{q}
    if jsn.has('excludePostCoordinated') or jsn.has('_excludePostCoordinated') then
        result.excludePostCoordinatedElement := ParseBoolean(jsn['excludePostCoordinated'], jsn.vObj['_excludePostCoordinated']);{q}
    if jsn.has('displayLanguage') or jsn.has('_displayLanguage') then
        result.displayLanguageElement := ParseCode(jsn['displayLanguage'], jsn.vObj['_displayLanguage']);{q}
    if jsn.has('limitedExpansion') or jsn.has('_limitedExpansion') then
        result.limitedExpansionElement := ParseBoolean(jsn['limitedExpansion'], jsn.vObj['_limitedExpansion']);{q}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfile(json : TJSONWriter; name : string; elem : TFhirExpansionProfile; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('fixedVersion') and (SummaryOption in [soFull, soSummary, soData]) and (elem.fixedVersionList.Count > 0) then
  begin
    json.valueArray('fixedVersion');
    for i := 0 to elem.fixedVersionList.Count - 1 do
      ComposeExpansionProfileFixedVersion(json, '', elem.fixedVersionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('excludedSystem') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeExpansionProfileExcludedSystem(json, 'excludedSystem', elem.excludedSystem); {a}
  if not elem.noCompose and doCompose('includeDesignations') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'includeDesignations', elem.includeDesignationsElement, false);
  if not elem.noCompose and doCompose('includeDesignations') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'includeDesignations', elem.includeDesignationsElement, false);
  if not elem.noCompose and doCompose('designation') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeExpansionProfileDesignation(json, 'designation', elem.designation); {a}
  if not elem.noCompose and (not isCanonical or (elem.includeDefinition <> false)) and doCompose('includeDefinition') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'includeDefinition', elem.includeDefinitionElement, false);
  if not elem.noCompose and (not isCanonical or (elem.includeDefinition <> false)) and doCompose('includeDefinition') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'includeDefinition', elem.includeDefinitionElement, false);
  if not elem.noCompose and (not isCanonical or (elem.activeOnly <> false)) and doCompose('activeOnly') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'activeOnly', elem.activeOnlyElement, false);
  if not elem.noCompose and (not isCanonical or (elem.activeOnly <> false)) and doCompose('activeOnly') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'activeOnly', elem.activeOnlyElement, false);
  if not elem.noCompose and doCompose('excludeNested') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'excludeNested', elem.excludeNestedElement, false);
  if not elem.noCompose and doCompose('excludeNested') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'excludeNested', elem.excludeNestedElement, false);
  if not elem.noCompose and doCompose('excludeNotForUI') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'excludeNotForUI', elem.excludeNotForUIElement, false);
  if not elem.noCompose and doCompose('excludeNotForUI') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'excludeNotForUI', elem.excludeNotForUIElement, false);
  if not elem.noCompose and doCompose('excludePostCoordinated') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'excludePostCoordinated', elem.excludePostCoordinatedElement, false);
  if not elem.noCompose and doCompose('excludePostCoordinated') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'excludePostCoordinated', elem.excludePostCoordinatedElement, false);
  if not elem.noCompose and doCompose('displayLanguage') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'displayLanguage', elem.displayLanguageElement, false);
  if not elem.noCompose and doCompose('displayLanguage') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'displayLanguage', elem.displayLanguageElement, false);
  if not elem.noCompose and doCompose('limitedExpansion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'limitedExpansion', elem.limitedExpansionElement, false);
  if not elem.noCompose and doCompose('limitedExpansion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'limitedExpansion', elem.limitedExpansionElement, false);
end;

{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
procedure TFHIRJsonParser.ParseExplanationOfBenefitRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitRelated(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitRelated(jsn : TJsonObject) : TFhirExplanationOfBenefitRelated;
begin
  result := TFhirExplanationOfBenefitRelated.create;
  try
    ParseExplanationOfBenefitRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitRelatedProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitRelated);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('claim') then
        result.claim := ParseReference{TFhirClaim}(jsn.vObj['claim']);{q3}
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('reference') then
        result.reference := ParseIdentifier(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitRelated(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitRelated; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaim}(json, 'claim', elem.claim); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPayee(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitPayee(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitPayee(jsn : TJsonObject) : TFhirExplanationOfBenefitPayee;
begin
  result := TFhirExplanationOfBenefitPayee.create;
  try
    ParseExplanationOfBenefitPayeeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPayeeProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitPayee);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('resource') then
        result.resource := ParseCoding(jsn.vObj['resource']);{q3}
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitPayee(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitPayee; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'resource', elem.resource); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'party', elem.party); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInformation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitInformation(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitInformation(jsn : TJsonObject) : TFhirExplanationOfBenefitInformation;
begin
  result := TFhirExplanationOfBenefitInformation.create;
  try
    ParseExplanationOfBenefitInformationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInformationProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitInformation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDate') or jsn.has('_timingDate') then
      result.timing := parseDate(jsn['timingDate'], jsn.vObj['_timingDate']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueReference') {a3} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('reason') then
        result.reason := ParseCoding(jsn.vObj['reason']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitInformation(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitInformation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDate) then 
  begin
    ComposeDateValue(json, 'timingDate', TFhirDate(elem.timing), false);
    ComposeDateProps(json, 'timingDate', TFhirDate(elem.timing), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(elem.value))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'reason', elem.reason); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitCareTeam(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitCareTeam(jsn : TJsonObject) : TFhirExplanationOfBenefitCareTeam;
begin
  result := TFhirExplanationOfBenefitCareTeam.create;
  try
    ParseExplanationOfBenefitCareTeamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitCareTeamProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitCareTeam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('provider') then
        result.provider := ParseReference{Resource}(jsn.vObj['provider']);{q3}
    if jsn.has('responsible') or jsn.has('_responsible') then
        result.responsibleElement := ParseBoolean(jsn['responsible'], jsn.vObj['_responsible']);{q}
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('qualification') then
        result.qualification := ParseCodeableConcept(jsn.vObj['qualification']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitCareTeam(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitCareTeam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'provider', elem.provider); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'responsible', elem.responsibleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'responsible', elem.responsibleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'qualification', elem.qualification); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitDiagnosis(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject) : TFhirExplanationOfBenefitDiagnosis;
begin
  result := TFhirExplanationOfBenefitDiagnosis.create;
  try
    ParseExplanationOfBenefitDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitDiagnosisProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitDiagnosis);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('diagnosisCodeableConcept') {a4} then
      result.diagnosis := ParseCodeableConcept(jsn.vObj['diagnosisCodeableConcept']);
    if jsn.has('diagnosisReference') {a3} then
      result.diagnosis := ParseReference(jsn.vObj['diagnosisReference']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('packageCode') then
        result.packageCode := ParseCodeableConcept(jsn.vObj['packageCode']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitDiagnosis(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitDiagnosis; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.diagnosis is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'diagnosisCodeableConcept', TFhirCodeableConcept(elem.diagnosis)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.diagnosis is TFhirReference) then
    ComposeReference(json, 'diagnosisReference', TFhirReference(elem.diagnosis));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'packageCode', elem.packageCode); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitProcedure(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitProcedure(jsn : TJsonObject) : TFhirExplanationOfBenefitProcedure;
begin
  result := TFhirExplanationOfBenefitProcedure.create;
  try
    ParseExplanationOfBenefitProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcedureProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitProcedure);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('procedureCodeableConcept') {a4} then
      result.procedure_ := ParseCodeableConcept(jsn.vObj['procedureCodeableConcept']);
    if jsn.has('procedureReference') {a3} then
      result.procedure_ := ParseReference(jsn.vObj['procedureReference']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitProcedure(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitProcedure; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.procedure_ is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'procedureCodeableConcept', TFhirCodeableConcept(elem.procedure_)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.procedure_ is TFhirReference) then
    ComposeReference(json, 'procedureReference', TFhirReference(elem.procedure_));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitInsurance(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitInsurance(jsn : TJsonObject) : TFhirExplanationOfBenefitInsurance;
begin
  result := TFhirExplanationOfBenefitInsurance.create;
  try
    ParseExplanationOfBenefitInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInsuranceProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitInsurance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
      if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
      iteratePrimitiveArray(jsn.vArr['preAuthRef'], jsn.vArr['_preAuthRef'], result.preAuthRefList, parseString);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitInsurance(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitInsurance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.preAuthRefList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.preAuthRefList.Count - 1 do
    begin
      ext := ext or ((elem.preAuthRefList[i].id <> '') or (elem.preAuthRefList[i].hasExtensionList) {no-comments or (elem.preAuthRefList[i].hasComments)});
      val := val or (elem.preAuthRefList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringValue(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringProps(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAccident(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitAccident(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitAccident(jsn : TJsonObject) : TFhirExplanationOfBenefitAccident;
begin
  result := TFhirExplanationOfBenefitAccident.create;
  try
    ParseExplanationOfBenefitAccidentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAccidentProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAccident);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDate(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('locationAddress') {a4} then
      result.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      result.location := ParseReference(jsn.vObj['locationReference']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitAccident(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAccident; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(elem.location)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(elem.location));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItem(jsn : TJsonObject) : TFhirExplanationOfBenefitItem;
begin
  result := TFhirExplanationOfBenefitItem.create;
  try
    ParseExplanationOfBenefitItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
      if jsn.has('careTeamSequence') or jsn.has('_careTeamSequence') then
      iteratePrimitiveArray(jsn.vArr['careTeamSequence'], jsn.vArr['_careTeamSequence'], result.careTeamSequenceList, parsePositiveInt);
      if jsn.has('diagnosisSequence') or jsn.has('_diagnosisSequence') then
      iteratePrimitiveArray(jsn.vArr['diagnosisSequence'], jsn.vArr['_diagnosisSequence'], result.diagnosisSequenceList, parsePositiveInt);
      if jsn.has('procedureSequence') or jsn.has('_procedureSequence') then
      iteratePrimitiveArray(jsn.vArr['procedureSequence'], jsn.vArr['_procedureSequence'], result.procedureSequenceList, parsePositiveInt);
      if jsn.has('informationSequence') or jsn.has('_informationSequence') then
      iteratePrimitiveArray(jsn.vArr['informationSequence'], jsn.vArr['_informationSequence'], result.informationSequenceList, parsePositiveInt);
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('servicedPeriod') {a4} then
      result.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      result.serviced := parseDate(jsn['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('locationCodeableConcept') {a4} then
      result.location := ParseCodeableConcept(jsn.vObj['locationCodeableConcept']);
    if jsn.has('locationAddress') {a4} then
      result.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      result.location := ParseReference(jsn.vObj['locationReference']);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := ParseDecimal(jsn['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('subSite') then
      iterateArray(jsn.vArr['subSite'], result.subSiteList, parseCodeableConcept);
    if jsn.has('encounter') then
      iterateArray(jsn.vArr['encounter'], result.encounterList, parseReference{TFhirEncounter});
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseExplanationOfBenefitItemDetail);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItem(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.careTeamSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.careTeamSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.careTeamSequenceList[i].id <> '') or (elem.careTeamSequenceList[i].hasExtensionList) {no-comments or (elem.careTeamSequenceList[i].hasComments)});
      val := val or (elem.careTeamSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('careTeamSequence');
      for i := 0 to elem.careTeamSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.careTeamSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_careTeamSequence');
      for i := 0 to elem.careTeamSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.careTeamSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.diagnosisSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.diagnosisSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.diagnosisSequenceList[i].id <> '') or (elem.diagnosisSequenceList[i].hasExtensionList) {no-comments or (elem.diagnosisSequenceList[i].hasComments)});
      val := val or (elem.diagnosisSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('diagnosisSequence');
      for i := 0 to elem.diagnosisSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.diagnosisSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_diagnosisSequence');
      for i := 0 to elem.diagnosisSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.diagnosisSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.procedureSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.procedureSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.procedureSequenceList[i].id <> '') or (elem.procedureSequenceList[i].hasExtensionList) {no-comments or (elem.procedureSequenceList[i].hasComments)});
      val := val or (elem.procedureSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('procedureSequence');
      for i := 0 to elem.procedureSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.procedureSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_procedureSequence');
      for i := 0 to elem.procedureSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.procedureSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.informationSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.informationSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.informationSequenceList[i].id <> '') or (elem.informationSequenceList[i].hasExtensionList) {no-comments or (elem.informationSequenceList[i].hasComments)});
      val := val or (elem.informationSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('informationSequence');
      for i := 0 to elem.informationSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.informationSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_informationSequence');
      for i := 0 to elem.informationSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.informationSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(elem.serviced)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(elem.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(elem.serviced), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'locationCodeableConcept', TFhirCodeableConcept(elem.location)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(elem.location)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(elem.location));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.subSiteList.Count > 0) then
  begin
    json.valueArray('subSite');
    for i := 0 to elem.subSiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subSiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.encounterList.Count > 0) then
  begin
    json.valueArray('encounter');
    for i := 0 to elem.encounterList.Count - 1 do
      ComposeReference{TFhirEncounter}(json, '', elem.encounterList[i]); {z - Reference(Encounter)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', elem.adjudicationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItemAdjudication(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject) : TFhirExplanationOfBenefitItemAdjudication;
begin
  result := TFhirExplanationOfBenefitItemAdjudication.create;
  try
    ParseExplanationOfBenefitItemAdjudicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemAdjudicationProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemAdjudication);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseDecimal(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItemAdjudication(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemAdjudication; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItemDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetail;
begin
  result := TFhirExplanationOfBenefitItemDetail.create;
  try
    ParseExplanationOfBenefitItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := ParseDecimal(jsn['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], result.subDetailList, parseExplanationOfBenefitItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItemDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ExplanationOfBenefit.item.adjudication}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.subDetailList.Count > 0) then
  begin
    json.valueArray('subDetail');
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetailSubDetail(json, '', elem.subDetailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItemDetailSubDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetailSubDetail;
begin
  result := TFhirExplanationOfBenefitItemDetailSubDetail.create;
  try
    ParseExplanationOfBenefitItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := ParseDecimal(jsn['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseExplanationOfBenefitItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ExplanationOfBenefit.item.adjudication}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitAddItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitAddItem(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItem;
begin
  result := TFhirExplanationOfBenefitAddItem.create;
  try
    ParseExplanationOfBenefitAddItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItemProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAddItem);
begin
    ParseBackboneElementProperties(jsn, result);
      if jsn.has('itemSequence') or jsn.has('_itemSequence') then
      iteratePrimitiveArray(jsn.vArr['itemSequence'], jsn.vArr['_itemSequence'], result.itemSequenceList, parsePositiveInt);
      if jsn.has('detailSequence') or jsn.has('_detailSequence') then
      iteratePrimitiveArray(jsn.vArr['detailSequence'], jsn.vArr['_detailSequence'], result.detailSequenceList, parsePositiveInt);
      if jsn.has('subDetailSequence') or jsn.has('_subDetailSequence') then
      iteratePrimitiveArray(jsn.vArr['subDetailSequence'], jsn.vArr['_subDetailSequence'], result.subDetailSequenceList, parsePositiveInt);
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('fee') then
        result.fee := ParseMoney(jsn.vObj['fee']);{q3}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseExplanationOfBenefitItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitAddItem(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAddItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.itemSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.itemSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.itemSequenceList[i].id <> '') or (elem.itemSequenceList[i].hasExtensionList) {no-comments or (elem.itemSequenceList[i].hasComments)});
      val := val or (elem.itemSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('itemSequence');
      for i := 0 to elem.itemSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.itemSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_itemSequence');
      for i := 0 to elem.itemSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.itemSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.detailSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.detailSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.detailSequenceList[i].id <> '') or (elem.detailSequenceList[i].hasExtensionList) {no-comments or (elem.detailSequenceList[i].hasComments)});
      val := val or (elem.detailSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('detailSequence');
      for i := 0 to elem.detailSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.detailSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_detailSequence');
      for i := 0 to elem.detailSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.detailSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.subDetailSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.subDetailSequenceList.Count - 1 do
    begin
      ext := ext or ((elem.subDetailSequenceList[i].id <> '') or (elem.subDetailSequenceList[i].hasExtensionList) {no-comments or (elem.subDetailSequenceList[i].hasComments)});
      val := val or (elem.subDetailSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('subDetailSequence');
      for i := 0 to elem.subDetailSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.subDetailSequenceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_subDetailSequence');
      for i := 0 to elem.subDetailSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.subDetailSequenceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'fee', elem.fee); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ExplanationOfBenefit.item.adjudication}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPayment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitPayment(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitPayment(jsn : TJsonObject) : TFhirExplanationOfBenefitPayment;
begin
  result := TFhirExplanationOfBenefitPayment.create;
  try
    ParseExplanationOfBenefitPaymentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPaymentProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitPayment);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('adjustment') then
        result.adjustment := ParseMoney(jsn.vObj['adjustment']);{q3}
    if jsn.has('adjustmentReason') then
        result.adjustmentReason := ParseCodeableConcept(jsn.vObj['adjustmentReason']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDate(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitPayment(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitPayment; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'adjustment', elem.adjustment); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'adjustmentReason', elem.adjustmentReason); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitProcessNote(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitProcessNote(jsn : TJsonObject) : TFhirExplanationOfBenefitProcessNote;
begin
  result := TFhirExplanationOfBenefitProcessNote.create;
  try
    ParseExplanationOfBenefitProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcessNoteProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitProcessNote);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('number') or jsn.has('_number') then
        result.numberElement := ParsePositiveInt(jsn['number'], jsn.vObj['_number']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
    if jsn.has('language') then
        result.language := ParseCodeableConcept(jsn.vObj['language']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitProcessNote(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitProcessNote; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'language', elem.language); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitBenefitBalance(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalance;
begin
  result := TFhirExplanationOfBenefitBenefitBalance.create;
  try
    ParseExplanationOfBenefitBenefitBalanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitBenefitBalance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('subCategory') then
        result.subCategory := ParseCodeableConcept(jsn.vObj['subCategory']);{q3}
    if jsn.has('excluded') or jsn.has('_excluded') then
        result.excludedElement := ParseBoolean(jsn['excluded'], jsn.vObj['_excluded']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('network') then
        result.network := ParseCodeableConcept(jsn.vObj['network']);{q3}
    if jsn.has('unit') then
        result.unit_ := ParseCodeableConcept(jsn.vObj['unit']);{q3}
    if jsn.has('term') then
        result.term := ParseCodeableConcept(jsn.vObj['term']);{q3}
    if jsn.has('financial') then
      iterateArray(jsn.vArr['financial'], result.financialList, parseExplanationOfBenefitBenefitBalanceFinancial);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitBenefitBalance(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitBenefitBalance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subCategory', elem.subCategory); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'excluded', elem.excludedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'excluded', elem.excludedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'network', elem.network); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'unit', elem.unit_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'term', elem.term); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.financialList.Count > 0) then
  begin
    json.valueArray('financial');
    for i := 0 to elem.financialList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalanceFinancial(json, '', elem.financialList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitBenefitBalanceFinancial(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalanceFinancial;
begin
  result := TFhirExplanationOfBenefitBenefitBalanceFinancial.create;
  try
    ParseExplanationOfBenefitBenefitBalanceFinancialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceFinancialProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitBenefitBalanceFinancial);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('allowedUnsignedInt') or jsn.has('_allowedUnsignedInt') then
      result.allowed := parseUnsignedInt(jsn['allowedUnsignedInt'], jsn.vObj['_allowedUnsignedInt']);
    if jsn.has('allowedMoney') {a4} then
      result.allowed := ParseMoney(jsn.vObj['allowedMoney']);
    if jsn.has('allowedString') or jsn.has('_allowedString') then
      result.allowed := parseString(jsn['allowedString'], jsn.vObj['_allowedString']);
    if jsn.has('usedUnsignedInt') or jsn.has('_usedUnsignedInt') then
      result.used := parseUnsignedInt(jsn['usedUnsignedInt'], jsn.vObj['_usedUnsignedInt']);
    if jsn.has('usedMoney') {a4} then
      result.used := ParseMoney(jsn.vObj['usedMoney']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitBenefitBalanceFinancial(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitBenefitBalanceFinancial; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed), false);
    ComposeUnsignedIntProps(json, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirMoney) then 
    ComposeMoney(json, 'allowedMoney', TFhirMoney(elem.allowed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirString) then 
  begin
    ComposeStringValue(json, 'allowedString', TFhirString(elem.allowed), false);
    ComposeStringProps(json, 'allowedString', TFhirString(elem.allowed), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.used is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'usedUnsignedInt', TFhirUnsignedInt(elem.used), false);
    ComposeUnsignedIntProps(json, 'usedUnsignedInt', TFhirUnsignedInt(elem.used), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.used is TFhirMoney) then 
    ComposeMoney(json, 'usedMoney', TFhirMoney(elem.used)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefit(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefit(jsn : TJsonObject) : TFhirExplanationOfBenefit;
begin
  result := TFhirExplanationOfBenefit.create;
  try
    ParseExplanationOfBenefitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefit);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirExplanationofbenefitStatusEnum, SYSTEMS_TFhirExplanationofbenefitStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subType') then
      iterateArray(jsn.vArr['subType'], result.subTypeList, parseCodeableConcept);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('billablePeriod') then
        result.billablePeriod := ParsePeriod(jsn.vObj['billablePeriod']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('enterer') then
        result.enterer := ParseReference{TFhirPractitioner}(jsn.vObj['enterer']);{q3}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('referral') then
        result.referral := ParseReference{TFhirServiceRequest}(jsn.vObj['referral']);{q3}
    if jsn.has('facility') then
        result.facility := ParseReference{TFhirLocation}(jsn.vObj['facility']);{q3}
    if jsn.has('claim') then
        result.claim := ParseReference{TFhirClaim}(jsn.vObj['claim']);{q3}
    if jsn.has('claimResponse') then
        result.claimResponse := ParseReference{TFhirClaimResponse}(jsn.vObj['claimResponse']);{q3}
    if jsn.has('outcome') or jsn.has('_outcome')  then
      result.outcomeElement := parseEnum(jsn.path+'/outcome', jsn['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := ParseString(jsn['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], result.relatedList, parseExplanationOfBenefitRelated);
    if jsn.has('prescription') then
        result.prescription := ParseReference{Resource}(jsn.vObj['prescription']);{q3}
    if jsn.has('originalPrescription') then
        result.originalPrescription := ParseReference{TFhirMedicationRequest}(jsn.vObj['originalPrescription']);{q3}
    if jsn.has('payee') then
        result.payee := ParseExplanationOfBenefitPayee(jsn.vObj['payee']);{q3}
    if jsn.has('information') then
      iterateArray(jsn.vArr['information'], result.informationList, parseExplanationOfBenefitInformation);
    if jsn.has('careTeam') then
      iterateArray(jsn.vArr['careTeam'], result.careTeamList, parseExplanationOfBenefitCareTeam);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], result.diagnosisList, parseExplanationOfBenefitDiagnosis);
    if jsn.has('procedure') then
      iterateArray(jsn.vArr['procedure'], result.procedure_List, parseExplanationOfBenefitProcedure);
    if jsn.has('precedence') or jsn.has('_precedence') then
        result.precedenceElement := ParsePositiveInt(jsn['precedence'], jsn.vObj['_precedence']);{q}
    if jsn.has('insurance') then
        result.insurance := ParseExplanationOfBenefitInsurance(jsn.vObj['insurance']);{q3}
    if jsn.has('accident') then
        result.accident := ParseExplanationOfBenefitAccident(jsn.vObj['accident']);{q3}
    if jsn.has('employmentImpacted') then
        result.employmentImpacted := ParsePeriod(jsn.vObj['employmentImpacted']);{q3}
    if jsn.has('hospitalization') then
        result.hospitalization := ParsePeriod(jsn.vObj['hospitalization']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseExplanationOfBenefitItem);
    if jsn.has('addItem') then
      iterateArray(jsn.vArr['addItem'], result.addItemList, parseExplanationOfBenefitAddItem);
    if jsn.has('totalCost') then
        result.totalCost := ParseMoney(jsn.vObj['totalCost']);{q3}
    if jsn.has('unallocDeductable') then
        result.unallocDeductable := ParseMoney(jsn.vObj['unallocDeductable']);{q3}
    if jsn.has('totalBenefit') then
        result.totalBenefit := ParseMoney(jsn.vObj['totalBenefit']);{q3}
    if jsn.has('payment') then
        result.payment := ParseExplanationOfBenefitPayment(jsn.vObj['payment']);{q3}
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], result.processNoteList, parseExplanationOfBenefitProcessNote);
    if jsn.has('benefitBalance') then
      iterateArray(jsn.vArr['benefitBalance'], result.benefitBalanceList, parseExplanationOfBenefitBenefitBalance);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefit(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefit; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirExplanationofbenefitStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirExplanationofbenefitStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('subType') and (SummaryOption in [soFull, soData]) and (elem.subTypeList.Count > 0) then
  begin
    json.valueArray('subType');
    for i := 0 to elem.subTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('billablePeriod') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'billablePeriod', elem.billablePeriod); {a}
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('enterer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'enterer', elem.enterer); {a}
  if not elem.noCompose and doCompose('insurer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if not elem.noCompose and doCompose('provider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('referral') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirServiceRequest}(json, 'referral', elem.referral); {a}
  if not elem.noCompose and doCompose('facility') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'facility', elem.facility); {a}
  if not elem.noCompose and doCompose('claim') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaim}(json, 'claim', elem.claim); {a}
  if not elem.noCompose and doCompose('claimResponse') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaimResponse}(json, 'claimResponse', elem.claimResponse); {a}
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('related') and (SummaryOption in [soFull, soData]) and (elem.relatedList.Count > 0) then
  begin
    json.valueArray('related');
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeExplanationOfBenefitRelated(json, '', elem.relatedList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('prescription') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'prescription', elem.prescription); {a}
  if not elem.noCompose and doCompose('originalPrescription') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirMedicationRequest}(json, 'originalPrescription', elem.originalPrescription); {a}
  if not elem.noCompose and doCompose('payee') and (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitPayee(json, 'payee', elem.payee); {a}
  if not elem.noCompose and doCompose('information') and (SummaryOption in [soFull, soData]) and (elem.informationList.Count > 0) then
  begin
    json.valueArray('information');
    for i := 0 to elem.informationList.Count - 1 do
      ComposeExplanationOfBenefitInformation(json, '', elem.informationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('careTeam') and (SummaryOption in [soFull, soData]) and (elem.careTeamList.Count > 0) then
  begin
    json.valueArray('careTeam');
    for i := 0 to elem.careTeamList.Count - 1 do
      ComposeExplanationOfBenefitCareTeam(json, '', elem.careTeamList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('diagnosis') and (SummaryOption in [soFull, soData]) and (elem.diagnosisList.Count > 0) then
  begin
    json.valueArray('diagnosis');
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeExplanationOfBenefitDiagnosis(json, '', elem.diagnosisList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('procedure_') and (SummaryOption in [soFull, soData]) and (elem.procedure_List.Count > 0) then
  begin
    json.valueArray('procedure');
    for i := 0 to elem.procedure_List.Count - 1 do
      ComposeExplanationOfBenefitProcedure(json, '', elem.procedure_List[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('precedence') and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'precedence', elem.precedenceElement, false);
  if not elem.noCompose and doCompose('precedence') and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'precedence', elem.precedenceElement, false);
  if not elem.noCompose and doCompose('insurance') and (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitInsurance(json, 'insurance', elem.insurance); {a}
  if not elem.noCompose and doCompose('accident') and (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitAccident(json, 'accident', elem.accident); {a}
  if not elem.noCompose and doCompose('employmentImpacted') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'employmentImpacted', elem.employmentImpacted); {a}
  if not elem.noCompose and doCompose('hospitalization') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'hospitalization', elem.hospitalization); {a}
  if not elem.noCompose and doCompose('item') and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeExplanationOfBenefitItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('addItem') and (SummaryOption in [soFull, soData]) and (elem.addItemList.Count > 0) then
  begin
    json.valueArray('addItem');
    for i := 0 to elem.addItemList.Count - 1 do
      ComposeExplanationOfBenefitAddItem(json, '', elem.addItemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('totalCost') and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'totalCost', elem.totalCost); {a}
  if not elem.noCompose and doCompose('unallocDeductable') and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unallocDeductable', elem.unallocDeductable); {a}
  if not elem.noCompose and doCompose('totalBenefit') and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'totalBenefit', elem.totalBenefit); {a}
  if not elem.noCompose and doCompose('payment') and (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitPayment(json, 'payment', elem.payment); {a}
  if not elem.noCompose and doCompose('form') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if not elem.noCompose and doCompose('processNote') and (SummaryOption in [soFull, soData]) and (elem.processNoteList.Count > 0) then
  begin
    json.valueArray('processNote');
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposeExplanationOfBenefitProcessNote(json, '', elem.processNoteList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('benefitBalance') and (SummaryOption in [soFull, soData]) and (elem.benefitBalanceList.Count > 0) then
  begin
    json.valueArray('benefitBalance');
    for i := 0 to elem.benefitBalanceList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalance(json, '', elem.benefitBalanceList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
procedure TFHIRJsonParser.ParseFamilyMemberHistoryCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseFamilyMemberHistoryCondition(jsn)); {2}
end;

function TFHIRJsonParser.ParseFamilyMemberHistoryCondition(jsn : TJsonObject) : TFhirFamilyMemberHistoryCondition;
begin
  result := TFhirFamilyMemberHistoryCondition.create;
  try
    ParseFamilyMemberHistoryConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseFamilyMemberHistoryConditionProperties(jsn : TJsonObject; result : TFhirFamilyMemberHistoryCondition);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('onsetAge') {a4} then
      result.onset := ParseAge(jsn.vObj['onsetAge']);
    if jsn.has('onsetRange') {a4} then
      result.onset := ParseRange(jsn.vObj['onsetRange']);
    if jsn.has('onsetPeriod') {a4} then
      result.onset := ParsePeriod(jsn.vObj['onsetPeriod']);
    if jsn.has('onsetString') or jsn.has('_onsetString') then
      result.onset := parseString(jsn['onsetString'], jsn.vObj['_onsetString']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeFamilyMemberHistoryCondition(json : TJSONWriter; name : string; elem : TFhirFamilyMemberHistoryCondition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onset is TFhirAge) then 
    ComposeAge(json, 'onsetAge', TFhirAge(elem.onset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onset is TFhirRange) then 
    ComposeRange(json, 'onsetRange', TFhirRange(elem.onset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onset is TFhirPeriod) then 
    ComposePeriod(json, 'onsetPeriod', TFhirPeriod(elem.onset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onset is TFhirString) then 
  begin
    ComposeStringValue(json, 'onsetString', TFhirString(elem.onset), false);
    ComposeStringProps(json, 'onsetString', TFhirString(elem.onset), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseFamilyMemberHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseFamilyMemberHistory(jsn)); {2}
end;

function TFHIRJsonParser.ParseFamilyMemberHistory(jsn : TJsonObject) : TFhirFamilyMemberHistory;
begin
  result := TFhirFamilyMemberHistory.create;
  try
    ParseFamilyMemberHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseFamilyMemberHistoryProperties(jsn : TJsonObject; result : TFhirFamilyMemberHistory);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirHistoryStatusEnum, SYSTEMS_TFhirHistoryStatusEnum);
    if jsn.has('dataAbsentReason') then
        result.dataAbsentReason := ParseCodeableConcept(jsn.vObj['dataAbsentReason']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('bornPeriod') {a4} then
      result.born := ParsePeriod(jsn.vObj['bornPeriod']);
    if jsn.has('bornDate') or jsn.has('_bornDate') then
      result.born := parseDate(jsn['bornDate'], jsn.vObj['_bornDate']);
    if jsn.has('bornString') or jsn.has('_bornString') then
      result.born := parseString(jsn['bornString'], jsn.vObj['_bornString']);
    if jsn.has('ageAge') {a4} then
      result.age := ParseAge(jsn.vObj['ageAge']);
    if jsn.has('ageRange') {a4} then
      result.age := ParseRange(jsn.vObj['ageRange']);
    if jsn.has('ageString') or jsn.has('_ageString') then
      result.age := parseString(jsn['ageString'], jsn.vObj['_ageString']);
    if jsn.has('estimatedAge') or jsn.has('_estimatedAge') then
        result.estimatedAgeElement := ParseBoolean(jsn['estimatedAge'], jsn.vObj['_estimatedAge']);{q}
    if jsn.has('deceasedAge') {a4} then
      result.deceased := ParseAge(jsn.vObj['deceasedAge']);
    if jsn.has('deceasedRange') {a4} then
      result.deceased := ParseRange(jsn.vObj['deceasedRange']);
    if jsn.has('deceasedBoolean') or jsn.has('_deceasedBoolean') then
      result.deceased := parseBoolean(jsn['deceasedBoolean'], jsn.vObj['_deceasedBoolean']);
    if jsn.has('deceasedDate') or jsn.has('_deceasedDate') then
      result.deceased := parseDate(jsn['deceasedDate'], jsn.vObj['_deceasedDate']);
    if jsn.has('deceasedString') or jsn.has('_deceasedString') then
      result.deceased := parseString(jsn['deceasedString'], jsn.vObj['_deceasedString']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], result.conditionList, parseFamilyMemberHistoryCondition);
end;

procedure TFHIRJsonComposer.ComposeFamilyMemberHistory(json : TJSONWriter; name : string; elem : TFhirFamilyMemberHistory; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('instantiates') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirHistoryStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirHistoryStatusEnum, false);
  if not elem.noCompose and doCompose('dataAbsentReason') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'dataAbsentReason', elem.dataAbsentReason); {a}
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('relationship') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.born is TFhirPeriod) then 
    ComposePeriod(json, 'bornPeriod', TFhirPeriod(elem.born)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.born is TFhirDate) then 
  begin
    ComposeDateValue(json, 'bornDate', TFhirDate(elem.born), false);
    ComposeDateProps(json, 'bornDate', TFhirDate(elem.born), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.born is TFhirString) then 
  begin
    ComposeStringValue(json, 'bornString', TFhirString(elem.born), false);
    ComposeStringProps(json, 'bornString', TFhirString(elem.born), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirAge) then 
    ComposeAge(json, 'ageAge', TFhirAge(elem.age)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirRange) then 
    ComposeRange(json, 'ageRange', TFhirRange(elem.age)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirString) then 
  begin
    ComposeStringValue(json, 'ageString', TFhirString(elem.age), false);
    ComposeStringProps(json, 'ageString', TFhirString(elem.age), false);
  end;
  if not elem.noCompose and doCompose('estimatedAge') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'estimatedAge', elem.estimatedAgeElement, false);
  if not elem.noCompose and doCompose('estimatedAge') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'estimatedAge', elem.estimatedAgeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirAge) then 
    ComposeAge(json, 'deceasedAge', TFhirAge(elem.deceased)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirRange) then 
    ComposeRange(json, 'deceasedRange', TFhirRange(elem.deceased)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'deceasedBoolean', TFhirBoolean(elem.deceased), false);
    ComposeBooleanProps(json, 'deceasedBoolean', TFhirBoolean(elem.deceased), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirDate) then 
  begin
    ComposeDateValue(json, 'deceasedDate', TFhirDate(elem.deceased), false);
    ComposeDateProps(json, 'deceasedDate', TFhirDate(elem.deceased), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirString) then 
  begin
    ComposeStringValue(json, 'deceasedString', TFhirString(elem.deceased), false);
    ComposeStringProps(json, 'deceasedString', TFhirString(elem.deceased), false);
  end;
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|AllergyIntolerance|QuestionnaireResponse|DiagnosticReport|DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('condition') and (SummaryOption in [soFull, soData]) and (elem.conditionList.Count > 0) then
  begin
    json.valueArray('condition');
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeFamilyMemberHistoryCondition(json, '', elem.conditionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
procedure TFHIRJsonParser.ParseFlag(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseFlag(jsn)); {2}
end;

function TFHIRJsonParser.ParseFlag(jsn : TJsonObject) : TFhirFlag;
begin
  result := TFhirFlag.create;
  try
    ParseFlagProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseFlagProperties(jsn : TJsonObject; result : TFhirFlag);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFlagStatusEnum, SYSTEMS_TFhirFlagStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
end;

procedure TFHIRJsonComposer.ComposeFlag(json : TJSONWriter; name : string; elem : TFhirFlag; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFlagStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFlagStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('encounter') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
end;

{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
procedure TFHIRJsonParser.ParseGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGoalTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParseGoalTarget(jsn : TJsonObject) : TFhirGoalTarget;
begin
  result := TFhirGoalTarget.create;
  try
    ParseGoalTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGoalTargetProperties(jsn : TJsonObject; result : TFhirGoalTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('measure') then
        result.measure := ParseCodeableConcept(jsn.vObj['measure']);{q3}
    if jsn.has('detailQuantity') {a4} then
      result.detail := ParseQuantity(jsn.vObj['detailQuantity']);
    if jsn.has('detailRange') {a4} then
      result.detail := ParseRange(jsn.vObj['detailRange']);
    if jsn.has('detailCodeableConcept') {a4} then
      result.detail := ParseCodeableConcept(jsn.vObj['detailCodeableConcept']);
    if jsn.has('dueDuration') {a4} then
      result.due := ParseDuration(jsn.vObj['dueDuration']);
    if jsn.has('dueDate') or jsn.has('_dueDate') then
      result.due := parseDate(jsn['dueDate'], jsn.vObj['_dueDate']);
end;

procedure TFHIRJsonComposer.ComposeGoalTarget(json : TJSONWriter; name : string; elem : TFhirGoalTarget; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'measure', elem.measure); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirQuantity) then 
    ComposeQuantity(json, 'detailQuantity', TFhirQuantity(elem.detail)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirRange) then 
    ComposeRange(json, 'detailRange', TFhirRange(elem.detail)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'detailCodeableConcept', TFhirCodeableConcept(elem.detail)) ;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.due is TFhirDuration) then 
    ComposeDuration(json, 'dueDuration', TFhirDuration(elem.due)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.due is TFhirDate) then 
  begin
    ComposeDateValue(json, 'dueDate', TFhirDate(elem.due), false);
    ComposeDateProps(json, 'dueDate', TFhirDate(elem.due), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGoal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGoal(jsn)); {2}
end;

function TFHIRJsonParser.ParseGoal(jsn : TJsonObject) : TFhirGoal;
begin
  result := TFhirGoal.create;
  try
    ParseGoalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGoalProperties(jsn : TJsonObject; result : TFhirGoal);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirGoalStatusEnum, SYSTEMS_TFhirGoalStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('description') then
        result.description := ParseCodeableConcept(jsn.vObj['description']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('startCodeableConcept') {a4} then
      result.start := ParseCodeableConcept(jsn.vObj['startCodeableConcept']);
    if jsn.has('startDate') or jsn.has('_startDate') then
      result.start := parseDate(jsn['startDate'], jsn.vObj['_startDate']);
    if jsn.has('target') then
        result.target := ParseGoalTarget(jsn.vObj['target']);{q3}
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        result.statusDateElement := ParseDate(jsn['statusDate'], jsn.vObj['_statusDate']);{q}
    if jsn.has('statusReason') or jsn.has('_statusReason') then
        result.statusReasonElement := ParseString(jsn['statusReason'], jsn.vObj['_statusReason']);{q}
    if jsn.has('expressedBy') then
        result.expressedBy := ParseReference{Resource}(jsn.vObj['expressedBy']);{q3}
    if jsn.has('addresses') then
      iterateArray(jsn.vArr['addresses'], result.addressesList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('outcomeCode') then
      iterateArray(jsn.vArr['outcomeCode'], result.outcomeCodeList, parseCodeableConcept);
    if jsn.has('outcomeReference') then
      iterateArray(jsn.vArr['outcomeReference'], result.outcomeReferenceList, parseReference{TFhirObservation});
end;

procedure TFHIRJsonComposer.ComposeGoal(json : TJSONWriter; name : string; elem : TFhirGoal; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirGoalStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirGoalStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'description', elem.description); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.start is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'startCodeableConcept', TFhirCodeableConcept(elem.start)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.start is TFhirDate) then 
  begin
    ComposeDateValue(json, 'startDate', TFhirDate(elem.start), false);
    ComposeDateProps(json, 'startDate', TFhirDate(elem.start), false);
  end;
  if not elem.noCompose and doCompose('target') and (SummaryOption in [soFull, soData]) then
    ComposeGoalTarget(json, 'target', elem.target); {a}
  if not elem.noCompose and doCompose('statusDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and doCompose('statusDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and doCompose('statusReason') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'statusReason', elem.statusReasonElement, false);
  if not elem.noCompose and doCompose('statusReason') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'statusReason', elem.statusReasonElement, false);
  if not elem.noCompose and doCompose('expressedBy') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'expressedBy', elem.expressedBy); {a}
  if not elem.noCompose and doCompose('addresses') and (SummaryOption in [soFull, soData]) and (elem.addressesList.Count > 0) then
  begin
    json.valueArray('addresses');
    for i := 0 to elem.addressesList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.addressesList[i]); {z - Reference(Condition|Observation|MedicationStatement|NutritionOrder|ServiceRequest|RiskAssessment)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('outcomeCode') and (SummaryOption in [soFull, soData]) and (elem.outcomeCodeList.Count > 0) then
  begin
    json.valueArray('outcomeCode');
    for i := 0 to elem.outcomeCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.outcomeCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('outcomeReference') and (SummaryOption in [soFull, soData]) and (elem.outcomeReferenceList.Count > 0) then
  begin
    json.valueArray('outcomeReference');
    for i := 0 to elem.outcomeReferenceList.Count - 1 do
      ComposeReference{TFhirObservation}(json, '', elem.outcomeReferenceList[i]); {z - Reference(Observation)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
procedure TFHIRJsonParser.ParseGraphDefinitionLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinitionLink(jsn)); {2}
end;

function TFHIRJsonParser.ParseGraphDefinitionLink(jsn : TJsonObject) : TFhirGraphDefinitionLink;
begin
  result := TFhirGraphDefinitionLink.create;
  try
    ParseGraphDefinitionLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
    if jsn.has('sliceName') or jsn.has('_sliceName') then
        result.sliceNameElement := ParseString(jsn['sliceName'], jsn.vObj['_sliceName']);{q}
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := ParseInteger(jsn['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := ParseString(jsn['max'], jsn.vObj['_max']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseGraphDefinitionLinkTarget);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinitionLink(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLink; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'sliceName', elem.sliceNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'sliceName', elem.sliceNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeGraphDefinitionLinkTarget(json, '', elem.targetList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinitionLinkTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParseGraphDefinitionLinkTarget(jsn : TJsonObject) : TFhirGraphDefinitionLinkTarget;
begin
  result := TFhirGraphDefinitionLinkTarget.create;
  try
    ParseGraphDefinitionLinkTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTargetProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLinkTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('params') or jsn.has('_params') then
        result.paramsElement := ParseString(jsn['params'], jsn.vObj['_params']);{q}
    if jsn.has('profile') or jsn.has('_profile') then
        result.profileElement := ParseUri(jsn['profile'], jsn.vObj['_profile']);{q}
    if jsn.has('compartment') then
      iterateArray(jsn.vArr['compartment'], result.compartmentList, parseGraphDefinitionLinkTargetCompartment);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseGraphDefinitionLink);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinitionLinkTarget(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLinkTarget; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'params', elem.paramsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'params', elem.paramsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'profile', elem.profileElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'profile', elem.profileElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.compartmentList.Count > 0) then
  begin
    json.valueArray('compartment');
    for i := 0 to elem.compartmentList.Count - 1 do
      ComposeGraphDefinitionLinkTargetCompartment(json, '', elem.compartmentList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeGraphDefinitionLink(json, '', elem.link_List[i]); {z - @GraphDefinition.link}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinitionLinkTargetCompartment(jsn)); {2}
end;

function TFHIRJsonParser.ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject) : TFhirGraphDefinitionLinkTargetCompartment;
begin
  result := TFhirGraphDefinitionLinkTargetCompartment.create;
  try
    ParseGraphDefinitionLinkTargetCompartmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTargetCompartmentProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLinkTargetCompartment);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn['use'], jsn.vObj['_use'], CODES_TFhirGraphCompartmentUseEnum, SYSTEMS_TFhirGraphCompartmentUseEnum);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum);
    if jsn.has('rule') or jsn.has('_rule')  then
      result.ruleElement := parseEnum(jsn.path+'/rule', jsn['rule'], jsn.vObj['_rule'], CODES_TFhirGraphCompartmentRuleEnum, SYSTEMS_TFhirGraphCompartmentRuleEnum);
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeGraphDefinitionLinkTargetCompartment(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLinkTargetCompartment; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirGraphCompartmentUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirGraphCompartmentUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'rule', elem.RuleElement, CODES_TFhirGraphCompartmentRuleEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'rule', elem.RuleElement, CODES_TFhirGraphCompartmentRuleEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGraphDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseGraphDefinition(jsn : TJsonObject) : TFhirGraphDefinition;
begin
  result := TFhirGraphDefinition.create;
  try
    ParseGraphDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionProperties(jsn : TJsonObject; result : TFhirGraphDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('start') or jsn.has('_start')  then
      result.startElement := parseEnum(jsn.path+'/start', jsn['start'], jsn.vObj['_start'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') or jsn.has('_profile') then
        result.profileElement := ParseUri(jsn['profile'], jsn.vObj['_profile']);{q}
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseGraphDefinitionLink);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinition(json : TJSONWriter; name : string; elem : TFhirGraphDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('start') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'start', elem.StartElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and doCompose('start') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'start', elem.StartElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and doCompose('profile') and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'profile', elem.profileElement, false);
  if not elem.noCompose and doCompose('profile') and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'profile', elem.profileElement, false);
  if not elem.noCompose and doCompose('link_') and (SummaryOption in [soFull, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeGraphDefinitionLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
procedure TFHIRJsonParser.ParseGroupCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGroupCharacteristic(jsn)); {2}
end;

function TFHIRJsonParser.ParseGroupCharacteristic(jsn : TJsonObject) : TFhirGroupCharacteristic;
begin
  result := TFhirGroupCharacteristic.create;
  try
    ParseGroupCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGroupCharacteristicProperties(jsn : TJsonObject; result : TFhirGroupCharacteristic);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('exclude') or jsn.has('_exclude') then
        result.excludeElement := ParseBoolean(jsn['exclude'], jsn.vObj['_exclude']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeGroupCharacteristic(json : TJSONWriter; name : string; elem : TFhirGroupCharacteristic; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'exclude', elem.excludeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'exclude', elem.excludeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGroupMember(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGroupMember(jsn)); {2}
end;

function TFHIRJsonParser.ParseGroupMember(jsn : TJsonObject) : TFhirGroupMember;
begin
  result := TFhirGroupMember.create;
  try
    ParseGroupMemberProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGroupMemberProperties(jsn : TJsonObject; result : TFhirGroupMember);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('entity') then
        result.entity := ParseReference{Resource}(jsn.vObj['entity']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('inactive') or jsn.has('_inactive') then
        result.inactiveElement := ParseBoolean(jsn['inactive'], jsn.vObj['_inactive']);{q}
end;

procedure TFHIRJsonComposer.ComposeGroupMember(json : TJSONWriter; name : string; elem : TFhirGroupMember; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'entity', elem.entity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and (not isCanonical or (elem.inactive <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'inactive', elem.inactiveElement, false);
  if not elem.noCompose and (not isCanonical or (elem.inactive <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'inactive', elem.inactiveElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseGroup(jsn : TJsonObject) : TFhirGroup;
begin
  result := TFhirGroup.create;
  try
    ParseGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGroupProperties(jsn : TJsonObject; result : TFhirGroup);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirGroupTypeEnum, SYSTEMS_TFhirGroupTypeEnum);
    if jsn.has('actual') or jsn.has('_actual') then
        result.actualElement := ParseBoolean(jsn['actual'], jsn.vObj['_actual']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('quantity') or jsn.has('_quantity') then
        result.quantityElement := ParseUnsignedInt(jsn['quantity'], jsn.vObj['_quantity']);{q}
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], result.characteristicList, parseGroupCharacteristic);
    if jsn.has('member') then
      iterateArray(jsn.vArr['member'], result.memberList, parseGroupMember);
end;

procedure TFHIRJsonComposer.ComposeGroup(json : TJSONWriter; name : string; elem : TFhirGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirGroupTypeEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirGroupTypeEnum, false);
  if not elem.noCompose and doCompose('actual') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'actual', elem.actualElement, false);
  if not elem.noCompose and doCompose('actual') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'actual', elem.actualElement, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'quantity', elem.quantityElement, false);
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'quantity', elem.quantityElement, false);
  if not elem.noCompose and doCompose('characteristic') and (SummaryOption in [soFull, soData]) and (elem.characteristicList.Count > 0) then
  begin
    json.valueArray('characteristic');
    for i := 0 to elem.characteristicList.Count - 1 do
      ComposeGroupCharacteristic(json, '', elem.characteristicList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('member') and (SummaryOption in [soFull, soData]) and (elem.memberList.Count > 0) then
  begin
    json.valueArray('member');
    for i := 0 to elem.memberList.Count - 1 do
      ComposeGroupMember(json, '', elem.memberList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
procedure TFHIRJsonParser.ParseGuidanceResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGuidanceResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseGuidanceResponse(jsn : TJsonObject) : TFhirGuidanceResponse;
begin
  result := TFhirGuidanceResponse.create;
  try
    ParseGuidanceResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGuidanceResponseProperties(jsn : TJsonObject; result : TFhirGuidanceResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('requestId') or jsn.has('_requestId') then
        result.requestIdElement := ParseId(jsn['requestId'], jsn.vObj['_requestId']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('module') then
        result.module := ParseReference{TFhirServiceDefinition}(jsn.vObj['module']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirGuidanceResponseStatusEnum, SYSTEMS_TFhirGuidanceResponseStatusEnum);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
        result.occurrenceDateTimeElement := ParseDateTime(jsn['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);{q}
    if jsn.has('performer') then
        result.performer := ParseReference{TFhirDevice}(jsn.vObj['performer']);{q3}
    if jsn.has('reasonCodeableConcept') {a4} then
      result.reason := ParseCodeableConcept(jsn.vObj['reasonCodeableConcept']);
    if jsn.has('reasonReference') {a3} then
      result.reason := ParseReference(jsn.vObj['reasonReference']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('evaluationMessage') then
      iterateArray(jsn.vArr['evaluationMessage'], result.evaluationMessageList, parseReference{TFhirOperationOutcome});
    if jsn.has('outputParameters') then
        result.outputParameters := ParseReference{TFhirParameters}(jsn.vObj['outputParameters']);{q3}
    if jsn.has('result') then
        result.result := ParseReference{Resource}(jsn.vObj['result']);{q3}
    if jsn.has('dataRequirement') then
      iterateArray(jsn.vArr['dataRequirement'], result.dataRequirementList, parseDataRequirement);
end;

procedure TFHIRJsonComposer.ComposeGuidanceResponse(json : TJSONWriter; name : string; elem : TFhirGuidanceResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('requestId') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'requestId', elem.requestIdElement, false);
  if not elem.noCompose and doCompose('requestId') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'requestId', elem.requestIdElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('module') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirServiceDefinition}(json, 'module', elem.module); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirGuidanceResponseStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirGuidanceResponseStatusEnum, false);
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('occurrenceDateTime') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'occurrenceDateTime', elem.occurrenceDateTimeElement, false);
  if not elem.noCompose and doCompose('occurrenceDateTime') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'occurrenceDateTime', elem.occurrenceDateTimeElement, false);
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirDevice}(json, 'performer', elem.performer); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'reasonCodeableConcept', TFhirCodeableConcept(elem.reason)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reason is TFhirReference) then
    ComposeReference(json, 'reasonReference', TFhirReference(elem.reason));
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('evaluationMessage') and (SummaryOption in [soFull, soData]) and (elem.evaluationMessageList.Count > 0) then
  begin
    json.valueArray('evaluationMessage');
    for i := 0 to elem.evaluationMessageList.Count - 1 do
      ComposeReference{TFhirOperationOutcome}(json, '', elem.evaluationMessageList[i]); {z - Reference(OperationOutcome)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('outputParameters') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirParameters}(json, 'outputParameters', elem.outputParameters); {a}
  if not elem.noCompose and doCompose('result') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'result', elem.result); {a}
  if not elem.noCompose and doCompose('dataRequirement') and (SummaryOption in [soFull, soData]) and (elem.dataRequirementList.Count > 0) then
  begin
    json.valueArray('dataRequirement');
    for i := 0 to elem.dataRequirementList.Count - 1 do
      ComposeDataRequirement(json, '', elem.dataRequirementList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
procedure TFHIRJsonParser.ParseHealthcareServiceAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareServiceAvailableTime(jsn)); {2}
end;

function TFHIRJsonParser.ParseHealthcareServiceAvailableTime(jsn : TJsonObject) : TFhirHealthcareServiceAvailableTime;
begin
  result := TFhirHealthcareServiceAvailableTime.create;
  try
    ParseHealthcareServiceAvailableTimeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceAvailableTimeProperties(jsn : TJsonObject; result : TFhirHealthcareServiceAvailableTime);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('daysOfWeek') or jsn.has('_daysOfWeek') then
      iterateEnumArray(jsn.vArr['daysOfWeek'], jsn.vArr['_daysOfWeek'], jsn.path+'/daysOfWeek', result.daysOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
    if jsn.has('allDay') or jsn.has('_allDay') then
        result.allDayElement := ParseBoolean(jsn['allDay'], jsn.vObj['_allDay']);{q}
    if jsn.has('availableStartTime') or jsn.has('_availableStartTime') then
        result.availableStartTimeElement := ParseTime(jsn['availableStartTime'], jsn.vObj['_availableStartTime']);{q}
    if jsn.has('availableEndTime') or jsn.has('_availableEndTime') then
        result.availableEndTimeElement := ParseTime(jsn['availableEndTime'], jsn.vObj['_availableEndTime']);{q}
end;

procedure TFHIRJsonComposer.ComposeHealthcareServiceAvailableTime(json : TJSONWriter; name : string; elem : TFhirHealthcareServiceAvailableTime; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.daysOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.daysOfWeekList.Count - 1 do
    begin
      val := val or (elem.daysOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((elem.daysOfWeekList[i].id <> '') or (elem.daysOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allDay', elem.allDayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allDay', elem.allDayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareServiceNotAvailable(jsn)); {2}
end;

function TFHIRJsonParser.ParseHealthcareServiceNotAvailable(jsn : TJsonObject) : TFhirHealthcareServiceNotAvailable;
begin
  result := TFhirHealthcareServiceNotAvailable.create;
  try
    ParseHealthcareServiceNotAvailableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceNotAvailableProperties(jsn : TJsonObject; result : TFhirHealthcareServiceNotAvailable);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('during') then
        result.during := ParsePeriod(jsn.vObj['during']);{q3}
end;

procedure TFHIRJsonComposer.ComposeHealthcareServiceNotAvailable(json : TJSONWriter; name : string; elem : TFhirHealthcareServiceNotAvailable; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'during', elem.during); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseHealthcareService(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareService(jsn)); {2}
end;

function TFHIRJsonParser.ParseHealthcareService(jsn : TJsonObject) : TFhirHealthcareService;
begin
  result := TFhirHealthcareService.create;
  try
    ParseHealthcareServiceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceProperties(jsn : TJsonObject; result : TFhirHealthcareService);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('providedBy') then
        result.providedBy := ParseReference{TFhirOrganization}(jsn.vObj['providedBy']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], result.locationList, parseReference{TFhirLocation});
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('extraDetails') or jsn.has('_extraDetails') then
        result.extraDetailsElement := ParseString(jsn['extraDetails'], jsn.vObj['_extraDetails']);{q}
    if jsn.has('photo') then
        result.photo := ParseAttachment(jsn.vObj['photo']);{q3}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('coverageArea') then
      iterateArray(jsn.vArr['coverageArea'], result.coverageAreaList, parseReference{TFhirLocation});
    if jsn.has('serviceProvisionCode') then
      iterateArray(jsn.vArr['serviceProvisionCode'], result.serviceProvisionCodeList, parseCodeableConcept);
    if jsn.has('eligibility') then
        result.eligibility := ParseCodeableConcept(jsn.vObj['eligibility']);{q3}
    if jsn.has('eligibilityNote') or jsn.has('_eligibilityNote') then
        result.eligibilityNoteElement := ParseString(jsn['eligibilityNote'], jsn.vObj['_eligibilityNote']);{q}
      if jsn.has('programName') or jsn.has('_programName') then
      iteratePrimitiveArray(jsn.vArr['programName'], jsn.vArr['_programName'], result.programNameList, parseString);
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], result.characteristicList, parseCodeableConcept);
    if jsn.has('referralMethod') then
      iterateArray(jsn.vArr['referralMethod'], result.referralMethodList, parseCodeableConcept);
    if jsn.has('appointmentRequired') or jsn.has('_appointmentRequired') then
        result.appointmentRequiredElement := ParseBoolean(jsn['appointmentRequired'], jsn.vObj['_appointmentRequired']);{q}
    if jsn.has('availableTime') then
      iterateArray(jsn.vArr['availableTime'], result.availableTimeList, parseHealthcareServiceAvailableTime);
    if jsn.has('notAvailable') then
      iterateArray(jsn.vArr['notAvailable'], result.notAvailableList, parseHealthcareServiceNotAvailable);
    if jsn.has('availabilityExceptions') or jsn.has('_availabilityExceptions') then
        result.availabilityExceptionsElement := ParseString(jsn['availabilityExceptions'], jsn.vObj['_availabilityExceptions']);{q}
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposeHealthcareService(json : TJSONWriter; name : string; elem : TFhirHealthcareService; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('providedBy') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'providedBy', elem.providedBy); {a}
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specialty') and (SummaryOption in [soFull, soSummary, soData]) and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soSummary, soData]) and (elem.locationList.Count > 0) then
  begin
    json.valueArray('location');
    for i := 0 to elem.locationList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.locationList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('extraDetails') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'extraDetails', elem.extraDetailsElement, false);
  if not elem.noCompose and doCompose('extraDetails') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'extraDetails', elem.extraDetailsElement, false);
  if not elem.noCompose and doCompose('photo') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(json, 'photo', elem.photo); {a}
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('coverageArea') and (SummaryOption in [soFull, soData]) and (elem.coverageAreaList.Count > 0) then
  begin
    json.valueArray('coverageArea');
    for i := 0 to elem.coverageAreaList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.coverageAreaList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('serviceProvisionCode') and (SummaryOption in [soFull, soData]) and (elem.serviceProvisionCodeList.Count > 0) then
  begin
    json.valueArray('serviceProvisionCode');
    for i := 0 to elem.serviceProvisionCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceProvisionCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('eligibility') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'eligibility', elem.eligibility); {a}
  if not elem.noCompose and doCompose('eligibilityNote') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'eligibilityNote', elem.eligibilityNoteElement, false);
  if not elem.noCompose and doCompose('eligibilityNote') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'eligibilityNote', elem.eligibilityNoteElement, false);
  if not elem.noCompose and doCompose('programName') and (SummaryOption in [soFull, soData]) and (elem.programNameList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.programNameList.Count - 1 do
    begin
      ext := ext or ((elem.programNameList[i].id <> '') or (elem.programNameList[i].hasExtensionList) {no-comments or (elem.programNameList[i].hasComments)});
      val := val or (elem.programNameList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('programName');
      for i := 0 to elem.programNameList.Count - 1 do
        ComposeStringValue(json, '',elem.programNameList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_programName');
      for i := 0 to elem.programNameList.Count - 1 do
        ComposeStringProps(json, '',elem.programNameList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('characteristic') and (SummaryOption in [soFull, soData]) and (elem.characteristicList.Count > 0) then
  begin
    json.valueArray('characteristic');
    for i := 0 to elem.characteristicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.characteristicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('referralMethod') and (SummaryOption in [soFull, soData]) and (elem.referralMethodList.Count > 0) then
  begin
    json.valueArray('referralMethod');
    for i := 0 to elem.referralMethodList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.referralMethodList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('appointmentRequired') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'appointmentRequired', elem.appointmentRequiredElement, false);
  if not elem.noCompose and doCompose('appointmentRequired') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'appointmentRequired', elem.appointmentRequiredElement, false);
  if not elem.noCompose and doCompose('availableTime') and (SummaryOption in [soFull, soData]) and (elem.availableTimeList.Count > 0) then
  begin
    json.valueArray('availableTime');
    for i := 0 to elem.availableTimeList.Count - 1 do
      ComposeHealthcareServiceAvailableTime(json, '', elem.availableTimeList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('notAvailable') and (SummaryOption in [soFull, soData]) and (elem.notAvailableList.Count > 0) then
  begin
    json.valueArray('notAvailable');
    for i := 0 to elem.notAvailableList.Count - 1 do
      ComposeHealthcareServiceNotAvailable(json, '', elem.notAvailableList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('availabilityExceptions') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if not elem.noCompose and doCompose('availabilityExceptions') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if not elem.noCompose and doCompose('endpoint') and (SummaryOption in [soFull, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
procedure TFHIRJsonParser.ParseImagingStudySeries(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudySeries(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingStudySeries(jsn : TJsonObject) : TFhirImagingStudySeries;
begin
  result := TFhirImagingStudySeries.create;
  try
    ParseImagingStudySeriesProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesProperties(jsn : TJsonObject; result : TFhirImagingStudySeries);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('uid') or jsn.has('_uid') then
        result.uidElement := ParseOid(jsn['uid'], jsn.vObj['_uid']);{q}
    if jsn.has('number') or jsn.has('_number') then
        result.numberElement := ParseUnsignedInt(jsn['number'], jsn.vObj['_number']);{q}
    if jsn.has('modality') then
        result.modality := ParseCoding(jsn.vObj['modality']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('numberOfInstances') or jsn.has('_numberOfInstances') then
        result.numberOfInstancesElement := ParseUnsignedInt(jsn['numberOfInstances'], jsn.vObj['_numberOfInstances']);{q}
    if jsn.has('availability') or jsn.has('_availability')  then
      result.availabilityElement := parseEnum(jsn.path+'/availability', jsn['availability'], jsn.vObj['_availability'], CODES_TFhirInstanceAvailabilityEnum, SYSTEMS_TFhirInstanceAvailabilityEnum);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
    if jsn.has('bodySite') then
        result.bodySite := ParseCoding(jsn.vObj['bodySite']);{q3}
    if jsn.has('laterality') then
        result.laterality := ParseCoding(jsn.vObj['laterality']);{q3}
    if jsn.has('specimen') then
      iterateArray(jsn.vArr['specimen'], result.specimenList, parseReference{TFhirSpecimen});
    if jsn.has('started') or jsn.has('_started') then
        result.startedElement := ParseDateTime(jsn['started'], jsn.vObj['_started']);{q}
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseReference{Resource});
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], result.instanceList, parseImagingStudySeriesInstance);
end;

procedure TFHIRJsonComposer.ComposeImagingStudySeries(json : TJSONWriter; name : string; elem : TFhirImagingStudySeries; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeOidValue(json, 'uid', elem.uidElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeOidProps(json, 'uid', elem.uidElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'modality', elem.modality); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfInstances', elem.numberOfInstancesElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfInstances', elem.numberOfInstancesElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'availability', elem.AvailabilityElement, CODES_TFhirInstanceAvailabilityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'availability', elem.AvailabilityElement, CODES_TFhirInstanceAvailabilityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'bodySite', elem.bodySite); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'laterality', elem.laterality); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.specimenList.Count > 0) then
  begin
    json.valueArray('specimen');
    for i := 0 to elem.specimenList.Count - 1 do
      ComposeReference{TFhirSpecimen}(json, '', elem.specimenList[i]); {z - Reference(Specimen)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'started', elem.startedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'started', elem.startedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.performerList[i]); {z - Reference(Practitioner|PractitionerRole|Organization|Patient|RelatedPerson)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.instanceList.Count > 0) then
  begin
    json.valueArray('instance');
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeImagingStudySeriesInstance(json, '', elem.instanceList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudySeriesInstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingStudySeriesInstance(jsn : TJsonObject) : TFhirImagingStudySeriesInstance;
begin
  result := TFhirImagingStudySeriesInstance.create;
  try
    ParseImagingStudySeriesInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesInstanceProperties(jsn : TJsonObject; result : TFhirImagingStudySeriesInstance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('uid') or jsn.has('_uid') then
        result.uidElement := ParseOid(jsn['uid'], jsn.vObj['_uid']);{q}
    if jsn.has('number') or jsn.has('_number') then
        result.numberElement := ParseUnsignedInt(jsn['number'], jsn.vObj['_number']);{q}
    if jsn.has('sopClass') or jsn.has('_sopClass') then
        result.sopClassElement := ParseOid(jsn['sopClass'], jsn.vObj['_sopClass']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
end;

procedure TFHIRJsonComposer.ComposeImagingStudySeriesInstance(json : TJSONWriter; name : string; elem : TFhirImagingStudySeriesInstance; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeOidValue(json, 'uid', elem.uidElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeOidProps(json, 'uid', elem.uidElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'number', elem.numberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeOidValue(json, 'sopClass', elem.sopClassElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeOidProps(json, 'sopClass', elem.sopClassElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImagingStudy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudy(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingStudy(jsn : TJsonObject) : TFhirImagingStudy;
begin
  result := TFhirImagingStudy.create;
  try
    ParseImagingStudyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudyProperties(jsn : TJsonObject; result : TFhirImagingStudy);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('uid') or jsn.has('_uid') then
        result.uidElement := ParseOid(jsn['uid'], jsn.vObj['_uid']);{q}
    if jsn.has('accession') then
        result.accession := ParseIdentifier(jsn.vObj['accession']);{q3}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('availability') or jsn.has('_availability')  then
      result.availabilityElement := parseEnum(jsn.path+'/availability', jsn['availability'], jsn.vObj['_availability'], CODES_TFhirInstanceAvailabilityEnum, SYSTEMS_TFhirInstanceAvailabilityEnum);
    if jsn.has('modalityList') then
      iterateArray(jsn.vArr['modalityList'], result.modalityListList, parseCoding);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('started') or jsn.has('_started') then
        result.startedElement := ParseDateTime(jsn['started'], jsn.vObj['_started']);{q}
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('referrer') then
        result.referrer := ParseReference{TFhirPractitioner}(jsn.vObj['referrer']);{q3}
    if jsn.has('interpreter') then
      iterateArray(jsn.vArr['interpreter'], result.interpreterList, parseReference{TFhirPractitioner});
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
    if jsn.has('numberOfSeries') or jsn.has('_numberOfSeries') then
        result.numberOfSeriesElement := ParseUnsignedInt(jsn['numberOfSeries'], jsn.vObj['_numberOfSeries']);{q}
    if jsn.has('numberOfInstances') or jsn.has('_numberOfInstances') then
        result.numberOfInstancesElement := ParseUnsignedInt(jsn['numberOfInstances'], jsn.vObj['_numberOfInstances']);{q}
    if jsn.has('procedureReference') then
      iterateArray(jsn.vArr['procedureReference'], result.procedureReferenceList, parseReference{TFhirProcedure});
    if jsn.has('procedureCode') then
      iterateArray(jsn.vArr['procedureCode'], result.procedureCodeList, parseCodeableConcept);
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('series') then
      iterateArray(jsn.vArr['series'], result.seriesList, parseImagingStudySeries);
end;

procedure TFHIRJsonComposer.ComposeImagingStudy(json : TJSONWriter; name : string; elem : TFhirImagingStudy; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('uid') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeOidValue(json, 'uid', elem.uidElement, false);
  if not elem.noCompose and doCompose('uid') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeOidProps(json, 'uid', elem.uidElement, false);
  if not elem.noCompose and doCompose('accession') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'accession', elem.accession); {a}
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('availability') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'availability', elem.AvailabilityElement, CODES_TFhirInstanceAvailabilityEnum, false);
  if not elem.noCompose and doCompose('availability') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'availability', elem.AvailabilityElement, CODES_TFhirInstanceAvailabilityEnum, false);
  if not elem.noCompose and doCompose('modalityList') and (SummaryOption in [soFull, soSummary, soData]) and (elem.modalityListList.Count > 0) then
  begin
    json.valueArray('modalityList');
    for i := 0 to elem.modalityListList.Count - 1 do
      ComposeCoding(json, '', elem.modalityListList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('started') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'started', elem.startedElement, false);
  if not elem.noCompose and doCompose('started') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'started', elem.startedElement, false);
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('referrer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'referrer', elem.referrer); {a}
  if not elem.noCompose and doCompose('interpreter') and (SummaryOption in [soFull, soSummary, soData]) and (elem.interpreterList.Count > 0) then
  begin
    json.valueArray('interpreter');
    for i := 0 to elem.interpreterList.Count - 1 do
      ComposeReference{TFhirPractitioner}(json, '', elem.interpreterList[i]); {z - Reference(Practitioner)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('endpoint') and (SummaryOption in [soFull, soSummary, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('numberOfSeries') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfSeries', elem.numberOfSeriesElement, false);
  if not elem.noCompose and doCompose('numberOfSeries') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfSeries', elem.numberOfSeriesElement, false);
  if not elem.noCompose and doCompose('numberOfInstances') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfInstances', elem.numberOfInstancesElement, false);
  if not elem.noCompose and doCompose('numberOfInstances') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfInstances', elem.numberOfInstancesElement, false);
  if not elem.noCompose and doCompose('procedureReference') and (SummaryOption in [soFull, soSummary, soData]) and (elem.procedureReferenceList.Count > 0) then
  begin
    json.valueArray('procedureReference');
    for i := 0 to elem.procedureReferenceList.Count - 1 do
      ComposeReference{TFhirProcedure}(json, '', elem.procedureReferenceList[i]); {z - Reference(Procedure)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('procedureCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.procedureCodeList.Count > 0) then
  begin
    json.valueArray('procedureCode');
    for i := 0 to elem.procedureCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.procedureCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reason') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('series') and (SummaryOption in [soFull, soSummary, soData]) and (elem.seriesList.Count > 0) then
  begin
    json.valueArray('series');
    for i := 0 to elem.seriesList.Count - 1 do
      ComposeImagingStudySeries(json, '', elem.seriesList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
procedure TFHIRJsonParser.ParseImmunizationPractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationPractitioner(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationPractitioner(jsn : TJsonObject) : TFhirImmunizationPractitioner;
begin
  result := TFhirImmunizationPractitioner.create;
  try
    ParseImmunizationPractitionerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationPractitionerProperties(jsn : TJsonObject; result : TFhirImmunizationPractitioner);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{TFhirPractitioner}(jsn.vObj['actor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImmunizationPractitioner(json : TJSONWriter; name : string; elem : TFhirImmunizationPractitioner; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'actor', elem.actor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunizationEducation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationEducation(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationEducation(jsn : TJsonObject) : TFhirImmunizationEducation;
begin
  result := TFhirImmunizationEducation.create;
  try
    ParseImmunizationEducationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationEducationProperties(jsn : TJsonObject; result : TFhirImmunizationEducation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('documentType') or jsn.has('_documentType') then
        result.documentTypeElement := ParseString(jsn['documentType'], jsn.vObj['_documentType']);{q}
    if jsn.has('reference') or jsn.has('_reference') then
        result.referenceElement := ParseUri(jsn['reference'], jsn.vObj['_reference']);{q}
    if jsn.has('publicationDate') or jsn.has('_publicationDate') then
        result.publicationDateElement := ParseDateTime(jsn['publicationDate'], jsn.vObj['_publicationDate']);{q}
    if jsn.has('presentationDate') or jsn.has('_presentationDate') then
        result.presentationDateElement := ParseDateTime(jsn['presentationDate'], jsn.vObj['_presentationDate']);{q}
end;

procedure TFHIRJsonComposer.ComposeImmunizationEducation(json : TJSONWriter; name : string; elem : TFhirImmunizationEducation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentType', elem.documentTypeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentType', elem.documentTypeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'reference', elem.referenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'reference', elem.referenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'publicationDate', elem.publicationDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'publicationDate', elem.publicationDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'presentationDate', elem.presentationDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'presentationDate', elem.presentationDateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunization(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunization(jsn : TJsonObject) : TFhirImmunization;
begin
  result := TFhirImmunization.create;
  try
    ParseImmunizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationProperties(jsn : TJsonObject; result : TFhirImmunization);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirImmunizationStatusEnum, SYSTEMS_TFhirImmunizationStatusEnum);
    if jsn.has('vaccineCode') then
        result.vaccineCode := ParseCodeableConcept(jsn.vObj['vaccineCode']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('primarySource') or jsn.has('_primarySource') then
        result.primarySourceElement := ParseBoolean(jsn['primarySource'], jsn.vObj['_primarySource']);{q}
    if jsn.has('reportOrigin') then
        result.reportOrigin := ParseCodeableConcept(jsn.vObj['reportOrigin']);{q3}
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('manufacturer') then
        result.manufacturer := ParseReference{TFhirOrganization}(jsn.vObj['manufacturer']);{q3}
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        result.lotNumberElement := ParseString(jsn['lotNumber'], jsn.vObj['_lotNumber']);{q}
    if jsn.has('expirationDate') or jsn.has('_expirationDate') then
        result.expirationDateElement := ParseDate(jsn['expirationDate'], jsn.vObj['_expirationDate']);{q}
    if jsn.has('site') then
        result.site := ParseCodeableConcept(jsn.vObj['site']);{q3}
    if jsn.has('route') then
        result.route := ParseCodeableConcept(jsn.vObj['route']);{q3}
    if jsn.has('doseQuantity') then
        result.doseQuantity := ParseQuantity(jsn.vObj['doseQuantity']);{q3}
    if jsn.has('practitioner') then
      iterateArray(jsn.vArr['practitioner'], result.practitionerList, parseImmunizationPractitioner);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('education') then
      iterateArray(jsn.vArr['education'], result.educationList, parseImmunizationEducation);
    if jsn.has('programEligibility') then
      iterateArray(jsn.vArr['programEligibility'], result.programEligibilityList, parseCodeableConcept);
    if jsn.has('fundingSource') then
        result.fundingSource := ParseCodeableConcept(jsn.vObj['fundingSource']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImmunization(json : TJSONWriter; name : string; elem : TFhirImmunization; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirImmunizationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirImmunizationStatusEnum, false);
  if not elem.noCompose and doCompose('vaccineCode') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'vaccineCode', elem.vaccineCode); {a}
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('encounter') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('primarySource') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'primarySource', elem.primarySourceElement, false);
  if not elem.noCompose and doCompose('primarySource') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'primarySource', elem.primarySourceElement, false);
  if not elem.noCompose and doCompose('reportOrigin') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reportOrigin', elem.reportOrigin); {a}
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and doCompose('manufacturer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'manufacturer', elem.manufacturer); {a}
  if not elem.noCompose and doCompose('lotNumber') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lotNumber', elem.lotNumberElement, false);
  if not elem.noCompose and doCompose('lotNumber') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lotNumber', elem.lotNumberElement, false);
  if not elem.noCompose and doCompose('expirationDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'expirationDate', elem.expirationDateElement, false);
  if not elem.noCompose and doCompose('expirationDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'expirationDate', elem.expirationDateElement, false);
  if not elem.noCompose and doCompose('site') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'site', elem.site); {a}
  if not elem.noCompose and doCompose('route') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'route', elem.route); {a}
  if not elem.noCompose and doCompose('doseQuantity') and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'doseQuantity', elem.doseQuantity); {a}
  if not elem.noCompose and doCompose('practitioner') and (SummaryOption in [soFull, soSummary, soData]) and (elem.practitionerList.Count > 0) then
  begin
    json.valueArray('practitioner');
    for i := 0 to elem.practitionerList.Count - 1 do
      ComposeImmunizationPractitioner(json, '', elem.practitionerList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soSummary, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reason') and (SummaryOption in [soFull, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('education') and (SummaryOption in [soFull, soData]) and (elem.educationList.Count > 0) then
  begin
    json.valueArray('education');
    for i := 0 to elem.educationList.Count - 1 do
      ComposeImmunizationEducation(json, '', elem.educationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('programEligibility') and (SummaryOption in [soFull, soData]) and (elem.programEligibilityList.Count > 0) then
  begin
    json.valueArray('programEligibility');
    for i := 0 to elem.programEligibilityList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programEligibilityList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('fundingSource') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'fundingSource', elem.fundingSource); {a}
end;

{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
procedure TFHIRJsonParser.ParseImmunizationEvaluation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationEvaluation(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationEvaluation(jsn : TJsonObject) : TFhirImmunizationEvaluation;
begin
  result := TFhirImmunizationEvaluation.create;
  try
    ParseImmunizationEvaluationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationEvaluationProperties(jsn : TJsonObject; result : TFhirImmunizationEvaluation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirImmunizationEvaluationStatusEnum, SYSTEMS_TFhirImmunizationEvaluationStatusEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('authority') then
        result.authority := ParseReference{TFhirOrganization}(jsn.vObj['authority']);{q3}
    if jsn.has('targetDisease') then
      iterateArray(jsn.vArr['targetDisease'], result.targetDiseaseList, parseCodeableConcept);
    if jsn.has('immunizationEvent') then
        result.immunizationEvent := ParseReference{TFhirImmunization}(jsn.vObj['immunizationEvent']);{q3}
    if jsn.has('doseStatus') then
        result.doseStatus := ParseCodeableConcept(jsn.vObj['doseStatus']);{q3}
    if jsn.has('doseStatusReason') then
      iterateArray(jsn.vArr['doseStatusReason'], result.doseStatusReasonList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('series') or jsn.has('_series') then
        result.seriesElement := ParseString(jsn['series'], jsn.vObj['_series']);{q}
    if jsn.has('doseNumber') or jsn.has('_doseNumber') then
        result.doseNumberElement := ParsePositiveInt(jsn['doseNumber'], jsn.vObj['_doseNumber']);{q}
    if jsn.has('seriesDoses') or jsn.has('_seriesDoses') then
        result.seriesDosesElement := ParsePositiveInt(jsn['seriesDoses'], jsn.vObj['_seriesDoses']);{q}
end;

procedure TFHIRJsonComposer.ComposeImmunizationEvaluation(json : TJSONWriter; name : string; elem : TFhirImmunizationEvaluation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirImmunizationEvaluationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirImmunizationEvaluationStatusEnum, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('authority') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'authority', elem.authority); {a}
  if not elem.noCompose and doCompose('targetDisease') and (SummaryOption in [soFull, soSummary, soData]) and (elem.targetDiseaseList.Count > 0) then
  begin
    json.valueArray('targetDisease');
    for i := 0 to elem.targetDiseaseList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.targetDiseaseList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('immunizationEvent') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirImmunization}(json, 'immunizationEvent', elem.immunizationEvent); {a}
  if not elem.noCompose and doCompose('doseStatus') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'doseStatus', elem.doseStatus); {a}
  if not elem.noCompose and doCompose('doseStatusReason') and (SummaryOption in [soFull, soData]) and (elem.doseStatusReasonList.Count > 0) then
  begin
    json.valueArray('doseStatusReason');
    for i := 0 to elem.doseStatusReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.doseStatusReasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('series') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'series', elem.seriesElement, false);
  if not elem.noCompose and doCompose('series') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'series', elem.seriesElement, false);
  if not elem.noCompose and doCompose('doseNumber') and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'doseNumber', elem.doseNumberElement, false);
  if not elem.noCompose and doCompose('doseNumber') and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'doseNumber', elem.doseNumberElement, false);
  if not elem.noCompose and doCompose('seriesDoses') and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'seriesDoses', elem.seriesDosesElement, false);
  if not elem.noCompose and doCompose('seriesDoses') and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'seriesDoses', elem.seriesDosesElement, false);
end;

{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendationRecommendation(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationRecommendationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendation;
begin
  result := TFhirImmunizationRecommendationRecommendation.create;
  try
    ParseImmunizationRecommendationRecommendationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('vaccineCode') then
      iterateArray(jsn.vArr['vaccineCode'], result.vaccineCodeList, parseCodeableConcept);
    if jsn.has('targetDisease') then
        result.targetDisease := ParseCodeableConcept(jsn.vObj['targetDisease']);{q3}
    if jsn.has('contraindicatedVaccineCode') then
      iterateArray(jsn.vArr['contraindicatedVaccineCode'], result.contraindicatedVaccineCodeList, parseCodeableConcept);
    if jsn.has('forecastStatus') then
        result.forecastStatus := ParseCodeableConcept(jsn.vObj['forecastStatus']);{q3}
    if jsn.has('forecastReason') then
      iterateArray(jsn.vArr['forecastReason'], result.forecastReasonList, parseCodeableConcept);
    if jsn.has('dateCriterion') then
      iterateArray(jsn.vArr['dateCriterion'], result.dateCriterionList, parseImmunizationRecommendationRecommendationDateCriterion);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('series') or jsn.has('_series') then
        result.seriesElement := ParseString(jsn['series'], jsn.vObj['_series']);{q}
    if jsn.has('doseNumber') or jsn.has('_doseNumber') then
        result.doseNumberElement := ParsePositiveInt(jsn['doseNumber'], jsn.vObj['_doseNumber']);{q}
    if jsn.has('seriesDoses') or jsn.has('_seriesDoses') then
        result.seriesDosesElement := ParsePositiveInt(jsn['seriesDoses'], jsn.vObj['_seriesDoses']);{q}
    if jsn.has('supportingImmunization') then
      iterateArray(jsn.vArr['supportingImmunization'], result.supportingImmunizationList, parseReference{Resource});
    if jsn.has('supportingPatientInformation') then
      iterateArray(jsn.vArr['supportingPatientInformation'], result.supportingPatientInformationList, parseReference{TFhirReference});
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendationRecommendation(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.vaccineCodeList.Count > 0) then
  begin
    json.valueArray('vaccineCode');
    for i := 0 to elem.vaccineCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.vaccineCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'targetDisease', elem.targetDisease); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.contraindicatedVaccineCodeList.Count > 0) then
  begin
    json.valueArray('contraindicatedVaccineCode');
    for i := 0 to elem.contraindicatedVaccineCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.contraindicatedVaccineCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'forecastStatus', elem.forecastStatus); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.forecastReasonList.Count > 0) then
  begin
    json.valueArray('forecastReason');
    for i := 0 to elem.forecastReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.forecastReasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.dateCriterionList.Count > 0) then
  begin
    json.valueArray('dateCriterion');
    for i := 0 to elem.dateCriterionList.Count - 1 do
      ComposeImmunizationRecommendationRecommendationDateCriterion(json, '', elem.dateCriterionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'series', elem.seriesElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'series', elem.seriesElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'doseNumber', elem.doseNumberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'doseNumber', elem.doseNumberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'seriesDoses', elem.seriesDosesElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'seriesDoses', elem.seriesDosesElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.supportingImmunizationList.Count > 0) then
  begin
    json.valueArray('supportingImmunization');
    for i := 0 to elem.supportingImmunizationList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.supportingImmunizationList[i]); {z - Reference(Immunization|ImmunizationEvaluation)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.supportingPatientInformationList.Count > 0) then
  begin
    json.valueArray('supportingPatientInformation');
    for i := 0 to elem.supportingPatientInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingPatientInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendationRecommendationDateCriterion(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendationDateCriterion;
begin
  result := TFhirImmunizationRecommendationRecommendationDateCriterion.create;
  try
    ParseImmunizationRecommendationRecommendationDateCriterionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationDateCriterionProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendationDateCriterion);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseDateTime(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendationRecommendationDateCriterion(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendationDateCriterion; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendation(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendation;
begin
  result := TFhirImmunizationRecommendation.create;
  try
    ParseImmunizationRecommendationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('authority') then
        result.authority := ParseReference{TFhirOrganization}(jsn.vObj['authority']);{q3}
    if jsn.has('recommendation') then
      iterateArray(jsn.vArr['recommendation'], result.recommendationList, parseImmunizationRecommendationRecommendation);
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendation(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('authority') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'authority', elem.authority); {a}
  if not elem.noCompose and doCompose('recommendation') and (SummaryOption in [soFull, soSummary, soData]) and (elem.recommendationList.Count > 0) then
  begin
    json.valueArray('recommendation');
    for i := 0 to elem.recommendationList.Count - 1 do
      ComposeImmunizationRecommendationRecommendation(json, '', elem.recommendationList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
procedure TFHIRJsonParser.ParseImplementationGuideDependency(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideDependency(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideDependency(jsn : TJsonObject) : TFhirImplementationGuideDependency;
begin
  result := TFhirImplementationGuideDependency.create;
  try
    ParseImplementationGuideDependencyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideDependencyProperties(jsn : TJsonObject; result : TFhirImplementationGuideDependency);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirGuideDependencyTypeEnum, SYSTEMS_TFhirGuideDependencyTypeEnum);
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := ParseUri(jsn['uri'], jsn.vObj['_uri']);{q}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideDependency(json : TJSONWriter; name : string; elem : TFhirImplementationGuideDependency; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirGuideDependencyTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirGuideDependencyTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePackage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuidePackage(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuidePackage(jsn : TJsonObject) : TFhirImplementationGuidePackage;
begin
  result := TFhirImplementationGuidePackage.create;
  try
    ParseImplementationGuidePackageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePackageProperties(jsn : TJsonObject; result : TFhirImplementationGuidePackage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], result.resourceList, parseImplementationGuidePackageResource);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuidePackage(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePackage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.resourceList.Count > 0) then
  begin
    json.valueArray('resource');
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeImplementationGuidePackageResource(json, '', elem.resourceList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePackageResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuidePackageResource(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuidePackageResource(jsn : TJsonObject) : TFhirImplementationGuidePackageResource;
begin
  result := TFhirImplementationGuidePackageResource.create;
  try
    ParseImplementationGuidePackageResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePackageResourceProperties(jsn : TJsonObject; result : TFhirImplementationGuidePackageResource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('example') or jsn.has('_example') then
        result.exampleElement := ParseBoolean(jsn['example'], jsn.vObj['_example']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('acronym') or jsn.has('_acronym') then
        result.acronymElement := ParseString(jsn['acronym'], jsn.vObj['_acronym']);{q}
    if jsn.has('sourceReference') {a3} then
      result.source := ParseReference(jsn.vObj['sourceReference']);
    if jsn.has('sourceUri') or jsn.has('_sourceUri') then
      result.source := parseUri(jsn['sourceUri'], jsn.vObj['_sourceUri']);
    if jsn.has('exampleFor') then
        result.exampleFor := ParseReference{TFhirStructureDefinition}(jsn.vObj['exampleFor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuidePackageResource(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePackageResource; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (not isCanonical or (elem.example <> false)) and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'example', elem.exampleElement, false);
  if not elem.noCompose and (not isCanonical or (elem.example <> false)) and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'example', elem.exampleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'acronym', elem.acronymElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'acronym', elem.acronymElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirReference) then
    ComposeReference(json, 'sourceReference', TFhirReference(elem.source))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirUri) then 
  begin
    ComposeUriValue(json, 'sourceUri', TFhirUri(elem.source), false);
    ComposeUriProps(json, 'sourceUri', TFhirUri(elem.source), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'exampleFor', elem.exampleFor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideGlobal(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideGlobal(jsn : TJsonObject) : TFhirImplementationGuideGlobal;
begin
  result := TFhirImplementationGuideGlobal.create;
  try
    ParseImplementationGuideGlobalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideGlobalProperties(jsn : TJsonObject; result : TFhirImplementationGuideGlobal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideGlobal(json : TJSONWriter; name : string; elem : TFhirImplementationGuideGlobal; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuidePage(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuidePage(jsn : TJsonObject) : TFhirImplementationGuidePage;
begin
  result := TFhirImplementationGuidePage.create;
  try
    ParseImplementationGuidePageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePageProperties(jsn : TJsonObject; result : TFhirImplementationGuidePage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('source') or jsn.has('_source') then
        result.sourceElement := ParseUri(jsn['source'], jsn.vObj['_source']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirGuidePageKindEnum, SYSTEMS_TFhirGuidePageKindEnum);
    if jsn.has('type') or jsn.has('_type') then
      iterateEnumArray(jsn.vArr['type'], jsn.vArr['_type'], jsn.path+'/type', result.type_, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
      if jsn.has('package') or jsn.has('_package') then
      iteratePrimitiveArray(jsn.vArr['package'], jsn.vArr['_package'], result.packageList, parseString);
    if jsn.has('format') or jsn.has('_format') then
        result.formatElement := ParseCode(jsn['format'], jsn.vObj['_format']);{q}
    if jsn.has('page') then
      iterateArray(jsn.vArr['page'], result.pageList, parseImplementationGuidePage);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuidePage(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePage; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'source', elem.sourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'source', elem.sourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirGuidePageKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirGuidePageKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.type_.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.type_.Count - 1 do
    begin
      val := val or (elem.type_[i].hasPrimitiveValue);
      ext := ext or ((elem.type_[i].id <> '') or (elem.type_[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('type');
      for i := 0 to elem.type_.Count - 1 do
        ComposeEnumValue(json, '', elem.type_[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_type');
      for i := 0 to elem.type_.Count - 1 do
        ComposeEnumProps(json, '', elem.type_[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.packageList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.packageList.Count - 1 do
    begin
      ext := ext or ((elem.packageList[i].id <> '') or (elem.packageList[i].hasExtensionList) {no-comments or (elem.packageList[i].hasComments)});
      val := val or (elem.packageList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('package');
      for i := 0 to elem.packageList.Count - 1 do
        ComposeStringValue(json, '',elem.packageList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_package');
      for i := 0 to elem.packageList.Count - 1 do
        ComposeStringProps(json, '',elem.packageList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'format', elem.formatElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'format', elem.formatElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.pageList.Count > 0) then
  begin
    json.valueArray('page');
    for i := 0 to elem.pageList.Count - 1 do
      ComposeImplementationGuidePage(json, '', elem.pageList[i]); {z - @ImplementationGuide.page}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuide(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuide(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuide(jsn : TJsonObject) : TFhirImplementationGuide;
begin
  result := TFhirImplementationGuide.create;
  try
    ParseImplementationGuideProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideProperties(jsn : TJsonObject; result : TFhirImplementationGuide);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        result.fhirVersionElement := ParseId(jsn['fhirVersion'], jsn.vObj['_fhirVersion']);{q}
    if jsn.has('dependency') then
      iterateArray(jsn.vArr['dependency'], result.dependencyList, parseImplementationGuideDependency);
    if jsn.has('package') then
      iterateArray(jsn.vArr['package'], result.packageList, parseImplementationGuidePackage);
    if jsn.has('global') then
      iterateArray(jsn.vArr['global'], result.globalList, parseImplementationGuideGlobal);
      if jsn.has('binary') or jsn.has('_binary') then
      iteratePrimitiveArray(jsn.vArr['binary'], jsn.vArr['_binary'], result.binaryList, parseUri);
    if jsn.has('page') then
        result.page := ParseImplementationGuidePage(jsn.vObj['page']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuide(json : TJSONWriter; name : string; elem : TFhirImplementationGuide; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('dependency') and (SummaryOption in [soFull, soSummary, soData]) and (elem.dependencyList.Count > 0) then
  begin
    json.valueArray('dependency');
    for i := 0 to elem.dependencyList.Count - 1 do
      ComposeImplementationGuideDependency(json, '', elem.dependencyList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('package') and (SummaryOption in [soFull, soSummary, soData]) and (elem.packageList.Count > 0) then
  begin
    json.valueArray('package');
    for i := 0 to elem.packageList.Count - 1 do
      ComposeImplementationGuidePackage(json, '', elem.packageList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('global') and (SummaryOption in [soFull, soSummary, soData]) and (elem.globalList.Count > 0) then
  begin
    json.valueArray('global');
    for i := 0 to elem.globalList.Count - 1 do
      ComposeImplementationGuideGlobal(json, '', elem.globalList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('binary') and (SummaryOption in [soFull, soData]) and (elem.binaryList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.binaryList.Count - 1 do
    begin
      ext := ext or ((elem.binaryList[i].id <> '') or (elem.binaryList[i].hasExtensionList) {no-comments or (elem.binaryList[i].hasComments)});
      val := val or (elem.binaryList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('binary');
      for i := 0 to elem.binaryList.Count - 1 do
        ComposeUriValue(json, '',elem.binaryList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_binary');
      for i := 0 to elem.binaryList.Count - 1 do
        ComposeUriProps(json, '',elem.binaryList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('page') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeImplementationGuidePage(json, 'page', elem.page); {a}
end;

{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEINPUT}
procedure TFHIRJsonParser.ParseImplementationGuideInputDependency(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideInputDependency(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideInputDependency(jsn : TJsonObject) : TFhirImplementationGuideInputDependency;
begin
  result := TFhirImplementationGuideInputDependency.create;
  try
    ParseImplementationGuideInputDependencyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputDependencyProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputDependency);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirGuideDependencyTypeEnum, SYSTEMS_TFhirGuideDependencyTypeEnum);
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := ParseUri(jsn['uri'], jsn.vObj['_uri']);{q}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideInputDependency(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputDependency; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirGuideDependencyTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirGuideDependencyTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputPackage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideInputPackage(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideInputPackage(jsn : TJsonObject) : TFhirImplementationGuideInputPackage;
begin
  result := TFhirImplementationGuideInputPackage.create;
  try
    ParseImplementationGuideInputPackageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputPackageProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputPackage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], result.resourceList, parseImplementationGuideInputPackageResource);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideInputPackage(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputPackage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.resourceList.Count > 0) then
  begin
    json.valueArray('resource');
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeImplementationGuideInputPackageResource(json, '', elem.resourceList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputPackageResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideInputPackageResource(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideInputPackageResource(jsn : TJsonObject) : TFhirImplementationGuideInputPackageResource;
begin
  result := TFhirImplementationGuideInputPackageResource.create;
  try
    ParseImplementationGuideInputPackageResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputPackageResourceProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputPackageResource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('reference') then
        result.reference := ParseReference{TFhirReference}(jsn.vObj['reference']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('exampleReference') {a3} then
      result.example := ParseReference(jsn.vObj['exampleReference']);
    if jsn.has('exampleBoolean') or jsn.has('_exampleBoolean') then
      result.example := parseBoolean(jsn['exampleBoolean'], jsn.vObj['_exampleBoolean']);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideInputPackageResource(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputPackageResource; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'reference', elem.reference); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.example is TFhirReference) then
    ComposeReference(json, 'exampleReference', TFhirReference(elem.example))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.example is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'exampleBoolean', TFhirBoolean(elem.example), false);
    ComposeBooleanProps(json, 'exampleBoolean', TFhirBoolean(elem.example), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideInputGlobal(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideInputGlobal(jsn : TJsonObject) : TFhirImplementationGuideInputGlobal;
begin
  result := TFhirImplementationGuideInputGlobal.create;
  try
    ParseImplementationGuideInputGlobalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputGlobalProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputGlobal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideInputGlobal(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputGlobal; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputPage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideInputPage(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideInputPage(jsn : TJsonObject) : TFhirImplementationGuideInputPage;
begin
  result := TFhirImplementationGuideInputPage.create;
  try
    ParseImplementationGuideInputPageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputPageProperties(jsn : TJsonObject; result : TFhirImplementationGuideInputPage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sourceReference') {a3} then
      result.source := ParseReference(jsn.vObj['sourceReference']);
    if jsn.has('sourceUri') or jsn.has('_sourceUri') then
      result.source := parseUri(jsn['sourceUri'], jsn.vObj['_sourceUri']);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirGuidePageKindEnum, SYSTEMS_TFhirGuidePageKindEnum);
    if jsn.has('type') or jsn.has('_type') then
      iterateEnumArray(jsn.vArr['type'], jsn.vArr['_type'], jsn.path+'/type', result.type_, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
      if jsn.has('package') or jsn.has('_package') then
      iteratePrimitiveArray(jsn.vArr['package'], jsn.vArr['_package'], result.packageList, parseString);
    if jsn.has('format') or jsn.has('_format') then
        result.formatElement := ParseCode(jsn['format'], jsn.vObj['_format']);{q}
    if jsn.has('page') then
      iterateArray(jsn.vArr['page'], result.pageList, parseImplementationGuideInputPage);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideInputPage(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInputPage; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirReference) then
    ComposeReference(json, 'sourceReference', TFhirReference(elem.source))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirUri) then 
  begin
    ComposeUriValue(json, 'sourceUri', TFhirUri(elem.source), false);
    ComposeUriProps(json, 'sourceUri', TFhirUri(elem.source), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirGuidePageKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirGuidePageKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.type_.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.type_.Count - 1 do
    begin
      val := val or (elem.type_[i].hasPrimitiveValue);
      ext := ext or ((elem.type_[i].id <> '') or (elem.type_[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('type');
      for i := 0 to elem.type_.Count - 1 do
        ComposeEnumValue(json, '', elem.type_[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_type');
      for i := 0 to elem.type_.Count - 1 do
        ComposeEnumProps(json, '', elem.type_[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.packageList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.packageList.Count - 1 do
    begin
      ext := ext or ((elem.packageList[i].id <> '') or (elem.packageList[i].hasExtensionList) {no-comments or (elem.packageList[i].hasComments)});
      val := val or (elem.packageList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('package');
      for i := 0 to elem.packageList.Count - 1 do
        ComposeStringValue(json, '',elem.packageList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_package');
      for i := 0 to elem.packageList.Count - 1 do
        ComposeStringProps(json, '',elem.packageList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'format', elem.formatElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'format', elem.formatElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.pageList.Count > 0) then
  begin
    json.valueArray('page');
    for i := 0 to elem.pageList.Count - 1 do
      ComposeImplementationGuideInputPage(json, '', elem.pageList[i]); {z - @ImplementationGuideInput.page}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideInput(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideInput(jsn : TJsonObject) : TFhirImplementationGuideInput;
begin
  result := TFhirImplementationGuideInput.create;
  try
    ParseImplementationGuideInputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideInputProperties(jsn : TJsonObject; result : TFhirImplementationGuideInput);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        result.fhirVersionElement := ParseId(jsn['fhirVersion'], jsn.vObj['_fhirVersion']);{q}
    if jsn.has('dependency') then
      iterateArray(jsn.vArr['dependency'], result.dependencyList, parseImplementationGuideInputDependency);
    if jsn.has('package') then
      iterateArray(jsn.vArr['package'], result.packageList, parseImplementationGuideInputPackage);
    if jsn.has('global') then
      iterateArray(jsn.vArr['global'], result.globalList, parseImplementationGuideInputGlobal);
    if jsn.has('page') then
        result.page := ParseImplementationGuideInputPage(jsn.vObj['page']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideInput(json : TJSONWriter; name : string; elem : TFhirImplementationGuideInput; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('dependency') and (SummaryOption in [soFull, soSummary, soData]) and (elem.dependencyList.Count > 0) then
  begin
    json.valueArray('dependency');
    for i := 0 to elem.dependencyList.Count - 1 do
      ComposeImplementationGuideInputDependency(json, '', elem.dependencyList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('package') and (SummaryOption in [soFull, soSummary, soData]) and (elem.packageList.Count > 0) then
  begin
    json.valueArray('package');
    for i := 0 to elem.packageList.Count - 1 do
      ComposeImplementationGuideInputPackage(json, '', elem.packageList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('global') and (SummaryOption in [soFull, soSummary, soData]) and (elem.globalList.Count > 0) then
  begin
    json.valueArray('global');
    for i := 0 to elem.globalList.Count - 1 do
      ComposeImplementationGuideInputGlobal(json, '', elem.globalList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('page') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeImplementationGuideInputPage(json, 'page', elem.page); {a}
end;

{$ENDIF FHIR_IMPLEMENTATIONGUIDEINPUT}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
procedure TFHIRJsonParser.ParseImplementationGuideOutputDependency(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideOutputDependency(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideOutputDependency(jsn : TJsonObject) : TFhirImplementationGuideOutputDependency;
begin
  result := TFhirImplementationGuideOutputDependency.create;
  try
    ParseImplementationGuideOutputDependencyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideOutputDependencyProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutputDependency);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirGuideDependencyTypeEnum, SYSTEMS_TFhirGuideDependencyTypeEnum);
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := ParseUri(jsn['uri'], jsn.vObj['_uri']);{q}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideOutputDependency(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutputDependency; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirGuideDependencyTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirGuideDependencyTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideOutputResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideOutputResource(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideOutputResource(jsn : TJsonObject) : TFhirImplementationGuideOutputResource;
begin
  result := TFhirImplementationGuideOutputResource.create;
  try
    ParseImplementationGuideOutputResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideOutputResourceProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutputResource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('reference') then
        result.reference := ParseReference{TFhirReference}(jsn.vObj['reference']);{q3}
    if jsn.has('exampleReference') {a3} then
      result.example := ParseReference(jsn.vObj['exampleReference']);
    if jsn.has('exampleBoolean') or jsn.has('_exampleBoolean') then
      result.example := parseBoolean(jsn['exampleBoolean'], jsn.vObj['_exampleBoolean']);
    if jsn.has('relativePath') or jsn.has('_relativePath') then
        result.relativePathElement := ParseString(jsn['relativePath'], jsn.vObj['_relativePath']);{q}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideOutputResource(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutputResource; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'reference', elem.reference); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.example is TFhirReference) then
    ComposeReference(json, 'exampleReference', TFhirReference(elem.example))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.example is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'exampleBoolean', TFhirBoolean(elem.example), false);
    ComposeBooleanProps(json, 'exampleBoolean', TFhirBoolean(elem.example), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'relativePath', elem.relativePathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'relativePath', elem.relativePathElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideOutputGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideOutputGlobal(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideOutputGlobal(jsn : TJsonObject) : TFhirImplementationGuideOutputGlobal;
begin
  result := TFhirImplementationGuideOutputGlobal.create;
  try
    ParseImplementationGuideOutputGlobalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideOutputGlobalProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutputGlobal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideOutputGlobal(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutputGlobal; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideOutputPage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideOutputPage(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideOutputPage(jsn : TJsonObject) : TFhirImplementationGuideOutputPage;
begin
  result := TFhirImplementationGuideOutputPage.create;
  try
    ParseImplementationGuideOutputPageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideOutputPageProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutputPage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
      if jsn.has('anchor') or jsn.has('_anchor') then
      iteratePrimitiveArray(jsn.vArr['anchor'], jsn.vArr['_anchor'], result.anchorList, parseString);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideOutputPage(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutputPage; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.anchorList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.anchorList.Count - 1 do
    begin
      ext := ext or ((elem.anchorList[i].id <> '') or (elem.anchorList[i].hasExtensionList) {no-comments or (elem.anchorList[i].hasComments)});
      val := val or (elem.anchorList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('anchor');
      for i := 0 to elem.anchorList.Count - 1 do
        ComposeStringValue(json, '',elem.anchorList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_anchor');
      for i := 0 to elem.anchorList.Count - 1 do
        ComposeStringProps(json, '',elem.anchorList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideOutput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideOutput(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideOutput(jsn : TJsonObject) : TFhirImplementationGuideOutput;
begin
  result := TFhirImplementationGuideOutput.create;
  try
    ParseImplementationGuideOutputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideOutputProperties(jsn : TJsonObject; result : TFhirImplementationGuideOutput);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        result.fhirVersionElement := ParseId(jsn['fhirVersion'], jsn.vObj['_fhirVersion']);{q}
    if jsn.has('dependency') then
      iterateArray(jsn.vArr['dependency'], result.dependencyList, parseImplementationGuideOutputDependency);
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], result.resourceList, parseImplementationGuideOutputResource);
    if jsn.has('global') then
      iterateArray(jsn.vArr['global'], result.globalList, parseImplementationGuideOutputGlobal);
    if jsn.has('rendering') or jsn.has('_rendering') then
        result.renderingElement := ParseUri(jsn['rendering'], jsn.vObj['_rendering']);{q}
    if jsn.has('page') then
      iterateArray(jsn.vArr['page'], result.pageList, parseImplementationGuideOutputPage);
      if jsn.has('image') or jsn.has('_image') then
      iteratePrimitiveArray(jsn.vArr['image'], jsn.vArr['_image'], result.imageList, parseString);
      if jsn.has('other') or jsn.has('_other') then
      iteratePrimitiveArray(jsn.vArr['other'], jsn.vArr['_other'], result.otherList, parseString);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideOutput(json : TJSONWriter; name : string; elem : TFhirImplementationGuideOutput; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('dependency') and (SummaryOption in [soFull, soSummary, soData]) and (elem.dependencyList.Count > 0) then
  begin
    json.valueArray('dependency');
    for i := 0 to elem.dependencyList.Count - 1 do
      ComposeImplementationGuideOutputDependency(json, '', elem.dependencyList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('resource') and (SummaryOption in [soFull, soSummary, soData]) and (elem.resourceList.Count > 0) then
  begin
    json.valueArray('resource');
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeImplementationGuideOutputResource(json, '', elem.resourceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('global') and (SummaryOption in [soFull, soSummary, soData]) and (elem.globalList.Count > 0) then
  begin
    json.valueArray('global');
    for i := 0 to elem.globalList.Count - 1 do
      ComposeImplementationGuideOutputGlobal(json, '', elem.globalList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('rendering') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'rendering', elem.renderingElement, false);
  if not elem.noCompose and doCompose('rendering') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'rendering', elem.renderingElement, false);
  if not elem.noCompose and doCompose('page') and (SummaryOption in [soFull, soData]) and (elem.pageList.Count > 0) then
  begin
    json.valueArray('page');
    for i := 0 to elem.pageList.Count - 1 do
      ComposeImplementationGuideOutputPage(json, '', elem.pageList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('image') and (SummaryOption in [soFull, soData]) and (elem.imageList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.imageList.Count - 1 do
    begin
      ext := ext or ((elem.imageList[i].id <> '') or (elem.imageList[i].hasExtensionList) {no-comments or (elem.imageList[i].hasComments)});
      val := val or (elem.imageList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('image');
      for i := 0 to elem.imageList.Count - 1 do
        ComposeStringValue(json, '',elem.imageList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_image');
      for i := 0 to elem.imageList.Count - 1 do
        ComposeStringProps(json, '',elem.imageList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('other') and (SummaryOption in [soFull, soData]) and (elem.otherList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.otherList.Count - 1 do
    begin
      ext := ext or ((elem.otherList[i].id <> '') or (elem.otherList[i].hasExtensionList) {no-comments or (elem.otherList[i].hasComments)});
      val := val or (elem.otherList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('other');
      for i := 0 to elem.otherList.Count - 1 do
        ComposeStringValue(json, '',elem.otherList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_other');
      for i := 0 to elem.otherList.Count - 1 do
        ComposeStringProps(json, '',elem.otherList[i], true);
      json.FinishArray;
    end;
  end;
end;

{$ENDIF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
{$IFDEF FHIR_INVOICE}
procedure TFHIRJsonParser.ParseInvoiceParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInvoiceParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseInvoiceParticipant(jsn : TJsonObject) : TFhirInvoiceParticipant;
begin
  result := TFhirInvoiceParticipant.create;
  try
    ParseInvoiceParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInvoiceParticipantProperties(jsn : TJsonObject; result : TFhirInvoiceParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeInvoiceParticipant(json : TJSONWriter; name : string; elem : TFhirInvoiceParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseInvoiceLineItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInvoiceLineItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseInvoiceLineItem(jsn : TJsonObject) : TFhirInvoiceLineItem;
begin
  result := TFhirInvoiceLineItem.create;
  try
    ParseInvoiceLineItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInvoiceLineItemProperties(jsn : TJsonObject; result : TFhirInvoiceLineItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := ParsePositiveInt(jsn['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('chargeItem') then
        result.chargeItem := ParseReference{TFhirChargeItem}(jsn.vObj['chargeItem']);{q3}
    if jsn.has('priceComponent') then
      iterateArray(jsn.vArr['priceComponent'], result.priceComponentList, parseInvoiceLineItemPriceComponent);
end;

procedure TFHIRJsonComposer.ComposeInvoiceLineItem(json : TJSONWriter; name : string; elem : TFhirInvoiceLineItem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirChargeItem}(json, 'chargeItem', elem.chargeItem); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.priceComponentList.Count > 0) then
  begin
    json.valueArray('priceComponent');
    for i := 0 to elem.priceComponentList.Count - 1 do
      ComposeInvoiceLineItemPriceComponent(json, '', elem.priceComponentList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseInvoiceLineItemPriceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInvoiceLineItemPriceComponent(jsn)); {2}
end;

function TFHIRJsonParser.ParseInvoiceLineItemPriceComponent(jsn : TJsonObject) : TFhirInvoiceLineItemPriceComponent;
begin
  result := TFhirInvoiceLineItemPriceComponent.create;
  try
    ParseInvoiceLineItemPriceComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInvoiceLineItemPriceComponentProperties(jsn : TJsonObject; result : TFhirInvoiceLineItemPriceComponent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirInvoicePriceComponentTypeEnum, SYSTEMS_TFhirInvoicePriceComponentTypeEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('factor') then
        result.factor := ParseMoney(jsn.vObj['factor']);{q3}
    if jsn.has('amount') or jsn.has('_amount') then
        result.amountElement := ParseDecimal(jsn['amount'], jsn.vObj['_amount']);{q}
end;

procedure TFHIRJsonComposer.ComposeInvoiceLineItemPriceComponent(json : TJSONWriter; name : string; elem : TFhirInvoiceLineItemPriceComponent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirInvoicePriceComponentTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirInvoicePriceComponentTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'factor', elem.factor); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'amount', elem.amountElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'amount', elem.amountElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseInvoice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInvoice(jsn)); {2}
end;

function TFHIRJsonParser.ParseInvoice(jsn : TJsonObject) : TFhirInvoice;
begin
  result := TFhirInvoice.create;
  try
    ParseInvoiceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInvoiceProperties(jsn : TJsonObject; result : TFhirInvoice);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirInvoiceStatusEnum, SYSTEMS_TFhirInvoiceStatusEnum);
    if jsn.has('cancelledReason') or jsn.has('_cancelledReason') then
        result.cancelledReasonElement := ParseString(jsn['cancelledReason'], jsn.vObj['_cancelledReason']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('recipient') then
        result.recipient := ParseReference{Resource}(jsn.vObj['recipient']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseInvoiceParticipant);
    if jsn.has('issuer') then
        result.issuer := ParseReference{TFhirOrganization}(jsn.vObj['issuer']);{q3}
    if jsn.has('account') then
        result.account := ParseReference{TFhirAccount}(jsn.vObj['account']);{q3}
    if jsn.has('lineItem') then
      iterateArray(jsn.vArr['lineItem'], result.lineItemList, parseInvoiceLineItem);
    if jsn.has('totalPriceComponent') then
      iterateArray(jsn.vArr['totalPriceComponent'], result.totalPriceComponentList, parseInvoiceLineItemPriceComponent);
    if jsn.has('totalNet') then
        result.totalNet := ParseMoney(jsn.vObj['totalNet']);{q3}
    if jsn.has('totalGross') then
        result.totalGross := ParseMoney(jsn.vObj['totalGross']);{q3}
    if jsn.has('paymentTerms') or jsn.has('_paymentTerms') then
        result.paymentTermsElement := ParseMarkdown(jsn['paymentTerms'], jsn.vObj['_paymentTerms']);{q}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeInvoice(json : TJSONWriter; name : string; elem : TFhirInvoice; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirInvoiceStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirInvoiceStatusEnum, false);
  if not elem.noCompose and doCompose('cancelledReason') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'cancelledReason', elem.cancelledReasonElement, false);
  if not elem.noCompose and doCompose('cancelledReason') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'cancelledReason', elem.cancelledReasonElement, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('recipient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'recipient', elem.recipient); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('participant') and (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeInvoiceParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('issuer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'issuer', elem.issuer); {a}
  if not elem.noCompose and doCompose('account') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirAccount}(json, 'account', elem.account); {a}
  if not elem.noCompose and doCompose('lineItem') and (SummaryOption in [soFull, soData]) and (elem.lineItemList.Count > 0) then
  begin
    json.valueArray('lineItem');
    for i := 0 to elem.lineItemList.Count - 1 do
      ComposeInvoiceLineItem(json, '', elem.lineItemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('totalPriceComponent') and (SummaryOption in [soFull, soData]) and (elem.totalPriceComponentList.Count > 0) then
  begin
    json.valueArray('totalPriceComponent');
    for i := 0 to elem.totalPriceComponentList.Count - 1 do
      ComposeInvoiceLineItemPriceComponent(json, '', elem.totalPriceComponentList[i]); {z - @Invoice.lineItem.priceComponent}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('totalNet') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMoney(json, 'totalNet', elem.totalNet); {a}
  if not elem.noCompose and doCompose('totalGross') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMoney(json, 'totalGross', elem.totalGross); {a}
  if not elem.noCompose and doCompose('paymentTerms') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'paymentTerms', elem.paymentTermsElement, false);
  if not elem.noCompose and doCompose('paymentTerms') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'paymentTerms', elem.paymentTermsElement, false);
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_ITEMINSTANCE}
procedure TFHIRJsonParser.ParseItemInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseItemInstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseItemInstance(jsn : TJsonObject) : TFhirItemInstance;
begin
  result := TFhirItemInstance.create;
  try
    ParseItemInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseItemInstanceProperties(jsn : TJsonObject; result : TFhirItemInstance);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('count') or jsn.has('_count') then
        result.countElement := ParseInteger(jsn['count'], jsn.vObj['_count']);{q}
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirPatient}(jsn.vObj['subject']);{q3}
    if jsn.has('manufactureDate') or jsn.has('_manufactureDate') then
        result.manufactureDateElement := ParseDateTime(jsn['manufactureDate'], jsn.vObj['_manufactureDate']);{q}
    if jsn.has('expiryDate') or jsn.has('_expiryDate') then
        result.expiryDateElement := ParseDateTime(jsn['expiryDate'], jsn.vObj['_expiryDate']);{q}
    if jsn.has('currentSWVersion') or jsn.has('_currentSWVersion') then
        result.currentSWVersionElement := ParseString(jsn['currentSWVersion'], jsn.vObj['_currentSWVersion']);{q}
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        result.lotNumberElement := ParseString(jsn['lotNumber'], jsn.vObj['_lotNumber']);{q}
    if jsn.has('serialNumber') or jsn.has('_serialNumber') then
        result.serialNumberElement := ParseString(jsn['serialNumber'], jsn.vObj['_serialNumber']);{q}
    if jsn.has('carrierAIDC') or jsn.has('_carrierAIDC') then
        result.carrierAIDCElement := ParseString(jsn['carrierAIDC'], jsn.vObj['_carrierAIDC']);{q}
    if jsn.has('carrierHRF') or jsn.has('_carrierHRF') then
        result.carrierHRFElement := ParseString(jsn['carrierHRF'], jsn.vObj['_carrierHRF']);{q}
end;

procedure TFHIRJsonComposer.ComposeItemInstance(json : TJSONWriter; name : string; elem : TFhirItemInstance; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('count') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'count', elem.countElement, false);
  if not elem.noCompose and doCompose('count') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'count', elem.countElement, false);
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('manufactureDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'manufactureDate', elem.manufactureDateElement, false);
  if not elem.noCompose and doCompose('manufactureDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'manufactureDate', elem.manufactureDateElement, false);
  if not elem.noCompose and doCompose('expiryDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'expiryDate', elem.expiryDateElement, false);
  if not elem.noCompose and doCompose('expiryDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'expiryDate', elem.expiryDateElement, false);
  if not elem.noCompose and doCompose('currentSWVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'currentSWVersion', elem.currentSWVersionElement, false);
  if not elem.noCompose and doCompose('currentSWVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'currentSWVersion', elem.currentSWVersionElement, false);
  if not elem.noCompose and doCompose('lotNumber') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'lotNumber', elem.lotNumberElement, false);
  if not elem.noCompose and doCompose('lotNumber') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'lotNumber', elem.lotNumberElement, false);
  if not elem.noCompose and doCompose('serialNumber') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'serialNumber', elem.serialNumberElement, false);
  if not elem.noCompose and doCompose('serialNumber') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'serialNumber', elem.serialNumberElement, false);
  if not elem.noCompose and doCompose('carrierAIDC') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'carrierAIDC', elem.carrierAIDCElement, false);
  if not elem.noCompose and doCompose('carrierAIDC') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'carrierAIDC', elem.carrierAIDCElement, false);
  if not elem.noCompose and doCompose('carrierHRF') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'carrierHRF', elem.carrierHRFElement, false);
  if not elem.noCompose and doCompose('carrierHRF') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'carrierHRF', elem.carrierHRFElement, false);
end;

{$ENDIF FHIR_ITEMINSTANCE}
{$IFDEF FHIR_LIBRARY}
procedure TFHIRJsonParser.ParseLibrary(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLibrary(jsn)); {2}
end;

function TFHIRJsonParser.ParseLibrary(jsn : TJsonObject) : TFhirLibrary;
begin
  result := TFhirLibrary.create;
  try
    ParseLibraryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLibraryProperties(jsn : TJsonObject; result : TFhirLibrary);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := ParseString(jsn['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := ParseDate(jsn['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := ParseDate(jsn['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseParameterDefinition);
    if jsn.has('dataRequirement') then
      iterateArray(jsn.vArr['dataRequirement'], result.dataRequirementList, parseDataRequirement);
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], result.contentList, parseAttachment);
end;

procedure TFHIRJsonComposer.ComposeLibrary(json : TJSONWriter; name : string; elem : TFhirLibrary; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('effectivePeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('topic') and (SummaryOption in [soFull, soData]) and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contributor') and (SummaryOption in [soFull, soData]) and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('relatedArtifact') and (SummaryOption in [soFull, soData]) and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('parameter') and (SummaryOption in [soFull, soData]) and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeParameterDefinition(json, '', elem.parameterList[i]); {z - ParameterDefinition}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('dataRequirement') and (SummaryOption in [soFull, soData]) and (elem.dataRequirementList.Count > 0) then
  begin
    json.valueArray('dataRequirement');
    for i := 0 to elem.dataRequirementList.Count - 1 do
      ComposeDataRequirement(json, '', elem.dataRequirementList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('content') and (SummaryOption in [soFull, soData]) and (elem.contentList.Count > 0) then
  begin
    json.valueArray('content');
    for i := 0 to elem.contentList.Count - 1 do
      ComposeAttachment(json, '', elem.contentList[i]); {z - Attachment}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
procedure TFHIRJsonParser.ParseLinkageItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLinkageItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseLinkageItem(jsn : TJsonObject) : TFhirLinkageItem;
begin
  result := TFhirLinkageItem.create;
  try
    ParseLinkageItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLinkageItemProperties(jsn : TJsonObject; result : TFhirLinkageItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirLinkageTypeEnum, SYSTEMS_TFhirLinkageTypeEnum);
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
end;

procedure TFHIRJsonComposer.ComposeLinkageItem(json : TJSONWriter; name : string; elem : TFhirLinkageItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirLinkageTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirLinkageTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseLinkage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLinkage(jsn)); {2}
end;

function TFHIRJsonParser.ParseLinkage(jsn : TJsonObject) : TFhirLinkage;
begin
  result := TFhirLinkage.create;
  try
    ParseLinkageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLinkageProperties(jsn : TJsonObject; result : TFhirLinkage);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseLinkageItem);
end;

procedure TFHIRJsonComposer.ComposeLinkage(json : TJSONWriter; name : string; elem : TFhirLinkage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if not elem.noCompose and doCompose('item') and (SummaryOption in [soFull, soSummary, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeLinkageItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
procedure TFHIRJsonParser.ParseListEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseListEntry(jsn)); {2}
end;

function TFHIRJsonParser.ParseListEntry(jsn : TJsonObject) : TFhirListEntry;
begin
  result := TFhirListEntry.create;
  try
    ParseListEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseListEntryProperties(jsn : TJsonObject; result : TFhirListEntry);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('flag') then
        result.flag := ParseCodeableConcept(jsn.vObj['flag']);{q3}
    if jsn.has('deleted') or jsn.has('_deleted') then
        result.deletedElement := ParseBoolean(jsn['deleted'], jsn.vObj['_deleted']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('item') then
        result.item := ParseReference{TFhirReference}(jsn.vObj['item']);{q3}
end;

procedure TFHIRJsonComposer.ComposeListEntry(json : TJSONWriter; name : string; elem : TFhirListEntry; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'flag', elem.flag); {a}
  if not elem.noCompose and (not isCanonical or (elem.deleted <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'deleted', elem.deletedElement, false);
  if not elem.noCompose and (not isCanonical or (elem.deleted <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'deleted', elem.deletedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'item', elem.item); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseList(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseList(jsn)); {2}
end;

function TFHIRJsonParser.ParseList(jsn : TJsonObject) : TFhirList;
begin
  result := TFhirList.create;
  try
    ParseListProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseListProperties(jsn : TJsonObject; result : TFhirList);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirListStatusEnum, SYSTEMS_TFhirListStatusEnum);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('source') then
        result.source := ParseReference{Resource}(jsn.vObj['source']);{q3}
    if jsn.has('orderedBy') then
        result.orderedBy := ParseCodeableConcept(jsn.vObj['orderedBy']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], result.entryList, parseListEntry);
    if jsn.has('emptyReason') then
        result.emptyReason := ParseCodeableConcept(jsn.vObj['emptyReason']);{q3}
end;

procedure TFHIRJsonComposer.ComposeList(json : TJSONWriter; name : string; elem : TFhirList; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirListStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirListStatusEnum, false);
  if not elem.noCompose and doCompose('mode') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirListModeEnum, false);
  if not elem.noCompose and doCompose('mode') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirListModeEnum, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('encounter') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('source') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'source', elem.source); {a}
  if not elem.noCompose and doCompose('orderedBy') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'orderedBy', elem.orderedBy); {a}
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('entry') and (SummaryOption in [soFull, soData]) and (elem.entryList.Count > 0) then
  begin
    json.valueArray('entry');
    for i := 0 to elem.entryList.Count - 1 do
      ComposeListEntry(json, '', elem.entryList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('emptyReason') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'emptyReason', elem.emptyReason); {a}
end;

{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
procedure TFHIRJsonParser.ParseLocationPosition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLocationPosition(jsn)); {2}
end;

function TFHIRJsonParser.ParseLocationPosition(jsn : TJsonObject) : TFhirLocationPosition;
begin
  result := TFhirLocationPosition.create;
  try
    ParseLocationPositionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLocationPositionProperties(jsn : TJsonObject; result : TFhirLocationPosition);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('longitude') or jsn.has('_longitude') then
        result.longitudeElement := ParseDecimal(jsn['longitude'], jsn.vObj['_longitude']);{q}
    if jsn.has('latitude') or jsn.has('_latitude') then
        result.latitudeElement := ParseDecimal(jsn['latitude'], jsn.vObj['_latitude']);{q}
    if jsn.has('altitude') or jsn.has('_altitude') then
        result.altitudeElement := ParseDecimal(jsn['altitude'], jsn.vObj['_altitude']);{q}
end;

procedure TFHIRJsonComposer.ComposeLocationPosition(json : TJSONWriter; name : string; elem : TFhirLocationPosition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'longitude', elem.longitudeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'longitude', elem.longitudeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'latitude', elem.latitudeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'latitude', elem.latitudeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'altitude', elem.altitudeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'altitude', elem.altitudeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseLocationHoursOfOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLocationHoursOfOperation(jsn)); {2}
end;

function TFHIRJsonParser.ParseLocationHoursOfOperation(jsn : TJsonObject) : TFhirLocationHoursOfOperation;
begin
  result := TFhirLocationHoursOfOperation.create;
  try
    ParseLocationHoursOfOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLocationHoursOfOperationProperties(jsn : TJsonObject; result : TFhirLocationHoursOfOperation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('daysOfWeek') or jsn.has('_daysOfWeek') then
      iterateEnumArray(jsn.vArr['daysOfWeek'], jsn.vArr['_daysOfWeek'], jsn.path+'/daysOfWeek', result.daysOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
    if jsn.has('allDay') or jsn.has('_allDay') then
        result.allDayElement := ParseBoolean(jsn['allDay'], jsn.vObj['_allDay']);{q}
    if jsn.has('openingTime') or jsn.has('_openingTime') then
        result.openingTimeElement := ParseTime(jsn['openingTime'], jsn.vObj['_openingTime']);{q}
    if jsn.has('closingTime') or jsn.has('_closingTime') then
        result.closingTimeElement := ParseTime(jsn['closingTime'], jsn.vObj['_closingTime']);{q}
end;

procedure TFHIRJsonComposer.ComposeLocationHoursOfOperation(json : TJSONWriter; name : string; elem : TFhirLocationHoursOfOperation; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.daysOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.daysOfWeekList.Count - 1 do
    begin
      val := val or (elem.daysOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((elem.daysOfWeekList[i].id <> '') or (elem.daysOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allDay', elem.allDayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allDay', elem.allDayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'openingTime', elem.openingTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'openingTime', elem.openingTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'closingTime', elem.closingTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'closingTime', elem.closingTimeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseLocation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLocation(jsn)); {2}
end;

function TFHIRJsonParser.ParseLocation(jsn : TJsonObject) : TFhirLocation;
begin
  result := TFhirLocation.create;
  try
    ParseLocationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLocationProperties(jsn : TJsonObject; result : TFhirLocation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirLocationStatusEnum, SYSTEMS_TFhirLocationStatusEnum);
    if jsn.has('operationalStatus') then
        result.operationalStatus := ParseCoding(jsn.vObj['operationalStatus']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], result.aliasList, parseString);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirLocationModeEnum, SYSTEMS_TFhirLocationModeEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
        result.address := ParseAddress(jsn.vObj['address']);{q3}
    if jsn.has('physicalType') then
        result.physicalType := ParseCodeableConcept(jsn.vObj['physicalType']);{q3}
    if jsn.has('position') then
        result.position := ParseLocationPosition(jsn.vObj['position']);{q3}
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('partOf') then
        result.partOf := ParseReference{TFhirLocation}(jsn.vObj['partOf']);{q3}
    if jsn.has('hoursOfOperation') then
      iterateArray(jsn.vArr['hoursOfOperation'], result.hoursOfOperationList, parseLocationHoursOfOperation);
    if jsn.has('availabilityExceptions') or jsn.has('_availabilityExceptions') then
        result.availabilityExceptionsElement := ParseString(jsn['availabilityExceptions'], jsn.vObj['_availabilityExceptions']);{q}
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposeLocation(json : TJSONWriter; name : string; elem : TFhirLocation; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirLocationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirLocationStatusEnum, false);
  if not elem.noCompose and doCompose('operationalStatus') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'operationalStatus', elem.operationalStatus); {a}
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('alias') and (SummaryOption in [soFull, soData]) and (elem.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.aliasList.Count - 1 do
    begin
      ext := ext or ((elem.aliasList[i].id <> '') or (elem.aliasList[i].hasExtensionList) {no-comments or (elem.aliasList[i].hasComments)});
      val := val or (elem.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringValue(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringProps(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('mode') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirLocationModeEnum, false);
  if not elem.noCompose and doCompose('mode') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirLocationModeEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('address') and (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', elem.address); {a}
  if not elem.noCompose and doCompose('physicalType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'physicalType', elem.physicalType); {a}
  if not elem.noCompose and doCompose('position') and (SummaryOption in [soFull, soData]) then
    ComposeLocationPosition(json, 'position', elem.position); {a}
  if not elem.noCompose and doCompose('managingOrganization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'partOf', elem.partOf); {a}
  if not elem.noCompose and doCompose('hoursOfOperation') and (SummaryOption in [soFull, soData]) and (elem.hoursOfOperationList.Count > 0) then
  begin
    json.valueArray('hoursOfOperation');
    for i := 0 to elem.hoursOfOperationList.Count - 1 do
      ComposeLocationHoursOfOperation(json, '', elem.hoursOfOperationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('availabilityExceptions') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if not elem.noCompose and doCompose('availabilityExceptions') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if not elem.noCompose and doCompose('endpoint') and (SummaryOption in [soFull, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
procedure TFHIRJsonParser.ParseMeasureGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureGroup(jsn : TJsonObject) : TFhirMeasureGroup;
begin
  result := TFhirMeasureGroup.create;
  try
    ParseMeasureGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupProperties(jsn : TJsonObject; result : TFhirMeasureGroup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], result.populationList, parseMeasureGroupPopulation);
    if jsn.has('stratifier') then
      iterateArray(jsn.vArr['stratifier'], result.stratifierList, parseMeasureGroupStratifier);
end;

procedure TFHIRJsonComposer.ComposeMeasureGroup(json : TJSONWriter; name : string; elem : TFhirMeasureGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.populationList.Count > 0) then
  begin
    json.valueArray('population');
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMeasureGroupPopulation(json, '', elem.populationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.stratifierList.Count > 0) then
  begin
    json.valueArray('stratifier');
    for i := 0 to elem.stratifierList.Count - 1 do
      ComposeMeasureGroupStratifier(json, '', elem.stratifierList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroupPopulation(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureGroupPopulation(jsn : TJsonObject) : TFhirMeasureGroupPopulation;
begin
  result := TFhirMeasureGroupPopulation.create;
  try
    ParseMeasureGroupPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupPopulationProperties(jsn : TJsonObject; result : TFhirMeasureGroupPopulation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('criteria') or jsn.has('_criteria') then
        result.criteriaElement := ParseString(jsn['criteria'], jsn.vObj['_criteria']);{q}
end;

procedure TFHIRJsonComposer.ComposeMeasureGroupPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureGroupPopulation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'criteria', elem.criteriaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'criteria', elem.criteriaElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroupStratifier(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureGroupStratifier(jsn : TJsonObject) : TFhirMeasureGroupStratifier;
begin
  result := TFhirMeasureGroupStratifier.create;
  try
    ParseMeasureGroupStratifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupStratifierProperties(jsn : TJsonObject; result : TFhirMeasureGroupStratifier);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('criteria') or jsn.has('_criteria') then
        result.criteriaElement := ParseString(jsn['criteria'], jsn.vObj['_criteria']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
end;

procedure TFHIRJsonComposer.ComposeMeasureGroupStratifier(json : TJSONWriter; name : string; elem : TFhirMeasureGroupStratifier; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'criteria', elem.criteriaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'criteria', elem.criteriaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureSupplementalData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureSupplementalData(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureSupplementalData(jsn : TJsonObject) : TFhirMeasureSupplementalData;
begin
  result := TFhirMeasureSupplementalData.create;
  try
    ParseMeasureSupplementalDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureSupplementalDataProperties(jsn : TJsonObject; result : TFhirMeasureSupplementalData);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('usage') then
      iterateArray(jsn.vArr['usage'], result.usageList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('criteria') or jsn.has('_criteria') then
        result.criteriaElement := ParseString(jsn['criteria'], jsn.vObj['_criteria']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
end;

procedure TFHIRJsonComposer.ComposeMeasureSupplementalData(json : TJSONWriter; name : string; elem : TFhirMeasureSupplementalData; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.usageList.Count > 0) then
  begin
    json.valueArray('usage');
    for i := 0 to elem.usageList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.usageList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'criteria', elem.criteriaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'criteria', elem.criteriaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasure(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasure(jsn : TJsonObject) : TFhirMeasure;
begin
  result := TFhirMeasure.create;
  try
    ParseMeasureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureProperties(jsn : TJsonObject; result : TFhirMeasure);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := ParseString(jsn['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := ParseDate(jsn['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := ParseDate(jsn['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('subject') then
        result.subject := ParseCodeableConcept(jsn.vObj['subject']);{q3}
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('library') then
      iterateArray(jsn.vArr['library'], result.library_List, parseReference{TFhirLibrary});
    if jsn.has('disclaimer') or jsn.has('_disclaimer') then
        result.disclaimerElement := ParseMarkdown(jsn['disclaimer'], jsn.vObj['_disclaimer']);{q}
    if jsn.has('scoring') then
        result.scoring := ParseCodeableConcept(jsn.vObj['scoring']);{q3}
    if jsn.has('compositeScoring') then
        result.compositeScoring := ParseCodeableConcept(jsn.vObj['compositeScoring']);{q3}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('riskAdjustment') or jsn.has('_riskAdjustment') then
        result.riskAdjustmentElement := ParseString(jsn['riskAdjustment'], jsn.vObj['_riskAdjustment']);{q}
    if jsn.has('rateAggregation') or jsn.has('_rateAggregation') then
        result.rateAggregationElement := ParseString(jsn['rateAggregation'], jsn.vObj['_rateAggregation']);{q}
    if jsn.has('rationale') or jsn.has('_rationale') then
        result.rationaleElement := ParseMarkdown(jsn['rationale'], jsn.vObj['_rationale']);{q}
    if jsn.has('clinicalRecommendationStatement') or jsn.has('_clinicalRecommendationStatement') then
        result.clinicalRecommendationStatementElement := ParseMarkdown(jsn['clinicalRecommendationStatement'], jsn.vObj['_clinicalRecommendationStatement']);{q}
    if jsn.has('improvementNotation') or jsn.has('_improvementNotation') then
        result.improvementNotationElement := ParseString(jsn['improvementNotation'], jsn.vObj['_improvementNotation']);{q}
      if jsn.has('definition') or jsn.has('_definition') then
      iteratePrimitiveArray(jsn.vArr['definition'], jsn.vArr['_definition'], result.definitionList, parseMarkdown);
    if jsn.has('guidance') or jsn.has('_guidance') then
        result.guidanceElement := ParseMarkdown(jsn['guidance'], jsn.vObj['_guidance']);{q}
    if jsn.has('set') or jsn.has('_set') then
        result.set_Element := ParseString(jsn['set'], jsn.vObj['_set']);{q}
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseMeasureGroup);
    if jsn.has('supplementalData') then
      iterateArray(jsn.vArr['supplementalData'], result.supplementalDataList, parseMeasureSupplementalData);
end;

procedure TFHIRJsonComposer.ComposeMeasure(json : TJSONWriter; name : string; elem : TFhirMeasure; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('effectivePeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('topic') and (SummaryOption in [soFull, soData]) and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contributor') and (SummaryOption in [soFull, soData]) and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('relatedArtifact') and (SummaryOption in [soFull, soData]) and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('library_') and (SummaryOption in [soFull, soData]) and (elem.library_List.Count > 0) then
  begin
    json.valueArray('library');
    for i := 0 to elem.library_List.Count - 1 do
      ComposeReference{TFhirLibrary}(json, '', elem.library_List[i]); {z - Reference(Library)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('disclaimer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'disclaimer', elem.disclaimerElement, false);
  if not elem.noCompose and doCompose('disclaimer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'disclaimer', elem.disclaimerElement, false);
  if not elem.noCompose and doCompose('scoring') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'scoring', elem.scoring); {a}
  if not elem.noCompose and doCompose('compositeScoring') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'compositeScoring', elem.compositeScoring); {a}
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('riskAdjustment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'riskAdjustment', elem.riskAdjustmentElement, false);
  if not elem.noCompose and doCompose('riskAdjustment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'riskAdjustment', elem.riskAdjustmentElement, false);
  if not elem.noCompose and doCompose('rateAggregation') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'rateAggregation', elem.rateAggregationElement, false);
  if not elem.noCompose and doCompose('rateAggregation') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'rateAggregation', elem.rateAggregationElement, false);
  if not elem.noCompose and doCompose('rationale') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'rationale', elem.rationaleElement, false);
  if not elem.noCompose and doCompose('rationale') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'rationale', elem.rationaleElement, false);
  if not elem.noCompose and doCompose('clinicalRecommendationStatement') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'clinicalRecommendationStatement', elem.clinicalRecommendationStatementElement, false);
  if not elem.noCompose and doCompose('clinicalRecommendationStatement') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'clinicalRecommendationStatement', elem.clinicalRecommendationStatementElement, false);
  if not elem.noCompose and doCompose('improvementNotation') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'improvementNotation', elem.improvementNotationElement, false);
  if not elem.noCompose and doCompose('improvementNotation') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'improvementNotation', elem.improvementNotationElement, false);
  if not elem.noCompose and doCompose('definition') and (SummaryOption in [soFull, soSummary, soData]) and (elem.definitionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.definitionList.Count - 1 do
    begin
      ext := ext or ((elem.definitionList[i].id <> '') or (elem.definitionList[i].hasExtensionList) {no-comments or (elem.definitionList[i].hasComments)});
      val := val or (elem.definitionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('definition');
      for i := 0 to elem.definitionList.Count - 1 do
        ComposeMarkdownValue(json, '',elem.definitionList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_definition');
      for i := 0 to elem.definitionList.Count - 1 do
        ComposeMarkdownProps(json, '',elem.definitionList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('guidance') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'guidance', elem.guidanceElement, false);
  if not elem.noCompose and doCompose('guidance') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'guidance', elem.guidanceElement, false);
  if not elem.noCompose and doCompose('set_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'set', elem.set_Element, false);
  if not elem.noCompose and doCompose('set_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'set', elem.set_Element, false);
  if not elem.noCompose and doCompose('group') and (SummaryOption in [soFull, soData]) and (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeMeasureGroup(json, '', elem.groupList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('supplementalData') and (SummaryOption in [soFull, soData]) and (elem.supplementalDataList.Count > 0) then
  begin
    json.valueArray('supplementalData');
    for i := 0 to elem.supplementalDataList.Count - 1 do
      ComposeMeasureSupplementalData(json, '', elem.supplementalDataList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
procedure TFHIRJsonParser.ParseMeasureReportGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroup(jsn : TJsonObject) : TFhirMeasureReportGroup;
begin
  result := TFhirMeasureReportGroup.create;
  try
    ParseMeasureReportGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupProperties(jsn : TJsonObject; result : TFhirMeasureReportGroup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], result.populationList, parseMeasureReportGroupPopulation);
    if jsn.has('measureScore') then
        result.measureScore := ParseQuantity(jsn.vObj['measureScore']);{q3}
    if jsn.has('stratifier') then
      iterateArray(jsn.vArr['stratifier'], result.stratifierList, parseMeasureReportGroupStratifier);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroup(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.populationList.Count > 0) then
  begin
    json.valueArray('population');
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMeasureReportGroupPopulation(json, '', elem.populationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'measureScore', elem.measureScore); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.stratifierList.Count > 0) then
  begin
    json.valueArray('stratifier');
    for i := 0 to elem.stratifierList.Count - 1 do
      ComposeMeasureReportGroupStratifier(json, '', elem.stratifierList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupPopulation(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroupPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupPopulation;
begin
  result := TFhirMeasureReportGroupPopulation.create;
  try
    ParseMeasureReportGroupPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupPopulationProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupPopulation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('count') or jsn.has('_count') then
        result.countElement := ParseInteger(jsn['count'], jsn.vObj['_count']);{q}
    if jsn.has('subjects') then
        result.subjects := ParseReference{TFhirList}(jsn.vObj['subjects']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupPopulation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'count', elem.countElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'count', elem.countElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirList}(json, 'subjects', elem.subjects); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifier(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifier(jsn : TJsonObject) : TFhirMeasureReportGroupStratifier;
begin
  result := TFhirMeasureReportGroupStratifier.create;
  try
    ParseMeasureReportGroupStratifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifier);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('stratum') then
      iterateArray(jsn.vArr['stratum'], result.stratumList, parseMeasureReportGroupStratifierStratum);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifier(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifier; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.stratumList.Count > 0) then
  begin
    json.valueArray('stratum');
    for i := 0 to elem.stratumList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratum(json, '', elem.stratumList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifierStratum(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratum;
begin
  result := TFhirMeasureReportGroupStratifierStratum.create;
  try
    ParseMeasureReportGroupStratifierStratumProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifierStratum);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('value') then
        result.value := ParseCodeableConcept(jsn.vObj['value']);{q3}
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], result.populationList, parseMeasureReportGroupStratifierStratumPopulation);
    if jsn.has('measureScore') then
        result.measureScore := ParseQuantity(jsn.vObj['measureScore']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifierStratum(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifierStratum; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'value', elem.value); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.populationList.Count > 0) then
  begin
    json.valueArray('population');
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratumPopulation(json, '', elem.populationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'measureScore', elem.measureScore); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifierStratumPopulation(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratumPopulation;
begin
  result := TFhirMeasureReportGroupStratifierStratumPopulation.create;
  try
    ParseMeasureReportGroupStratifierStratumPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumPopulationProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifierStratumPopulation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('count') or jsn.has('_count') then
        result.countElement := ParseInteger(jsn['count'], jsn.vObj['_count']);{q}
    if jsn.has('subjects') then
        result.subjects := ParseReference{TFhirList}(jsn.vObj['subjects']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifierStratumPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifierStratumPopulation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'count', elem.countElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'count', elem.countElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirList}(json, 'subjects', elem.subjects); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReport(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReport(jsn : TJsonObject) : TFhirMeasureReport;
begin
  result := TFhirMeasureReport.create;
  try
    ParseMeasureReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportProperties(jsn : TJsonObject; result : TFhirMeasureReport);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirMeasureReportStatusEnum, SYSTEMS_TFhirMeasureReportStatusEnum);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirMeasureReportTypeEnum, SYSTEMS_TFhirMeasureReportTypeEnum);
    if jsn.has('measure') then
        result.measure := ParseReference{TFhirMeasure}(jsn.vObj['measure']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('reportingOrganization') then
        result.reportingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['reportingOrganization']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseMeasureReportGroup);
    if jsn.has('evaluatedResources') then
        result.evaluatedResources := ParseReference{TFhirBundle}(jsn.vObj['evaluatedResources']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMeasureReport(json : TJSONWriter; name : string; elem : TFhirMeasureReport; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMeasureReportStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMeasureReportStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirMeasureReportTypeEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirMeasureReportTypeEnum, false);
  if not elem.noCompose and doCompose('measure') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirMeasure}(json, 'measure', elem.measure); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('reportingOrganization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'reportingOrganization', elem.reportingOrganization); {a}
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('group') and (SummaryOption in [soFull, soData]) and (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeMeasureReportGroup(json, '', elem.groupList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('evaluatedResources') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirBundle}(json, 'evaluatedResources', elem.evaluatedResources); {a}
end;

{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
procedure TFHIRJsonParser.ParseMedia(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedia(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedia(jsn : TJsonObject) : TFhirMedia;
begin
  result := TFhirMedia.create;
  try
    ParseMediaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMediaProperties(jsn : TJsonObject; result : TFhirMedia);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirReference});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirMediaStatusEnum, SYSTEMS_TFhirMediaStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('modality') then
        result.modality := ParseCodeableConcept(jsn.vObj['modality']);{q3}
    if jsn.has('view') then
        result.view := ParseCodeableConcept(jsn.vObj['view']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('createdPeriod') {a4} then
      result.created := ParsePeriod(jsn.vObj['createdPeriod']);
    if jsn.has('createdDateTime') or jsn.has('_createdDateTime') then
      result.created := parseDateTime(jsn['createdDateTime'], jsn.vObj['_createdDateTime']);
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := ParseInstant(jsn['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('operator') then
        result.operator := ParseReference{Resource}(jsn.vObj['operator']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('deviceName') or jsn.has('_deviceName') then
        result.deviceNameElement := ParseString(jsn['deviceName'], jsn.vObj['_deviceName']);{q}
    if jsn.has('device') then
        result.device := ParseReference{Resource}(jsn.vObj['device']);{q3}
    if jsn.has('height') or jsn.has('_height') then
        result.heightElement := ParsePositiveInt(jsn['height'], jsn.vObj['_height']);{q}
    if jsn.has('width') or jsn.has('_width') then
        result.widthElement := ParsePositiveInt(jsn['width'], jsn.vObj['_width']);{q}
    if jsn.has('frames') or jsn.has('_frames') then
        result.framesElement := ParsePositiveInt(jsn['frames'], jsn.vObj['_frames']);{q}
    if jsn.has('duration') or jsn.has('_duration') then
        result.durationElement := ParseDecimal(jsn['duration'], jsn.vObj['_duration']);{q}
    if jsn.has('content') then
        result.content := ParseAttachment(jsn.vObj['content']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeMedia(json : TJSONWriter; name : string; elem : TFhirMedia; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(ServiceRequest|CarePlan)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.partOfList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMediaStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMediaStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('modality') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'modality', elem.modality); {a}
  if not elem.noCompose and doCompose('view') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'view', elem.view); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.created is TFhirPeriod) then 
    ComposePeriod(json, 'createdPeriod', TFhirPeriod(elem.created)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.created is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'createdDateTime', TFhirDateTime(elem.created), false);
    ComposeDateTimeProps(json, 'createdDateTime', TFhirDateTime(elem.created), false);
  end;
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('operator') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'operator', elem.operator); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('bodySite') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if not elem.noCompose and doCompose('deviceName') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'deviceName', elem.deviceNameElement, false);
  if not elem.noCompose and doCompose('deviceName') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'deviceName', elem.deviceNameElement, false);
  if not elem.noCompose and doCompose('device') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'device', elem.device); {a}
  if not elem.noCompose and doCompose('height') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'height', elem.heightElement, false);
  if not elem.noCompose and doCompose('height') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'height', elem.heightElement, false);
  if not elem.noCompose and doCompose('width') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'width', elem.widthElement, false);
  if not elem.noCompose and doCompose('width') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'width', elem.widthElement, false);
  if not elem.noCompose and (not isCanonical or (elem.frames <> '1')) and doCompose('frames') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'frames', elem.framesElement, false);
  if not elem.noCompose and (not isCanonical or (elem.frames <> '1')) and doCompose('frames') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'frames', elem.framesElement, false);
  if not elem.noCompose and doCompose('duration') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'duration', elem.durationElement, false);
  if not elem.noCompose and doCompose('duration') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'duration', elem.durationElement, false);
  if not elem.noCompose and doCompose('content') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(json, 'content', elem.content); {a}
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
procedure TFHIRJsonParser.ParseMedicationIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationIngredient(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationIngredient(jsn : TJsonObject) : TFhirMedicationIngredient;
begin
  result := TFhirMedicationIngredient.create;
  try
    ParseMedicationIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationIngredientProperties(jsn : TJsonObject; result : TFhirMedicationIngredient);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('itemCodeableConcept') {a4} then
      result.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      result.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('isActive') or jsn.has('_isActive') then
        result.isActiveElement := ParseBoolean(jsn['isActive'], jsn.vObj['_isActive']);{q}
    if jsn.has('amount') then
        result.amount := ParseRatio(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationIngredient(json : TJSONWriter; name : string; elem : TFhirMedicationIngredient; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(elem.item)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(elem.item));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'isActive', elem.isActiveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'isActive', elem.isActiveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeRatio(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationBatch(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationBatch(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationBatch(jsn : TJsonObject) : TFhirMedicationBatch;
begin
  result := TFhirMedicationBatch.create;
  try
    ParseMedicationBatchProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationBatchProperties(jsn : TJsonObject; result : TFhirMedicationBatch);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        result.lotNumberElement := ParseString(jsn['lotNumber'], jsn.vObj['_lotNumber']);{q}
    if jsn.has('expirationDate') or jsn.has('_expirationDate') then
        result.expirationDateElement := ParseDateTime(jsn['expirationDate'], jsn.vObj['_expirationDate']);{q}
end;

procedure TFHIRJsonComposer.ComposeMedicationBatch(json : TJSONWriter; name : string; elem : TFhirMedicationBatch; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lotNumber', elem.lotNumberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lotNumber', elem.lotNumberElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'expirationDate', elem.expirationDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'expirationDate', elem.expirationDateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedication(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedication(jsn : TJsonObject) : TFhirMedication;
begin
  result := TFhirMedication.create;
  try
    ParseMedicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationProperties(jsn : TJsonObject; result : TFhirMedication);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirMedicationStatusEnum, SYSTEMS_TFhirMedicationStatusEnum);
    if jsn.has('manufacturer') then
        result.manufacturer := ParseReference{TFhirOrganization}(jsn.vObj['manufacturer']);{q3}
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('amount') then
        result.amount := ParseQuantity(jsn.vObj['amount']);{q3}
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], result.ingredientList, parseMedicationIngredient);
    if jsn.has('batch') then
        result.batch := ParseMedicationBatch(jsn.vObj['batch']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedication(json : TJSONWriter; name : string; elem : TFhirMedication; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationStatusEnum, false);
  if not elem.noCompose and doCompose('manufacturer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'manufacturer', elem.manufacturer); {a}
  if not elem.noCompose and doCompose('form') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if not elem.noCompose and doCompose('amount') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'amount', elem.amount); {a}
  if not elem.noCompose and doCompose('ingredient') and (SummaryOption in [soFull, soData]) and (elem.ingredientList.Count > 0) then
  begin
    json.valueArray('ingredient');
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeMedicationIngredient(json, '', elem.ingredientList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('batch') and (SummaryOption in [soFull, soData]) then
    ComposeMedicationBatch(json, 'batch', elem.batch); {a}
end;

{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
procedure TFHIRJsonParser.ParseMedicationAdministrationPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationAdministrationPerformer(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationAdministrationPerformer(jsn : TJsonObject) : TFhirMedicationAdministrationPerformer;
begin
  result := TFhirMedicationAdministrationPerformer.create;
  try
    ParseMedicationAdministrationPerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationPerformerProperties(jsn : TJsonObject; result : TFhirMedicationAdministrationPerformer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('function') then
        result.function_ := ParseCodeableConcept(jsn.vObj['function']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationAdministrationPerformer(json : TJSONWriter; name : string; elem : TFhirMedicationAdministrationPerformer; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'function', elem.function_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationDosage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationAdministrationDosage(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationAdministrationDosage(jsn : TJsonObject) : TFhirMedicationAdministrationDosage;
begin
  result := TFhirMedicationAdministrationDosage.create;
  try
    ParseMedicationAdministrationDosageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationDosageProperties(jsn : TJsonObject; result : TFhirMedicationAdministrationDosage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
    if jsn.has('site') then
        result.site := ParseCodeableConcept(jsn.vObj['site']);{q3}
    if jsn.has('route') then
        result.route := ParseCodeableConcept(jsn.vObj['route']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('dose') then
        result.dose := ParseQuantity(jsn.vObj['dose']);{q3}
    if jsn.has('rateRatio') {a4} then
      result.rate := ParseRatio(jsn.vObj['rateRatio']);
    if jsn.has('rateQuantity') {a4} then
      result.rate := ParseQuantity(jsn.vObj['rateQuantity']);
end;

procedure TFHIRJsonComposer.ComposeMedicationAdministrationDosage(json : TJSONWriter; name : string; elem : TFhirMedicationAdministrationDosage; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'site', elem.site); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'route', elem.route); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'dose', elem.dose); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.rate is TFhirRatio) then 
    ComposeRatio(json, 'rateRatio', TFhirRatio(elem.rate)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.rate is TFhirQuantity) then 
    ComposeQuantity(json, 'rateQuantity', TFhirQuantity(elem.rate)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationAdministration(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationAdministration(jsn : TJsonObject) : TFhirMedicationAdministration;
begin
  result := TFhirMedicationAdministration.create;
  try
    ParseMedicationAdministrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationProperties(jsn : TJsonObject; result : TFhirMedicationAdministration);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirMedicationAdminStatusEnum, SYSTEMS_TFhirMedicationAdminStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('medicationCodeableConcept') {a4} then
      result.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      result.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseMedicationAdministrationPerformer);
    if jsn.has('statusReason') then
      iterateArray(jsn.vArr['statusReason'], result.statusReasonList, parseCodeableConcept);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('request') then
        result.request := ParseReference{TFhirMedicationRequest}(jsn.vObj['request']);{q3}
    if jsn.has('device') then
      iterateArray(jsn.vArr['device'], result.deviceList, parseReference{TFhirDevice});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('dosage') then
        result.dosage := ParseMedicationAdministrationDosage(jsn.vObj['dosage']);{q3}
    if jsn.has('eventHistory') then
      iterateArray(jsn.vArr['eventHistory'], result.eventHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeMedicationAdministration(json : TJSONWriter; name : string; elem : TFhirMedicationAdministration; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('instantiates') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(MedicationAdministration|Procedure)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationAdminStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationAdminStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(elem.medication));
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('supportingInformation') and (SummaryOption in [soFull, soData]) and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soSummary, soData]) and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeMedicationAdministrationPerformer(json, '', elem.performerList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('statusReason') and (SummaryOption in [soFull, soData]) and (elem.statusReasonList.Count > 0) then
  begin
    json.valueArray('statusReason');
    for i := 0 to elem.statusReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.statusReasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|DiagnosticReport)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirMedicationRequest}(json, 'request', elem.request); {a}
  if not elem.noCompose and doCompose('device') and (SummaryOption in [soFull, soData]) and (elem.deviceList.Count > 0) then
  begin
    json.valueArray('device');
    for i := 0 to elem.deviceList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.deviceList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('dosage') and (SummaryOption in [soFull, soData]) then
    ComposeMedicationAdministrationDosage(json, 'dosage', elem.dosage); {a}
  if not elem.noCompose and doCompose('eventHistory') and (SummaryOption in [soFull, soData]) and (elem.eventHistoryList.Count > 0) then
  begin
    json.valueArray('eventHistory');
    for i := 0 to elem.eventHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.eventHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
procedure TFHIRJsonParser.ParseMedicationDispensePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationDispensePerformer(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationDispensePerformer(jsn : TJsonObject) : TFhirMedicationDispensePerformer;
begin
  result := TFhirMedicationDispensePerformer.create;
  try
    ParseMedicationDispensePerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationDispensePerformerProperties(jsn : TJsonObject; result : TFhirMedicationDispensePerformer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('function') then
        result.function_ := ParseCodeableConcept(jsn.vObj['function']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationDispensePerformer(json : TJSONWriter; name : string; elem : TFhirMedicationDispensePerformer; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'function', elem.function_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationDispenseSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationDispenseSubstitution(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationDispenseSubstitution(jsn : TJsonObject) : TFhirMedicationDispenseSubstitution;
begin
  result := TFhirMedicationDispenseSubstitution.create;
  try
    ParseMedicationDispenseSubstitutionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationDispenseSubstitutionProperties(jsn : TJsonObject; result : TFhirMedicationDispenseSubstitution);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('wasSubstituted') or jsn.has('_wasSubstituted') then
        result.wasSubstitutedElement := ParseBoolean(jsn['wasSubstituted'], jsn.vObj['_wasSubstituted']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('responsibleParty') then
      iterateArray(jsn.vArr['responsibleParty'], result.responsiblePartyList, parseReference{TFhirPractitioner});
end;

procedure TFHIRJsonComposer.ComposeMedicationDispenseSubstitution(json : TJSONWriter; name : string; elem : TFhirMedicationDispenseSubstitution; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'wasSubstituted', elem.wasSubstitutedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'wasSubstituted', elem.wasSubstitutedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.responsiblePartyList.Count > 0) then
  begin
    json.valueArray('responsibleParty');
    for i := 0 to elem.responsiblePartyList.Count - 1 do
      ComposeReference{TFhirPractitioner}(json, '', elem.responsiblePartyList[i]); {z - Reference(Practitioner)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationDispense(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationDispense(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationDispense(jsn : TJsonObject) : TFhirMedicationDispense;
begin
  result := TFhirMedicationDispense.create;
  try
    ParseMedicationDispenseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationDispenseProperties(jsn : TJsonObject; result : TFhirMedicationDispense);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirProcedure});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirMedicationDispenseStatusEnum, SYSTEMS_TFhirMedicationDispenseStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('medicationCodeableConcept') {a4} then
      result.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      result.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseMedicationDispensePerformer);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('authorizingPrescription') then
      iterateArray(jsn.vArr['authorizingPrescription'], result.authorizingPrescriptionList, parseReference{TFhirMedicationRequest});
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('daysSupply') then
        result.daysSupply := ParseQuantity(jsn.vObj['daysSupply']);{q3}
    if jsn.has('whenPrepared') or jsn.has('_whenPrepared') then
        result.whenPreparedElement := ParseDateTime(jsn['whenPrepared'], jsn.vObj['_whenPrepared']);{q}
    if jsn.has('whenHandedOver') or jsn.has('_whenHandedOver') then
        result.whenHandedOverElement := ParseDateTime(jsn['whenHandedOver'], jsn.vObj['_whenHandedOver']);{q}
    if jsn.has('destination') then
        result.destination := ParseReference{TFhirLocation}(jsn.vObj['destination']);{q3}
    if jsn.has('receiver') then
      iterateArray(jsn.vArr['receiver'], result.receiverList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('dosageInstruction') then
      iterateArray(jsn.vArr['dosageInstruction'], result.dosageInstructionList, parseDosage);
    if jsn.has('substitution') then
        result.substitution := ParseMedicationDispenseSubstitution(jsn.vObj['substitution']);{q3}
    if jsn.has('detectedIssue') then
      iterateArray(jsn.vArr['detectedIssue'], result.detectedIssueList, parseReference{TFhirDetectedIssue});
    if jsn.has('statusReasonCodeableConcept') {a4} then
      result.statusReason := ParseCodeableConcept(jsn.vObj['statusReasonCodeableConcept']);
    if jsn.has('statusReasonReference') {a3} then
      result.statusReason := ParseReference(jsn.vObj['statusReasonReference']);
    if jsn.has('eventHistory') then
      iterateArray(jsn.vArr['eventHistory'], result.eventHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeMedicationDispense(json : TJSONWriter; name : string; elem : TFhirMedicationDispense; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirProcedure}(json, '', elem.partOfList[i]); {z - Reference(Procedure)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationDispenseStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationDispenseStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(elem.medication));
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('supportingInformation') and (SummaryOption in [soFull, soData]) and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soData]) and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeMedicationDispensePerformer(json, '', elem.performerList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and doCompose('authorizingPrescription') and (SummaryOption in [soFull, soData]) and (elem.authorizingPrescriptionList.Count > 0) then
  begin
    json.valueArray('authorizingPrescription');
    for i := 0 to elem.authorizingPrescriptionList.Count - 1 do
      ComposeReference{TFhirMedicationRequest}(json, '', elem.authorizingPrescriptionList[i]); {z - Reference(MedicationRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and doCompose('daysSupply') and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'daysSupply', elem.daysSupply); {a}
  if not elem.noCompose and doCompose('whenPrepared') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'whenPrepared', elem.whenPreparedElement, false);
  if not elem.noCompose and doCompose('whenPrepared') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'whenPrepared', elem.whenPreparedElement, false);
  if not elem.noCompose and doCompose('whenHandedOver') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'whenHandedOver', elem.whenHandedOverElement, false);
  if not elem.noCompose and doCompose('whenHandedOver') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'whenHandedOver', elem.whenHandedOverElement, false);
  if not elem.noCompose and doCompose('destination') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'destination', elem.destination); {a}
  if not elem.noCompose and doCompose('receiver') and (SummaryOption in [soFull, soData]) and (elem.receiverList.Count > 0) then
  begin
    json.valueArray('receiver');
    for i := 0 to elem.receiverList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.receiverList[i]); {z - Reference(Patient|Practitioner)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('dosageInstruction') and (SummaryOption in [soFull, soData]) and (elem.dosageInstructionList.Count > 0) then
  begin
    json.valueArray('dosageInstruction');
    for i := 0 to elem.dosageInstructionList.Count - 1 do
      ComposeDosage(json, '', elem.dosageInstructionList[i]); {z - Dosage}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('substitution') and (SummaryOption in [soFull, soData]) then
    ComposeMedicationDispenseSubstitution(json, 'substitution', elem.substitution); {a}
  if not elem.noCompose and doCompose('detectedIssue') and (SummaryOption in [soFull, soData]) and (elem.detectedIssueList.Count > 0) then
  begin
    json.valueArray('detectedIssue');
    for i := 0 to elem.detectedIssueList.Count - 1 do
      ComposeReference{TFhirDetectedIssue}(json, '', elem.detectedIssueList[i]); {z - Reference(DetectedIssue)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.statusReason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'statusReasonCodeableConcept', TFhirCodeableConcept(elem.statusReason)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.statusReason is TFhirReference) then
    ComposeReference(json, 'statusReasonReference', TFhirReference(elem.statusReason));
  if not elem.noCompose and doCompose('eventHistory') and (SummaryOption in [soFull, soData]) and (elem.eventHistoryList.Count > 0) then
  begin
    json.valueArray('eventHistory');
    for i := 0 to elem.eventHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.eventHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
procedure TFHIRJsonParser.ParseMedicationRequestDispenseRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequestDispenseRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationRequestDispenseRequest(jsn : TJsonObject) : TFhirMedicationRequestDispenseRequest;
begin
  result := TFhirMedicationRequestDispenseRequest.create;
  try
    ParseMedicationRequestDispenseRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestDispenseRequestProperties(jsn : TJsonObject; result : TFhirMedicationRequestDispenseRequest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('validityPeriod') then
        result.validityPeriod := ParsePeriod(jsn.vObj['validityPeriod']);{q3}
    if jsn.has('numberOfRepeatsAllowed') or jsn.has('_numberOfRepeatsAllowed') then
        result.numberOfRepeatsAllowedElement := ParseUnsignedInt(jsn['numberOfRepeatsAllowed'], jsn.vObj['_numberOfRepeatsAllowed']);{q}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('expectedSupplyDuration') then
        result.expectedSupplyDuration := ParseDuration(jsn.vObj['expectedSupplyDuration']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{TFhirOrganization}(jsn.vObj['performer']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationRequestDispenseRequest(json : TJSONWriter; name : string; elem : TFhirMedicationRequestDispenseRequest; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'validityPeriod', elem.validityPeriod); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfRepeatsAllowed', elem.numberOfRepeatsAllowedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfRepeatsAllowed', elem.numberOfRepeatsAllowedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'expectedSupplyDuration', elem.expectedSupplyDuration); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'performer', elem.performer); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationRequestSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequestSubstitution(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationRequestSubstitution(jsn : TJsonObject) : TFhirMedicationRequestSubstitution;
begin
  result := TFhirMedicationRequestSubstitution.create;
  try
    ParseMedicationRequestSubstitutionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestSubstitutionProperties(jsn : TJsonObject; result : TFhirMedicationRequestSubstitution);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('allowed') or jsn.has('_allowed') then
        result.allowedElement := ParseBoolean(jsn['allowed'], jsn.vObj['_allowed']);{q}
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationRequestSubstitution(json : TJSONWriter; name : string; elem : TFhirMedicationRequestSubstitution; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allowed', elem.allowedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allowed', elem.allowedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationRequest(jsn : TJsonObject) : TFhirMedicationRequest;
begin
  result := TFhirMedicationRequest.create;
  try
    ParseMedicationRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestProperties(jsn : TJsonObject; result : TFhirMedicationRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirMedicationRequestStatusEnum, SYSTEMS_TFhirMedicationRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn['intent'], jsn.vObj['_intent'], CODES_TFhirMedicationRequestIntentEnum, SYSTEMS_TFhirMedicationRequestIntentEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('medicationCodeableConcept') {a4} then
      result.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      result.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := ParseDateTime(jsn['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseReference{Resource}(jsn.vObj['requester']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{Resource}(jsn.vObj['performer']);{q3}
    if jsn.has('performerType') then
        result.performerType := ParseCodeableConcept(jsn.vObj['performerType']);{q3}
    if jsn.has('recorder') then
        result.recorder := ParseReference{TFhirPractitioner}(jsn.vObj['recorder']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('statusReason') then
        result.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);{q3}
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], result.insuranceList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('dosageInstruction') then
      iterateArray(jsn.vArr['dosageInstruction'], result.dosageInstructionList, parseDosage);
    if jsn.has('dispenseRequest') then
        result.dispenseRequest := ParseMedicationRequestDispenseRequest(jsn.vObj['dispenseRequest']);{q3}
    if jsn.has('substitution') then
        result.substitution := ParseMedicationRequestSubstitution(jsn.vObj['substitution']);{q3}
    if jsn.has('priorPrescription') then
        result.priorPrescription := ParseReference{TFhirMedicationRequest}(jsn.vObj['priorPrescription']);{q3}
    if jsn.has('detectedIssue') then
      iterateArray(jsn.vArr['detectedIssue'], result.detectedIssueList, parseReference{TFhirDetectedIssue});
    if jsn.has('eventHistory') then
      iterateArray(jsn.vArr['eventHistory'], result.eventHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeMedicationRequest(json : TJSONWriter; name : string; elem : TFhirMedicationRequest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationRequestStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationRequestStatusEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirMedicationRequestIntentEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirMedicationRequestIntentEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(elem.medication));
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('supportingInformation') and (SummaryOption in [soFull, soData]) and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('requester') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'requester', elem.requester); {a}
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'performer', elem.performer); {a}
  if not elem.noCompose and doCompose('performerType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'performerType', elem.performerType); {a}
  if not elem.noCompose and doCompose('recorder') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'recorder', elem.recorder); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('instantiates') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|MedicationRequest|ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('groupIdentifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  if not elem.noCompose and doCompose('statusReason') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'statusReason', elem.statusReason); {a}
  if not elem.noCompose and doCompose('insurance') and (SummaryOption in [soFull, soData]) and (elem.insuranceList.Count > 0) then
  begin
    json.valueArray('insurance');
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.insuranceList[i]); {z - Reference(Coverage|ClaimResponse)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('dosageInstruction') and (SummaryOption in [soFull, soData]) and (elem.dosageInstructionList.Count > 0) then
  begin
    json.valueArray('dosageInstruction');
    for i := 0 to elem.dosageInstructionList.Count - 1 do
      ComposeDosage(json, '', elem.dosageInstructionList[i]); {z - Dosage}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('dispenseRequest') and (SummaryOption in [soFull, soData]) then
    ComposeMedicationRequestDispenseRequest(json, 'dispenseRequest', elem.dispenseRequest); {a}
  if not elem.noCompose and doCompose('substitution') and (SummaryOption in [soFull, soData]) then
    ComposeMedicationRequestSubstitution(json, 'substitution', elem.substitution); {a}
  if not elem.noCompose and doCompose('priorPrescription') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirMedicationRequest}(json, 'priorPrescription', elem.priorPrescription); {a}
  if not elem.noCompose and doCompose('detectedIssue') and (SummaryOption in [soFull, soData]) and (elem.detectedIssueList.Count > 0) then
  begin
    json.valueArray('detectedIssue');
    for i := 0 to elem.detectedIssueList.Count - 1 do
      ComposeReference{TFhirDetectedIssue}(json, '', elem.detectedIssueList[i]); {z - Reference(DetectedIssue)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('eventHistory') and (SummaryOption in [soFull, soData]) and (elem.eventHistoryList.Count > 0) then
  begin
    json.valueArray('eventHistory');
    for i := 0 to elem.eventHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.eventHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
procedure TFHIRJsonParser.ParseMedicationStatement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationStatement(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationStatement(jsn : TJsonObject) : TFhirMedicationStatement;
begin
  result := TFhirMedicationStatement.create;
  try
    ParseMedicationStatementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationStatementProperties(jsn : TJsonObject; result : TFhirMedicationStatement);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirMedicationStatementStatusEnum, SYSTEMS_TFhirMedicationStatementStatusEnum);
    if jsn.has('statusReason') then
      iterateArray(jsn.vArr['statusReason'], result.statusReasonList, parseCodeableConcept);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('medicationCodeableConcept') {a4} then
      result.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      result.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('dateAsserted') or jsn.has('_dateAsserted') then
        result.dateAssertedElement := ParseDateTime(jsn['dateAsserted'], jsn.vObj['_dateAsserted']);{q}
    if jsn.has('informationSource') then
        result.informationSource := ParseReference{Resource}(jsn.vObj['informationSource']);{q3}
    if jsn.has('derivedFrom') then
      iterateArray(jsn.vArr['derivedFrom'], result.derivedFromList, parseReference{TFhirReference});
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('dosage') then
      iterateArray(jsn.vArr['dosage'], result.dosageList, parseDosage);
end;

procedure TFHIRJsonComposer.ComposeMedicationStatement(json : TJSONWriter; name : string; elem : TFhirMedicationStatement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(MedicationRequest|CarePlan|ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(MedicationAdministration|MedicationDispense|MedicationStatement|Procedure|Observation)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationStatementStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationStatementStatusEnum, false);
  if not elem.noCompose and doCompose('statusReason') and (SummaryOption in [soFull, soData]) and (elem.statusReasonList.Count > 0) then
  begin
    json.valueArray('statusReason');
    for i := 0 to elem.statusReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.statusReasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(elem.medication));
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if not elem.noCompose and doCompose('dateAsserted') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'dateAsserted', elem.dateAssertedElement, false);
  if not elem.noCompose and doCompose('dateAsserted') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'dateAsserted', elem.dateAssertedElement, false);
  if not elem.noCompose and doCompose('informationSource') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'informationSource', elem.informationSource); {a}
  if not elem.noCompose and doCompose('derivedFrom') and (SummaryOption in [soFull, soData]) and (elem.derivedFromList.Count > 0) then
  begin
    json.valueArray('derivedFrom');
    for i := 0 to elem.derivedFromList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.derivedFromList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|DiagnosticReport)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('dosage') and (SummaryOption in [soFull, soData]) and (elem.dosageList.Count > 0) then
  begin
    json.valueArray('dosage');
    for i := 0 to elem.dosageList.Count - 1 do
      ComposeDosage(json, '', elem.dosageList[i]); {z - Dosage}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
procedure TFHIRJsonParser.ParseMedicinalProductName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductName(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductName(jsn : TJsonObject) : TFhirMedicinalProductName;
begin
  result := TFhirMedicinalProductName.create;
  try
    ParseMedicinalProductNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductNameProperties(jsn : TJsonObject; result : TFhirMedicinalProductName);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('fullName') or jsn.has('_fullName') then
        result.fullNameElement := ParseString(jsn['fullName'], jsn.vObj['_fullName']);{q}
    if jsn.has('namePart') then
      iterateArray(jsn.vArr['namePart'], result.namePartList, parseMedicinalProductNameNamePart);
    if jsn.has('countryLanguage') then
      iterateArray(jsn.vArr['countryLanguage'], result.countryLanguageList, parseMedicinalProductNameCountryLanguage);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductName(json : TJSONWriter; name : string; elem : TFhirMedicinalProductName; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'fullName', elem.fullNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'fullName', elem.fullNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.namePartList.Count > 0) then
  begin
    json.valueArray('namePart');
    for i := 0 to elem.namePartList.Count - 1 do
      ComposeMedicinalProductNameNamePart(json, '', elem.namePartList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.countryLanguageList.Count > 0) then
  begin
    json.valueArray('countryLanguage');
    for i := 0 to elem.countryLanguageList.Count - 1 do
      ComposeMedicinalProductNameCountryLanguage(json, '', elem.countryLanguageList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductNameNamePart(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductNameNamePart(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductNameNamePart(jsn : TJsonObject) : TFhirMedicinalProductNameNamePart;
begin
  result := TFhirMedicinalProductNameNamePart.create;
  try
    ParseMedicinalProductNameNamePartProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductNameNamePartProperties(jsn : TJsonObject; result : TFhirMedicinalProductNameNamePart);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('part') or jsn.has('_part') then
        result.partElement := ParseString(jsn['part'], jsn.vObj['_part']);{q}
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductNameNamePart(json : TJSONWriter; name : string; elem : TFhirMedicinalProductNameNamePart; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'part', elem.partElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'part', elem.partElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductNameCountryLanguage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductNameCountryLanguage(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductNameCountryLanguage(jsn : TJsonObject) : TFhirMedicinalProductNameCountryLanguage;
begin
  result := TFhirMedicinalProductNameCountryLanguage.create;
  try
    ParseMedicinalProductNameCountryLanguageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductNameCountryLanguageProperties(jsn : TJsonObject; result : TFhirMedicinalProductNameCountryLanguage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('country') then
        result.country := ParseCodeableConcept(jsn.vObj['country']);{q3}
    if jsn.has('jurisdiction') then
        result.jurisdiction := ParseCodeableConcept(jsn.vObj['jurisdiction']);{q3}
    if jsn.has('language') then
        result.language := ParseCodeableConcept(jsn.vObj['language']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductNameCountryLanguage(json : TJSONWriter; name : string; elem : TFhirMedicinalProductNameCountryLanguage; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'country', elem.country); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'jurisdiction', elem.jurisdiction); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'language', elem.language); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductManufacturingBusinessOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductManufacturingBusinessOperation(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductManufacturingBusinessOperation(jsn : TJsonObject) : TFhirMedicinalProductManufacturingBusinessOperation;
begin
  result := TFhirMedicinalProductManufacturingBusinessOperation.create;
  try
    ParseMedicinalProductManufacturingBusinessOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductManufacturingBusinessOperationProperties(jsn : TJsonObject; result : TFhirMedicinalProductManufacturingBusinessOperation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operationType') then
        result.operationType := ParseCodeableConcept(jsn.vObj['operationType']);{q3}
    if jsn.has('authorisationReferenceNumber') then
        result.authorisationReferenceNumber := ParseIdentifier(jsn.vObj['authorisationReferenceNumber']);{q3}
    if jsn.has('effectiveDate') or jsn.has('_effectiveDate') then
        result.effectiveDateElement := ParseDateTime(jsn['effectiveDate'], jsn.vObj['_effectiveDate']);{q}
    if jsn.has('confidentialityIndicator') then
        result.confidentialityIndicator := ParseCodeableConcept(jsn.vObj['confidentialityIndicator']);{q3}
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], result.manufacturerList, parseReference{TFhirOrganization});
    if jsn.has('regulator') then
        result.regulator := ParseReference{TFhirOrganization}(jsn.vObj['regulator']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductManufacturingBusinessOperation(json : TJSONWriter; name : string; elem : TFhirMedicinalProductManufacturingBusinessOperation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'operationType', elem.operationType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'authorisationReferenceNumber', elem.authorisationReferenceNumber); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'effectiveDate', elem.effectiveDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'effectiveDate', elem.effectiveDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'confidentialityIndicator', elem.confidentialityIndicator); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.manufacturerList.Count > 0) then
  begin
    json.valueArray('manufacturer');
    for i := 0 to elem.manufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.manufacturerList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'regulator', elem.regulator); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProduct(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProduct(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProduct(jsn : TJsonObject) : TFhirMedicinalProduct;
begin
  result := TFhirMedicinalProduct.create;
  try
    ParseMedicinalProductProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductProperties(jsn : TJsonObject; result : TFhirMedicinalProduct);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('combinedPharmaceuticalDoseForm') then
        result.combinedPharmaceuticalDoseForm := ParseCodeableConcept(jsn.vObj['combinedPharmaceuticalDoseForm']);{q3}
    if jsn.has('additionalMonitoringIndicator') then
        result.additionalMonitoringIndicator := ParseCodeableConcept(jsn.vObj['additionalMonitoringIndicator']);{q3}
      if jsn.has('specialMeasures') or jsn.has('_specialMeasures') then
      iteratePrimitiveArray(jsn.vArr['specialMeasures'], jsn.vArr['_specialMeasures'], result.specialMeasuresList, parseString);
    if jsn.has('paediatricUseIndicator') then
        result.paediatricUseIndicator := ParseCodeableConcept(jsn.vObj['paediatricUseIndicator']);{q3}
    if jsn.has('orphanDesignationStatus') then
        result.orphanDesignationStatus := ParseCodeableConcept(jsn.vObj['orphanDesignationStatus']);{q3}
    if jsn.has('productClassification') then
      iterateArray(jsn.vArr['productClassification'], result.productClassificationList, parseCodeableConcept);
    if jsn.has('marketingAuthorization') then
        result.marketingAuthorization := ParseReference{TFhirMedicinalProductAuthorization}(jsn.vObj['marketingAuthorization']);{q3}
    if jsn.has('packagedMedicinalProduct') then
      iterateArray(jsn.vArr['packagedMedicinalProduct'], result.packagedMedicinalProductList, parseReference{TFhirMedicinalProductPackaged});
    if jsn.has('pharmaceuticalProduct') then
      iterateArray(jsn.vArr['pharmaceuticalProduct'], result.pharmaceuticalProductList, parseReference{TFhirMedicinalProductPharmaceutical});
    if jsn.has('clinicalParticulars') then
      iterateArray(jsn.vArr['clinicalParticulars'], result.clinicalParticularsList, parseReference{TFhirMedicinalProductClinicals});
    if jsn.has('attachedDocument') then
      iterateArray(jsn.vArr['attachedDocument'], result.attachedDocumentList, parseReference{TFhirDocumentReference});
    if jsn.has('masterFile') then
      iterateArray(jsn.vArr['masterFile'], result.masterFileList, parseReference{TFhirDocumentReference});
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], result.nameList, parseMedicinalProductName);
    if jsn.has('crossReference') then
      iterateArray(jsn.vArr['crossReference'], result.crossReferenceList, parseIdentifier);
    if jsn.has('manufacturingBusinessOperation') then
      iterateArray(jsn.vArr['manufacturingBusinessOperation'], result.manufacturingBusinessOperationList, parseMedicinalProductManufacturingBusinessOperation);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProduct(json : TJSONWriter; name : string; elem : TFhirMedicinalProduct; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('combinedPharmaceuticalDoseForm') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'combinedPharmaceuticalDoseForm', elem.combinedPharmaceuticalDoseForm); {a}
  if not elem.noCompose and doCompose('additionalMonitoringIndicator') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'additionalMonitoringIndicator', elem.additionalMonitoringIndicator); {a}
  if not elem.noCompose and doCompose('specialMeasures') and (SummaryOption in [soFull, soSummary, soData]) and (elem.specialMeasuresList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.specialMeasuresList.Count - 1 do
    begin
      ext := ext or ((elem.specialMeasuresList[i].id <> '') or (elem.specialMeasuresList[i].hasExtensionList) {no-comments or (elem.specialMeasuresList[i].hasComments)});
      val := val or (elem.specialMeasuresList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('specialMeasures');
      for i := 0 to elem.specialMeasuresList.Count - 1 do
        ComposeStringValue(json, '',elem.specialMeasuresList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_specialMeasures');
      for i := 0 to elem.specialMeasuresList.Count - 1 do
        ComposeStringProps(json, '',elem.specialMeasuresList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('paediatricUseIndicator') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'paediatricUseIndicator', elem.paediatricUseIndicator); {a}
  if not elem.noCompose and doCompose('orphanDesignationStatus') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'orphanDesignationStatus', elem.orphanDesignationStatus); {a}
  if not elem.noCompose and doCompose('productClassification') and (SummaryOption in [soFull, soSummary, soData]) and (elem.productClassificationList.Count > 0) then
  begin
    json.valueArray('productClassification');
    for i := 0 to elem.productClassificationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.productClassificationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('marketingAuthorization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirMedicinalProductAuthorization}(json, 'marketingAuthorization', elem.marketingAuthorization); {a}
  if not elem.noCompose and doCompose('packagedMedicinalProduct') and (SummaryOption in [soFull, soSummary, soData]) and (elem.packagedMedicinalProductList.Count > 0) then
  begin
    json.valueArray('packagedMedicinalProduct');
    for i := 0 to elem.packagedMedicinalProductList.Count - 1 do
      ComposeReference{TFhirMedicinalProductPackaged}(json, '', elem.packagedMedicinalProductList[i]); {z - Reference(MedicinalProductPackaged)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('pharmaceuticalProduct') and (SummaryOption in [soFull, soSummary, soData]) and (elem.pharmaceuticalProductList.Count > 0) then
  begin
    json.valueArray('pharmaceuticalProduct');
    for i := 0 to elem.pharmaceuticalProductList.Count - 1 do
      ComposeReference{TFhirMedicinalProductPharmaceutical}(json, '', elem.pharmaceuticalProductList[i]); {z - Reference(MedicinalProductPharmaceutical)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('clinicalParticulars') and (SummaryOption in [soFull, soSummary, soData]) and (elem.clinicalParticularsList.Count > 0) then
  begin
    json.valueArray('clinicalParticulars');
    for i := 0 to elem.clinicalParticularsList.Count - 1 do
      ComposeReference{TFhirMedicinalProductClinicals}(json, '', elem.clinicalParticularsList[i]); {z - Reference(MedicinalProductClinicals)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('attachedDocument') and (SummaryOption in [soFull, soSummary, soData]) and (elem.attachedDocumentList.Count > 0) then
  begin
    json.valueArray('attachedDocument');
    for i := 0 to elem.attachedDocumentList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.attachedDocumentList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('masterFile') and (SummaryOption in [soFull, soSummary, soData]) and (elem.masterFileList.Count > 0) then
  begin
    json.valueArray('masterFile');
    for i := 0 to elem.masterFileList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.masterFileList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) and (elem.nameList.Count > 0) then
  begin
    json.valueArray('name');
    for i := 0 to elem.nameList.Count - 1 do
      ComposeMedicinalProductName(json, '', elem.nameList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('crossReference') and (SummaryOption in [soFull, soSummary, soData]) and (elem.crossReferenceList.Count > 0) then
  begin
    json.valueArray('crossReference');
    for i := 0 to elem.crossReferenceList.Count - 1 do
      ComposeIdentifier(json, '', elem.crossReferenceList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('manufacturingBusinessOperation') and (SummaryOption in [soFull, soSummary, soData]) and (elem.manufacturingBusinessOperationList.Count > 0) then
  begin
    json.valueArray('manufacturingBusinessOperation');
    for i := 0 to elem.manufacturingBusinessOperationList.Count - 1 do
      ComposeMedicinalProductManufacturingBusinessOperation(json, '', elem.manufacturingBusinessOperationList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
procedure TFHIRJsonParser.ParseMedicinalProductAuthorizationJurisdictionalAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductAuthorizationJurisdictionalAuthorization(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductAuthorizationJurisdictionalAuthorization(jsn : TJsonObject) : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization;
begin
  result := TFhirMedicinalProductAuthorizationJurisdictionalAuthorization.create;
  try
    ParseMedicinalProductAuthorizationJurisdictionalAuthorizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductAuthorizationJurisdictionalAuthorizationProperties(jsn : TJsonObject; result : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('country') then
        result.country := ParseCodeableConcept(jsn.vObj['country']);{q3}
    if jsn.has('jurisdiction') then
        result.jurisdiction := ParseCodeableConcept(jsn.vObj['jurisdiction']);{q3}
    if jsn.has('number') then
        result.number := ParseIdentifier(jsn.vObj['number']);{q3}
    if jsn.has('legalStatusOfSupply') then
        result.legalStatusOfSupply := ParseCodeableConcept(jsn.vObj['legalStatusOfSupply']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductAuthorizationJurisdictionalAuthorization(json : TJSONWriter; name : string; elem : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'country', elem.country); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'jurisdiction', elem.jurisdiction); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'number', elem.number); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'legalStatusOfSupply', elem.legalStatusOfSupply); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductAuthorizationProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductAuthorizationProcedure(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductAuthorizationProcedure(jsn : TJsonObject) : TFhirMedicinalProductAuthorizationProcedure;
begin
  result := TFhirMedicinalProductAuthorizationProcedure.create;
  try
    ParseMedicinalProductAuthorizationProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductAuthorizationProcedureProperties(jsn : TJsonObject; result : TFhirMedicinalProductAuthorizationProcedure);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('number') then
        result.number := ParseIdentifier(jsn.vObj['number']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('date') then
        result.date := ParsePeriod(jsn.vObj['date']);{q3}
    if jsn.has('application') then
      iterateArray(jsn.vArr['application'], result.applicationList, parseMedicinalProductAuthorizationProcedureApplication);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductAuthorizationProcedure(json : TJSONWriter; name : string; elem : TFhirMedicinalProductAuthorizationProcedure; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'number', elem.number); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'date', elem.date); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.applicationList.Count > 0) then
  begin
    json.valueArray('application');
    for i := 0 to elem.applicationList.Count - 1 do
      ComposeMedicinalProductAuthorizationProcedureApplication(json, '', elem.applicationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductAuthorizationProcedureApplication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductAuthorizationProcedureApplication(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductAuthorizationProcedureApplication(jsn : TJsonObject) : TFhirMedicinalProductAuthorizationProcedureApplication;
begin
  result := TFhirMedicinalProductAuthorizationProcedureApplication.create;
  try
    ParseMedicinalProductAuthorizationProcedureApplicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductAuthorizationProcedureApplicationProperties(jsn : TJsonObject; result : TFhirMedicinalProductAuthorizationProcedureApplication);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('number') then
        result.number := ParseIdentifier(jsn.vObj['number']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductAuthorizationProcedureApplication(json : TJSONWriter; name : string; elem : TFhirMedicinalProductAuthorizationProcedureApplication; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'number', elem.number); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductAuthorization(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductAuthorization(jsn : TJsonObject) : TFhirMedicinalProductAuthorization;
begin
  result := TFhirMedicinalProductAuthorization.create;
  try
    ParseMedicinalProductAuthorizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductAuthorizationProperties(jsn : TJsonObject; result : TFhirMedicinalProductAuthorization);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('country') then
      iterateArray(jsn.vArr['country'], result.countryList, parseCodeableConcept);
    if jsn.has('legalStatusOfSupply') then
        result.legalStatusOfSupply := ParseCodeableConcept(jsn.vObj['legalStatusOfSupply']);{q3}
    if jsn.has('status') then
        result.status := ParseCodeableConcept(jsn.vObj['status']);{q3}
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        result.statusDateElement := ParseDateTime(jsn['statusDate'], jsn.vObj['_statusDate']);{q}
    if jsn.has('restoreDate') or jsn.has('_restoreDate') then
        result.restoreDateElement := ParseDateTime(jsn['restoreDate'], jsn.vObj['_restoreDate']);{q}
    if jsn.has('validityPeriod') then
        result.validityPeriod := ParsePeriod(jsn.vObj['validityPeriod']);{q3}
    if jsn.has('dataExclusivityPeriod') then
        result.dataExclusivityPeriod := ParsePeriod(jsn.vObj['dataExclusivityPeriod']);{q3}
    if jsn.has('dateOfFirstAuthorization') or jsn.has('_dateOfFirstAuthorization') then
        result.dateOfFirstAuthorizationElement := ParseDateTime(jsn['dateOfFirstAuthorization'], jsn.vObj['_dateOfFirstAuthorization']);{q}
    if jsn.has('internationalBirthDate') or jsn.has('_internationalBirthDate') then
        result.internationalBirthDateElement := ParseDateTime(jsn['internationalBirthDate'], jsn.vObj['_internationalBirthDate']);{q}
    if jsn.has('jurisdictionalAuthorization') then
      iterateArray(jsn.vArr['jurisdictionalAuthorization'], result.jurisdictionalAuthorizationList, parseMedicinalProductAuthorizationJurisdictionalAuthorization);
    if jsn.has('holder') then
        result.holder := ParseReference{TFhirOrganization}(jsn.vObj['holder']);{q3}
    if jsn.has('regulator') then
        result.regulator := ParseReference{TFhirOrganization}(jsn.vObj['regulator']);{q3}
    if jsn.has('procedure') then
        result.procedure_ := ParseMedicinalProductAuthorizationProcedure(jsn.vObj['procedure']);{q3}
    if jsn.has('marketingStatus') then
      iterateArray(jsn.vArr['marketingStatus'], result.marketingStatusList, parseMarketingStatus);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductAuthorization(json : TJSONWriter; name : string; elem : TFhirMedicinalProductAuthorization; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('country') and (SummaryOption in [soFull, soSummary, soData]) and (elem.countryList.Count > 0) then
  begin
    json.valueArray('country');
    for i := 0 to elem.countryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.countryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('legalStatusOfSupply') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'legalStatusOfSupply', elem.legalStatusOfSupply); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', elem.status); {a}
  if not elem.noCompose and doCompose('statusDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and doCompose('statusDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and doCompose('restoreDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'restoreDate', elem.restoreDateElement, false);
  if not elem.noCompose and doCompose('restoreDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'restoreDate', elem.restoreDateElement, false);
  if not elem.noCompose and doCompose('validityPeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'validityPeriod', elem.validityPeriod); {a}
  if not elem.noCompose and doCompose('dataExclusivityPeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'dataExclusivityPeriod', elem.dataExclusivityPeriod); {a}
  if not elem.noCompose and doCompose('dateOfFirstAuthorization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'dateOfFirstAuthorization', elem.dateOfFirstAuthorizationElement, false);
  if not elem.noCompose and doCompose('dateOfFirstAuthorization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'dateOfFirstAuthorization', elem.dateOfFirstAuthorizationElement, false);
  if not elem.noCompose and doCompose('internationalBirthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'internationalBirthDate', elem.internationalBirthDateElement, false);
  if not elem.noCompose and doCompose('internationalBirthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'internationalBirthDate', elem.internationalBirthDateElement, false);
  if not elem.noCompose and doCompose('jurisdictionalAuthorization') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionalAuthorizationList.Count > 0) then
  begin
    json.valueArray('jurisdictionalAuthorization');
    for i := 0 to elem.jurisdictionalAuthorizationList.Count - 1 do
      ComposeMedicinalProductAuthorizationJurisdictionalAuthorization(json, '', elem.jurisdictionalAuthorizationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('holder') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'holder', elem.holder); {a}
  if not elem.noCompose and doCompose('regulator') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'regulator', elem.regulator); {a}
  if not elem.noCompose and doCompose('procedure_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMedicinalProductAuthorizationProcedure(json, 'procedure', elem.procedure_); {a}
  if not elem.noCompose and doCompose('marketingStatus') and (SummaryOption in [soFull, soSummary, soData]) and (elem.marketingStatusList.Count > 0) then
  begin
    json.valueArray('marketingStatus');
    for i := 0 to elem.marketingStatusList.Count - 1 do
      ComposeMarketingStatus(json, '', elem.marketingStatusList[i]); {z - MarketingStatus}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCLINICALS}
procedure TFHIRJsonParser.ParseMedicinalProductClinicalsUndesirableEffects(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductClinicalsUndesirableEffects(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductClinicalsUndesirableEffects(jsn : TJsonObject) : TFhirMedicinalProductClinicalsUndesirableEffects;
begin
  result := TFhirMedicinalProductClinicalsUndesirableEffects.create;
  try
    ParseMedicinalProductClinicalsUndesirableEffectsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsUndesirableEffectsProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsUndesirableEffects);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('symptomConditionEffect') then
        result.symptomConditionEffect := ParseCodeableConcept(jsn.vObj['symptomConditionEffect']);{q3}
    if jsn.has('classification') then
        result.classification := ParseCodeableConcept(jsn.vObj['classification']);{q3}
    if jsn.has('frequencyOfOccurrence') then
        result.frequencyOfOccurrence := ParseCodeableConcept(jsn.vObj['frequencyOfOccurrence']);{q3}
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], result.populationList, parseMedicinalProductClinicalsUndesirableEffectsPopulation);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductClinicalsUndesirableEffects(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsUndesirableEffects; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'symptomConditionEffect', elem.symptomConditionEffect); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'classification', elem.classification); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'frequencyOfOccurrence', elem.frequencyOfOccurrence); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.populationList.Count > 0) then
  begin
    json.valueArray('population');
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMedicinalProductClinicalsUndesirableEffectsPopulation(json, '', elem.populationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsUndesirableEffectsPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductClinicalsUndesirableEffectsPopulation(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductClinicalsUndesirableEffectsPopulation(jsn : TJsonObject) : TFhirMedicinalProductClinicalsUndesirableEffectsPopulation;
begin
  result := TFhirMedicinalProductClinicalsUndesirableEffectsPopulation.create;
  try
    ParseMedicinalProductClinicalsUndesirableEffectsPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsUndesirableEffectsPopulationProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsUndesirableEffectsPopulation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('ageRange') {a4} then
      result.age := ParseRange(jsn.vObj['ageRange']);
    if jsn.has('ageCodeableConcept') {a4} then
      result.age := ParseCodeableConcept(jsn.vObj['ageCodeableConcept']);
    if jsn.has('gender') then
        result.gender := ParseCodeableConcept(jsn.vObj['gender']);{q3}
    if jsn.has('race') then
        result.race := ParseCodeableConcept(jsn.vObj['race']);{q3}
    if jsn.has('physiologicalCondition') then
        result.physiologicalCondition := ParseCodeableConcept(jsn.vObj['physiologicalCondition']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductClinicalsUndesirableEffectsPopulation(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsUndesirableEffectsPopulation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirRange) then 
    ComposeRange(json, 'ageRange', TFhirRange(elem.age)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'ageCodeableConcept', TFhirCodeableConcept(elem.age)) ;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'gender', elem.gender); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'race', elem.race); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'physiologicalCondition', elem.physiologicalCondition); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsTherapeuticIndication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductClinicalsTherapeuticIndication(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductClinicalsTherapeuticIndication(jsn : TJsonObject) : TFhirMedicinalProductClinicalsTherapeuticIndication;
begin
  result := TFhirMedicinalProductClinicalsTherapeuticIndication.create;
  try
    ParseMedicinalProductClinicalsTherapeuticIndicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsTherapeuticIndicationProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsTherapeuticIndication);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('diseaseSymptomProcedure') then
        result.diseaseSymptomProcedure := ParseCodeableConcept(jsn.vObj['diseaseSymptomProcedure']);{q3}
    if jsn.has('diseaseStatus') then
        result.diseaseStatus := ParseCodeableConcept(jsn.vObj['diseaseStatus']);{q3}
    if jsn.has('comorbidity') then
      iterateArray(jsn.vArr['comorbidity'], result.comorbidityList, parseCodeableConcept);
    if jsn.has('intendedEffect') then
        result.intendedEffect := ParseCodeableConcept(jsn.vObj['intendedEffect']);{q3}
    if jsn.has('duration') then
        result.duration := ParseQuantity(jsn.vObj['duration']);{q3}
    if jsn.has('undesirableEffects') then
      iterateArray(jsn.vArr['undesirableEffects'], result.undesirableEffectsList, parseMedicinalProductClinicalsUndesirableEffects);
    if jsn.has('otherTherapy') then
      iterateArray(jsn.vArr['otherTherapy'], result.otherTherapyList, parseMedicinalProductClinicalsTherapeuticIndicationOtherTherapy);
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], result.populationList, parseMedicinalProductClinicalsUndesirableEffectsPopulation);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductClinicalsTherapeuticIndication(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsTherapeuticIndication; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'diseaseSymptomProcedure', elem.diseaseSymptomProcedure); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'diseaseStatus', elem.diseaseStatus); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.comorbidityList.Count > 0) then
  begin
    json.valueArray('comorbidity');
    for i := 0 to elem.comorbidityList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.comorbidityList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'intendedEffect', elem.intendedEffect); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'duration', elem.duration); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.undesirableEffectsList.Count > 0) then
  begin
    json.valueArray('undesirableEffects');
    for i := 0 to elem.undesirableEffectsList.Count - 1 do
      ComposeMedicinalProductClinicalsUndesirableEffects(json, '', elem.undesirableEffectsList[i]); {z - @MedicinalProductClinicals.undesirableEffects}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.otherTherapyList.Count > 0) then
  begin
    json.valueArray('otherTherapy');
    for i := 0 to elem.otherTherapyList.Count - 1 do
      ComposeMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(json, '', elem.otherTherapyList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.populationList.Count > 0) then
  begin
    json.valueArray('population');
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMedicinalProductClinicalsUndesirableEffectsPopulation(json, '', elem.populationList[i]); {z - @MedicinalProductClinicals.undesirableEffects.population}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(jsn : TJsonObject) : TFhirMedicinalProductClinicalsTherapeuticIndicationOtherTherapy;
begin
  result := TFhirMedicinalProductClinicalsTherapeuticIndicationOtherTherapy.create;
  try
    ParseMedicinalProductClinicalsTherapeuticIndicationOtherTherapyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsTherapeuticIndicationOtherTherapyProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsTherapeuticIndicationOtherTherapy);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('therapyRelationshipType') then
        result.therapyRelationshipType := ParseCodeableConcept(jsn.vObj['therapyRelationshipType']);{q3}
    if jsn.has('medicationCodeableConcept') {a4} then
      result.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      result.medication := ParseReference(jsn.vObj['medicationReference']);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsTherapeuticIndicationOtherTherapy; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'therapyRelationshipType', elem.therapyRelationshipType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(elem.medication));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsContraindication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductClinicalsContraindication(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductClinicalsContraindication(jsn : TJsonObject) : TFhirMedicinalProductClinicalsContraindication;
begin
  result := TFhirMedicinalProductClinicalsContraindication.create;
  try
    ParseMedicinalProductClinicalsContraindicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsContraindicationProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsContraindication);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('disease') then
        result.disease := ParseCodeableConcept(jsn.vObj['disease']);{q3}
    if jsn.has('diseaseStatus') then
        result.diseaseStatus := ParseCodeableConcept(jsn.vObj['diseaseStatus']);{q3}
    if jsn.has('comorbidity') then
      iterateArray(jsn.vArr['comorbidity'], result.comorbidityList, parseCodeableConcept);
    if jsn.has('therapeuticIndication') then
      iterateArray(jsn.vArr['therapeuticIndication'], result.therapeuticIndicationList, parseMedicinalProductClinicalsTherapeuticIndication);
    if jsn.has('otherTherapy') then
      iterateArray(jsn.vArr['otherTherapy'], result.otherTherapyList, parseMedicinalProductClinicalsTherapeuticIndicationOtherTherapy);
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], result.populationList, parseMedicinalProductClinicalsUndesirableEffectsPopulation);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductClinicalsContraindication(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsContraindication; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'disease', elem.disease); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'diseaseStatus', elem.diseaseStatus); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.comorbidityList.Count > 0) then
  begin
    json.valueArray('comorbidity');
    for i := 0 to elem.comorbidityList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.comorbidityList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.therapeuticIndicationList.Count > 0) then
  begin
    json.valueArray('therapeuticIndication');
    for i := 0 to elem.therapeuticIndicationList.Count - 1 do
      ComposeMedicinalProductClinicalsTherapeuticIndication(json, '', elem.therapeuticIndicationList[i]); {z - @MedicinalProductClinicals.therapeuticIndication}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.otherTherapyList.Count > 0) then
  begin
    json.valueArray('otherTherapy');
    for i := 0 to elem.otherTherapyList.Count - 1 do
      ComposeMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(json, '', elem.otherTherapyList[i]); {z - @MedicinalProductClinicals.therapeuticIndication.otherTherapy}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.populationList.Count > 0) then
  begin
    json.valueArray('population');
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMedicinalProductClinicalsUndesirableEffectsPopulation(json, '', elem.populationList[i]); {z - @MedicinalProductClinicals.undesirableEffects.population}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsInteractions(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductClinicalsInteractions(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductClinicalsInteractions(jsn : TJsonObject) : TFhirMedicinalProductClinicalsInteractions;
begin
  result := TFhirMedicinalProductClinicalsInteractions.create;
  try
    ParseMedicinalProductClinicalsInteractionsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsInteractionsProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicalsInteractions);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('interactant') then
      iterateArray(jsn.vArr['interactant'], result.interactantList, parseCodeableConcept);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('effect') then
        result.effect := ParseCodeableConcept(jsn.vObj['effect']);{q3}
    if jsn.has('incidence') then
        result.incidence := ParseCodeableConcept(jsn.vObj['incidence']);{q3}
    if jsn.has('management') then
        result.management := ParseCodeableConcept(jsn.vObj['management']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductClinicalsInteractions(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicalsInteractions; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.interactantList.Count > 0) then
  begin
    json.valueArray('interactant');
    for i := 0 to elem.interactantList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.interactantList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'effect', elem.effect); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'incidence', elem.incidence); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'management', elem.management); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicals(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductClinicals(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductClinicals(jsn : TJsonObject) : TFhirMedicinalProductClinicals;
begin
  result := TFhirMedicinalProductClinicals.create;
  try
    ParseMedicinalProductClinicalsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductClinicalsProperties(jsn : TJsonObject; result : TFhirMedicinalProductClinicals);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('undesirableEffects') then
      iterateArray(jsn.vArr['undesirableEffects'], result.undesirableEffectsList, parseMedicinalProductClinicalsUndesirableEffects);
    if jsn.has('therapeuticIndication') then
      iterateArray(jsn.vArr['therapeuticIndication'], result.therapeuticIndicationList, parseMedicinalProductClinicalsTherapeuticIndication);
    if jsn.has('contraindication') then
      iterateArray(jsn.vArr['contraindication'], result.contraindicationList, parseMedicinalProductClinicalsContraindication);
    if jsn.has('interactions') then
      iterateArray(jsn.vArr['interactions'], result.interactionsList, parseMedicinalProductClinicalsInteractions);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductClinicals(json : TJSONWriter; name : string; elem : TFhirMedicinalProductClinicals; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('undesirableEffects') and (SummaryOption in [soFull, soSummary, soData]) and (elem.undesirableEffectsList.Count > 0) then
  begin
    json.valueArray('undesirableEffects');
    for i := 0 to elem.undesirableEffectsList.Count - 1 do
      ComposeMedicinalProductClinicalsUndesirableEffects(json, '', elem.undesirableEffectsList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('therapeuticIndication') and (SummaryOption in [soFull, soSummary, soData]) and (elem.therapeuticIndicationList.Count > 0) then
  begin
    json.valueArray('therapeuticIndication');
    for i := 0 to elem.therapeuticIndicationList.Count - 1 do
      ComposeMedicinalProductClinicalsTherapeuticIndication(json, '', elem.therapeuticIndicationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contraindication') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contraindicationList.Count > 0) then
  begin
    json.valueArray('contraindication');
    for i := 0 to elem.contraindicationList.Count - 1 do
      ComposeMedicinalProductClinicalsContraindication(json, '', elem.contraindicationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('interactions') and (SummaryOption in [soFull, soSummary, soData]) and (elem.interactionsList.Count > 0) then
  begin
    json.valueArray('interactions');
    for i := 0 to elem.interactionsList.Count - 1 do
      ComposeMedicinalProductClinicalsInteractions(json, '', elem.interactionsList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICINALPRODUCTCLINICALS}
{$IFDEF FHIR_MEDICINALPRODUCTDEVICESPEC}
procedure TFHIRJsonParser.ParseMedicinalProductDeviceSpecMaterial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDeviceSpecMaterial(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductDeviceSpecMaterial(jsn : TJsonObject) : TFhirMedicinalProductDeviceSpecMaterial;
begin
  result := TFhirMedicinalProductDeviceSpecMaterial.create;
  try
    ParseMedicinalProductDeviceSpecMaterialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDeviceSpecMaterialProperties(jsn : TJsonObject; result : TFhirMedicinalProductDeviceSpecMaterial);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('substance') then
        result.substance := ParseCodeableConcept(jsn.vObj['substance']);{q3}
    if jsn.has('alternate') or jsn.has('_alternate') then
        result.alternateElement := ParseBoolean(jsn['alternate'], jsn.vObj['_alternate']);{q}
    if jsn.has('allergenicIndicator') or jsn.has('_allergenicIndicator') then
        result.allergenicIndicatorElement := ParseBoolean(jsn['allergenicIndicator'], jsn.vObj['_allergenicIndicator']);{q}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDeviceSpecMaterial(json : TJSONWriter; name : string; elem : TFhirMedicinalProductDeviceSpecMaterial; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'substance', elem.substance); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'alternate', elem.alternateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'alternate', elem.alternateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'allergenicIndicator', elem.allergenicIndicatorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'allergenicIndicator', elem.allergenicIndicatorElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDeviceSpec(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDeviceSpec(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductDeviceSpec(jsn : TJsonObject) : TFhirMedicinalProductDeviceSpec;
begin
  result := TFhirMedicinalProductDeviceSpec.create;
  try
    ParseMedicinalProductDeviceSpecProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDeviceSpecProperties(jsn : TJsonObject; result : TFhirMedicinalProductDeviceSpec);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('tradeName') or jsn.has('_tradeName') then
        result.tradeNameElement := ParseString(jsn['tradeName'], jsn.vObj['_tradeName']);{q}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('listingNumber') or jsn.has('_listingNumber') then
        result.listingNumberElement := ParseString(jsn['listingNumber'], jsn.vObj['_listingNumber']);{q}
    if jsn.has('modelNumber') or jsn.has('_modelNumber') then
        result.modelNumberElement := ParseString(jsn['modelNumber'], jsn.vObj['_modelNumber']);{q}
    if jsn.has('sterilityIndicator') then
        result.sterilityIndicator := ParseCodeableConcept(jsn.vObj['sterilityIndicator']);{q3}
    if jsn.has('sterilisationRequirement') then
        result.sterilisationRequirement := ParseCodeableConcept(jsn.vObj['sterilisationRequirement']);{q3}
    if jsn.has('usage') then
        result.usage := ParseCodeableConcept(jsn.vObj['usage']);{q3}
    if jsn.has('nomenclature') then
      iterateArray(jsn.vArr['nomenclature'], result.nomenclatureList, parseCodeableConcept);
    if jsn.has('shelfLife') then
      iterateArray(jsn.vArr['shelfLife'], result.shelfLifeList, parseProductShelfLife);
    if jsn.has('physicalCharacteristics') then
        result.physicalCharacteristics := ParseProdCharacteristic(jsn.vObj['physicalCharacteristics']);{q3}
    if jsn.has('otherCharacteristics') then
      iterateArray(jsn.vArr['otherCharacteristics'], result.otherCharacteristicsList, parseCodeableConcept);
    if jsn.has('batchIdentifier') then
      iterateArray(jsn.vArr['batchIdentifier'], result.batchIdentifierList, parseIdentifier);
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], result.manufacturerList, parseReference{TFhirOrganization});
    if jsn.has('material') then
      iterateArray(jsn.vArr['material'], result.materialList, parseMedicinalProductDeviceSpecMaterial);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDeviceSpec(json : TJSONWriter; name : string; elem : TFhirMedicinalProductDeviceSpec; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('tradeName') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'tradeName', elem.tradeNameElement, false);
  if not elem.noCompose and doCompose('tradeName') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'tradeName', elem.tradeNameElement, false);
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and doCompose('listingNumber') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'listingNumber', elem.listingNumberElement, false);
  if not elem.noCompose and doCompose('listingNumber') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'listingNumber', elem.listingNumberElement, false);
  if not elem.noCompose and doCompose('modelNumber') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'modelNumber', elem.modelNumberElement, false);
  if not elem.noCompose and doCompose('modelNumber') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'modelNumber', elem.modelNumberElement, false);
  if not elem.noCompose and doCompose('sterilityIndicator') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'sterilityIndicator', elem.sterilityIndicator); {a}
  if not elem.noCompose and doCompose('sterilisationRequirement') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'sterilisationRequirement', elem.sterilisationRequirement); {a}
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'usage', elem.usage); {a}
  if not elem.noCompose and doCompose('nomenclature') and (SummaryOption in [soFull, soSummary, soData]) and (elem.nomenclatureList.Count > 0) then
  begin
    json.valueArray('nomenclature');
    for i := 0 to elem.nomenclatureList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.nomenclatureList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('shelfLife') and (SummaryOption in [soFull, soSummary, soData]) and (elem.shelfLifeList.Count > 0) then
  begin
    json.valueArray('shelfLife');
    for i := 0 to elem.shelfLifeList.Count - 1 do
      ComposeProductShelfLife(json, '', elem.shelfLifeList[i]); {z - ProductShelfLife}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('physicalCharacteristics') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeProdCharacteristic(json, 'physicalCharacteristics', elem.physicalCharacteristics); {a}
  if not elem.noCompose and doCompose('otherCharacteristics') and (SummaryOption in [soFull, soSummary, soData]) and (elem.otherCharacteristicsList.Count > 0) then
  begin
    json.valueArray('otherCharacteristics');
    for i := 0 to elem.otherCharacteristicsList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.otherCharacteristicsList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('batchIdentifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.batchIdentifierList.Count > 0) then
  begin
    json.valueArray('batchIdentifier');
    for i := 0 to elem.batchIdentifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.batchIdentifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('manufacturer') and (SummaryOption in [soFull, soSummary, soData]) and (elem.manufacturerList.Count > 0) then
  begin
    json.valueArray('manufacturer');
    for i := 0 to elem.manufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.manufacturerList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('material') and (SummaryOption in [soFull, soSummary, soData]) and (elem.materialList.Count > 0) then
  begin
    json.valueArray('material');
    for i := 0 to elem.materialList.Count - 1 do
      ComposeMedicinalProductDeviceSpecMaterial(json, '', elem.materialList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICINALPRODUCTDEVICESPEC}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
procedure TFHIRJsonParser.ParseMedicinalProductIngredientSpecifiedSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductIngredientSpecifiedSubstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductIngredientSpecifiedSubstance(jsn : TJsonObject) : TFhirMedicinalProductIngredientSpecifiedSubstance;
begin
  result := TFhirMedicinalProductIngredientSpecifiedSubstance.create;
  try
    ParseMedicinalProductIngredientSpecifiedSubstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductIngredientSpecifiedSubstanceProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredientSpecifiedSubstance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('group') then
        result.group := ParseCodeableConcept(jsn.vObj['group']);{q3}
    if jsn.has('confidentiality') then
        result.confidentiality := ParseCodeableConcept(jsn.vObj['confidentiality']);{q3}
    if jsn.has('strength') then
      iterateArray(jsn.vArr['strength'], result.strengthList, parseMedicinalProductIngredientSpecifiedSubstanceStrength);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductIngredientSpecifiedSubstance(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredientSpecifiedSubstance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'group', elem.group); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'confidentiality', elem.confidentiality); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.strengthList.Count > 0) then
  begin
    json.valueArray('strength');
    for i := 0 to elem.strengthList.Count - 1 do
      ComposeMedicinalProductIngredientSpecifiedSubstanceStrength(json, '', elem.strengthList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrength(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductIngredientSpecifiedSubstanceStrength(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrength(jsn : TJsonObject) : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength;
begin
  result := TFhirMedicinalProductIngredientSpecifiedSubstanceStrength.create;
  try
    ParseMedicinalProductIngredientSpecifiedSubstanceStrengthProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrengthProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('presentation') then
        result.presentation := ParseRatio(jsn.vObj['presentation']);{q3}
    if jsn.has('concentration') then
        result.concentration := ParseRatio(jsn.vObj['concentration']);{q3}
    if jsn.has('measurementPoint') or jsn.has('_measurementPoint') then
        result.measurementPointElement := ParseString(jsn['measurementPoint'], jsn.vObj['_measurementPoint']);{q}
    if jsn.has('country') then
      iterateArray(jsn.vArr['country'], result.countryList, parseCodeableConcept);
    if jsn.has('referenceStrength') then
      iterateArray(jsn.vArr['referenceStrength'], result.referenceStrengthList, parseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductIngredientSpecifiedSubstanceStrength(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(json, 'presentation', elem.presentation); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(json, 'concentration', elem.concentration); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'measurementPoint', elem.measurementPointElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'measurementPoint', elem.measurementPointElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.countryList.Count > 0) then
  begin
    json.valueArray('country');
    for i := 0 to elem.countryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.countryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.referenceStrengthList.Count > 0) then
  begin
    json.valueArray('referenceStrength');
    for i := 0 to elem.referenceStrengthList.Count - 1 do
      ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(json, '', elem.referenceStrengthList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(jsn : TJsonObject) : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength;
begin
  result := TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength.create;
  try
    ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('substance') then
        result.substance := ParseCodeableConcept(jsn.vObj['substance']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'substance', elem.substance); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductIngredientSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductIngredientSubstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductIngredientSubstance(jsn : TJsonObject) : TFhirMedicinalProductIngredientSubstance;
begin
  result := TFhirMedicinalProductIngredientSubstance.create;
  try
    ParseMedicinalProductIngredientSubstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductIngredientSubstanceProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredientSubstance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('strength') then
      iterateArray(jsn.vArr['strength'], result.strengthList, parseMedicinalProductIngredientSpecifiedSubstanceStrength);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductIngredientSubstance(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredientSubstance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.strengthList.Count > 0) then
  begin
    json.valueArray('strength');
    for i := 0 to elem.strengthList.Count - 1 do
      ComposeMedicinalProductIngredientSpecifiedSubstanceStrength(json, '', elem.strengthList[i]); {z - @MedicinalProductIngredient.specifiedSubstance.strength}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductIngredient(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductIngredient(jsn : TJsonObject) : TFhirMedicinalProductIngredient;
begin
  result := TFhirMedicinalProductIngredient.create;
  try
    ParseMedicinalProductIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductIngredientProperties(jsn : TJsonObject; result : TFhirMedicinalProductIngredient);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('allergenicIndicator') or jsn.has('_allergenicIndicator') then
        result.allergenicIndicatorElement := ParseBoolean(jsn['allergenicIndicator'], jsn.vObj['_allergenicIndicator']);{q}
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], result.manufacturerList, parseReference{TFhirOrganization});
    if jsn.has('specifiedSubstance') then
      iterateArray(jsn.vArr['specifiedSubstance'], result.specifiedSubstanceList, parseMedicinalProductIngredientSpecifiedSubstance);
    if jsn.has('substance') then
        result.substance := ParseMedicinalProductIngredientSubstance(jsn.vObj['substance']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductIngredient(json : TJSONWriter; name : string; elem : TFhirMedicinalProductIngredient; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('role') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and doCompose('allergenicIndicator') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'allergenicIndicator', elem.allergenicIndicatorElement, false);
  if not elem.noCompose and doCompose('allergenicIndicator') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'allergenicIndicator', elem.allergenicIndicatorElement, false);
  if not elem.noCompose and doCompose('manufacturer') and (SummaryOption in [soFull, soSummary, soData]) and (elem.manufacturerList.Count > 0) then
  begin
    json.valueArray('manufacturer');
    for i := 0 to elem.manufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.manufacturerList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specifiedSubstance') and (SummaryOption in [soFull, soSummary, soData]) and (elem.specifiedSubstanceList.Count > 0) then
  begin
    json.valueArray('specifiedSubstance');
    for i := 0 to elem.specifiedSubstanceList.Count - 1 do
      ComposeMedicinalProductIngredientSpecifiedSubstance(json, '', elem.specifiedSubstanceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('substance') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMedicinalProductIngredientSubstance(json, 'substance', elem.substance); {a}
end;

{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
procedure TFHIRJsonParser.ParseMedicinalProductPackagedBatchIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductPackagedBatchIdentifier(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductPackagedBatchIdentifier(jsn : TJsonObject) : TFhirMedicinalProductPackagedBatchIdentifier;
begin
  result := TFhirMedicinalProductPackagedBatchIdentifier.create;
  try
    ParseMedicinalProductPackagedBatchIdentifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPackagedBatchIdentifierProperties(jsn : TJsonObject; result : TFhirMedicinalProductPackagedBatchIdentifier);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('outerPackaging') then
        result.outerPackaging := ParseIdentifier(jsn.vObj['outerPackaging']);{q3}
    if jsn.has('immediatePackaging') then
        result.immediatePackaging := ParseIdentifier(jsn.vObj['immediatePackaging']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductPackagedBatchIdentifier(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPackagedBatchIdentifier; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'outerPackaging', elem.outerPackaging); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'immediatePackaging', elem.immediatePackaging); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPackagedPackageItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductPackagedPackageItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductPackagedPackageItem(jsn : TJsonObject) : TFhirMedicinalProductPackagedPackageItem;
begin
  result := TFhirMedicinalProductPackagedPackageItem.create;
  try
    ParseMedicinalProductPackagedPackageItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPackagedPackageItemProperties(jsn : TJsonObject; result : TFhirMedicinalProductPackagedPackageItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('material') then
      iterateArray(jsn.vArr['material'], result.materialList, parseCodeableConcept);
    if jsn.has('alternateMaterial') then
      iterateArray(jsn.vArr['alternateMaterial'], result.alternateMaterialList, parseCodeableConcept);
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], result.manufacturerList, parseReference{TFhirOrganization});
    if jsn.has('device') then
      iterateArray(jsn.vArr['device'], result.deviceList, parseReference{TFhirMedicinalProductDeviceSpec});
    if jsn.has('manufacturedItem') then
      iterateArray(jsn.vArr['manufacturedItem'], result.manufacturedItemList, parseMedicinalProductPackagedPackageItemManufacturedItem);
    if jsn.has('otherCharacteristics') then
      iterateArray(jsn.vArr['otherCharacteristics'], result.otherCharacteristicsList, parseCodeableConcept);
    if jsn.has('packageItem') then
      iterateArray(jsn.vArr['packageItem'], result.packageItemList, parseMedicinalProductPackagedPackageItem);
    if jsn.has('physicalCharacteristics') then
        result.physicalCharacteristics := ParseProdCharacteristic(jsn.vObj['physicalCharacteristics']);{q3}
    if jsn.has('shelfLifeStorage') then
      iterateArray(jsn.vArr['shelfLifeStorage'], result.shelfLifeStorageList, parseProductShelfLife);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductPackagedPackageItem(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPackagedPackageItem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.materialList.Count > 0) then
  begin
    json.valueArray('material');
    for i := 0 to elem.materialList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.materialList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.alternateMaterialList.Count > 0) then
  begin
    json.valueArray('alternateMaterial');
    for i := 0 to elem.alternateMaterialList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.alternateMaterialList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.manufacturerList.Count > 0) then
  begin
    json.valueArray('manufacturer');
    for i := 0 to elem.manufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.manufacturerList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.deviceList.Count > 0) then
  begin
    json.valueArray('device');
    for i := 0 to elem.deviceList.Count - 1 do
      ComposeReference{TFhirMedicinalProductDeviceSpec}(json, '', elem.deviceList[i]); {z - Reference(MedicinalProductDeviceSpec)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.manufacturedItemList.Count > 0) then
  begin
    json.valueArray('manufacturedItem');
    for i := 0 to elem.manufacturedItemList.Count - 1 do
      ComposeMedicinalProductPackagedPackageItemManufacturedItem(json, '', elem.manufacturedItemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.otherCharacteristicsList.Count > 0) then
  begin
    json.valueArray('otherCharacteristics');
    for i := 0 to elem.otherCharacteristicsList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.otherCharacteristicsList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.packageItemList.Count > 0) then
  begin
    json.valueArray('packageItem');
    for i := 0 to elem.packageItemList.Count - 1 do
      ComposeMedicinalProductPackagedPackageItem(json, '', elem.packageItemList[i]); {z - @MedicinalProductPackaged.packageItem}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeProdCharacteristic(json, 'physicalCharacteristics', elem.physicalCharacteristics); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.shelfLifeStorageList.Count > 0) then
  begin
    json.valueArray('shelfLifeStorage');
    for i := 0 to elem.shelfLifeStorageList.Count - 1 do
      ComposeProductShelfLife(json, '', elem.shelfLifeStorageList[i]); {z - ProductShelfLife}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPackagedPackageItemManufacturedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductPackagedPackageItemManufacturedItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductPackagedPackageItemManufacturedItem(jsn : TJsonObject) : TFhirMedicinalProductPackagedPackageItemManufacturedItem;
begin
  result := TFhirMedicinalProductPackagedPackageItemManufacturedItem.create;
  try
    ParseMedicinalProductPackagedPackageItemManufacturedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPackagedPackageItemManufacturedItemProperties(jsn : TJsonObject; result : TFhirMedicinalProductPackagedPackageItemManufacturedItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('manufacturedDoseForm') then
        result.manufacturedDoseForm := ParseCodeableConcept(jsn.vObj['manufacturedDoseForm']);{q3}
    if jsn.has('unitOfPresentation') then
        result.unitOfPresentation := ParseCodeableConcept(jsn.vObj['unitOfPresentation']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('xManufacturer') then
      iterateArray(jsn.vArr['xManufacturer'], result.xManufacturerList, parseReference{TFhirOrganization});
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], result.ingredientList, parseReference{TFhirMedicinalProductIngredient});
    if jsn.has('physicalCharacteristics') then
        result.physicalCharacteristics := ParseProdCharacteristic(jsn.vObj['physicalCharacteristics']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductPackagedPackageItemManufacturedItem(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPackagedPackageItemManufacturedItem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'manufacturedDoseForm', elem.manufacturedDoseForm); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'unitOfPresentation', elem.unitOfPresentation); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.xManufacturerList.Count > 0) then
  begin
    json.valueArray('xManufacturer');
    for i := 0 to elem.xManufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.xManufacturerList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.ingredientList.Count > 0) then
  begin
    json.valueArray('ingredient');
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeReference{TFhirMedicinalProductIngredient}(json, '', elem.ingredientList[i]); {z - Reference(MedicinalProductIngredient)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeProdCharacteristic(json, 'physicalCharacteristics', elem.physicalCharacteristics); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPackaged(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductPackaged(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductPackaged(jsn : TJsonObject) : TFhirMedicinalProductPackaged;
begin
  result := TFhirMedicinalProductPackaged.create;
  try
    ParseMedicinalProductPackagedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPackagedProperties(jsn : TJsonObject; result : TFhirMedicinalProductPackaged);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('marketingStatus') then
      iterateArray(jsn.vArr['marketingStatus'], result.marketingStatusList, parseMarketingStatus);
    if jsn.has('batchIdentifier') then
      iterateArray(jsn.vArr['batchIdentifier'], result.batchIdentifierList, parseMedicinalProductPackagedBatchIdentifier);
    if jsn.has('packageItem') then
      iterateArray(jsn.vArr['packageItem'], result.packageItemList, parseMedicinalProductPackagedPackageItem);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductPackaged(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPackaged; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('marketingStatus') and (SummaryOption in [soFull, soSummary, soData]) and (elem.marketingStatusList.Count > 0) then
  begin
    json.valueArray('marketingStatus');
    for i := 0 to elem.marketingStatusList.Count - 1 do
      ComposeMarketingStatus(json, '', elem.marketingStatusList[i]); {z - MarketingStatus}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('batchIdentifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.batchIdentifierList.Count > 0) then
  begin
    json.valueArray('batchIdentifier');
    for i := 0 to elem.batchIdentifierList.Count - 1 do
      ComposeMedicinalProductPackagedBatchIdentifier(json, '', elem.batchIdentifierList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('packageItem') and (SummaryOption in [soFull, soSummary, soData]) and (elem.packageItemList.Count > 0) then
  begin
    json.valueArray('packageItem');
    for i := 0 to elem.packageItemList.Count - 1 do
      ComposeMedicinalProductPackagedPackageItem(json, '', elem.packageItemList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
procedure TFHIRJsonParser.ParseMedicinalProductPharmaceuticalCharacteristics(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductPharmaceuticalCharacteristics(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductPharmaceuticalCharacteristics(jsn : TJsonObject) : TFhirMedicinalProductPharmaceuticalCharacteristics;
begin
  result := TFhirMedicinalProductPharmaceuticalCharacteristics.create;
  try
    ParseMedicinalProductPharmaceuticalCharacteristicsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPharmaceuticalCharacteristicsProperties(jsn : TJsonObject; result : TFhirMedicinalProductPharmaceuticalCharacteristics);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('status') then
        result.status := ParseCodeableConcept(jsn.vObj['status']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductPharmaceuticalCharacteristics(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPharmaceuticalCharacteristics; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', elem.status); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPharmaceutical(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductPharmaceutical(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicinalProductPharmaceutical(jsn : TJsonObject) : TFhirMedicinalProductPharmaceutical;
begin
  result := TFhirMedicinalProductPharmaceutical.create;
  try
    ParseMedicinalProductPharmaceuticalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductPharmaceuticalProperties(jsn : TJsonObject; result : TFhirMedicinalProductPharmaceutical);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('administrableDoseForm') then
        result.administrableDoseForm := ParseCodeableConcept(jsn.vObj['administrableDoseForm']);{q3}
    if jsn.has('unitOfPresentation') then
        result.unitOfPresentation := ParseCodeableConcept(jsn.vObj['unitOfPresentation']);{q3}
    if jsn.has('routeOfAdministration') then
      iterateArray(jsn.vArr['routeOfAdministration'], result.routeOfAdministrationList, parseCodeableConcept);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], result.ingredientList, parseReference{TFhirMedicinalProductIngredient});
      if jsn.has('device') or jsn.has('_device') then
      iteratePrimitiveArray(jsn.vArr['device'], jsn.vArr['_device'], result.deviceList, parseString);
    if jsn.has('characteristics') then
      iterateArray(jsn.vArr['characteristics'], result.characteristicsList, parseMedicinalProductPharmaceuticalCharacteristics);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductPharmaceutical(json : TJSONWriter; name : string; elem : TFhirMedicinalProductPharmaceutical; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('administrableDoseForm') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'administrableDoseForm', elem.administrableDoseForm); {a}
  if not elem.noCompose and doCompose('unitOfPresentation') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'unitOfPresentation', elem.unitOfPresentation); {a}
  if not elem.noCompose and doCompose('routeOfAdministration') and (SummaryOption in [soFull, soSummary, soData]) and (elem.routeOfAdministrationList.Count > 0) then
  begin
    json.valueArray('routeOfAdministration');
    for i := 0 to elem.routeOfAdministrationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.routeOfAdministrationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('ingredient') and (SummaryOption in [soFull, soSummary, soData]) and (elem.ingredientList.Count > 0) then
  begin
    json.valueArray('ingredient');
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeReference{TFhirMedicinalProductIngredient}(json, '', elem.ingredientList[i]); {z - Reference(MedicinalProductIngredient)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('device') and (SummaryOption in [soFull, soSummary, soData]) and (elem.deviceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.deviceList.Count - 1 do
    begin
      ext := ext or ((elem.deviceList[i].id <> '') or (elem.deviceList[i].hasExtensionList) {no-comments or (elem.deviceList[i].hasComments)});
      val := val or (elem.deviceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('device');
      for i := 0 to elem.deviceList.Count - 1 do
        ComposeStringValue(json, '',elem.deviceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_device');
      for i := 0 to elem.deviceList.Count - 1 do
        ComposeStringProps(json, '',elem.deviceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('characteristics') and (SummaryOption in [soFull, soSummary, soData]) and (elem.characteristicsList.Count > 0) then
  begin
    json.valueArray('characteristics');
    for i := 0 to elem.characteristicsList.Count - 1 do
      ComposeMedicinalProductPharmaceuticalCharacteristics(json, '', elem.characteristicsList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MESSAGEDEFINITION}
procedure TFHIRJsonParser.ParseMessageDefinitionFocus(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageDefinitionFocus(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageDefinitionFocus(jsn : TJsonObject) : TFhirMessageDefinitionFocus;
begin
  result := TFhirMessageDefinitionFocus.create;
  try
    ParseMessageDefinitionFocusProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionFocusProperties(jsn : TJsonObject; result : TFhirMessageDefinitionFocus);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := ParseUnsignedInt(jsn['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := ParseString(jsn['max'], jsn.vObj['_max']);{q}
end;

procedure TFHIRJsonComposer.ComposeMessageDefinitionFocus(json : TJSONWriter; name : string; elem : TFhirMessageDefinitionFocus; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not elem.noCompose and (not isCanonical or (elem.min <> '0')) and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'min', elem.minElement, false);
  if not elem.noCompose and (not isCanonical or (elem.min <> '0')) and (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionAllowedResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageDefinitionAllowedResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageDefinitionAllowedResponse(jsn : TJsonObject) : TFhirMessageDefinitionAllowedResponse;
begin
  result := TFhirMessageDefinitionAllowedResponse.create;
  try
    ParseMessageDefinitionAllowedResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionAllowedResponseProperties(jsn : TJsonObject; result : TFhirMessageDefinitionAllowedResponse);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('message') then
        result.message := ParseReference{TFhirMessageDefinition}(jsn.vObj['message']);{q3}
    if jsn.has('situation') or jsn.has('_situation') then
        result.situationElement := ParseMarkdown(jsn['situation'], jsn.vObj['_situation']);{q}
end;

procedure TFHIRJsonComposer.ComposeMessageDefinitionAllowedResponse(json : TJSONWriter; name : string; elem : TFhirMessageDefinitionAllowedResponse; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirMessageDefinition}(json, 'message', elem.message); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'situation', elem.situationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'situation', elem.situationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageDefinition(jsn : TJsonObject) : TFhirMessageDefinition;
begin
  result := TFhirMessageDefinition.create;
  try
    ParseMessageDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionProperties(jsn : TJsonObject; result : TFhirMessageDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('base') then
        result.base := ParseReference{TFhirMessageDefinition}(jsn.vObj['base']);{q3}
    if jsn.has('parent') then
      iterateArray(jsn.vArr['parent'], result.parentList, parseReference{Resource});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirMessageDefinition});
    if jsn.has('event') or jsn.has('_event') then
        result.eventElement := ParseUri(jsn['event'], jsn.vObj['_event']);{q}
    if jsn.has('category') or jsn.has('_category')  then
      result.categoryElement := parseEnum(jsn.path+'/category', jsn['category'], jsn.vObj['_category'], CODES_TFhirMessageSignificanceCategoryEnum, SYSTEMS_TFhirMessageSignificanceCategoryEnum);
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], result.focusList, parseMessageDefinitionFocus);
    if jsn.has('responseRequired') or jsn.has('_responseRequired') then
        result.responseRequiredElement := ParseBoolean(jsn['responseRequired'], jsn.vObj['_responseRequired']);{q}
    if jsn.has('allowedResponse') then
      iterateArray(jsn.vArr['allowedResponse'], result.allowedResponseList, parseMessageDefinitionAllowedResponse);
end;

procedure TFHIRJsonComposer.ComposeMessageDefinition(json : TJSONWriter; name : string; elem : TFhirMessageDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('base') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirMessageDefinition}(json, 'base', elem.base); {a}
  if not elem.noCompose and doCompose('parent') and (SummaryOption in [soFull, soSummary, soData]) and (elem.parentList.Count > 0) then
  begin
    json.valueArray('parent');
    for i := 0 to elem.parentList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.parentList[i]); {z - Reference(ActivityDefinition|PlanDefinition)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('replaces') and (SummaryOption in [soFull, soSummary, soData]) and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirMessageDefinition}(json, '', elem.replacesList[i]); {z - Reference(MessageDefinition)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('event') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'event', elem.eventElement, false);
  if not elem.noCompose and doCompose('event') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'event', elem.eventElement, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'category', elem.CategoryElement, CODES_TFhirMessageSignificanceCategoryEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'category', elem.CategoryElement, CODES_TFhirMessageSignificanceCategoryEnum, false);
  if not elem.noCompose and doCompose('focus') and (SummaryOption in [soFull, soSummary, soData]) and (elem.focusList.Count > 0) then
  begin
    json.valueArray('focus');
    for i := 0 to elem.focusList.Count - 1 do
      ComposeMessageDefinitionFocus(json, '', elem.focusList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.responseRequired <> false)) and doCompose('responseRequired') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'responseRequired', elem.responseRequiredElement, false);
  if not elem.noCompose and (not isCanonical or (elem.responseRequired <> false)) and doCompose('responseRequired') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'responseRequired', elem.responseRequiredElement, false);
  if not elem.noCompose and doCompose('allowedResponse') and (SummaryOption in [soFull, soData]) and (elem.allowedResponseList.Count > 0) then
  begin
    json.valueArray('allowedResponse');
    for i := 0 to elem.allowedResponseList.Count - 1 do
      ComposeMessageDefinitionAllowedResponse(json, '', elem.allowedResponseList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
procedure TFHIRJsonParser.ParseMessageHeaderDestination(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeaderDestination(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageHeaderDestination(jsn : TJsonObject) : TFhirMessageHeaderDestination;
begin
  result := TFhirMessageHeaderDestination.create;
  try
    ParseMessageHeaderDestinationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderDestinationProperties(jsn : TJsonObject; result : TFhirMessageHeaderDestination);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('target') then
        result.target := ParseReference{TFhirDevice}(jsn.vObj['target']);{q3}
    if jsn.has('endpoint') or jsn.has('_endpoint') then
        result.endpointElement := ParseUri(jsn['endpoint'], jsn.vObj['_endpoint']);{q}
    if jsn.has('receiver') then
        result.receiver := ParseReference{Resource}(jsn.vObj['receiver']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMessageHeaderDestination(json : TJSONWriter; name : string; elem : TFhirMessageHeaderDestination; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDevice}(json, 'target', elem.target); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'endpoint', elem.endpointElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'endpoint', elem.endpointElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'receiver', elem.receiver); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageHeaderSource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeaderSource(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageHeaderSource(jsn : TJsonObject) : TFhirMessageHeaderSource;
begin
  result := TFhirMessageHeaderSource.create;
  try
    ParseMessageHeaderSourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderSourceProperties(jsn : TJsonObject; result : TFhirMessageHeaderSource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('software') or jsn.has('_software') then
        result.softwareElement := ParseString(jsn['software'], jsn.vObj['_software']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('contact') then
        result.contact := ParseContactPoint(jsn.vObj['contact']);{q3}
    if jsn.has('endpoint') or jsn.has('_endpoint') then
        result.endpointElement := ParseUri(jsn['endpoint'], jsn.vObj['_endpoint']);{q}
end;

procedure TFHIRJsonComposer.ComposeMessageHeaderSource(json : TJSONWriter; name : string; elem : TFhirMessageHeaderSource; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'software', elem.softwareElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'software', elem.softwareElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeContactPoint(json, 'contact', elem.contact); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'endpoint', elem.endpointElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'endpoint', elem.endpointElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageHeaderResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeaderResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageHeaderResponse(jsn : TJsonObject) : TFhirMessageHeaderResponse;
begin
  result := TFhirMessageHeaderResponse.create;
  try
    ParseMessageHeaderResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderResponseProperties(jsn : TJsonObject; result : TFhirMessageHeaderResponse);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') or jsn.has('_identifier') then
        result.identifierElement := ParseId(jsn['identifier'], jsn.vObj['_identifier']);{q}
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirResponseCodeEnum, SYSTEMS_TFhirResponseCodeEnum);
    if jsn.has('details') then
        result.details := ParseReference{TFhirOperationOutcome}(jsn.vObj['details']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMessageHeaderResponse(json : TJSONWriter; name : string; elem : TFhirMessageHeaderResponse; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'identifier', elem.identifierElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'identifier', elem.identifierElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirResponseCodeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirResponseCodeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOperationOutcome}(json, 'details', elem.details); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageHeader(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeader(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageHeader(jsn : TJsonObject) : TFhirMessageHeader;
begin
  result := TFhirMessageHeader.create;
  try
    ParseMessageHeaderProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderProperties(jsn : TJsonObject; result : TFhirMessageHeader);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('event') then
        result.event := ParseCoding(jsn.vObj['event']);{q3}
    if jsn.has('destination') then
      iterateArray(jsn.vArr['destination'], result.destinationList, parseMessageHeaderDestination);
    if jsn.has('sender') then
        result.sender := ParseReference{Resource}(jsn.vObj['sender']);{q3}
    if jsn.has('enterer') then
        result.enterer := ParseReference{TFhirPractitioner}(jsn.vObj['enterer']);{q3}
    if jsn.has('author') then
        result.author := ParseReference{TFhirPractitioner}(jsn.vObj['author']);{q3}
    if jsn.has('source') then
        result.source := ParseMessageHeaderSource(jsn.vObj['source']);{q3}
    if jsn.has('responsible') then
        result.responsible := ParseReference{Resource}(jsn.vObj['responsible']);{q3}
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
    if jsn.has('response') then
        result.response := ParseMessageHeaderResponse(jsn.vObj['response']);{q3}
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], result.focusList, parseReference{TFhirReference});
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := ParseUri(jsn['definition'], jsn.vObj['_definition']);{q}
end;

procedure TFHIRJsonComposer.ComposeMessageHeader(json : TJSONWriter; name : string; elem : TFhirMessageHeader; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('event') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'event', elem.event); {a}
  if not elem.noCompose and doCompose('destination') and (SummaryOption in [soFull, soSummary, soData]) and (elem.destinationList.Count > 0) then
  begin
    json.valueArray('destination');
    for i := 0 to elem.destinationList.Count - 1 do
      ComposeMessageHeaderDestination(json, '', elem.destinationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('sender') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'sender', elem.sender); {a}
  if not elem.noCompose and doCompose('enterer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'enterer', elem.enterer); {a}
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'author', elem.author); {a}
  if not elem.noCompose and doCompose('source') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMessageHeaderSource(json, 'source', elem.source); {a}
  if not elem.noCompose and doCompose('responsible') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'responsible', elem.responsible); {a}
  if not elem.noCompose and doCompose('reason') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if not elem.noCompose and doCompose('response') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMessageHeaderResponse(json, 'response', elem.response); {a}
  if not elem.noCompose and doCompose('focus') and (SummaryOption in [soFull, soSummary, soData]) and (elem.focusList.Count > 0) then
  begin
    json.valueArray('focus');
    for i := 0 to elem.focusList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.focusList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('definition') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and doCompose('definition') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'definition', elem.definitionElement, false);
end;

{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
procedure TFHIRJsonParser.ParseNamingSystemUniqueId(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNamingSystemUniqueId(jsn)); {2}
end;

function TFHIRJsonParser.ParseNamingSystemUniqueId(jsn : TJsonObject) : TFhirNamingSystemUniqueId;
begin
  result := TFhirNamingSystemUniqueId.create;
  try
    ParseNamingSystemUniqueIdProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNamingSystemUniqueIdProperties(jsn : TJsonObject; result : TFhirNamingSystemUniqueId);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirNamingsystemIdentifierTypeEnum, SYSTEMS_TFhirNamingsystemIdentifierTypeEnum);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
    if jsn.has('preferred') or jsn.has('_preferred') then
        result.preferredElement := ParseBoolean(jsn['preferred'], jsn.vObj['_preferred']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeNamingSystemUniqueId(json : TJSONWriter; name : string; elem : TFhirNamingSystemUniqueId; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirNamingsystemIdentifierTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirNamingsystemIdentifierTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'preferred', elem.preferredElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'preferred', elem.preferredElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNamingSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNamingSystem(jsn)); {2}
end;

function TFHIRJsonParser.ParseNamingSystem(jsn : TJsonObject) : TFhirNamingSystem;
begin
  result := TFhirNamingSystem.create;
  try
    ParseNamingSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNamingSystemProperties(jsn : TJsonObject; result : TFhirNamingSystem);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirNamingsystemTypeEnum, SYSTEMS_TFhirNamingsystemTypeEnum);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('responsible') or jsn.has('_responsible') then
        result.responsibleElement := ParseString(jsn['responsible'], jsn.vObj['_responsible']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := ParseString(jsn['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('uniqueId') then
      iterateArray(jsn.vArr['uniqueId'], result.uniqueIdList, parseNamingSystemUniqueId);
end;

procedure TFHIRJsonComposer.ComposeNamingSystem(json : TJSONWriter; name : string; elem : TFhirNamingSystem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirNamingsystemTypeEnum, false);
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirNamingsystemTypeEnum, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('responsible') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'responsible', elem.responsibleElement, false);
  if not elem.noCompose and doCompose('responsible') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'responsible', elem.responsibleElement, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('uniqueId') and (SummaryOption in [soFull, soSummary, soData]) and (elem.uniqueIdList.Count > 0) then
  begin
    json.valueArray('uniqueId');
    for i := 0 to elem.uniqueIdList.Count - 1 do
      ComposeNamingSystemUniqueId(json, '', elem.uniqueIdList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
procedure TFHIRJsonParser.ParseNutritionOrderOralDiet(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderOralDiet(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderOralDiet(jsn : TJsonObject) : TFhirNutritionOrderOralDiet;
begin
  result := TFhirNutritionOrderOralDiet.create;
  try
    ParseNutritionOrderOralDietProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDiet);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('schedule') then
      iterateArray(jsn.vArr['schedule'], result.scheduleList, parseTiming);
    if jsn.has('nutrient') then
      iterateArray(jsn.vArr['nutrient'], result.nutrientList, parseNutritionOrderOralDietNutrient);
    if jsn.has('texture') then
      iterateArray(jsn.vArr['texture'], result.textureList, parseNutritionOrderOralDietTexture);
    if jsn.has('fluidConsistencyType') then
      iterateArray(jsn.vArr['fluidConsistencyType'], result.fluidConsistencyTypeList, parseCodeableConcept);
    if jsn.has('instruction') or jsn.has('_instruction') then
        result.instructionElement := ParseString(jsn['instruction'], jsn.vObj['_instruction']);{q}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderOralDiet(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDiet; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.scheduleList.Count > 0) then
  begin
    json.valueArray('schedule');
    for i := 0 to elem.scheduleList.Count - 1 do
      ComposeTiming(json, '', elem.scheduleList[i]); {z - Timing}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.nutrientList.Count > 0) then
  begin
    json.valueArray('nutrient');
    for i := 0 to elem.nutrientList.Count - 1 do
      ComposeNutritionOrderOralDietNutrient(json, '', elem.nutrientList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.textureList.Count > 0) then
  begin
    json.valueArray('texture');
    for i := 0 to elem.textureList.Count - 1 do
      ComposeNutritionOrderOralDietTexture(json, '', elem.textureList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.fluidConsistencyTypeList.Count > 0) then
  begin
    json.valueArray('fluidConsistencyType');
    for i := 0 to elem.fluidConsistencyTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.fluidConsistencyTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'instruction', elem.instructionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'instruction', elem.instructionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietNutrient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderOralDietNutrient(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderOralDietNutrient(jsn : TJsonObject) : TFhirNutritionOrderOralDietNutrient;
begin
  result := TFhirNutritionOrderOralDietNutrient.create;
  try
    ParseNutritionOrderOralDietNutrientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietNutrientProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDietNutrient);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('modifier') then
        result.modifier := ParseCodeableConcept(jsn.vObj['modifier']);{q3}
    if jsn.has('amount') then
        result.amount := ParseQuantity(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderOralDietNutrient(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDietNutrient; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'modifier', elem.modifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietTexture(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderOralDietTexture(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderOralDietTexture(jsn : TJsonObject) : TFhirNutritionOrderOralDietTexture;
begin
  result := TFhirNutritionOrderOralDietTexture.create;
  try
    ParseNutritionOrderOralDietTextureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietTextureProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDietTexture);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('modifier') then
        result.modifier := ParseCodeableConcept(jsn.vObj['modifier']);{q3}
    if jsn.has('foodType') then
        result.foodType := ParseCodeableConcept(jsn.vObj['foodType']);{q3}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderOralDietTexture(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDietTexture; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'modifier', elem.modifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'foodType', elem.foodType); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderSupplement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderSupplement(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderSupplement(jsn : TJsonObject) : TFhirNutritionOrderSupplement;
begin
  result := TFhirNutritionOrderSupplement.create;
  try
    ParseNutritionOrderSupplementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderSupplementProperties(jsn : TJsonObject; result : TFhirNutritionOrderSupplement);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('productName') or jsn.has('_productName') then
        result.productNameElement := ParseString(jsn['productName'], jsn.vObj['_productName']);{q}
    if jsn.has('schedule') then
      iterateArray(jsn.vArr['schedule'], result.scheduleList, parseTiming);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('instruction') or jsn.has('_instruction') then
        result.instructionElement := ParseString(jsn['instruction'], jsn.vObj['_instruction']);{q}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderSupplement(json : TJSONWriter; name : string; elem : TFhirNutritionOrderSupplement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'productName', elem.productNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'productName', elem.productNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.scheduleList.Count > 0) then
  begin
    json.valueArray('schedule');
    for i := 0 to elem.scheduleList.Count - 1 do
      ComposeTiming(json, '', elem.scheduleList[i]); {z - Timing}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'instruction', elem.instructionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'instruction', elem.instructionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormula(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderEnteralFormula(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderEnteralFormula(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormula;
begin
  result := TFhirNutritionOrderEnteralFormula.create;
  try
    ParseNutritionOrderEnteralFormulaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormulaProperties(jsn : TJsonObject; result : TFhirNutritionOrderEnteralFormula);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('baseFormulaType') then
        result.baseFormulaType := ParseCodeableConcept(jsn.vObj['baseFormulaType']);{q3}
    if jsn.has('baseFormulaProductName') or jsn.has('_baseFormulaProductName') then
        result.baseFormulaProductNameElement := ParseString(jsn['baseFormulaProductName'], jsn.vObj['_baseFormulaProductName']);{q}
    if jsn.has('additiveType') then
        result.additiveType := ParseCodeableConcept(jsn.vObj['additiveType']);{q3}
    if jsn.has('additiveProductName') or jsn.has('_additiveProductName') then
        result.additiveProductNameElement := ParseString(jsn['additiveProductName'], jsn.vObj['_additiveProductName']);{q}
    if jsn.has('caloricDensity') then
        result.caloricDensity := ParseQuantity(jsn.vObj['caloricDensity']);{q3}
    if jsn.has('routeofAdministration') then
        result.routeofAdministration := ParseCodeableConcept(jsn.vObj['routeofAdministration']);{q3}
    if jsn.has('administration') then
      iterateArray(jsn.vArr['administration'], result.administrationList, parseNutritionOrderEnteralFormulaAdministration);
    if jsn.has('maxVolumeToDeliver') then
        result.maxVolumeToDeliver := ParseQuantity(jsn.vObj['maxVolumeToDeliver']);{q3}
    if jsn.has('administrationInstruction') or jsn.has('_administrationInstruction') then
        result.administrationInstructionElement := ParseString(jsn['administrationInstruction'], jsn.vObj['_administrationInstruction']);{q}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderEnteralFormula(json : TJSONWriter; name : string; elem : TFhirNutritionOrderEnteralFormula; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'baseFormulaType', elem.baseFormulaType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'baseFormulaProductName', elem.baseFormulaProductNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'baseFormulaProductName', elem.baseFormulaProductNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'additiveType', elem.additiveType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'additiveProductName', elem.additiveProductNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'additiveProductName', elem.additiveProductNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'caloricDensity', elem.caloricDensity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'routeofAdministration', elem.routeofAdministration); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.administrationList.Count > 0) then
  begin
    json.valueArray('administration');
    for i := 0 to elem.administrationList.Count - 1 do
      ComposeNutritionOrderEnteralFormulaAdministration(json, '', elem.administrationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'maxVolumeToDeliver', elem.maxVolumeToDeliver); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'administrationInstruction', elem.administrationInstructionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'administrationInstruction', elem.administrationInstructionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderEnteralFormulaAdministration(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormulaAdministration;
begin
  result := TFhirNutritionOrderEnteralFormulaAdministration.create;
  try
    ParseNutritionOrderEnteralFormulaAdministrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormulaAdministrationProperties(jsn : TJsonObject; result : TFhirNutritionOrderEnteralFormulaAdministration);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('schedule') then
        result.schedule := ParseTiming(jsn.vObj['schedule']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('rateQuantity') {a4} then
      result.rate := ParseQuantity(jsn.vObj['rateQuantity']);
    if jsn.has('rateRatio') {a4} then
      result.rate := ParseRatio(jsn.vObj['rateRatio']);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderEnteralFormulaAdministration(json : TJSONWriter; name : string; elem : TFhirNutritionOrderEnteralFormulaAdministration; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTiming(json, 'schedule', elem.schedule); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.rate is TFhirQuantity) then 
    ComposeQuantity(json, 'rateQuantity', TFhirQuantity(elem.rate)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.rate is TFhirRatio) then 
    ComposeRatio(json, 'rateRatio', TFhirRatio(elem.rate)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrder(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrder(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrder(jsn : TJsonObject) : TFhirNutritionOrder;
begin
  result := TFhirNutritionOrder.create;
  try
    ParseNutritionOrderProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderProperties(jsn : TJsonObject; result : TFhirNutritionOrder);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirNutritionRequestStatusEnum, SYSTEMS_TFhirNutritionRequestStatusEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('dateTime') or jsn.has('_dateTime') then
        result.dateTimeElement := ParseDateTime(jsn['dateTime'], jsn.vObj['_dateTime']);{q}
    if jsn.has('orderer') then
        result.orderer := ParseReference{Resource}(jsn.vObj['orderer']);{q3}
    if jsn.has('allergyIntolerance') then
      iterateArray(jsn.vArr['allergyIntolerance'], result.allergyIntoleranceList, parseReference{TFhirAllergyIntolerance});
    if jsn.has('foodPreferenceModifier') then
      iterateArray(jsn.vArr['foodPreferenceModifier'], result.foodPreferenceModifierList, parseCodeableConcept);
    if jsn.has('excludeFoodModifier') then
      iterateArray(jsn.vArr['excludeFoodModifier'], result.excludeFoodModifierList, parseCodeableConcept);
    if jsn.has('oralDiet') then
        result.oralDiet := ParseNutritionOrderOralDiet(jsn.vObj['oralDiet']);{q3}
    if jsn.has('supplement') then
      iterateArray(jsn.vArr['supplement'], result.supplementList, parseNutritionOrderSupplement);
    if jsn.has('enteralFormula') then
        result.enteralFormula := ParseNutritionOrderEnteralFormula(jsn.vObj['enteralFormula']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrder(json : TJSONWriter; name : string; elem : TFhirNutritionOrder; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirNutritionRequestStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirNutritionRequestStatusEnum, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('encounter') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if not elem.noCompose and doCompose('dateTime') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'dateTime', elem.dateTimeElement, false);
  if not elem.noCompose and doCompose('dateTime') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'dateTime', elem.dateTimeElement, false);
  if not elem.noCompose and doCompose('orderer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'orderer', elem.orderer); {a}
  if not elem.noCompose and doCompose('allergyIntolerance') and (SummaryOption in [soFull, soData]) and (elem.allergyIntoleranceList.Count > 0) then
  begin
    json.valueArray('allergyIntolerance');
    for i := 0 to elem.allergyIntoleranceList.Count - 1 do
      ComposeReference{TFhirAllergyIntolerance}(json, '', elem.allergyIntoleranceList[i]); {z - Reference(AllergyIntolerance)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('foodPreferenceModifier') and (SummaryOption in [soFull, soData]) and (elem.foodPreferenceModifierList.Count > 0) then
  begin
    json.valueArray('foodPreferenceModifier');
    for i := 0 to elem.foodPreferenceModifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.foodPreferenceModifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('excludeFoodModifier') and (SummaryOption in [soFull, soData]) and (elem.excludeFoodModifierList.Count > 0) then
  begin
    json.valueArray('excludeFoodModifier');
    for i := 0 to elem.excludeFoodModifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.excludeFoodModifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('oralDiet') and (SummaryOption in [soFull, soData]) then
    ComposeNutritionOrderOralDiet(json, 'oralDiet', elem.oralDiet); {a}
  if not elem.noCompose and doCompose('supplement') and (SummaryOption in [soFull, soData]) and (elem.supplementList.Count > 0) then
  begin
    json.valueArray('supplement');
    for i := 0 to elem.supplementList.Count - 1 do
      ComposeNutritionOrderSupplement(json, '', elem.supplementList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('enteralFormula') and (SummaryOption in [soFull, soData]) then
    ComposeNutritionOrderEnteralFormula(json, 'enteralFormula', elem.enteralFormula); {a}
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
procedure TFHIRJsonParser.ParseObservationReferenceRange(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationReferenceRange(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservationReferenceRange(jsn : TJsonObject) : TFhirObservationReferenceRange;
begin
  result := TFhirObservationReferenceRange.create;
  try
    ParseObservationReferenceRangeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationReferenceRangeProperties(jsn : TJsonObject; result : TFhirObservationReferenceRange);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('low') then
        result.low := ParseQuantity(jsn.vObj['low']);{q3}
    if jsn.has('high') then
        result.high := ParseQuantity(jsn.vObj['high']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('appliesTo') then
      iterateArray(jsn.vArr['appliesTo'], result.appliesToList, parseCodeableConcept);
    if jsn.has('age') then
        result.age := ParseRange(jsn.vObj['age']);{q3}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposeObservationReferenceRange(json : TJSONWriter; name : string; elem : TFhirObservationReferenceRange; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'low', elem.low); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'high', elem.high); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.appliesToList.Count > 0) then
  begin
    json.valueArray('appliesTo');
    for i := 0 to elem.appliesToList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.appliesToList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'age', elem.age); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseObservationComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationComponent(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservationComponent(jsn : TJsonObject) : TFhirObservationComponent;
begin
  result := TFhirObservationComponent.create;
  try
    ParseObservationComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationComponentProperties(jsn : TJsonObject; result : TFhirObservationComponent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('dataAbsentReason') then
        result.dataAbsentReason := ParseCodeableConcept(jsn.vObj['dataAbsentReason']);{q3}
    if jsn.has('interpretation') then
        result.interpretation := ParseCodeableConcept(jsn.vObj['interpretation']);{q3}
    if jsn.has('referenceRange') then
      iterateArray(jsn.vArr['referenceRange'], result.referenceRangeList, parseObservationReferenceRange);
end;

procedure TFHIRJsonComposer.ComposeObservationComponent(json : TJSONWriter; name : string; elem : TFhirObservationComponent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'dataAbsentReason', elem.dataAbsentReason); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'interpretation', elem.interpretation); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.referenceRangeList.Count > 0) then
  begin
    json.valueArray('referenceRange');
    for i := 0 to elem.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(json, '', elem.referenceRangeList[i]); {z - @Observation.referenceRange}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseObservation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservation(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservation(jsn : TJsonObject) : TFhirObservation;
begin
  result := TFhirObservation.create;
  try
    ParseObservationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationProperties(jsn : TJsonObject; result : TFhirObservation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveTiming') {a4} then
      result.effective := ParseTiming(jsn.vObj['effectiveTiming']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := ParseInstant(jsn['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseReference{Resource});
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('dataAbsentReason') then
        result.dataAbsentReason := ParseCodeableConcept(jsn.vObj['dataAbsentReason']);{q3}
    if jsn.has('interpretation') then
        result.interpretation := ParseCodeableConcept(jsn.vObj['interpretation']);{q3}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('specimen') then
        result.specimen := ParseReference{TFhirSpecimen}(jsn.vObj['specimen']);{q3}
    if jsn.has('device') then
        result.device := ParseReference{Resource}(jsn.vObj['device']);{q3}
    if jsn.has('referenceRange') then
      iterateArray(jsn.vArr['referenceRange'], result.referenceRangeList, parseObservationReferenceRange);
    if jsn.has('hasMember') then
      iterateArray(jsn.vArr['hasMember'], result.hasMemberList, parseReference{Resource});
    if jsn.has('derivedFrom') then
      iterateArray(jsn.vArr['derivedFrom'], result.derivedFromList, parseReference{Resource});
    if jsn.has('component') then
      iterateArray(jsn.vArr['component'], result.componentList, parseObservationComponent);
end;

procedure TFHIRJsonComposer.ComposeObservation(json : TJSONWriter; name : string; elem : TFhirObservation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|DeviceRequest|ImmunizationRecommendation|MedicationRequest|NutritionOrder|ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(MedicationAdministration|MedicationDispense|MedicationStatement|Procedure|Immunization|ImagingStudy)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirTiming) then 
    ComposeTiming(json, 'effectiveTiming', TFhirTiming(elem.effective)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soSummary, soData]) and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.performerList[i]); {z - Reference(Practitioner|PractitionerRole|Organization|CareTeam|Patient|RelatedPerson)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end;
  if not elem.noCompose and doCompose('dataAbsentReason') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'dataAbsentReason', elem.dataAbsentReason); {a}
  if not elem.noCompose and doCompose('interpretation') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'interpretation', elem.interpretation); {a}
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('bodySite') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if not elem.noCompose and doCompose('method') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not elem.noCompose and doCompose('specimen') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirSpecimen}(json, 'specimen', elem.specimen); {a}
  if not elem.noCompose and doCompose('device') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'device', elem.device); {a}
  if not elem.noCompose and doCompose('referenceRange') and (SummaryOption in [soFull, soData]) and (elem.referenceRangeList.Count > 0) then
  begin
    json.valueArray('referenceRange');
    for i := 0 to elem.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(json, '', elem.referenceRangeList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('hasMember') and (SummaryOption in [soFull, soSummary, soData]) and (elem.hasMemberList.Count > 0) then
  begin
    json.valueArray('hasMember');
    for i := 0 to elem.hasMemberList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.hasMemberList[i]); {z - Reference(Observation|QuestionnaireResponse|Sequence)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('derivedFrom') and (SummaryOption in [soFull, soSummary, soData]) and (elem.derivedFromList.Count > 0) then
  begin
    json.valueArray('derivedFrom');
    for i := 0 to elem.derivedFromList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.derivedFromList[i]); {z - Reference(DocumentReference|ImagingStudy|Media|QuestionnaireResponse|Observation|Sequence)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('component') and (SummaryOption in [soFull, soSummary, soData]) and (elem.componentList.Count > 0) then
  begin
    json.valueArray('component');
    for i := 0 to elem.componentList.Count - 1 do
      ComposeObservationComponent(json, '', elem.componentList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
procedure TFHIRJsonParser.ParseObservationDefinitionQuantitativeDetails(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationDefinitionQuantitativeDetails(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservationDefinitionQuantitativeDetails(jsn : TJsonObject) : TFhirObservationDefinitionQuantitativeDetails;
begin
  result := TFhirObservationDefinitionQuantitativeDetails.create;
  try
    ParseObservationDefinitionQuantitativeDetailsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationDefinitionQuantitativeDetailsProperties(jsn : TJsonObject; result : TFhirObservationDefinitionQuantitativeDetails);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('customaryUnit') then
        result.customaryUnit := ParseCoding(jsn.vObj['customaryUnit']);{q3}
    if jsn.has('unit') then
        result.unit_ := ParseCoding(jsn.vObj['unit']);{q3}
    if jsn.has('conversionFactor') or jsn.has('_conversionFactor') then
        result.conversionFactorElement := ParseDecimal(jsn['conversionFactor'], jsn.vObj['_conversionFactor']);{q}
    if jsn.has('decimalPrecision') or jsn.has('_decimalPrecision') then
        result.decimalPrecisionElement := ParseInteger(jsn['decimalPrecision'], jsn.vObj['_decimalPrecision']);{q}
end;

procedure TFHIRJsonComposer.ComposeObservationDefinitionQuantitativeDetails(json : TJSONWriter; name : string; elem : TFhirObservationDefinitionQuantitativeDetails; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'customaryUnit', elem.customaryUnit); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'unit', elem.unit_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'conversionFactor', elem.conversionFactorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'conversionFactor', elem.conversionFactorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'decimalPrecision', elem.decimalPrecisionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'decimalPrecision', elem.decimalPrecisionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseObservationDefinitionQualifiedInterval(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationDefinitionQualifiedInterval(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservationDefinitionQualifiedInterval(jsn : TJsonObject) : TFhirObservationDefinitionQualifiedInterval;
begin
  result := TFhirObservationDefinitionQualifiedInterval.create;
  try
    ParseObservationDefinitionQualifiedIntervalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationDefinitionQualifiedIntervalProperties(jsn : TJsonObject; result : TFhirObservationDefinitionQualifiedInterval);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('range') then
        result.range := ParseRange(jsn.vObj['range']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('appliesTo') then
      iterateArray(jsn.vArr['appliesTo'], result.appliesToList, parseCodeableConcept);
    if jsn.has('age') then
        result.age := ParseRange(jsn.vObj['age']);{q3}
    if jsn.has('gestationalAge') then
        result.gestationalAge := ParseRange(jsn.vObj['gestationalAge']);{q3}
    if jsn.has('condition') or jsn.has('_condition') then
        result.conditionElement := ParseString(jsn['condition'], jsn.vObj['_condition']);{q}
end;

procedure TFHIRJsonComposer.ComposeObservationDefinitionQualifiedInterval(json : TJSONWriter; name : string; elem : TFhirObservationDefinitionQualifiedInterval; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'range', elem.range); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.appliesToList.Count > 0) then
  begin
    json.valueArray('appliesTo');
    for i := 0 to elem.appliesToList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.appliesToList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'age', elem.age); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'gestationalAge', elem.gestationalAge); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'condition', elem.conditionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'condition', elem.conditionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseObservationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservationDefinition(jsn : TJsonObject) : TFhirObservationDefinition;
begin
  result := TFhirObservationDefinition.create;
  try
    ParseObservationDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationDefinitionProperties(jsn : TJsonObject; result : TFhirObservationDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCoding(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCoding(jsn.vObj['code']);{q3}
    if jsn.has('permittedDataType') then
      iterateArray(jsn.vArr['permittedDataType'], result.permittedDataTypeList, parseCoding);
    if jsn.has('multipleResultsAllowed') or jsn.has('_multipleResultsAllowed') then
        result.multipleResultsAllowedElement := ParseBoolean(jsn['multipleResultsAllowed'], jsn.vObj['_multipleResultsAllowed']);{q}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('preferredReportName') or jsn.has('_preferredReportName') then
        result.preferredReportNameElement := ParseString(jsn['preferredReportName'], jsn.vObj['_preferredReportName']);{q}
    if jsn.has('quantitativeDetails') then
        result.quantitativeDetails := ParseObservationDefinitionQuantitativeDetails(jsn.vObj['quantitativeDetails']);{q3}
    if jsn.has('qualifiedInterval') then
      iterateArray(jsn.vArr['qualifiedInterval'], result.qualifiedIntervalList, parseObservationDefinitionQualifiedInterval);
    if jsn.has('validCodedValueSet') or jsn.has('_validCodedValueSet') then
        result.validCodedValueSetElement := ParseUri(jsn['validCodedValueSet'], jsn.vObj['_validCodedValueSet']);{q}
    if jsn.has('normalCodedValueSet') or jsn.has('_normalCodedValueSet') then
        result.normalCodedValueSetElement := ParseUri(jsn['normalCodedValueSet'], jsn.vObj['_normalCodedValueSet']);{q}
    if jsn.has('abnormalCodedValueSet') or jsn.has('_abnormalCodedValueSet') then
        result.abnormalCodedValueSetElement := ParseUri(jsn['abnormalCodedValueSet'], jsn.vObj['_abnormalCodedValueSet']);{q}
    if jsn.has('criticalCodedValueSet') or jsn.has('_criticalCodedValueSet') then
        result.criticalCodedValueSetElement := ParseUri(jsn['criticalCodedValueSet'], jsn.vObj['_criticalCodedValueSet']);{q}
end;

procedure TFHIRJsonComposer.ComposeObservationDefinition(json : TJSONWriter; name : string; elem : TFhirObservationDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'category', elem.category); {a}
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('permittedDataType') and (SummaryOption in [soFull, soData]) and (elem.permittedDataTypeList.Count > 0) then
  begin
    json.valueArray('permittedDataType');
    for i := 0 to elem.permittedDataTypeList.Count - 1 do
      ComposeCoding(json, '', elem.permittedDataTypeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('multipleResultsAllowed') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'multipleResultsAllowed', elem.multipleResultsAllowedElement, false);
  if not elem.noCompose and doCompose('multipleResultsAllowed') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'multipleResultsAllowed', elem.multipleResultsAllowedElement, false);
  if not elem.noCompose and doCompose('method') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not elem.noCompose and doCompose('preferredReportName') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'preferredReportName', elem.preferredReportNameElement, false);
  if not elem.noCompose and doCompose('preferredReportName') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'preferredReportName', elem.preferredReportNameElement, false);
  if not elem.noCompose and doCompose('quantitativeDetails') and (SummaryOption in [soFull, soData]) then
    ComposeObservationDefinitionQuantitativeDetails(json, 'quantitativeDetails', elem.quantitativeDetails); {a}
  if not elem.noCompose and doCompose('qualifiedInterval') and (SummaryOption in [soFull, soData]) and (elem.qualifiedIntervalList.Count > 0) then
  begin
    json.valueArray('qualifiedInterval');
    for i := 0 to elem.qualifiedIntervalList.Count - 1 do
      ComposeObservationDefinitionQualifiedInterval(json, '', elem.qualifiedIntervalList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('validCodedValueSet') and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'validCodedValueSet', elem.validCodedValueSetElement, false);
  if not elem.noCompose and doCompose('validCodedValueSet') and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'validCodedValueSet', elem.validCodedValueSetElement, false);
  if not elem.noCompose and doCompose('normalCodedValueSet') and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'normalCodedValueSet', elem.normalCodedValueSetElement, false);
  if not elem.noCompose and doCompose('normalCodedValueSet') and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'normalCodedValueSet', elem.normalCodedValueSetElement, false);
  if not elem.noCompose and doCompose('abnormalCodedValueSet') and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'abnormalCodedValueSet', elem.abnormalCodedValueSetElement, false);
  if not elem.noCompose and doCompose('abnormalCodedValueSet') and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'abnormalCodedValueSet', elem.abnormalCodedValueSetElement, false);
  if not elem.noCompose and doCompose('criticalCodedValueSet') and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'criticalCodedValueSet', elem.criticalCodedValueSetElement, false);
  if not elem.noCompose and doCompose('criticalCodedValueSet') and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'criticalCodedValueSet', elem.criticalCodedValueSetElement, false);
end;

{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OCCUPATIONALDATA}
procedure TFHIRJsonParser.ParseOccupationalDataEmploymentStatus(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOccupationalDataEmploymentStatus(jsn)); {2}
end;

function TFHIRJsonParser.ParseOccupationalDataEmploymentStatus(jsn : TJsonObject) : TFhirOccupationalDataEmploymentStatus;
begin
  result := TFhirOccupationalDataEmploymentStatus.create;
  try
    ParseOccupationalDataEmploymentStatusProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOccupationalDataEmploymentStatusProperties(jsn : TJsonObject; result : TFhirOccupationalDataEmploymentStatus);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
end;

procedure TFHIRJsonComposer.ComposeOccupationalDataEmploymentStatus(json : TJSONWriter; name : string; elem : TFhirOccupationalDataEmploymentStatus; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOccupationalDataUsualOccupation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOccupationalDataUsualOccupation(jsn)); {2}
end;

function TFHIRJsonParser.ParseOccupationalDataUsualOccupation(jsn : TJsonObject) : TFhirOccupationalDataUsualOccupation;
begin
  result := TFhirOccupationalDataUsualOccupation.create;
  try
    ParseOccupationalDataUsualOccupationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOccupationalDataUsualOccupationProperties(jsn : TJsonObject; result : TFhirOccupationalDataUsualOccupation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('occupationCode') then
        result.occupationCode := ParseCodeableConcept(jsn.vObj['occupationCode']);{q3}
    if jsn.has('industryCode') then
        result.industryCode := ParseCodeableConcept(jsn.vObj['industryCode']);{q3}
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := ParseDateTime(jsn['start'], jsn.vObj['_start']);{q}
    if jsn.has('duration') then
        result.duration := ParseDuration(jsn.vObj['duration']);{q3}
end;

procedure TFHIRJsonComposer.ComposeOccupationalDataUsualOccupation(json : TJSONWriter; name : string; elem : TFhirOccupationalDataUsualOccupation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'occupationCode', elem.occupationCode); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'industryCode', elem.industryCode); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDuration(json, 'duration', elem.duration); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOccupationalDataPastOrPresentOccupation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOccupationalDataPastOrPresentOccupation(jsn)); {2}
end;

function TFHIRJsonParser.ParseOccupationalDataPastOrPresentOccupation(jsn : TJsonObject) : TFhirOccupationalDataPastOrPresentOccupation;
begin
  result := TFhirOccupationalDataPastOrPresentOccupation.create;
  try
    ParseOccupationalDataPastOrPresentOccupationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOccupationalDataPastOrPresentOccupationProperties(jsn : TJsonObject; result : TFhirOccupationalDataPastOrPresentOccupation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('occupationCode') then
        result.occupationCode := ParseCodeableConcept(jsn.vObj['occupationCode']);{q3}
    if jsn.has('industryCode') then
        result.industryCode := ParseCodeableConcept(jsn.vObj['industryCode']);{q3}
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('employer') then
        result.employer := ParseReference{TFhirOrganization}(jsn.vObj['employer']);{q3}
    if jsn.has('employmentType') then
        result.employmentType := ParseCodeableConcept(jsn.vObj['employmentType']);{q3}
    if jsn.has('supervisoryLevel') then
        result.supervisoryLevel := ParseCodeableConcept(jsn.vObj['supervisoryLevel']);{q3}
      if jsn.has('jobDuties') or jsn.has('_jobDuties') then
      iteratePrimitiveArray(jsn.vArr['jobDuties'], jsn.vArr['_jobDuties'], result.jobDutiesList, parseString);
      if jsn.has('occupationalHazards') or jsn.has('_occupationalHazards') then
      iteratePrimitiveArray(jsn.vArr['occupationalHazards'], jsn.vArr['_occupationalHazards'], result.occupationalHazardsList, parseString);
    if jsn.has('workSchedule') then
        result.workSchedule := ParseOccupationalDataPastOrPresentOccupationWorkSchedule(jsn.vObj['workSchedule']);{q3}
end;

procedure TFHIRJsonComposer.ComposeOccupationalDataPastOrPresentOccupation(json : TJSONWriter; name : string; elem : TFhirOccupationalDataPastOrPresentOccupation; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'occupationCode', elem.occupationCode); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'industryCode', elem.industryCode); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'employer', elem.employer); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'employmentType', elem.employmentType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'supervisoryLevel', elem.supervisoryLevel); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.jobDutiesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.jobDutiesList.Count - 1 do
    begin
      ext := ext or ((elem.jobDutiesList[i].id <> '') or (elem.jobDutiesList[i].hasExtensionList) {no-comments or (elem.jobDutiesList[i].hasComments)});
      val := val or (elem.jobDutiesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('jobDuties');
      for i := 0 to elem.jobDutiesList.Count - 1 do
        ComposeStringValue(json, '',elem.jobDutiesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_jobDuties');
      for i := 0 to elem.jobDutiesList.Count - 1 do
        ComposeStringProps(json, '',elem.jobDutiesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occupationalHazardsList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.occupationalHazardsList.Count - 1 do
    begin
      ext := ext or ((elem.occupationalHazardsList[i].id <> '') or (elem.occupationalHazardsList[i].hasExtensionList) {no-comments or (elem.occupationalHazardsList[i].hasComments)});
      val := val or (elem.occupationalHazardsList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('occupationalHazards');
      for i := 0 to elem.occupationalHazardsList.Count - 1 do
        ComposeStringValue(json, '',elem.occupationalHazardsList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_occupationalHazards');
      for i := 0 to elem.occupationalHazardsList.Count - 1 do
        ComposeStringProps(json, '',elem.occupationalHazardsList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeOccupationalDataPastOrPresentOccupationWorkSchedule(json, 'workSchedule', elem.workSchedule); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOccupationalDataPastOrPresentOccupationWorkSchedule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOccupationalDataPastOrPresentOccupationWorkSchedule(jsn)); {2}
end;

function TFHIRJsonParser.ParseOccupationalDataPastOrPresentOccupationWorkSchedule(jsn : TJsonObject) : TFhirOccupationalDataPastOrPresentOccupationWorkSchedule;
begin
  result := TFhirOccupationalDataPastOrPresentOccupationWorkSchedule.create;
  try
    ParseOccupationalDataPastOrPresentOccupationWorkScheduleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOccupationalDataPastOrPresentOccupationWorkScheduleProperties(jsn : TJsonObject; result : TFhirOccupationalDataPastOrPresentOccupationWorkSchedule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('weeklyWorkDays') or jsn.has('_weeklyWorkDays') then
        result.weeklyWorkDaysElement := ParseDecimal(jsn['weeklyWorkDays'], jsn.vObj['_weeklyWorkDays']);{q}
    if jsn.has('dailyWorkHours') or jsn.has('_dailyWorkHours') then
        result.dailyWorkHoursElement := ParseDecimal(jsn['dailyWorkHours'], jsn.vObj['_dailyWorkHours']);{q}
end;

procedure TFHIRJsonComposer.ComposeOccupationalDataPastOrPresentOccupationWorkSchedule(json : TJSONWriter; name : string; elem : TFhirOccupationalDataPastOrPresentOccupationWorkSchedule; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'weeklyWorkDays', elem.weeklyWorkDaysElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'weeklyWorkDays', elem.weeklyWorkDaysElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'dailyWorkHours', elem.dailyWorkHoursElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'dailyWorkHours', elem.dailyWorkHoursElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOccupationalData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOccupationalData(jsn)); {2}
end;

function TFHIRJsonParser.ParseOccupationalData(jsn : TJsonObject) : TFhirOccupationalData;
begin
  result := TFhirOccupationalData.create;
  try
    ParseOccupationalDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOccupationalDataProperties(jsn : TJsonObject; result : TFhirOccupationalData);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], result.authorList, parseReference{Resource});
    if jsn.has('employmentStatus') then
        result.employmentStatus := ParseOccupationalDataEmploymentStatus(jsn.vObj['employmentStatus']);{q3}
      if jsn.has('retirementDate') or jsn.has('_retirementDate') then
      iteratePrimitiveArray(jsn.vArr['retirementDate'], jsn.vArr['_retirementDate'], result.retirementDateList, parseDateTime);
    if jsn.has('combatZoneWork') then
      iterateArray(jsn.vArr['combatZoneWork'], result.combatZoneWorkList, parsePeriod);
    if jsn.has('usualOccupation') then
        result.usualOccupation := ParseOccupationalDataUsualOccupation(jsn.vObj['usualOccupation']);{q3}
    if jsn.has('pastOrPresentOccupation') then
      iterateArray(jsn.vArr['pastOrPresentOccupation'], result.pastOrPresentOccupationList, parseOccupationalDataPastOrPresentOccupation);
end;

procedure TFHIRJsonComposer.ComposeOccupationalData(json : TJSONWriter; name : string; elem : TFhirOccupationalData; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soData]) and (elem.authorList.Count > 0) then
  begin
    json.valueArray('author');
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.authorList[i]); {z - Reference(Practitioner|PractitionerRole|Patient|RelatedPerson)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('employmentStatus') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeOccupationalDataEmploymentStatus(json, 'employmentStatus', elem.employmentStatus); {a}
  if not elem.noCompose and doCompose('retirementDate') and (SummaryOption in [soFull, soSummary, soData]) and (elem.retirementDateList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.retirementDateList.Count - 1 do
    begin
      ext := ext or ((elem.retirementDateList[i].id <> '') or (elem.retirementDateList[i].hasExtensionList) {no-comments or (elem.retirementDateList[i].hasComments)});
      val := val or (elem.retirementDateList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('retirementDate');
      for i := 0 to elem.retirementDateList.Count - 1 do
        ComposeDateTimeValue(json, '',elem.retirementDateList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_retirementDate');
      for i := 0 to elem.retirementDateList.Count - 1 do
        ComposeDateTimeProps(json, '',elem.retirementDateList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('combatZoneWork') and (SummaryOption in [soFull, soSummary, soData]) and (elem.combatZoneWorkList.Count > 0) then
  begin
    json.valueArray('combatZoneWork');
    for i := 0 to elem.combatZoneWorkList.Count - 1 do
      ComposePeriod(json, '', elem.combatZoneWorkList[i]); {z - Period}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('usualOccupation') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeOccupationalDataUsualOccupation(json, 'usualOccupation', elem.usualOccupation); {a}
  if not elem.noCompose and doCompose('pastOrPresentOccupation') and (SummaryOption in [soFull, soSummary, soData]) and (elem.pastOrPresentOccupationList.Count > 0) then
  begin
    json.valueArray('pastOrPresentOccupation');
    for i := 0 to elem.pastOrPresentOccupationList.Count - 1 do
      ComposeOccupationalDataPastOrPresentOccupation(json, '', elem.pastOrPresentOccupationList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_OCCUPATIONALDATA}
{$IFDEF FHIR_OPERATIONDEFINITION}
procedure TFHIRJsonParser.ParseOperationDefinitionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationDefinitionParameter(jsn : TJsonObject) : TFhirOperationDefinitionParameter;
begin
  result := TFhirOperationDefinitionParameter.create;
  try
    ParseOperationDefinitionParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterProperties(jsn : TJsonObject; result : TFhirOperationDefinitionParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseCode(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn['use'], jsn.vObj['_use'], CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum);
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := ParseInteger(jsn['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := ParseString(jsn['max'], jsn.vObj['_max']);{q}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum);
      if jsn.has('targetProfile') or jsn.has('_targetProfile') then
      iteratePrimitiveArray(jsn.vArr['targetProfile'], jsn.vArr['_targetProfile'], result.targetProfileList, parseUri);
    if jsn.has('searchType') or jsn.has('_searchType')  then
      result.searchTypeElement := parseEnum(jsn.path+'/searchType', jsn['searchType'], jsn.vObj['_searchType'], CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum);
    if jsn.has('binding') then
        result.binding := ParseOperationDefinitionParameterBinding(jsn.vObj['binding']);{q3}
    if jsn.has('part') then
      iterateArray(jsn.vArr['part'], result.partList, parseOperationDefinitionParameter);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionParameter(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionParameter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.targetProfileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.targetProfileList.Count - 1 do
    begin
      ext := ext or ((elem.targetProfileList[i].id <> '') or (elem.targetProfileList[i].hasExtensionList) {no-comments or (elem.targetProfileList[i].hasComments)});
      val := val or (elem.targetProfileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('targetProfile');
      for i := 0 to elem.targetProfileList.Count - 1 do
        ComposeUriValue(json, '',elem.targetProfileList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_targetProfile');
      for i := 0 to elem.targetProfileList.Count - 1 do
        ComposeUriProps(json, '',elem.targetProfileList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'searchType', elem.SearchTypeElement, CODES_TFhirSearchParamTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'searchType', elem.SearchTypeElement, CODES_TFhirSearchParamTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeOperationDefinitionParameterBinding(json, 'binding', elem.binding); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.partList.Count > 0) then
  begin
    json.valueArray('part');
    for i := 0 to elem.partList.Count - 1 do
      ComposeOperationDefinitionParameter(json, '', elem.partList[i]); {z - @OperationDefinition.parameter}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterBinding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionParameterBinding(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationDefinitionParameterBinding(jsn : TJsonObject) : TFhirOperationDefinitionParameterBinding;
begin
  result := TFhirOperationDefinitionParameterBinding.create;
  try
    ParseOperationDefinitionParameterBindingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterBindingProperties(jsn : TJsonObject; result : TFhirOperationDefinitionParameterBinding);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('strength') or jsn.has('_strength')  then
      result.strengthElement := parseEnum(jsn.path+'/strength', jsn['strength'], jsn.vObj['_strength'], CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum);
    if jsn.has('valueSetReference') {a3} then
      result.valueSet := ParseReference(jsn.vObj['valueSetReference']);
    if jsn.has('valueSetUri') or jsn.has('_valueSetUri') then
      result.valueSet := parseUri(jsn['valueSetUri'], jsn.vObj['_valueSetUri']);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionParameterBinding(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionParameterBinding; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.valueSet is TFhirReference) then
    ComposeReference(json, 'valueSetReference', TFhirReference(elem.valueSet))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.valueSet is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
    ComposeUriProps(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionOverload(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionOverload(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationDefinitionOverload(jsn : TJsonObject) : TFhirOperationDefinitionOverload;
begin
  result := TFhirOperationDefinitionOverload.create;
  try
    ParseOperationDefinitionOverloadProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionOverloadProperties(jsn : TJsonObject; result : TFhirOperationDefinitionOverload);
begin
    ParseBackboneElementProperties(jsn, result);
      if jsn.has('parameterName') or jsn.has('_parameterName') then
      iteratePrimitiveArray(jsn.vArr['parameterName'], jsn.vArr['_parameterName'], result.parameterNameList, parseString);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionOverload(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionOverload; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.parameterNameList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.parameterNameList.Count - 1 do
    begin
      ext := ext or ((elem.parameterNameList[i].id <> '') or (elem.parameterNameList[i].hasExtensionList) {no-comments or (elem.parameterNameList[i].hasComments)});
      val := val or (elem.parameterNameList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('parameterName');
      for i := 0 to elem.parameterNameList.Count - 1 do
        ComposeStringValue(json, '',elem.parameterNameList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_parameterName');
      for i := 0 to elem.parameterNameList.Count - 1 do
        ComposeStringProps(json, '',elem.parameterNameList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOperationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationDefinition(jsn : TJsonObject) : TFhirOperationDefinition;
begin
  result := TFhirOperationDefinition.create;
  try
    ParseOperationDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionProperties(jsn : TJsonObject; result : TFhirOperationDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirOperationKindEnum, SYSTEMS_TFhirOperationKindEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('affectsState') or jsn.has('_affectsState') then
        result.affectsStateElement := ParseBoolean(jsn['affectsState'], jsn.vObj['_affectsState']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseMarkdown(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('base') then
        result.base := ParseReference{TFhirOperationDefinition}(jsn.vObj['base']);{q3}
    if jsn.has('resource') or jsn.has('_resource') then
      iterateEnumArray(jsn.vArr['resource'], jsn.vArr['_resource'], jsn.path+'/resource', result.resource, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := ParseBoolean(jsn['system'], jsn.vObj['_system']);{q}
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := ParseBoolean(jsn['type'], jsn.vObj['_type']);{q}
    if jsn.has('instance') or jsn.has('_instance') then
        result.instanceElement := ParseBoolean(jsn['instance'], jsn.vObj['_instance']);{q}
    if jsn.has('inputProfile') then
        result.inputProfile := ParseReference{TFhirStructureDefinition}(jsn.vObj['inputProfile']);{q3}
    if jsn.has('outputProfile') then
        result.outputProfile := ParseReference{TFhirStructureDefinition}(jsn.vObj['outputProfile']);{q3}
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseOperationDefinitionParameter);
    if jsn.has('overload') then
      iterateArray(jsn.vArr['overload'], result.overloadList, parseOperationDefinitionOverload);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinition(json : TJSONWriter; name : string; elem : TFhirOperationDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirOperationKindEnum, false);
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirOperationKindEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('affectsState') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'affectsState', elem.affectsStateElement, false);
  if not elem.noCompose and doCompose('affectsState') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'affectsState', elem.affectsStateElement, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('base') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOperationDefinition}(json, 'base', elem.base); {a}
  if not elem.noCompose and doCompose('resource') and (SummaryOption in [soFull, soSummary, soData]) and (elem.resource.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.resource.Count - 1 do
    begin
      val := val or (elem.resource[i].hasPrimitiveValue);
      ext := ext or ((elem.resource[i].id <> '') or (elem.resource[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('resource');
      for i := 0 to elem.resource.Count - 1 do
        ComposeEnumValue(json, '', elem.resource[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_resource');
      for i := 0 to elem.resource.Count - 1 do
        ComposeEnumProps(json, '', elem.resource[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('system') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'system', elem.systemElement, false);
  if not elem.noCompose and doCompose('system') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'system', elem.systemElement, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'type', elem.type_Element, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'type', elem.type_Element, false);
  if not elem.noCompose and doCompose('instance') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'instance', elem.instanceElement, false);
  if not elem.noCompose and doCompose('instance') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'instance', elem.instanceElement, false);
  if not elem.noCompose and doCompose('inputProfile') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'inputProfile', elem.inputProfile); {a}
  if not elem.noCompose and doCompose('outputProfile') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'outputProfile', elem.outputProfile); {a}
  if not elem.noCompose and doCompose('parameter') and (SummaryOption in [soFull, soData]) and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeOperationDefinitionParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('overload') and (SummaryOption in [soFull, soData]) and (elem.overloadList.Count > 0) then
  begin
    json.valueArray('overload');
    for i := 0 to elem.overloadList.Count - 1 do
      ComposeOperationDefinitionOverload(json, '', elem.overloadList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
procedure TFHIRJsonParser.ParseOperationOutcomeIssue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationOutcomeIssue(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationOutcomeIssue(jsn : TJsonObject) : TFhirOperationOutcomeIssue;
begin
  result := TFhirOperationOutcomeIssue.create;
  try
    ParseOperationOutcomeIssueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationOutcomeIssueProperties(jsn : TJsonObject; result : TFhirOperationOutcomeIssue);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('severity') or jsn.has('_severity')  then
      result.severityElement := parseEnum(jsn.path+'/severity', jsn['severity'], jsn.vObj['_severity'], CODES_TFhirIssueSeverityEnum, SYSTEMS_TFhirIssueSeverityEnum);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirIssueTypeEnum, SYSTEMS_TFhirIssueTypeEnum);
    if jsn.has('details') then
        result.details := ParseCodeableConcept(jsn.vObj['details']);{q3}
    if jsn.has('diagnostics') or jsn.has('_diagnostics') then
        result.diagnosticsElement := ParseString(jsn['diagnostics'], jsn.vObj['_diagnostics']);{q}
      if jsn.has('location') or jsn.has('_location') then
      iteratePrimitiveArray(jsn.vArr['location'], jsn.vArr['_location'], result.locationList, parseString);
      if jsn.has('expression') or jsn.has('_expression') then
      iteratePrimitiveArray(jsn.vArr['expression'], jsn.vArr['_expression'], result.expressionList, parseString);
end;

procedure TFHIRJsonComposer.ComposeOperationOutcomeIssue(json : TJSONWriter; name : string; elem : TFhirOperationOutcomeIssue; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'severity', elem.SeverityElement, CODES_TFhirIssueSeverityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'severity', elem.SeverityElement, CODES_TFhirIssueSeverityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirIssueTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirIssueTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'details', elem.details); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'diagnostics', elem.diagnosticsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'diagnostics', elem.diagnosticsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.locationList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.locationList.Count - 1 do
    begin
      ext := ext or ((elem.locationList[i].id <> '') or (elem.locationList[i].hasExtensionList) {no-comments or (elem.locationList[i].hasComments)});
      val := val or (elem.locationList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('location');
      for i := 0 to elem.locationList.Count - 1 do
        ComposeStringValue(json, '',elem.locationList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_location');
      for i := 0 to elem.locationList.Count - 1 do
        ComposeStringProps(json, '',elem.locationList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.expressionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.expressionList.Count - 1 do
    begin
      ext := ext or ((elem.expressionList[i].id <> '') or (elem.expressionList[i].hasExtensionList) {no-comments or (elem.expressionList[i].hasComments)});
      val := val or (elem.expressionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('expression');
      for i := 0 to elem.expressionList.Count - 1 do
        ComposeStringValue(json, '',elem.expressionList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_expression');
      for i := 0 to elem.expressionList.Count - 1 do
        ComposeStringProps(json, '',elem.expressionList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOperationOutcome(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationOutcome(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationOutcome(jsn : TJsonObject) : TFhirOperationOutcome;
begin
  result := TFhirOperationOutcome.create;
  try
    ParseOperationOutcomeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationOutcomeProperties(jsn : TJsonObject; result : TFhirOperationOutcome);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('issue') then
      iterateArray(jsn.vArr['issue'], result.issueList, parseOperationOutcomeIssue);
end;

procedure TFHIRJsonComposer.ComposeOperationOutcome(json : TJSONWriter; name : string; elem : TFhirOperationOutcome; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('issue') and (SummaryOption in [soFull, soSummary, soData]) and (elem.issueList.Count > 0) then
  begin
    json.valueArray('issue');
    for i := 0 to elem.issueList.Count - 1 do
      ComposeOperationOutcomeIssue(json, '', elem.issueList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
procedure TFHIRJsonParser.ParseOrganizationContact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganizationContact(jsn)); {2}
end;

function TFHIRJsonParser.ParseOrganizationContact(jsn : TJsonObject) : TFhirOrganizationContact;
begin
  result := TFhirOrganizationContact.create;
  try
    ParseOrganizationContactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationContactProperties(jsn : TJsonObject; result : TFhirOrganizationContact);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('purpose') then
        result.purpose := ParseCodeableConcept(jsn.vObj['purpose']);{q3}
    if jsn.has('name') then
        result.name := ParseHumanName(jsn.vObj['name']);{q3}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
        result.address := ParseAddress(jsn.vObj['address']);{q3}
end;

procedure TFHIRJsonComposer.ComposeOrganizationContact(json : TJSONWriter; name : string; elem : TFhirOrganizationContact; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'purpose', elem.purpose); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeHumanName(json, 'name', elem.name); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', elem.address); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOrganization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganization(jsn)); {2}
end;

function TFHIRJsonParser.ParseOrganization(jsn : TJsonObject) : TFhirOrganization;
begin
  result := TFhirOrganization.create;
  try
    ParseOrganizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationProperties(jsn : TJsonObject; result : TFhirOrganization);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], result.aliasList, parseString);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('partOf') then
        result.partOf := ParseReference{TFhirOrganization}(jsn.vObj['partOf']);{q3}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseOrganizationContact);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposeOrganization(json : TJSONWriter; name : string; elem : TFhirOrganization; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('alias') and (SummaryOption in [soFull, soData]) and (elem.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.aliasList.Count - 1 do
    begin
      ext := ext or ((elem.aliasList[i].id <> '') or (elem.aliasList[i].hasExtensionList) {no-comments or (elem.aliasList[i].hasComments)});
      val := val or (elem.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringValue(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringProps(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('address') and (SummaryOption in [soFull, soData]) and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'partOf', elem.partOf); {a}
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeOrganizationContact(json, '', elem.contactList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('endpoint') and (SummaryOption in [soFull, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONROLE}
procedure TFHIRJsonParser.ParseOrganizationRoleAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganizationRoleAvailableTime(jsn)); {2}
end;

function TFHIRJsonParser.ParseOrganizationRoleAvailableTime(jsn : TJsonObject) : TFhirOrganizationRoleAvailableTime;
begin
  result := TFhirOrganizationRoleAvailableTime.create;
  try
    ParseOrganizationRoleAvailableTimeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationRoleAvailableTimeProperties(jsn : TJsonObject; result : TFhirOrganizationRoleAvailableTime);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('daysOfWeek') or jsn.has('_daysOfWeek') then
      iterateEnumArray(jsn.vArr['daysOfWeek'], jsn.vArr['_daysOfWeek'], jsn.path+'/daysOfWeek', result.daysOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
    if jsn.has('allDay') or jsn.has('_allDay') then
        result.allDayElement := ParseBoolean(jsn['allDay'], jsn.vObj['_allDay']);{q}
    if jsn.has('availableStartTime') or jsn.has('_availableStartTime') then
        result.availableStartTimeElement := ParseTime(jsn['availableStartTime'], jsn.vObj['_availableStartTime']);{q}
    if jsn.has('availableEndTime') or jsn.has('_availableEndTime') then
        result.availableEndTimeElement := ParseTime(jsn['availableEndTime'], jsn.vObj['_availableEndTime']);{q}
end;

procedure TFHIRJsonComposer.ComposeOrganizationRoleAvailableTime(json : TJSONWriter; name : string; elem : TFhirOrganizationRoleAvailableTime; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.daysOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.daysOfWeekList.Count - 1 do
    begin
      val := val or (elem.daysOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((elem.daysOfWeekList[i].id <> '') or (elem.daysOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allDay', elem.allDayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allDay', elem.allDayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOrganizationRoleNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganizationRoleNotAvailable(jsn)); {2}
end;

function TFHIRJsonParser.ParseOrganizationRoleNotAvailable(jsn : TJsonObject) : TFhirOrganizationRoleNotAvailable;
begin
  result := TFhirOrganizationRoleNotAvailable.create;
  try
    ParseOrganizationRoleNotAvailableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationRoleNotAvailableProperties(jsn : TJsonObject; result : TFhirOrganizationRoleNotAvailable);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('during') then
        result.during := ParsePeriod(jsn.vObj['during']);{q3}
end;

procedure TFHIRJsonComposer.ComposeOrganizationRoleNotAvailable(json : TJSONWriter; name : string; elem : TFhirOrganizationRoleNotAvailable; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'during', elem.during); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOrganizationRole(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganizationRole(jsn)); {2}
end;

function TFHIRJsonParser.ParseOrganizationRole(jsn : TJsonObject) : TFhirOrganizationRole;
begin
  result := TFhirOrganizationRole.create;
  try
    ParseOrganizationRoleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationRoleProperties(jsn : TJsonObject; result : TFhirOrganizationRole);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('participatingOrganization') then
        result.participatingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['participatingOrganization']);{q3}
    if jsn.has('network') then
      iterateArray(jsn.vArr['network'], result.networkList, parseReference{TFhirOrganization});
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], result.locationList, parseReference{TFhirLocation});
    if jsn.has('healthcareService') then
      iterateArray(jsn.vArr['healthcareService'], result.healthcareServiceList, parseReference{TFhirHealthcareService});
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('availableTime') then
      iterateArray(jsn.vArr['availableTime'], result.availableTimeList, parseOrganizationRoleAvailableTime);
    if jsn.has('notAvailable') then
      iterateArray(jsn.vArr['notAvailable'], result.notAvailableList, parseOrganizationRoleNotAvailable);
    if jsn.has('availabilityExceptions') or jsn.has('_availabilityExceptions') then
        result.availabilityExceptionsElement := ParseString(jsn['availabilityExceptions'], jsn.vObj['_availabilityExceptions']);{q}
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposeOrganizationRole(json : TJSONWriter; name : string; elem : TFhirOrganizationRole; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('participatingOrganization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'participatingOrganization', elem.participatingOrganization); {a}
  if not elem.noCompose and doCompose('network') and (SummaryOption in [soFull, soSummary, soData]) and (elem.networkList.Count > 0) then
  begin
    json.valueArray('network');
    for i := 0 to elem.networkList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.networkList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specialty') and (SummaryOption in [soFull, soSummary, soData]) and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soSummary, soData]) and (elem.locationList.Count > 0) then
  begin
    json.valueArray('location');
    for i := 0 to elem.locationList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.locationList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('healthcareService') and (SummaryOption in [soFull, soData]) and (elem.healthcareServiceList.Count > 0) then
  begin
    json.valueArray('healthcareService');
    for i := 0 to elem.healthcareServiceList.Count - 1 do
      ComposeReference{TFhirHealthcareService}(json, '', elem.healthcareServiceList[i]); {z - Reference(HealthcareService)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soSummary, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('availableTime') and (SummaryOption in [soFull, soData]) and (elem.availableTimeList.Count > 0) then
  begin
    json.valueArray('availableTime');
    for i := 0 to elem.availableTimeList.Count - 1 do
      ComposeOrganizationRoleAvailableTime(json, '', elem.availableTimeList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('notAvailable') and (SummaryOption in [soFull, soData]) and (elem.notAvailableList.Count > 0) then
  begin
    json.valueArray('notAvailable');
    for i := 0 to elem.notAvailableList.Count - 1 do
      ComposeOrganizationRoleNotAvailable(json, '', elem.notAvailableList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('availabilityExceptions') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if not elem.noCompose and doCompose('availabilityExceptions') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if not elem.noCompose and doCompose('endpoint') and (SummaryOption in [soFull, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ORGANIZATIONROLE}
{$IFDEF FHIR_PATIENT}
procedure TFHIRJsonParser.ParsePatientContact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientContact(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatientContact(jsn : TJsonObject) : TFhirPatientContact;
begin
  result := TFhirPatientContact.create;
  try
    ParsePatientContactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientContactProperties(jsn : TJsonObject; result : TFhirPatientContact);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('relationship') then
      iterateArray(jsn.vArr['relationship'], result.relationshipList, parseCodeableConcept);
    if jsn.has('name') then
        result.name := ParseHumanName(jsn.vObj['name']);{q3}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
        result.address := ParseAddress(jsn.vObj['address']);{q3}
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposePatientContact(json : TJSONWriter; name : string; elem : TFhirPatientContact; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.relationshipList.Count > 0) then
  begin
    json.valueArray('relationship');
    for i := 0 to elem.relationshipList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.relationshipList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeHumanName(json, 'name', elem.name); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', elem.address); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePatientAnimal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientAnimal(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatientAnimal(jsn : TJsonObject) : TFhirPatientAnimal;
begin
  result := TFhirPatientAnimal.create;
  try
    ParsePatientAnimalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientAnimalProperties(jsn : TJsonObject; result : TFhirPatientAnimal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('species') then
        result.species := ParseCodeableConcept(jsn.vObj['species']);{q3}
    if jsn.has('breed') then
        result.breed := ParseCodeableConcept(jsn.vObj['breed']);{q3}
    if jsn.has('genderStatus') then
        result.genderStatus := ParseCodeableConcept(jsn.vObj['genderStatus']);{q3}
end;

procedure TFHIRJsonComposer.ComposePatientAnimal(json : TJSONWriter; name : string; elem : TFhirPatientAnimal; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'species', elem.species); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'breed', elem.breed); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'genderStatus', elem.genderStatus); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePatientCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientCommunication(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatientCommunication(jsn : TJsonObject) : TFhirPatientCommunication;
begin
  result := TFhirPatientCommunication.create;
  try
    ParsePatientCommunicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientCommunicationProperties(jsn : TJsonObject; result : TFhirPatientCommunication);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') then
        result.language := ParseCodeableConcept(jsn.vObj['language']);{q3}
    if jsn.has('preferred') or jsn.has('_preferred') then
        result.preferredElement := ParseBoolean(jsn['preferred'], jsn.vObj['_preferred']);{q}
end;

procedure TFHIRJsonComposer.ComposePatientCommunication(json : TJSONWriter; name : string; elem : TFhirPatientCommunication; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'language', elem.language); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'preferred', elem.preferredElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'preferred', elem.preferredElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePatientLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientLink(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatientLink(jsn : TJsonObject) : TFhirPatientLink;
begin
  result := TFhirPatientLink.create;
  try
    ParsePatientLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientLinkProperties(jsn : TJsonObject; result : TFhirPatientLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('other') then
        result.other := ParseReference{Resource}(jsn.vObj['other']);{q3}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirLinkTypeEnum, SYSTEMS_TFhirLinkTypeEnum);
end;

procedure TFHIRJsonComposer.ComposePatientLink(json : TJSONWriter; name : string; elem : TFhirPatientLink; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'other', elem.other); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirLinkTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirLinkTypeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePatient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatient(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatient(jsn : TJsonObject) : TFhirPatient;
begin
  result := TFhirPatient.create;
  try
    ParsePatientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientProperties(jsn : TJsonObject; result : TFhirPatient);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], result.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        result.birthDateElement := ParseDate(jsn['birthDate'], jsn.vObj['_birthDate']);{q}
    if jsn.has('deceasedBoolean') or jsn.has('_deceasedBoolean') then
      result.deceased := parseBoolean(jsn['deceasedBoolean'], jsn.vObj['_deceasedBoolean']);
    if jsn.has('deceasedDateTime') or jsn.has('_deceasedDateTime') then
      result.deceased := parseDateTime(jsn['deceasedDateTime'], jsn.vObj['_deceasedDateTime']);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('maritalStatus') then
        result.maritalStatus := ParseCodeableConcept(jsn.vObj['maritalStatus']);{q3}
    if jsn.has('multipleBirthBoolean') or jsn.has('_multipleBirthBoolean') then
      result.multipleBirth := parseBoolean(jsn['multipleBirthBoolean'], jsn.vObj['_multipleBirthBoolean']);
    if jsn.has('multipleBirthInteger') or jsn.has('_multipleBirthInteger') then
      result.multipleBirth := parseInteger(jsn['multipleBirthInteger'], jsn.vObj['_multipleBirthInteger']);
    if jsn.has('photo') then
      iterateArray(jsn.vArr['photo'], result.photoList, parseAttachment);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parsePatientContact);
    if jsn.has('animal') then
        result.animal := ParsePatientAnimal(jsn.vObj['animal']);{q3}
    if jsn.has('communication') then
      iterateArray(jsn.vArr['communication'], result.communicationList, parsePatientCommunication);
    if jsn.has('generalPractitioner') then
      iterateArray(jsn.vArr['generalPractitioner'], result.generalPractitionerList, parseReference{Resource});
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parsePatientLink);
end;

procedure TFHIRJsonComposer.ComposePatient(json : TJSONWriter; name : string; elem : TFhirPatient; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) and (elem.nameList.Count > 0) then
  begin
    json.valueArray('name');
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(json, '', elem.nameList[i]); {z - HumanName}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soSummary, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and doCompose('birthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'birthDate', elem.birthDateElement, false);
  if not elem.noCompose and doCompose('birthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'birthDate', elem.birthDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'deceasedBoolean', TFhirBoolean(elem.deceased), false);
    ComposeBooleanProps(json, 'deceasedBoolean', TFhirBoolean(elem.deceased), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'deceasedDateTime', TFhirDateTime(elem.deceased), false);
    ComposeDateTimeProps(json, 'deceasedDateTime', TFhirDateTime(elem.deceased), false);
  end;
  if not elem.noCompose and doCompose('address') and (SummaryOption in [soFull, soSummary, soData]) and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('maritalStatus') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'maritalStatus', elem.maritalStatus); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.multipleBirth is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'multipleBirthBoolean', TFhirBoolean(elem.multipleBirth), false);
    ComposeBooleanProps(json, 'multipleBirthBoolean', TFhirBoolean(elem.multipleBirth), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.multipleBirth is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'multipleBirthInteger', TFhirInteger(elem.multipleBirth), false);
    ComposeIntegerProps(json, 'multipleBirthInteger', TFhirInteger(elem.multipleBirth), false);
  end;
  if not elem.noCompose and doCompose('photo') and (SummaryOption in [soFull, soData]) and (elem.photoList.Count > 0) then
  begin
    json.valueArray('photo');
    for i := 0 to elem.photoList.Count - 1 do
      ComposeAttachment(json, '', elem.photoList[i]); {z - Attachment}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposePatientContact(json, '', elem.contactList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('animal') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePatientAnimal(json, 'animal', elem.animal); {a}
  if not elem.noCompose and doCompose('communication') and (SummaryOption in [soFull, soData]) and (elem.communicationList.Count > 0) then
  begin
    json.valueArray('communication');
    for i := 0 to elem.communicationList.Count - 1 do
      ComposePatientCommunication(json, '', elem.communicationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('generalPractitioner') and (SummaryOption in [soFull, soData]) and (elem.generalPractitionerList.Count > 0) then
  begin
    json.valueArray('generalPractitioner');
    for i := 0 to elem.generalPractitionerList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.generalPractitionerList[i]); {z - Reference(Organization|Practitioner)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('managingOrganization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if not elem.noCompose and doCompose('link_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposePatientLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
procedure TFHIRJsonParser.ParsePaymentNotice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentNotice(jsn)); {2}
end;

function TFHIRJsonParser.ParsePaymentNotice(jsn : TJsonObject) : TFhirPaymentNotice;
begin
  result := TFhirPaymentNotice.create;
  try
    ParsePaymentNoticeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentNoticeProperties(jsn : TJsonObject; result : TFhirPaymentNotice);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('request') then
        result.request := ParseReference{TFhirReference}(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseReference{TFhirReference}(jsn.vObj['response']);{q3}
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        result.statusDateElement := ParseDate(jsn['statusDate'], jsn.vObj['_statusDate']);{q}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('target') then
        result.target := ParseReference{TFhirOrganization}(jsn.vObj['target']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('paymentStatus') then
        result.paymentStatus := ParseCodeableConcept(jsn.vObj['paymentStatus']);{q3}
end;

procedure TFHIRJsonComposer.ComposePaymentNotice(json : TJSONWriter; name : string; elem : TFhirPaymentNotice; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'request', elem.request); {a}
  if not elem.noCompose and doCompose('response') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'response', elem.response); {a}
  if not elem.noCompose and doCompose('statusDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and doCompose('statusDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('target') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'target', elem.target); {a}
  if not elem.noCompose and doCompose('provider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('paymentStatus') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'paymentStatus', elem.paymentStatus); {a}
end;

{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
procedure TFHIRJsonParser.ParsePaymentReconciliationDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentReconciliationDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParsePaymentReconciliationDetail(jsn : TJsonObject) : TFhirPaymentReconciliationDetail;
begin
  result := TFhirPaymentReconciliationDetail.create;
  try
    ParsePaymentReconciliationDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationDetailProperties(jsn : TJsonObject; result : TFhirPaymentReconciliationDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirReference}(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseReference{TFhirReference}(jsn.vObj['response']);{q3}
    if jsn.has('submitter') then
        result.submitter := ParseReference{TFhirOrganization}(jsn.vObj['submitter']);{q3}
    if jsn.has('payee') then
        result.payee := ParseReference{TFhirOrganization}(jsn.vObj['payee']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDate(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposePaymentReconciliationDetail(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliationDetail; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'request', elem.request); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'response', elem.response); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'submitter', elem.submitter); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'payee', elem.payee); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentReconciliationProcessNote(jsn)); {2}
end;

function TFHIRJsonParser.ParsePaymentReconciliationProcessNote(jsn : TJsonObject) : TFhirPaymentReconciliationProcessNote;
begin
  result := TFhirPaymentReconciliationProcessNote.create;
  try
    ParsePaymentReconciliationProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationProcessNoteProperties(jsn : TJsonObject; result : TFhirPaymentReconciliationProcessNote);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposePaymentReconciliationProcessNote(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliationProcessNote; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentReconciliation(jsn)); {2}
end;

function TFHIRJsonParser.ParsePaymentReconciliation(jsn : TJsonObject) : TFhirPaymentReconciliation;
begin
  result := TFhirPaymentReconciliation.create;
  try
    ParsePaymentReconciliationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationProperties(jsn : TJsonObject; result : TFhirPaymentReconciliation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirProcessRequest}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') or jsn.has('_outcome')  then
      result.outcomeElement := parseEnum(jsn.path+'/outcome', jsn['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := ParseString(jsn['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parsePaymentReconciliationDetail);
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('total') then
        result.total := ParseMoney(jsn.vObj['total']);{q3}
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], result.processNoteList, parsePaymentReconciliationProcessNote);
end;

procedure TFHIRJsonComposer.ComposePaymentReconciliation(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirProcessRequest}(json, 'request', elem.request); {a}
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('requestProvider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if not elem.noCompose and doCompose('requestOrganization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
  if not elem.noCompose and doCompose('detail') and (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposePaymentReconciliationDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('form') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if not elem.noCompose and doCompose('total') and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'total', elem.total); {a}
  if not elem.noCompose and doCompose('processNote') and (SummaryOption in [soFull, soData]) and (elem.processNoteList.Count > 0) then
  begin
    json.valueArray('processNote');
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposePaymentReconciliationProcessNote(json, '', elem.processNoteList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
procedure TFHIRJsonParser.ParsePersonLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePersonLink(jsn)); {2}
end;

function TFHIRJsonParser.ParsePersonLink(jsn : TJsonObject) : TFhirPersonLink;
begin
  result := TFhirPersonLink.create;
  try
    ParsePersonLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePersonLinkProperties(jsn : TJsonObject; result : TFhirPersonLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('target') then
        result.target := ParseReference{Resource}(jsn.vObj['target']);{q3}
    if jsn.has('assurance') or jsn.has('_assurance')  then
      result.assuranceElement := parseEnum(jsn.path+'/assurance', jsn['assurance'], jsn.vObj['_assurance'], CODES_TFhirIdentityAssuranceLevelEnum, SYSTEMS_TFhirIdentityAssuranceLevelEnum);
end;

procedure TFHIRJsonComposer.ComposePersonLink(json : TJSONWriter; name : string; elem : TFhirPersonLink; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'target', elem.target); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'assurance', elem.AssuranceElement, CODES_TFhirIdentityAssuranceLevelEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'assurance', elem.AssuranceElement, CODES_TFhirIdentityAssuranceLevelEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePerson(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePerson(jsn)); {2}
end;

function TFHIRJsonParser.ParsePerson(jsn : TJsonObject) : TFhirPerson;
begin
  result := TFhirPerson.create;
  try
    ParsePersonProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePersonProperties(jsn : TJsonObject; result : TFhirPerson);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], result.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        result.birthDateElement := ParseDate(jsn['birthDate'], jsn.vObj['_birthDate']);{q}
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('photo') then
        result.photo := ParseAttachment(jsn.vObj['photo']);{q3}
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parsePersonLink);
end;

procedure TFHIRJsonComposer.ComposePerson(json : TJSONWriter; name : string; elem : TFhirPerson; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) and (elem.nameList.Count > 0) then
  begin
    json.valueArray('name');
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(json, '', elem.nameList[i]); {z - HumanName}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soSummary, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and doCompose('birthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'birthDate', elem.birthDateElement, false);
  if not elem.noCompose and doCompose('birthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'birthDate', elem.birthDateElement, false);
  if not elem.noCompose and doCompose('address') and (SummaryOption in [soFull, soData]) and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('photo') and (SummaryOption in [soFull, soData]) then
    ComposeAttachment(json, 'photo', elem.photo); {a}
  if not elem.noCompose and doCompose('managingOrganization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if not elem.noCompose and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('link_') and (SummaryOption in [soFull, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposePersonLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
procedure TFHIRJsonParser.ParsePlanDefinitionGoal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionGoal(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionGoal(jsn : TJsonObject) : TFhirPlanDefinitionGoal;
begin
  result := TFhirPlanDefinitionGoal.create;
  try
    ParsePlanDefinitionGoalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionGoalProperties(jsn : TJsonObject; result : TFhirPlanDefinitionGoal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('description') then
        result.description := ParseCodeableConcept(jsn.vObj['description']);{q3}
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('start') then
        result.start := ParseCodeableConcept(jsn.vObj['start']);{q3}
    if jsn.has('addresses') then
      iterateArray(jsn.vArr['addresses'], result.addressesList, parseCodeableConcept);
    if jsn.has('documentation') then
      iterateArray(jsn.vArr['documentation'], result.documentationList, parseRelatedArtifact);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parsePlanDefinitionGoalTarget);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionGoal(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionGoal; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'description', elem.description); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'start', elem.start); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.addressesList.Count > 0) then
  begin
    json.valueArray('addresses');
    for i := 0 to elem.addressesList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.addressesList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.documentationList.Count > 0) then
  begin
    json.valueArray('documentation');
    for i := 0 to elem.documentationList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.documentationList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposePlanDefinitionGoalTarget(json, '', elem.targetList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionGoalTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionGoalTarget(jsn : TJsonObject) : TFhirPlanDefinitionGoalTarget;
begin
  result := TFhirPlanDefinitionGoalTarget.create;
  try
    ParsePlanDefinitionGoalTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionGoalTargetProperties(jsn : TJsonObject; result : TFhirPlanDefinitionGoalTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('measure') then
        result.measure := ParseCodeableConcept(jsn.vObj['measure']);{q3}
    if jsn.has('detailQuantity') {a4} then
      result.detail := ParseQuantity(jsn.vObj['detailQuantity']);
    if jsn.has('detailRange') {a4} then
      result.detail := ParseRange(jsn.vObj['detailRange']);
    if jsn.has('detailCodeableConcept') {a4} then
      result.detail := ParseCodeableConcept(jsn.vObj['detailCodeableConcept']);
    if jsn.has('due') then
        result.due := ParseDuration(jsn.vObj['due']);{q3}
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionGoalTarget(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionGoalTarget; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'measure', elem.measure); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.detail is TFhirQuantity) then 
    ComposeQuantity(json, 'detailQuantity', TFhirQuantity(elem.detail)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.detail is TFhirRange) then 
    ComposeRange(json, 'detailRange', TFhirRange(elem.detail)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.detail is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'detailCodeableConcept', TFhirCodeableConcept(elem.detail)) ;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'due', elem.due); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionAction(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionAction(jsn : TJsonObject) : TFhirPlanDefinitionAction;
begin
  result := TFhirPlanDefinitionAction.create;
  try
    ParsePlanDefinitionActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('prefix') or jsn.has('_prefix') then
        result.prefixElement := ParseString(jsn['prefix'], jsn.vObj['_prefix']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('textEquivalent') or jsn.has('_textEquivalent') then
        result.textEquivalentElement := ParseString(jsn['textEquivalent'], jsn.vObj['_textEquivalent']);{q}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('documentation') then
      iterateArray(jsn.vArr['documentation'], result.documentationList, parseRelatedArtifact);
      if jsn.has('goalId') or jsn.has('_goalId') then
      iteratePrimitiveArray(jsn.vArr['goalId'], jsn.vArr['_goalId'], result.goalIdList, parseId);
    if jsn.has('triggerDefinition') then
      iterateArray(jsn.vArr['triggerDefinition'], result.triggerDefinitionList, parseTriggerDefinition);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], result.conditionList, parsePlanDefinitionActionCondition);
    if jsn.has('input') then
      iterateArray(jsn.vArr['input'], result.inputList, parseDataRequirement);
    if jsn.has('output') then
      iterateArray(jsn.vArr['output'], result.outputList, parseDataRequirement);
    if jsn.has('relatedAction') then
      iterateArray(jsn.vArr['relatedAction'], result.relatedActionList, parsePlanDefinitionActionRelatedAction);
    if jsn.has('timingAge') {a4} then
      result.timing := ParseAge(jsn.vObj['timingAge']);
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDuration') {a4} then
      result.timing := ParseDuration(jsn.vObj['timingDuration']);
    if jsn.has('timingRange') {a4} then
      result.timing := ParseRange(jsn.vObj['timingRange']);
    if jsn.has('timingTiming') {a4} then
      result.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      result.timing := parseDateTime(jsn['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parsePlanDefinitionActionParticipant);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('groupingBehavior') or jsn.has('_groupingBehavior')  then
      result.groupingBehaviorElement := parseEnum(jsn.path+'/groupingBehavior', jsn['groupingBehavior'], jsn.vObj['_groupingBehavior'], CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum);
    if jsn.has('selectionBehavior') or jsn.has('_selectionBehavior')  then
      result.selectionBehaviorElement := parseEnum(jsn.path+'/selectionBehavior', jsn['selectionBehavior'], jsn.vObj['_selectionBehavior'], CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum);
    if jsn.has('requiredBehavior') or jsn.has('_requiredBehavior')  then
      result.requiredBehaviorElement := parseEnum(jsn.path+'/requiredBehavior', jsn['requiredBehavior'], jsn.vObj['_requiredBehavior'], CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum);
    if jsn.has('precheckBehavior') or jsn.has('_precheckBehavior')  then
      result.precheckBehaviorElement := parseEnum(jsn.path+'/precheckBehavior', jsn['precheckBehavior'], jsn.vObj['_precheckBehavior'], CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum);
    if jsn.has('cardinalityBehavior') or jsn.has('_cardinalityBehavior')  then
      result.cardinalityBehaviorElement := parseEnum(jsn.path+'/cardinalityBehavior', jsn['cardinalityBehavior'], jsn.vObj['_cardinalityBehavior'], CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum);
    if jsn.has('definition') then
        result.definition := ParseReference{Resource}(jsn.vObj['definition']);{q3}
    if jsn.has('transform') then
        result.transform := ParseReference{TFhirStructureMap}(jsn.vObj['transform']);{q3}
    if jsn.has('dynamicValue') then
      iterateArray(jsn.vArr['dynamicValue'], result.dynamicValueList, parsePlanDefinitionActionDynamicValue);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parsePlanDefinitionAction);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionAction(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionAction; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'prefix', elem.prefixElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'prefix', elem.prefixElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'textEquivalent', elem.textEquivalentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'textEquivalent', elem.textEquivalentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.documentationList.Count > 0) then
  begin
    json.valueArray('documentation');
    for i := 0 to elem.documentationList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.documentationList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.goalIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.goalIdList.Count - 1 do
    begin
      ext := ext or ((elem.goalIdList[i].id <> '') or (elem.goalIdList[i].hasExtensionList) {no-comments or (elem.goalIdList[i].hasComments)});
      val := val or (elem.goalIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('goalId');
      for i := 0 to elem.goalIdList.Count - 1 do
        ComposeIdValue(json, '',elem.goalIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_goalId');
      for i := 0 to elem.goalIdList.Count - 1 do
        ComposeIdProps(json, '',elem.goalIdList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.triggerDefinitionList.Count > 0) then
  begin
    json.valueArray('triggerDefinition');
    for i := 0 to elem.triggerDefinitionList.Count - 1 do
      ComposeTriggerDefinition(json, '', elem.triggerDefinitionList[i]); {z - TriggerDefinition}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.conditionList.Count > 0) then
  begin
    json.valueArray('condition');
    for i := 0 to elem.conditionList.Count - 1 do
      ComposePlanDefinitionActionCondition(json, '', elem.conditionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.inputList.Count > 0) then
  begin
    json.valueArray('input');
    for i := 0 to elem.inputList.Count - 1 do
      ComposeDataRequirement(json, '', elem.inputList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.outputList.Count > 0) then
  begin
    json.valueArray('output');
    for i := 0 to elem.outputList.Count - 1 do
      ComposeDataRequirement(json, '', elem.outputList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.relatedActionList.Count > 0) then
  begin
    json.valueArray('relatedAction');
    for i := 0 to elem.relatedActionList.Count - 1 do
      ComposePlanDefinitionActionRelatedAction(json, '', elem.relatedActionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirAge) then 
    ComposeAge(json, 'timingAge', TFhirAge(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDuration) then 
    ComposeDuration(json, 'timingDuration', TFhirDuration(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirRange) then 
    ComposeRange(json, 'timingRange', TFhirRange(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposePlanDefinitionActionParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'definition', elem.definition); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureMap}(json, 'transform', elem.transform); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.dynamicValueList.Count > 0) then
  begin
    json.valueArray('dynamicValue');
    for i := 0 to elem.dynamicValueList.Count - 1 do
      ComposePlanDefinitionActionDynamicValue(json, '', elem.dynamicValueList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposePlanDefinitionAction(json, '', elem.actionList[i]); {z - @PlanDefinition.action}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionCondition(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionActionCondition(jsn : TJsonObject) : TFhirPlanDefinitionActionCondition;
begin
  result := TFhirPlanDefinitionActionCondition.create;
  try
    ParsePlanDefinitionActionConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionConditionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionCondition);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseString(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionCondition(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionCondition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionRelatedAction(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject) : TFhirPlanDefinitionActionRelatedAction;
begin
  result := TFhirPlanDefinitionActionRelatedAction.create;
  try
    ParsePlanDefinitionActionRelatedActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionRelatedActionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionRelatedAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actionId') or jsn.has('_actionId') then
        result.actionIdElement := ParseId(jsn['actionId'], jsn.vObj['_actionId']);{q}
    if jsn.has('relationship') or jsn.has('_relationship')  then
      result.relationshipElement := parseEnum(jsn.path+'/relationship', jsn['relationship'], jsn.vObj['_relationship'], CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum);
    if jsn.has('offsetDuration') {a4} then
      result.offset := ParseDuration(jsn.vObj['offsetDuration']);
    if jsn.has('offsetRange') {a4} then
      result.offset := ParseRange(jsn.vObj['offsetRange']);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionRelatedAction(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionRelatedAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'actionId', elem.actionIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'actionId', elem.actionIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.offset is TFhirDuration) then 
    ComposeDuration(json, 'offsetDuration', TFhirDuration(elem.offset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.offset is TFhirRange) then 
    ComposeRange(json, 'offsetRange', TFhirRange(elem.offset)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionActionParticipant(jsn : TJsonObject) : TFhirPlanDefinitionActionParticipant;
begin
  result := TFhirPlanDefinitionActionParticipant.create;
  try
    ParsePlanDefinitionActionParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionParticipantProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionParticipant(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionDynamicValue(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject) : TFhirPlanDefinitionActionDynamicValue;
begin
  result := TFhirPlanDefinitionActionDynamicValue.create;
  try
    ParsePlanDefinitionActionDynamicValueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionDynamicValueProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionDynamicValue);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseString(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionDynamicValue(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionDynamicValue; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinition(jsn : TJsonObject) : TFhirPlanDefinition;
begin
  result := TFhirPlanDefinition.create;
  try
    ParsePlanDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionProperties(jsn : TJsonObject; result : TFhirPlanDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := ParseString(jsn['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := ParseDate(jsn['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := ParseDate(jsn['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('library') then
      iterateArray(jsn.vArr['library'], result.library_List, parseReference{TFhirLibrary});
    if jsn.has('goal') then
      iterateArray(jsn.vArr['goal'], result.goalList, parsePlanDefinitionGoal);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parsePlanDefinitionAction);
end;

procedure TFHIRJsonComposer.ComposePlanDefinition(json : TJSONWriter; name : string; elem : TFhirPlanDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('effectivePeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('topic') and (SummaryOption in [soFull, soData]) and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contributor') and (SummaryOption in [soFull, soData]) and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('relatedArtifact') and (SummaryOption in [soFull, soData]) and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('library_') and (SummaryOption in [soFull, soData]) and (elem.library_List.Count > 0) then
  begin
    json.valueArray('library');
    for i := 0 to elem.library_List.Count - 1 do
      ComposeReference{TFhirLibrary}(json, '', elem.library_List[i]); {z - Reference(Library)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('goal') and (SummaryOption in [soFull, soData]) and (elem.goalList.Count > 0) then
  begin
    json.valueArray('goal');
    for i := 0 to elem.goalList.Count - 1 do
      ComposePlanDefinitionGoal(json, '', elem.goalList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('action') and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposePlanDefinitionAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
procedure TFHIRJsonParser.ParsePractitionerQualification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerQualification(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitionerQualification(jsn : TJsonObject) : TFhirPractitionerQualification;
begin
  result := TFhirPractitionerQualification.create;
  try
    ParsePractitionerQualificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerQualificationProperties(jsn : TJsonObject; result : TFhirPractitionerQualification);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('issuer') then
        result.issuer := ParseReference{TFhirOrganization}(jsn.vObj['issuer']);{q3}
end;

procedure TFHIRJsonComposer.ComposePractitionerQualification(json : TJSONWriter; name : string; elem : TFhirPractitionerQualification; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'issuer', elem.issuer); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitioner(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitioner(jsn : TJsonObject) : TFhirPractitioner;
begin
  result := TFhirPractitioner.create;
  try
    ParsePractitionerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerProperties(jsn : TJsonObject; result : TFhirPractitioner);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], result.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        result.birthDateElement := ParseDate(jsn['birthDate'], jsn.vObj['_birthDate']);{q}
    if jsn.has('photo') then
      iterateArray(jsn.vArr['photo'], result.photoList, parseAttachment);
    if jsn.has('qualification') then
      iterateArray(jsn.vArr['qualification'], result.qualificationList, parsePractitionerQualification);
    if jsn.has('communication') then
      iterateArray(jsn.vArr['communication'], result.communicationList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposePractitioner(json : TJSONWriter; name : string; elem : TFhirPractitioner; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) and (elem.nameList.Count > 0) then
  begin
    json.valueArray('name');
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(json, '', elem.nameList[i]); {z - HumanName}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soSummary, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('address') and (SummaryOption in [soFull, soSummary, soData]) and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and doCompose('birthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'birthDate', elem.birthDateElement, false);
  if not elem.noCompose and doCompose('birthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'birthDate', elem.birthDateElement, false);
  if not elem.noCompose and doCompose('photo') and (SummaryOption in [soFull, soData]) and (elem.photoList.Count > 0) then
  begin
    json.valueArray('photo');
    for i := 0 to elem.photoList.Count - 1 do
      ComposeAttachment(json, '', elem.photoList[i]); {z - Attachment}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('qualification') and (SummaryOption in [soFull, soData]) and (elem.qualificationList.Count > 0) then
  begin
    json.valueArray('qualification');
    for i := 0 to elem.qualificationList.Count - 1 do
      ComposePractitionerQualification(json, '', elem.qualificationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('communication') and (SummaryOption in [soFull, soData]) and (elem.communicationList.Count > 0) then
  begin
    json.valueArray('communication');
    for i := 0 to elem.communicationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.communicationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
procedure TFHIRJsonParser.ParsePractitionerRoleAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerRoleAvailableTime(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitionerRoleAvailableTime(jsn : TJsonObject) : TFhirPractitionerRoleAvailableTime;
begin
  result := TFhirPractitionerRoleAvailableTime.create;
  try
    ParsePractitionerRoleAvailableTimeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleAvailableTimeProperties(jsn : TJsonObject; result : TFhirPractitionerRoleAvailableTime);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('daysOfWeek') or jsn.has('_daysOfWeek') then
      iterateEnumArray(jsn.vArr['daysOfWeek'], jsn.vArr['_daysOfWeek'], jsn.path+'/daysOfWeek', result.daysOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
    if jsn.has('allDay') or jsn.has('_allDay') then
        result.allDayElement := ParseBoolean(jsn['allDay'], jsn.vObj['_allDay']);{q}
    if jsn.has('availableStartTime') or jsn.has('_availableStartTime') then
        result.availableStartTimeElement := ParseTime(jsn['availableStartTime'], jsn.vObj['_availableStartTime']);{q}
    if jsn.has('availableEndTime') or jsn.has('_availableEndTime') then
        result.availableEndTimeElement := ParseTime(jsn['availableEndTime'], jsn.vObj['_availableEndTime']);{q}
end;

procedure TFHIRJsonComposer.ComposePractitionerRoleAvailableTime(json : TJSONWriter; name : string; elem : TFhirPractitionerRoleAvailableTime; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.daysOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.daysOfWeekList.Count - 1 do
    begin
      val := val or (elem.daysOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((elem.daysOfWeekList[i].id <> '') or (elem.daysOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allDay', elem.allDayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allDay', elem.allDayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerRoleNotAvailable(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitionerRoleNotAvailable(jsn : TJsonObject) : TFhirPractitionerRoleNotAvailable;
begin
  result := TFhirPractitionerRoleNotAvailable.create;
  try
    ParsePractitionerRoleNotAvailableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleNotAvailableProperties(jsn : TJsonObject; result : TFhirPractitionerRoleNotAvailable);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('during') then
        result.during := ParsePeriod(jsn.vObj['during']);{q3}
end;

procedure TFHIRJsonComposer.ComposePractitionerRoleNotAvailable(json : TJSONWriter; name : string; elem : TFhirPractitionerRoleNotAvailable; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'during', elem.during); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePractitionerRole(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerRole(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitionerRole(jsn : TJsonObject) : TFhirPractitionerRole;
begin
  result := TFhirPractitionerRole.create;
  try
    ParsePractitionerRoleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleProperties(jsn : TJsonObject; result : TFhirPractitionerRole);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('practitioner') then
        result.practitioner := ParseReference{TFhirPractitioner}(jsn.vObj['practitioner']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], result.locationList, parseReference{TFhirLocation});
    if jsn.has('healthcareService') then
      iterateArray(jsn.vArr['healthcareService'], result.healthcareServiceList, parseReference{TFhirHealthcareService});
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('availableTime') then
      iterateArray(jsn.vArr['availableTime'], result.availableTimeList, parsePractitionerRoleAvailableTime);
    if jsn.has('notAvailable') then
      iterateArray(jsn.vArr['notAvailable'], result.notAvailableList, parsePractitionerRoleNotAvailable);
    if jsn.has('availabilityExceptions') or jsn.has('_availabilityExceptions') then
        result.availabilityExceptionsElement := ParseString(jsn['availabilityExceptions'], jsn.vObj['_availabilityExceptions']);{q}
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposePractitionerRole(json : TJSONWriter; name : string; elem : TFhirPractitionerRole; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('practitioner') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'practitioner', elem.practitioner); {a}
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specialty') and (SummaryOption in [soFull, soSummary, soData]) and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soSummary, soData]) and (elem.locationList.Count > 0) then
  begin
    json.valueArray('location');
    for i := 0 to elem.locationList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.locationList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('healthcareService') and (SummaryOption in [soFull, soData]) and (elem.healthcareServiceList.Count > 0) then
  begin
    json.valueArray('healthcareService');
    for i := 0 to elem.healthcareServiceList.Count - 1 do
      ComposeReference{TFhirHealthcareService}(json, '', elem.healthcareServiceList[i]); {z - Reference(HealthcareService)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soSummary, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('availableTime') and (SummaryOption in [soFull, soData]) and (elem.availableTimeList.Count > 0) then
  begin
    json.valueArray('availableTime');
    for i := 0 to elem.availableTimeList.Count - 1 do
      ComposePractitionerRoleAvailableTime(json, '', elem.availableTimeList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('notAvailable') and (SummaryOption in [soFull, soData]) and (elem.notAvailableList.Count > 0) then
  begin
    json.valueArray('notAvailable');
    for i := 0 to elem.notAvailableList.Count - 1 do
      ComposePractitionerRoleNotAvailable(json, '', elem.notAvailableList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('availabilityExceptions') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if not elem.noCompose and doCompose('availabilityExceptions') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if not elem.noCompose and doCompose('endpoint') and (SummaryOption in [soFull, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
procedure TFHIRJsonParser.ParseProcedurePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedurePerformer(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcedurePerformer(jsn : TJsonObject) : TFhirProcedurePerformer;
begin
  result := TFhirProcedurePerformer.create;
  try
    ParseProcedurePerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedurePerformerProperties(jsn : TJsonObject; result : TFhirProcedurePerformer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProcedurePerformer(json : TJSONWriter; name : string; elem : TFhirProcedurePerformer; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProcedureFocalDevice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedureFocalDevice(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcedureFocalDevice(jsn : TJsonObject) : TFhirProcedureFocalDevice;
begin
  result := TFhirProcedureFocalDevice.create;
  try
    ParseProcedureFocalDeviceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedureFocalDeviceProperties(jsn : TJsonObject; result : TFhirProcedureFocalDevice);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
        result.action := ParseCodeableConcept(jsn.vObj['action']);{q3}
    if jsn.has('manipulated') then
        result.manipulated := ParseReference{TFhirDevice}(jsn.vObj['manipulated']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProcedureFocalDevice(json : TJSONWriter; name : string; elem : TFhirProcedureFocalDevice; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'action', elem.action); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirDevice}(json, 'manipulated', elem.manipulated); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedure(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcedure(jsn : TJsonObject) : TFhirProcedure;
begin
  result := TFhirProcedure.create;
  try
    ParseProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedureProperties(jsn : TJsonObject; result : TFhirProcedure);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum);
    if jsn.has('statusReason') then
        result.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('performedPeriod') {a4} then
      result.performed := ParsePeriod(jsn.vObj['performedPeriod']);
    if jsn.has('performedAge') {a4} then
      result.performed := ParseAge(jsn.vObj['performedAge']);
    if jsn.has('performedRange') {a4} then
      result.performed := ParseRange(jsn.vObj['performedRange']);
    if jsn.has('performedDateTime') or jsn.has('_performedDateTime') then
      result.performed := parseDateTime(jsn['performedDateTime'], jsn.vObj['_performedDateTime']);
    if jsn.has('performedString') or jsn.has('_performedString') then
      result.performed := parseString(jsn['performedString'], jsn.vObj['_performedString']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseProcedurePerformer);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], result.bodySiteList, parseCodeableConcept);
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('report') then
      iterateArray(jsn.vArr['report'], result.reportList, parseReference{TFhirDiagnosticReport});
    if jsn.has('complication') then
      iterateArray(jsn.vArr['complication'], result.complicationList, parseCodeableConcept);
    if jsn.has('complicationDetail') then
      iterateArray(jsn.vArr['complicationDetail'], result.complicationDetailList, parseReference{TFhirCondition});
    if jsn.has('followUp') then
      iterateArray(jsn.vArr['followUp'], result.followUpList, parseCodeableConcept);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('focalDevice') then
      iterateArray(jsn.vArr['focalDevice'], result.focalDeviceList, parseProcedureFocalDevice);
    if jsn.has('usedReference') then
      iterateArray(jsn.vArr['usedReference'], result.usedReferenceList, parseReference{Resource});
    if jsn.has('usedCode') then
      iterateArray(jsn.vArr['usedCode'], result.usedCodeList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeProcedure(json : TJSONWriter; name : string; elem : TFhirProcedure; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('instantiates') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(Procedure|Observation|MedicationAdministration)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum, false);
  if not elem.noCompose and doCompose('statusReason') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'statusReason', elem.statusReason); {a}
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirPeriod) then 
    ComposePeriod(json, 'performedPeriod', TFhirPeriod(elem.performed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirAge) then 
    ComposeAge(json, 'performedAge', TFhirAge(elem.performed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirRange) then 
    ComposeRange(json, 'performedRange', TFhirRange(elem.performed)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'performedDateTime', TFhirDateTime(elem.performed), false);
    ComposeDateTimeProps(json, 'performedDateTime', TFhirDateTime(elem.performed), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirString) then 
  begin
    ComposeStringValue(json, 'performedString', TFhirString(elem.performed), false);
    ComposeStringProps(json, 'performedString', TFhirString(elem.performed), false);
  end;
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soSummary, soData]) and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeProcedurePerformer(json, '', elem.performerList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|Procedure|DiagnosticReport|DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('bodySite') and (SummaryOption in [soFull, soSummary, soData]) and (elem.bodySiteList.Count > 0) then
  begin
    json.valueArray('bodySite');
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodySiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if not elem.noCompose and doCompose('report') and (SummaryOption in [soFull, soData]) and (elem.reportList.Count > 0) then
  begin
    json.valueArray('report');
    for i := 0 to elem.reportList.Count - 1 do
      ComposeReference{TFhirDiagnosticReport}(json, '', elem.reportList[i]); {z - Reference(DiagnosticReport)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('complication') and (SummaryOption in [soFull, soData]) and (elem.complicationList.Count > 0) then
  begin
    json.valueArray('complication');
    for i := 0 to elem.complicationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.complicationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('complicationDetail') and (SummaryOption in [soFull, soData]) and (elem.complicationDetailList.Count > 0) then
  begin
    json.valueArray('complicationDetail');
    for i := 0 to elem.complicationDetailList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.complicationDetailList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('followUp') and (SummaryOption in [soFull, soData]) and (elem.followUpList.Count > 0) then
  begin
    json.valueArray('followUp');
    for i := 0 to elem.followUpList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.followUpList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('focalDevice') and (SummaryOption in [soFull, soData]) and (elem.focalDeviceList.Count > 0) then
  begin
    json.valueArray('focalDevice');
    for i := 0 to elem.focalDeviceList.Count - 1 do
      ComposeProcedureFocalDevice(json, '', elem.focalDeviceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('usedReference') and (SummaryOption in [soFull, soData]) and (elem.usedReferenceList.Count > 0) then
  begin
    json.valueArray('usedReference');
    for i := 0 to elem.usedReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.usedReferenceList[i]); {z - Reference(Device|Medication|Substance)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('usedCode') and (SummaryOption in [soFull, soData]) and (elem.usedCodeList.Count > 0) then
  begin
    json.valueArray('usedCode');
    for i := 0 to elem.usedCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.usedCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCESSREQUEST}
procedure TFHIRJsonParser.ParseProcessRequestItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcessRequestItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcessRequestItem(jsn : TJsonObject) : TFhirProcessRequestItem;
begin
  result := TFhirProcessRequestItem.create;
  try
    ParseProcessRequestItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcessRequestItemProperties(jsn : TJsonObject; result : TFhirProcessRequestItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequenceLinkId') or jsn.has('_sequenceLinkId') then
        result.sequenceLinkIdElement := ParseInteger(jsn['sequenceLinkId'], jsn.vObj['_sequenceLinkId']);{q}
end;

procedure TFHIRJsonComposer.ComposeProcessRequestItem(json : TJSONWriter; name : string; elem : TFhirProcessRequestItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProcessRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcessRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcessRequest(jsn : TJsonObject) : TFhirProcessRequest;
begin
  result := TFhirProcessRequest.create;
  try
    ParseProcessRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcessRequestProperties(jsn : TJsonObject; result : TFhirProcessRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('action') or jsn.has('_action')  then
      result.actionElement := parseEnum(jsn.path+'/action', jsn['action'], jsn.vObj['_action'], CODES_TFhirActionlistEnum, SYSTEMS_TFhirActionlistEnum);
    if jsn.has('target') then
        result.target := ParseReference{TFhirOrganization}(jsn.vObj['target']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirReference}(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseReference{TFhirReference}(jsn.vObj['response']);{q3}
    if jsn.has('nullify') or jsn.has('_nullify') then
        result.nullifyElement := ParseBoolean(jsn['nullify'], jsn.vObj['_nullify']);{q}
    if jsn.has('reference') or jsn.has('_reference') then
        result.referenceElement := ParseString(jsn['reference'], jsn.vObj['_reference']);{q}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseProcessRequestItem);
      if jsn.has('include') or jsn.has('_include') then
      iteratePrimitiveArray(jsn.vArr['include'], jsn.vArr['_include'], result.includeList, parseString);
      if jsn.has('exclude') or jsn.has('_exclude') then
      iteratePrimitiveArray(jsn.vArr['exclude'], jsn.vArr['_exclude'], result.excludeList, parseString);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProcessRequest(json : TJSONWriter; name : string; elem : TFhirProcessRequest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('action') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'action', elem.ActionElement, CODES_TFhirActionlistEnum, false);
  if not elem.noCompose and doCompose('action') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'action', elem.ActionElement, CODES_TFhirActionlistEnum, false);
  if not elem.noCompose and doCompose('target') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'target', elem.target); {a}
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('provider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'request', elem.request); {a}
  if not elem.noCompose and doCompose('response') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'response', elem.response); {a}
  if not elem.noCompose and doCompose('nullify') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'nullify', elem.nullifyElement, false);
  if not elem.noCompose and doCompose('nullify') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'nullify', elem.nullifyElement, false);
  if not elem.noCompose and doCompose('reference') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'reference', elem.referenceElement, false);
  if not elem.noCompose and doCompose('reference') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'reference', elem.referenceElement, false);
  if not elem.noCompose and doCompose('item') and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeProcessRequestItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('include') and (SummaryOption in [soFull, soData]) and (elem.includeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.includeList.Count - 1 do
    begin
      ext := ext or ((elem.includeList[i].id <> '') or (elem.includeList[i].hasExtensionList) {no-comments or (elem.includeList[i].hasComments)});
      val := val or (elem.includeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('include');
      for i := 0 to elem.includeList.Count - 1 do
        ComposeStringValue(json, '',elem.includeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_include');
      for i := 0 to elem.includeList.Count - 1 do
        ComposeStringProps(json, '',elem.includeList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('exclude') and (SummaryOption in [soFull, soData]) and (elem.excludeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.excludeList.Count - 1 do
    begin
      ext := ext or ((elem.excludeList[i].id <> '') or (elem.excludeList[i].hasExtensionList) {no-comments or (elem.excludeList[i].hasComments)});
      val := val or (elem.excludeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('exclude');
      for i := 0 to elem.excludeList.Count - 1 do
        ComposeStringValue(json, '',elem.excludeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_exclude');
      for i := 0 to elem.excludeList.Count - 1 do
        ComposeStringProps(json, '',elem.excludeList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
end;

{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
procedure TFHIRJsonParser.ParseProcessResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcessResponseProcessNote(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcessResponseProcessNote(jsn : TJsonObject) : TFhirProcessResponseProcessNote;
begin
  result := TFhirProcessResponseProcessNote.create;
  try
    ParseProcessResponseProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcessResponseProcessNoteProperties(jsn : TJsonObject; result : TFhirProcessResponseProcessNote);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposeProcessResponseProcessNote(json : TJSONWriter; name : string; elem : TFhirProcessResponseProcessNote; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProcessResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcessResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcessResponse(jsn : TJsonObject) : TFhirProcessResponse;
begin
  result := TFhirProcessResponse.create;
  try
    ParseProcessResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcessResponseProperties(jsn : TJsonObject; result : TFhirProcessResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseDateTime(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirReference}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') or jsn.has('_outcome')  then
      result.outcomeElement := parseEnum(jsn.path+'/outcome', jsn['outcome'], jsn.vObj['_outcome'], CODES_TFhirProcessOutcomeEnum, SYSTEMS_TFhirProcessOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := ParseString(jsn['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], result.processNoteList, parseProcessResponseProcessNote);
    if jsn.has('error') then
      iterateArray(jsn.vArr['error'], result.errorList, parseCodeableConcept);
    if jsn.has('communicationRequest') then
      iterateArray(jsn.vArr['communicationRequest'], result.communicationRequestList, parseReference{TFhirCommunicationRequest});
end;

procedure TFHIRJsonComposer.ComposeProcessResponse(json : TJSONWriter; name : string; elem : TFhirProcessResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('organization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'request', elem.request); {a}
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'outcome', elem.OutcomeElement, CODES_TFhirProcessOutcomeEnum, false);
  if not elem.noCompose and doCompose('outcome') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'outcome', elem.OutcomeElement, CODES_TFhirProcessOutcomeEnum, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('disposition') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if not elem.noCompose and doCompose('requestProvider') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if not elem.noCompose and doCompose('requestOrganization') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
  if not elem.noCompose and doCompose('form') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if not elem.noCompose and doCompose('processNote') and (SummaryOption in [soFull, soData]) and (elem.processNoteList.Count > 0) then
  begin
    json.valueArray('processNote');
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposeProcessResponseProcessNote(json, '', elem.processNoteList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('error') and (SummaryOption in [soFull, soData]) and (elem.errorList.Count > 0) then
  begin
    json.valueArray('error');
    for i := 0 to elem.errorList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.errorList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('communicationRequest') and (SummaryOption in [soFull, soData]) and (elem.communicationRequestList.Count > 0) then
  begin
    json.valueArray('communicationRequest');
    for i := 0 to elem.communicationRequestList.Count - 1 do
      ComposeReference{TFhirCommunicationRequest}(json, '', elem.communicationRequestList[i]); {z - Reference(CommunicationRequest)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PRODUCTPLAN}
procedure TFHIRJsonParser.ParseProductPlanContact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductPlanContact(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductPlanContact(jsn : TJsonObject) : TFhirProductPlanContact;
begin
  result := TFhirProductPlanContact.create;
  try
    ParseProductPlanContactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductPlanContactProperties(jsn : TJsonObject; result : TFhirProductPlanContact);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('purpose') then
        result.purpose := ParseCodeableConcept(jsn.vObj['purpose']);{q3}
    if jsn.has('name') then
        result.name := ParseHumanName(jsn.vObj['name']);{q3}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
        result.address := ParseAddress(jsn.vObj['address']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProductPlanContact(json : TJSONWriter; name : string; elem : TFhirProductPlanContact; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'purpose', elem.purpose); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeHumanName(json, 'name', elem.name); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', elem.address); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProductPlanCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductPlanCoverage(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductPlanCoverage(jsn : TJsonObject) : TFhirProductPlanCoverage;
begin
  result := TFhirProductPlanCoverage.create;
  try
    ParseProductPlanCoverageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductPlanCoverageProperties(jsn : TJsonObject; result : TFhirProductPlanCoverage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('benefit') then
      iterateArray(jsn.vArr['benefit'], result.benefitList, parseProductPlanCoverageBenefit);
end;

procedure TFHIRJsonComposer.ComposeProductPlanCoverage(json : TJSONWriter; name : string; elem : TFhirProductPlanCoverage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.benefitList.Count > 0) then
  begin
    json.valueArray('benefit');
    for i := 0 to elem.benefitList.Count - 1 do
      ComposeProductPlanCoverageBenefit(json, '', elem.benefitList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProductPlanCoverageBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductPlanCoverageBenefit(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductPlanCoverageBenefit(jsn : TJsonObject) : TFhirProductPlanCoverageBenefit;
begin
  result := TFhirProductPlanCoverageBenefit.create;
  try
    ParseProductPlanCoverageBenefitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductPlanCoverageBenefitProperties(jsn : TJsonObject; result : TFhirProductPlanCoverageBenefit);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseProductPlanCoverageBenefitItem);
end;

procedure TFHIRJsonComposer.ComposeProductPlanCoverageBenefit(json : TJSONWriter; name : string; elem : TFhirProductPlanCoverageBenefit; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeProductPlanCoverageBenefitItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProductPlanCoverageBenefitItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductPlanCoverageBenefitItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductPlanCoverageBenefitItem(jsn : TJsonObject) : TFhirProductPlanCoverageBenefitItem;
begin
  result := TFhirProductPlanCoverageBenefitItem.create;
  try
    ParseProductPlanCoverageBenefitItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductPlanCoverageBenefitItemProperties(jsn : TJsonObject; result : TFhirProductPlanCoverageBenefitItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('benefitValue') then
        result.benefitValue := ParseQuantity(jsn.vObj['benefitValue']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProductPlanCoverageBenefitItem(json : TJSONWriter; name : string; elem : TFhirProductPlanCoverageBenefitItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'benefitValue', elem.benefitValue); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProductPlanPlan(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductPlanPlan(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductPlanPlan(jsn : TJsonObject) : TFhirProductPlanPlan;
begin
  result := TFhirProductPlanPlan.create;
  try
    ParseProductPlanPlanProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductPlanPlanProperties(jsn : TJsonObject; result : TFhirProductPlanPlan);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('premium') then
        result.premium := ParseMoney(jsn.vObj['premium']);{q3}
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseProductPlanPlanCategory);
end;

procedure TFHIRJsonComposer.ComposeProductPlanPlan(json : TJSONWriter; name : string; elem : TFhirProductPlanPlan; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'premium', elem.premium); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeProductPlanPlanCategory(json, '', elem.categoryList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProductPlanPlanCategory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductPlanPlanCategory(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductPlanPlanCategory(jsn : TJsonObject) : TFhirProductPlanPlanCategory;
begin
  result := TFhirProductPlanPlanCategory.create;
  try
    ParseProductPlanPlanCategoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductPlanPlanCategoryProperties(jsn : TJsonObject; result : TFhirProductPlanPlanCategory);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('benefit') then
      iterateArray(jsn.vArr['benefit'], result.benefitList, parseProductPlanPlanCategoryBenefit);
end;

procedure TFHIRJsonComposer.ComposeProductPlanPlanCategory(json : TJSONWriter; name : string; elem : TFhirProductPlanPlanCategory; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.benefitList.Count > 0) then
  begin
    json.valueArray('benefit');
    for i := 0 to elem.benefitList.Count - 1 do
      ComposeProductPlanPlanCategoryBenefit(json, '', elem.benefitList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProductPlanPlanCategoryBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductPlanPlanCategoryBenefit(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductPlanPlanCategoryBenefit(jsn : TJsonObject) : TFhirProductPlanPlanCategoryBenefit;
begin
  result := TFhirProductPlanPlanCategoryBenefit.create;
  try
    ParseProductPlanPlanCategoryBenefitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductPlanPlanCategoryBenefitProperties(jsn : TJsonObject; result : TFhirProductPlanPlanCategoryBenefit);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('cost') then
      iterateArray(jsn.vArr['cost'], result.costList, parseProductPlanPlanCategoryBenefitCost);
end;

procedure TFHIRJsonComposer.ComposeProductPlanPlanCategoryBenefit(json : TJSONWriter; name : string; elem : TFhirProductPlanPlanCategoryBenefit; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.costList.Count > 0) then
  begin
    json.valueArray('cost');
    for i := 0 to elem.costList.Count - 1 do
      ComposeProductPlanPlanCategoryBenefitCost(json, '', elem.costList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProductPlanPlanCategoryBenefitCost(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductPlanPlanCategoryBenefitCost(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductPlanPlanCategoryBenefitCost(jsn : TJsonObject) : TFhirProductPlanPlanCategoryBenefitCost;
begin
  result := TFhirProductPlanPlanCategoryBenefitCost.create;
  try
    ParseProductPlanPlanCategoryBenefitCostProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductPlanPlanCategoryBenefitCostProperties(jsn : TJsonObject; result : TFhirProductPlanPlanCategoryBenefitCost);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('applicability') then
      iterateArray(jsn.vArr['applicability'], result.applicabilityList, parseCoding);
      if jsn.has('qualifiers') or jsn.has('_qualifiers') then
      iteratePrimitiveArray(jsn.vArr['qualifiers'], jsn.vArr['_qualifiers'], result.qualifiersList, parseString);
    if jsn.has('value') then
        result.value := ParseQuantity(jsn.vObj['value']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProductPlanPlanCategoryBenefitCost(json : TJSONWriter; name : string; elem : TFhirProductPlanPlanCategoryBenefitCost; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.applicabilityList.Count > 0) then
  begin
    json.valueArray('applicability');
    for i := 0 to elem.applicabilityList.Count - 1 do
      ComposeCoding(json, '', elem.applicabilityList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.qualifiersList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.qualifiersList.Count - 1 do
    begin
      ext := ext or ((elem.qualifiersList[i].id <> '') or (elem.qualifiersList[i].hasExtensionList) {no-comments or (elem.qualifiersList[i].hasComments)});
      val := val or (elem.qualifiersList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('qualifiers');
      for i := 0 to elem.qualifiersList.Count - 1 do
        ComposeStringValue(json, '',elem.qualifiersList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_qualifiers');
      for i := 0 to elem.qualifiersList.Count - 1 do
        ComposeStringProps(json, '',elem.qualifiersList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'value', elem.value); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProductPlan(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductPlan(jsn)); {2}
end;

function TFHIRJsonParser.ParseProductPlan(jsn : TJsonObject) : TFhirProductPlan;
begin
  result := TFhirProductPlan.create;
  try
    ParseProductPlanProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductPlanProperties(jsn : TJsonObject; result : TFhirProductPlan);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], result.aliasList, parseString);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('ownedBy') then
        result.ownedBy := ParseReference{TFhirOrganization}(jsn.vObj['ownedBy']);{q3}
    if jsn.has('administeredBy') then
        result.administeredBy := ParseReference{TFhirOrganization}(jsn.vObj['administeredBy']);{q3}
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('coverageArea') then
        result.coverageArea := ParseReference{TFhirLocation}(jsn.vObj['coverageArea']);{q3}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseProductPlanContact);
    if jsn.has('coverage') then
      iterateArray(jsn.vArr['coverage'], result.coverageList, parseProductPlanCoverage);
    if jsn.has('plan') then
      iterateArray(jsn.vArr['plan'], result.planList, parseProductPlanPlan);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposeProductPlan(json : TJSONWriter; name : string; elem : TFhirProductPlan; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.statusElement <> nil) and (elem.statusElement.primitiveValue <> 'active')) and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and (not isCanonical or (elem.statusElement <> nil) and (elem.statusElement.primitiveValue <> 'active')) and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('alias') and (SummaryOption in [soFull, soData]) and (elem.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.aliasList.Count - 1 do
    begin
      ext := ext or ((elem.aliasList[i].id <> '') or (elem.aliasList[i].hasExtensionList) {no-comments or (elem.aliasList[i].hasComments)});
      val := val or (elem.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringValue(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringProps(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('ownedBy') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'ownedBy', elem.ownedBy); {a}
  if not elem.noCompose and doCompose('administeredBy') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'administeredBy', elem.administeredBy); {a}
  if not elem.noCompose and doCompose('address') and (SummaryOption in [soFull, soData]) and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('coverageArea') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirLocation}(json, 'coverageArea', elem.coverageArea); {a}
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeProductPlanContact(json, '', elem.contactList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('coverage') and (SummaryOption in [soFull, soData]) and (elem.coverageList.Count > 0) then
  begin
    json.valueArray('coverage');
    for i := 0 to elem.coverageList.Count - 1 do
      ComposeProductPlanCoverage(json, '', elem.coverageList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('plan') and (SummaryOption in [soFull, soData]) and (elem.planList.Count > 0) then
  begin
    json.valueArray('plan');
    for i := 0 to elem.planList.Count - 1 do
      ComposeProductPlanPlan(json, '', elem.planList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('endpoint') and (SummaryOption in [soFull, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PRODUCTPLAN}
{$IFDEF FHIR_PROVENANCE}
procedure TFHIRJsonParser.ParseProvenanceAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProvenanceAgent(jsn)); {2}
end;

function TFHIRJsonParser.ParseProvenanceAgent(jsn : TJsonObject) : TFhirProvenanceAgent;
begin
  result := TFhirProvenanceAgent.create;
  try
    ParseProvenanceAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProvenanceAgentProperties(jsn : TJsonObject; result : TFhirProvenanceAgent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], result.roleList, parseCodeableConcept);
    if jsn.has('whoIdentifier') {a4} then
      result.who := ParseIdentifier(jsn.vObj['whoIdentifier']);
    if jsn.has('whoReference') {a3} then
      result.who := ParseReference(jsn.vObj['whoReference']);
    if jsn.has('onBehalfOfIdentifier') {a4} then
      result.onBehalfOf := ParseIdentifier(jsn.vObj['onBehalfOfIdentifier']);
    if jsn.has('onBehalfOfReference') {a3} then
      result.onBehalfOf := ParseReference(jsn.vObj['onBehalfOfReference']);
end;

procedure TFHIRJsonComposer.ComposeProvenanceAgent(json : TJSONWriter; name : string; elem : TFhirProvenanceAgent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.roleList.Count > 0) then
  begin
    json.valueArray('role');
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.roleList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.who is TFhirIdentifier) then 
    ComposeIdentifier(json, 'whoIdentifier', TFhirIdentifier(elem.who)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.who is TFhirReference) then
    ComposeReference(json, 'whoReference', TFhirReference(elem.who));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onBehalfOf is TFhirIdentifier) then 
    ComposeIdentifier(json, 'onBehalfOfIdentifier', TFhirIdentifier(elem.onBehalfOf)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.onBehalfOf is TFhirReference) then
    ComposeReference(json, 'onBehalfOfReference', TFhirReference(elem.onBehalfOf));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProvenanceEntity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProvenanceEntity(jsn)); {2}
end;

function TFHIRJsonParser.ParseProvenanceEntity(jsn : TJsonObject) : TFhirProvenanceEntity;
begin
  result := TFhirProvenanceEntity.create;
  try
    ParseProvenanceEntityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProvenanceEntityProperties(jsn : TJsonObject; result : TFhirProvenanceEntity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') or jsn.has('_role')  then
      result.roleElement := parseEnum(jsn.path+'/role', jsn['role'], jsn.vObj['_role'], CODES_TFhirProvenanceEntityRoleEnum, SYSTEMS_TFhirProvenanceEntityRoleEnum);
    if jsn.has('whatIdentifier') {a4} then
      result.what := ParseIdentifier(jsn.vObj['whatIdentifier']);
    if jsn.has('whatReference') {a3} then
      result.what := ParseReference(jsn.vObj['whatReference']);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseProvenanceAgent);
end;

procedure TFHIRJsonComposer.ComposeProvenanceEntity(json : TJSONWriter; name : string; elem : TFhirProvenanceEntity; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'role', elem.RoleElement, CODES_TFhirProvenanceEntityRoleEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'role', elem.RoleElement, CODES_TFhirProvenanceEntityRoleEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.what is TFhirIdentifier) then 
    ComposeIdentifier(json, 'whatIdentifier', TFhirIdentifier(elem.what)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.what is TFhirReference) then
    ComposeReference(json, 'whatReference', TFhirReference(elem.what));
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeProvenanceAgent(json, '', elem.agentList[i]); {z - @Provenance.agent}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProvenance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProvenance(jsn)); {2}
end;

function TFHIRJsonParser.ParseProvenance(jsn : TJsonObject) : TFhirProvenance;
begin
  result := TFhirProvenance.create;
  try
    ParseProvenanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProvenanceProperties(jsn : TJsonObject; result : TFhirProvenance);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseReference{TFhirReference});
    if jsn.has('occurredPeriod') {a4} then
      result.occurred := ParsePeriod(jsn.vObj['occurredPeriod']);
    if jsn.has('occurredDateTime') or jsn.has('_occurredDateTime') then
      result.occurred := parseDateTime(jsn['occurredDateTime'], jsn.vObj['_occurredDateTime']);
    if jsn.has('recorded') or jsn.has('_recorded') then
        result.recordedElement := ParseInstant(jsn['recorded'], jsn.vObj['_recorded']);{q}
      if jsn.has('policy') or jsn.has('_policy') then
      iteratePrimitiveArray(jsn.vArr['policy'], jsn.vArr['_policy'], result.policyList, parseUri);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('activity') then
        result.activity := ParseCodeableConcept(jsn.vObj['activity']);{q3}
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseProvenanceAgent);
    if jsn.has('entity') then
      iterateArray(jsn.vArr['entity'], result.entityList, parseProvenanceEntity);
    if jsn.has('signature') then
      iterateArray(jsn.vArr['signature'], result.signatureList, parseSignature);
end;

procedure TFHIRJsonComposer.ComposeProvenance(json : TJSONWriter; name : string; elem : TFhirProvenance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('target') and (SummaryOption in [soFull, soSummary, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.targetList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.occurred is TFhirPeriod) then 
    ComposePeriod(json, 'occurredPeriod', TFhirPeriod(elem.occurred)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.occurred is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurredDateTime', TFhirDateTime(elem.occurred), false);
    ComposeDateTimeProps(json, 'occurredDateTime', TFhirDateTime(elem.occurred), false);
  end;
  if not elem.noCompose and doCompose('recorded') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'recorded', elem.recordedElement, false);
  if not elem.noCompose and doCompose('recorded') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'recorded', elem.recordedElement, false);
  if not elem.noCompose and doCompose('policy') and (SummaryOption in [soFull, soData]) and (elem.policyList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.policyList.Count - 1 do
    begin
      ext := ext or ((elem.policyList[i].id <> '') or (elem.policyList[i].hasExtensionList) {no-comments or (elem.policyList[i].hasComments)});
      val := val or (elem.policyList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('policy');
      for i := 0 to elem.policyList.Count - 1 do
        ComposeUriValue(json, '',elem.policyList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_policy');
      for i := 0 to elem.policyList.Count - 1 do
        ComposeUriProps(json, '',elem.policyList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if not elem.noCompose and doCompose('reason') and (SummaryOption in [soFull, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('activity') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'activity', elem.activity); {a}
  if not elem.noCompose and doCompose('agent') and (SummaryOption in [soFull, soData]) and (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeProvenanceAgent(json, '', elem.agentList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('entity') and (SummaryOption in [soFull, soData]) and (elem.entityList.Count > 0) then
  begin
    json.valueArray('entity');
    for i := 0 to elem.entityList.Count - 1 do
      ComposeProvenanceEntity(json, '', elem.entityList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('signature') and (SummaryOption in [soFull, soData]) and (elem.signatureList.Count > 0) then
  begin
    json.valueArray('signature');
    for i := 0 to elem.signatureList.Count - 1 do
      ComposeSignature(json, '', elem.signatureList[i]); {z - Signature}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
procedure TFHIRJsonParser.ParseQuestionnaireItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireItem(jsn : TJsonObject) : TFhirQuestionnaireItem;
begin
  result := TFhirQuestionnaireItem.create;
  try
    ParseQuestionnaireItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemProperties(jsn : TJsonObject; result : TFhirQuestionnaireItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('linkId') or jsn.has('_linkId') then
        result.linkIdElement := ParseString(jsn['linkId'], jsn.vObj['_linkId']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := ParseUri(jsn['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCoding);
    if jsn.has('prefix') or jsn.has('_prefix') then
        result.prefixElement := ParseString(jsn['prefix'], jsn.vObj['_prefix']);{q}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirItemTypeEnum, SYSTEMS_TFhirItemTypeEnum);
    if jsn.has('enableWhen') then
      iterateArray(jsn.vArr['enableWhen'], result.enableWhenList, parseQuestionnaireItemEnableWhen);
    if jsn.has('required') or jsn.has('_required') then
        result.requiredElement := ParseBoolean(jsn['required'], jsn.vObj['_required']);{q}
    if jsn.has('repeats') or jsn.has('_repeats') then
        result.repeatsElement := ParseBoolean(jsn['repeats'], jsn.vObj['_repeats']);{q}
    if jsn.has('readOnly') or jsn.has('_readOnly') then
        result.readOnlyElement := ParseBoolean(jsn['readOnly'], jsn.vObj['_readOnly']);{q}
    if jsn.has('maxLength') or jsn.has('_maxLength') then
        result.maxLengthElement := ParseInteger(jsn['maxLength'], jsn.vObj['_maxLength']);{q}
    if jsn.has('options') then
        result.options := ParseReference{TFhirValueSet}(jsn.vObj['options']);{q3}
    if jsn.has('option') then
      iterateArray(jsn.vArr['option'], result.optionList, parseQuestionnaireItemOption);
    if jsn.has('initialAttachment') {a4} then
      result.initial := ParseAttachment(jsn.vObj['initialAttachment']);
    if jsn.has('initialCoding') {a4} then
      result.initial := ParseCoding(jsn.vObj['initialCoding']);
    if jsn.has('initialQuantity') {a4} then
      result.initial := ParseQuantity(jsn.vObj['initialQuantity']);
    if jsn.has('initialReference') {a3} then
      result.initial := ParseReference(jsn.vObj['initialReference']);
    if jsn.has('initialBoolean') or jsn.has('_initialBoolean') then
      result.initial := parseBoolean(jsn['initialBoolean'], jsn.vObj['_initialBoolean']);
    if jsn.has('initialDecimal') or jsn.has('_initialDecimal') then
      result.initial := parseDecimal(jsn['initialDecimal'], jsn.vObj['_initialDecimal']);
    if jsn.has('initialInteger') or jsn.has('_initialInteger') then
      result.initial := parseInteger(jsn['initialInteger'], jsn.vObj['_initialInteger']);
    if jsn.has('initialDate') or jsn.has('_initialDate') then
      result.initial := parseDate(jsn['initialDate'], jsn.vObj['_initialDate']);
    if jsn.has('initialDateTime') or jsn.has('_initialDateTime') then
      result.initial := parseDateTime(jsn['initialDateTime'], jsn.vObj['_initialDateTime']);
    if jsn.has('initialTime') or jsn.has('_initialTime') then
      result.initial := parseTime(jsn['initialTime'], jsn.vObj['_initialTime']);
    if jsn.has('initialString') or jsn.has('_initialString') then
      result.initial := parseString(jsn['initialString'], jsn.vObj['_initialString']);
    if jsn.has('initialUri') or jsn.has('_initialUri') then
      result.initial := parseUri(jsn['initialUri'], jsn.vObj['_initialUri']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItem(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'linkId', elem.linkIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'linkId', elem.linkIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(json, '', elem.codeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'prefix', elem.prefixElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'prefix', elem.prefixElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirItemTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirItemTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.enableWhenList.Count > 0) then
  begin
    json.valueArray('enableWhen');
    for i := 0 to elem.enableWhenList.Count - 1 do
      ComposeQuestionnaireItemEnableWhen(json, '', elem.enableWhenList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.required <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'required', elem.requiredElement, false);
  if not elem.noCompose and (not isCanonical or (elem.required <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'required', elem.requiredElement, false);
  if not elem.noCompose and (not isCanonical or (elem.repeats <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'repeats', elem.repeatsElement, false);
  if not elem.noCompose and (not isCanonical or (elem.repeats <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'repeats', elem.repeatsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'readOnly', elem.readOnlyElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'readOnly', elem.readOnlyElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'maxLength', elem.maxLengthElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'maxLength', elem.maxLengthElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirValueSet}(json, 'options', elem.options); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.optionList.Count > 0) then
  begin
    json.valueArray('option');
    for i := 0 to elem.optionList.Count - 1 do
      ComposeQuestionnaireItemOption(json, '', elem.optionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirAttachment) then 
    ComposeAttachment(json, 'initialAttachment', TFhirAttachment(elem.initial)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirCoding) then 
    ComposeCoding(json, 'initialCoding', TFhirCoding(elem.initial)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirQuantity) then 
    ComposeQuantity(json, 'initialQuantity', TFhirQuantity(elem.initial)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirReference) then
    ComposeReference(json, 'initialReference', TFhirReference(elem.initial))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'initialBoolean', TFhirBoolean(elem.initial), false);
    ComposeBooleanProps(json, 'initialBoolean', TFhirBoolean(elem.initial), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'initialDecimal', TFhirDecimal(elem.initial), false);
    ComposeDecimalProps(json, 'initialDecimal', TFhirDecimal(elem.initial), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'initialInteger', TFhirInteger(elem.initial), false);
    ComposeIntegerProps(json, 'initialInteger', TFhirInteger(elem.initial), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirDate) then 
  begin
    ComposeDateValue(json, 'initialDate', TFhirDate(elem.initial), false);
    ComposeDateProps(json, 'initialDate', TFhirDate(elem.initial), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'initialDateTime', TFhirDateTime(elem.initial), false);
    ComposeDateTimeProps(json, 'initialDateTime', TFhirDateTime(elem.initial), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'initialTime', TFhirTime(elem.initial), false);
    ComposeTimeProps(json, 'initialTime', TFhirTime(elem.initial), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirString) then 
  begin
    ComposeStringValue(json, 'initialString', TFhirString(elem.initial), false);
    ComposeStringProps(json, 'initialString', TFhirString(elem.initial), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.initial is TFhirUri) then 
  begin
    ComposeUriValue(json, 'initialUri', TFhirUri(elem.initial), false);
    ComposeUriProps(json, 'initialUri', TFhirUri(elem.initial), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireItem(json, '', elem.itemList[i]); {z - @Questionnaire.item}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemEnableWhen(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItemEnableWhen(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireItemEnableWhen(jsn : TJsonObject) : TFhirQuestionnaireItemEnableWhen;
begin
  result := TFhirQuestionnaireItemEnableWhen.create;
  try
    ParseQuestionnaireItemEnableWhenProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemEnableWhenProperties(jsn : TJsonObject; result : TFhirQuestionnaireItemEnableWhen);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('question') or jsn.has('_question') then
        result.questionElement := ParseString(jsn['question'], jsn.vObj['_question']);{q}
    if jsn.has('hasAnswer') or jsn.has('_hasAnswer') then
        result.hasAnswerElement := ParseBoolean(jsn['hasAnswer'], jsn.vObj['_hasAnswer']);{q}
    if jsn.has('answerAttachment') {a4} then
      result.answer := ParseAttachment(jsn.vObj['answerAttachment']);
    if jsn.has('answerCoding') {a4} then
      result.answer := ParseCoding(jsn.vObj['answerCoding']);
    if jsn.has('answerQuantity') {a4} then
      result.answer := ParseQuantity(jsn.vObj['answerQuantity']);
    if jsn.has('answerReference') {a3} then
      result.answer := ParseReference(jsn.vObj['answerReference']);
    if jsn.has('answerBoolean') or jsn.has('_answerBoolean') then
      result.answer := parseBoolean(jsn['answerBoolean'], jsn.vObj['_answerBoolean']);
    if jsn.has('answerDecimal') or jsn.has('_answerDecimal') then
      result.answer := parseDecimal(jsn['answerDecimal'], jsn.vObj['_answerDecimal']);
    if jsn.has('answerInteger') or jsn.has('_answerInteger') then
      result.answer := parseInteger(jsn['answerInteger'], jsn.vObj['_answerInteger']);
    if jsn.has('answerDate') or jsn.has('_answerDate') then
      result.answer := parseDate(jsn['answerDate'], jsn.vObj['_answerDate']);
    if jsn.has('answerDateTime') or jsn.has('_answerDateTime') then
      result.answer := parseDateTime(jsn['answerDateTime'], jsn.vObj['_answerDateTime']);
    if jsn.has('answerTime') or jsn.has('_answerTime') then
      result.answer := parseTime(jsn['answerTime'], jsn.vObj['_answerTime']);
    if jsn.has('answerString') or jsn.has('_answerString') then
      result.answer := parseString(jsn['answerString'], jsn.vObj['_answerString']);
    if jsn.has('answerUri') or jsn.has('_answerUri') then
      result.answer := parseUri(jsn['answerUri'], jsn.vObj['_answerUri']);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItemEnableWhen(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItemEnableWhen; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'question', elem.questionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'question', elem.questionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'hasAnswer', elem.hasAnswerElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'hasAnswer', elem.hasAnswerElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirAttachment) then 
    ComposeAttachment(json, 'answerAttachment', TFhirAttachment(elem.answer)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirCoding) then 
    ComposeCoding(json, 'answerCoding', TFhirCoding(elem.answer)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirQuantity) then 
    ComposeQuantity(json, 'answerQuantity', TFhirQuantity(elem.answer)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirReference) then
    ComposeReference(json, 'answerReference', TFhirReference(elem.answer))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'answerBoolean', TFhirBoolean(elem.answer), false);
    ComposeBooleanProps(json, 'answerBoolean', TFhirBoolean(elem.answer), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'answerDecimal', TFhirDecimal(elem.answer), false);
    ComposeDecimalProps(json, 'answerDecimal', TFhirDecimal(elem.answer), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'answerInteger', TFhirInteger(elem.answer), false);
    ComposeIntegerProps(json, 'answerInteger', TFhirInteger(elem.answer), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirDate) then 
  begin
    ComposeDateValue(json, 'answerDate', TFhirDate(elem.answer), false);
    ComposeDateProps(json, 'answerDate', TFhirDate(elem.answer), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'answerDateTime', TFhirDateTime(elem.answer), false);
    ComposeDateTimeProps(json, 'answerDateTime', TFhirDateTime(elem.answer), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'answerTime', TFhirTime(elem.answer), false);
    ComposeTimeProps(json, 'answerTime', TFhirTime(elem.answer), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirString) then 
  begin
    ComposeStringValue(json, 'answerString', TFhirString(elem.answer), false);
    ComposeStringProps(json, 'answerString', TFhirString(elem.answer), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answer is TFhirUri) then 
  begin
    ComposeUriValue(json, 'answerUri', TFhirUri(elem.answer), false);
    ComposeUriProps(json, 'answerUri', TFhirUri(elem.answer), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemOption(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItemOption(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireItemOption(jsn : TJsonObject) : TFhirQuestionnaireItemOption;
begin
  result := TFhirQuestionnaireItemOption.create;
  try
    ParseQuestionnaireItemOptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemOptionProperties(jsn : TJsonObject; result : TFhirQuestionnaireItemOption);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('initialSelected') or jsn.has('_initialSelected') then
        result.initialSelectedElement := ParseBoolean(jsn['initialSelected'], jsn.vObj['_initialSelected']);{q}
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItemOption(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItemOption; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end;
  if not elem.noCompose and (not isCanonical or (elem.initialSelected <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'initialSelected', elem.initialSelectedElement, false);
  if not elem.noCompose and (not isCanonical or (elem.initialSelected <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'initialSelected', elem.initialSelectedElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaire(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaire(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaire(jsn : TJsonObject) : TFhirQuestionnaire;
begin
  result := TFhirQuestionnaire.create;
  try
    ParseQuestionnaireProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireProperties(jsn : TJsonObject; result : TFhirQuestionnaire);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
      if jsn.has('derivedFrom') or jsn.has('_derivedFrom') then
      iteratePrimitiveArray(jsn.vArr['derivedFrom'], jsn.vArr['_derivedFrom'], result.derivedFromList, parseUri);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('subjectType') or jsn.has('_subjectType') then
      iterateEnumArray(jsn.vArr['subjectType'], jsn.vArr['_subjectType'], jsn.path+'/subjectType', result.subjectType, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := ParseDate(jsn['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := ParseDate(jsn['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCoding);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaire(json : TJSONWriter; name : string; elem : TFhirQuestionnaire; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('derivedFrom') and (SummaryOption in [soFull, soData]) and (elem.derivedFromList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.derivedFromList.Count - 1 do
    begin
      ext := ext or ((elem.derivedFromList[i].id <> '') or (elem.derivedFromList[i].hasExtensionList) {no-comments or (elem.derivedFromList[i].hasComments)});
      val := val or (elem.derivedFromList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('derivedFrom');
      for i := 0 to elem.derivedFromList.Count - 1 do
        ComposeUriValue(json, '',elem.derivedFromList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_derivedFrom');
      for i := 0 to elem.derivedFromList.Count - 1 do
        ComposeUriProps(json, '',elem.derivedFromList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('subjectType') and (SummaryOption in [soFull, soSummary, soData]) and (elem.subjectType.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.subjectType.Count - 1 do
    begin
      val := val or (elem.subjectType[i].hasPrimitiveValue);
      ext := ext or ((elem.subjectType[i].id <> '') or (elem.subjectType[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('subjectType');
      for i := 0 to elem.subjectType.Count - 1 do
        ComposeEnumValue(json, '', elem.subjectType[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_subjectType');
      for i := 0 to elem.subjectType.Count - 1 do
        ComposeEnumProps(json, '', elem.subjectType[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('effectivePeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(json, '', elem.codeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('item') and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
procedure TFHIRJsonParser.ParseQuestionnaireResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireResponseItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireResponseItem(jsn : TJsonObject) : TFhirQuestionnaireResponseItem;
begin
  result := TFhirQuestionnaireResponseItem.create;
  try
    ParseQuestionnaireResponseItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseItemProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponseItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('linkId') or jsn.has('_linkId') then
        result.linkIdElement := ParseString(jsn['linkId'], jsn.vObj['_linkId']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := ParseUri(jsn['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := ParseString(jsn['text'], jsn.vObj['_text']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirReference}(jsn.vObj['subject']);{q3}
    if jsn.has('answer') then
      iterateArray(jsn.vArr['answer'], result.answerList, parseQuestionnaireResponseItemAnswer);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireResponseItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireResponseItem(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponseItem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'linkId', elem.linkIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'linkId', elem.linkIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'definition', elem.definitionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.answerList.Count > 0) then
  begin
    json.valueArray('answer');
    for i := 0 to elem.answerList.Count - 1 do
      ComposeQuestionnaireResponseItemAnswer(json, '', elem.answerList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(json, '', elem.itemList[i]); {z - @QuestionnaireResponse.item}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireResponseItemAnswer(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject) : TFhirQuestionnaireResponseItemAnswer;
begin
  result := TFhirQuestionnaireResponseItemAnswer.create;
  try
    ParseQuestionnaireResponseItemAnswerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseItemAnswerProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponseItemAnswer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueReference') {a3} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn['valueUri'], jsn.vObj['_valueUri']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireResponseItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireResponseItemAnswer(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponseItemAnswer; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(elem.value))
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(json, '', elem.itemList[i]); {z - @QuestionnaireResponse.item}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireResponse(jsn : TJsonObject) : TFhirQuestionnaireResponse;
begin
  result := TFhirQuestionnaireResponse.create;
  try
    ParseQuestionnaireResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('questionnaire') then
        result.questionnaire := ParseReference{TFhirQuestionnaire}(jsn.vObj['questionnaire']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirQuestionnaireAnswersStatusEnum, SYSTEMS_TFhirQuestionnaireAnswersStatusEnum);
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirReference}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('authored') or jsn.has('_authored') then
        result.authoredElement := ParseDateTime(jsn['authored'], jsn.vObj['_authored']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('source') then
        result.source := ParseReference{Resource}(jsn.vObj['source']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireResponseItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireResponse(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(Observation|Procedure)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('questionnaire') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirQuestionnaire}(json, 'questionnaire', elem.questionnaire); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirQuestionnaireAnswersStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirQuestionnaireAnswersStatusEnum, false);
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('authored') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authored', elem.authoredElement, false);
  if not elem.noCompose and doCompose('authored') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authored', elem.authoredElement, false);
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if not elem.noCompose and doCompose('source') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'source', elem.source); {a}
  if not elem.noCompose and doCompose('item') and (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
procedure TFHIRJsonParser.ParseRelatedPerson(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRelatedPerson(jsn)); {2}
end;

function TFHIRJsonParser.ParseRelatedPerson(jsn : TJsonObject) : TFhirRelatedPerson;
begin
  result := TFhirRelatedPerson.create;
  try
    ParseRelatedPersonProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRelatedPersonProperties(jsn : TJsonObject; result : TFhirRelatedPerson);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('relationship') then
      iterateArray(jsn.vArr['relationship'], result.relationshipList, parseCodeableConcept);
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], result.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        result.birthDateElement := ParseDate(jsn['birthDate'], jsn.vObj['_birthDate']);{q}
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('photo') then
      iterateArray(jsn.vArr['photo'], result.photoList, parseAttachment);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeRelatedPerson(json : TJSONWriter; name : string; elem : TFhirRelatedPerson; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('relationship') and (SummaryOption in [soFull, soSummary, soData]) and (elem.relationshipList.Count > 0) then
  begin
    json.valueArray('relationship');
    for i := 0 to elem.relationshipList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.relationshipList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) and (elem.nameList.Count > 0) then
  begin
    json.valueArray('name');
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(json, '', elem.nameList[i]); {z - HumanName}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('telecom') and (SummaryOption in [soFull, soSummary, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and doCompose('gender') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if not elem.noCompose and doCompose('birthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'birthDate', elem.birthDateElement, false);
  if not elem.noCompose and doCompose('birthDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'birthDate', elem.birthDateElement, false);
  if not elem.noCompose and doCompose('address') and (SummaryOption in [soFull, soSummary, soData]) and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('photo') and (SummaryOption in [soFull, soData]) and (elem.photoList.Count > 0) then
  begin
    json.valueArray('photo');
    for i := 0 to elem.photoList.Count - 1 do
      ComposeAttachment(json, '', elem.photoList[i]); {z - Attachment}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
end;

{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
procedure TFHIRJsonParser.ParseRequestGroupAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroupAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseRequestGroupAction(jsn : TJsonObject) : TFhirRequestGroupAction;
begin
  result := TFhirRequestGroupAction.create;
  try
    ParseRequestGroupActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionProperties(jsn : TJsonObject; result : TFhirRequestGroupAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('prefix') or jsn.has('_prefix') then
        result.prefixElement := ParseString(jsn['prefix'], jsn.vObj['_prefix']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('textEquivalent') or jsn.has('_textEquivalent') then
        result.textEquivalentElement := ParseString(jsn['textEquivalent'], jsn.vObj['_textEquivalent']);{q}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('documentation') then
      iterateArray(jsn.vArr['documentation'], result.documentationList, parseRelatedArtifact);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], result.conditionList, parseRequestGroupActionCondition);
    if jsn.has('relatedAction') then
      iterateArray(jsn.vArr['relatedAction'], result.relatedActionList, parseRequestGroupActionRelatedAction);
    if jsn.has('timingAge') {a4} then
      result.timing := ParseAge(jsn.vObj['timingAge']);
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDuration') {a4} then
      result.timing := ParseDuration(jsn.vObj['timingDuration']);
    if jsn.has('timingRange') {a4} then
      result.timing := ParseRange(jsn.vObj['timingRange']);
    if jsn.has('timingTiming') {a4} then
      result.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      result.timing := parseDateTime(jsn['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseReference{Resource});
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('groupingBehavior') or jsn.has('_groupingBehavior')  then
      result.groupingBehaviorElement := parseEnum(jsn.path+'/groupingBehavior', jsn['groupingBehavior'], jsn.vObj['_groupingBehavior'], CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum);
    if jsn.has('selectionBehavior') or jsn.has('_selectionBehavior')  then
      result.selectionBehaviorElement := parseEnum(jsn.path+'/selectionBehavior', jsn['selectionBehavior'], jsn.vObj['_selectionBehavior'], CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum);
    if jsn.has('requiredBehavior') or jsn.has('_requiredBehavior')  then
      result.requiredBehaviorElement := parseEnum(jsn.path+'/requiredBehavior', jsn['requiredBehavior'], jsn.vObj['_requiredBehavior'], CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum);
    if jsn.has('precheckBehavior') or jsn.has('_precheckBehavior')  then
      result.precheckBehaviorElement := parseEnum(jsn.path+'/precheckBehavior', jsn['precheckBehavior'], jsn.vObj['_precheckBehavior'], CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum);
    if jsn.has('cardinalityBehavior') or jsn.has('_cardinalityBehavior')  then
      result.cardinalityBehaviorElement := parseEnum(jsn.path+'/cardinalityBehavior', jsn['cardinalityBehavior'], jsn.vObj['_cardinalityBehavior'], CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum);
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseRequestGroupAction);
end;

procedure TFHIRJsonComposer.ComposeRequestGroupAction(json : TJSONWriter; name : string; elem : TFhirRequestGroupAction; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'prefix', elem.prefixElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'prefix', elem.prefixElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'textEquivalent', elem.textEquivalentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'textEquivalent', elem.textEquivalentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.documentationList.Count > 0) then
  begin
    json.valueArray('documentation');
    for i := 0 to elem.documentationList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.documentationList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.conditionList.Count > 0) then
  begin
    json.valueArray('condition');
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeRequestGroupActionCondition(json, '', elem.conditionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.relatedActionList.Count > 0) then
  begin
    json.valueArray('relatedAction');
    for i := 0 to elem.relatedActionList.Count - 1 do
      ComposeRequestGroupActionRelatedAction(json, '', elem.relatedActionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirAge) then 
    ComposeAge(json, 'timingAge', TFhirAge(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDuration) then 
    ComposeDuration(json, 'timingDuration', TFhirDuration(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirRange) then 
    ComposeRange(json, 'timingRange', TFhirRange(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(elem.timing)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.participantList[i]); {z - Reference(Patient|Person|Practitioner|RelatedPerson)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeRequestGroupAction(json, '', elem.actionList[i]); {z - @RequestGroup.action}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroupActionCondition(jsn)); {2}
end;

function TFHIRJsonParser.ParseRequestGroupActionCondition(jsn : TJsonObject) : TFhirRequestGroupActionCondition;
begin
  result := TFhirRequestGroupActionCondition.create;
  try
    ParseRequestGroupActionConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionConditionProperties(jsn : TJsonObject; result : TFhirRequestGroupActionCondition);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseString(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposeRequestGroupActionCondition(json : TJSONWriter; name : string; elem : TFhirRequestGroupActionCondition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroupActionRelatedAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseRequestGroupActionRelatedAction(jsn : TJsonObject) : TFhirRequestGroupActionRelatedAction;
begin
  result := TFhirRequestGroupActionRelatedAction.create;
  try
    ParseRequestGroupActionRelatedActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionRelatedActionProperties(jsn : TJsonObject; result : TFhirRequestGroupActionRelatedAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actionId') or jsn.has('_actionId') then
        result.actionIdElement := ParseId(jsn['actionId'], jsn.vObj['_actionId']);{q}
    if jsn.has('relationship') or jsn.has('_relationship')  then
      result.relationshipElement := parseEnum(jsn.path+'/relationship', jsn['relationship'], jsn.vObj['_relationship'], CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum);
    if jsn.has('offsetDuration') {a4} then
      result.offset := ParseDuration(jsn.vObj['offsetDuration']);
    if jsn.has('offsetRange') {a4} then
      result.offset := ParseRange(jsn.vObj['offsetRange']);
end;

procedure TFHIRJsonComposer.ComposeRequestGroupActionRelatedAction(json : TJSONWriter; name : string; elem : TFhirRequestGroupActionRelatedAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'actionId', elem.actionIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'actionId', elem.actionIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.offset is TFhirDuration) then 
    ComposeDuration(json, 'offsetDuration', TFhirDuration(elem.offset)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.offset is TFhirRange) then 
    ComposeRange(json, 'offsetRange', TFhirRange(elem.offset)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRequestGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseRequestGroup(jsn : TJsonObject) : TFhirRequestGroup;
begin
  result := TFhirRequestGroup.create;
  try
    ParseRequestGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupProperties(jsn : TJsonObject; result : TFhirRequestGroup);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{TFhirReference});
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirReference});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := ParseDateTime(jsn['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{TFhirReference});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseRequestGroupAction);
end;

procedure TFHIRJsonComposer.ComposeRequestGroup(json : TJSONWriter; name : string; elem : TFhirRequestGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('definition') and (SummaryOption in [soFull, soData]) and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.definitionList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('replaces') and (SummaryOption in [soFull, soData]) and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.replacesList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('groupIdentifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('author') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.reasonReferenceList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('action') and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeRequestGroupAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
procedure TFHIRJsonParser.ParseResearchStudyArm(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchStudyArm(jsn)); {2}
end;

function TFHIRJsonParser.ParseResearchStudyArm(jsn : TJsonObject) : TFhirResearchStudyArm;
begin
  result := TFhirResearchStudyArm.create;
  try
    ParseResearchStudyArmProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchStudyArmProperties(jsn : TJsonObject; result : TFhirResearchStudyArm);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeResearchStudyArm(json : TJSONWriter; name : string; elem : TFhirResearchStudyArm; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseResearchStudyObjective(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchStudyObjective(jsn)); {2}
end;

function TFHIRJsonParser.ParseResearchStudyObjective(jsn : TJsonObject) : TFhirResearchStudyObjective;
begin
  result := TFhirResearchStudyObjective.create;
  try
    ParseResearchStudyObjectiveProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchStudyObjectiveProperties(jsn : TJsonObject; result : TFhirResearchStudyObjective);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
end;

procedure TFHIRJsonComposer.ComposeResearchStudyObjective(json : TJSONWriter; name : string; elem : TFhirResearchStudyObjective; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseResearchStudy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchStudy(jsn)); {2}
end;

function TFHIRJsonParser.ParseResearchStudy(jsn : TJsonObject) : TFhirResearchStudy;
begin
  result := TFhirResearchStudy.create;
  try
    ParseResearchStudyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchStudyProperties(jsn : TJsonObject; result : TFhirResearchStudy);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('protocol') then
      iterateArray(jsn.vArr['protocol'], result.protocolList, parseReference{TFhirPlanDefinition});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirResearchStudy});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirResearchStudyStatusEnum, SYSTEMS_TFhirResearchStudyStatusEnum);
    if jsn.has('primaryPurposeType') then
        result.primaryPurposeType := ParseCodeableConcept(jsn.vObj['primaryPurposeType']);{q3}
    if jsn.has('phase') then
        result.phase := ParseCodeableConcept(jsn.vObj['phase']);{q3}
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], result.focusList, parseCodeableConcept);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], result.conditionList, parseReference{TFhirCondition});
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('keyword') then
      iterateArray(jsn.vArr['keyword'], result.keywordList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], result.locationList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('enrollment') then
      iterateArray(jsn.vArr['enrollment'], result.enrollmentList, parseReference{TFhirGroup});
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('sponsor') then
        result.sponsor := ParseReference{TFhirOrganization}(jsn.vObj['sponsor']);{q3}
    if jsn.has('principalInvestigator') then
        result.principalInvestigator := ParseReference{TFhirPractitioner}(jsn.vObj['principalInvestigator']);{q3}
    if jsn.has('site') then
      iterateArray(jsn.vArr['site'], result.siteList, parseReference{TFhirLocation});
    if jsn.has('reasonStopped') then
        result.reasonStopped := ParseCodeableConcept(jsn.vObj['reasonStopped']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('arm') then
      iterateArray(jsn.vArr['arm'], result.armList, parseResearchStudyArm);
    if jsn.has('objective') then
      iterateArray(jsn.vArr['objective'], result.objectiveList, parseResearchStudyObjective);
end;

procedure TFHIRJsonComposer.ComposeResearchStudy(json : TJSONWriter; name : string; elem : TFhirResearchStudy; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('protocol') and (SummaryOption in [soFull, soSummary, soData]) and (elem.protocolList.Count > 0) then
  begin
    json.valueArray('protocol');
    for i := 0 to elem.protocolList.Count - 1 do
      ComposeReference{TFhirPlanDefinition}(json, '', elem.protocolList[i]); {z - Reference(PlanDefinition)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirResearchStudy}(json, '', elem.partOfList[i]); {z - Reference(ResearchStudy)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirResearchStudyStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirResearchStudyStatusEnum, false);
  if not elem.noCompose and doCompose('primaryPurposeType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'primaryPurposeType', elem.primaryPurposeType); {a}
  if not elem.noCompose and doCompose('phase') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'phase', elem.phase); {a}
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('focus') and (SummaryOption in [soFull, soSummary, soData]) and (elem.focusList.Count > 0) then
  begin
    json.valueArray('focus');
    for i := 0 to elem.focusList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.focusList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('condition') and (SummaryOption in [soFull, soSummary, soData]) and (elem.conditionList.Count > 0) then
  begin
    json.valueArray('condition');
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.conditionList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('relatedArtifact') and (SummaryOption in [soFull, soData]) and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('keyword') and (SummaryOption in [soFull, soSummary, soData]) and (elem.keywordList.Count > 0) then
  begin
    json.valueArray('keyword');
    for i := 0 to elem.keywordList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.keywordList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('location') and (SummaryOption in [soFull, soSummary, soData]) and (elem.locationList.Count > 0) then
  begin
    json.valueArray('location');
    for i := 0 to elem.locationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.locationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('enrollment') and (SummaryOption in [soFull, soSummary, soData]) and (elem.enrollmentList.Count > 0) then
  begin
    json.valueArray('enrollment');
    for i := 0 to elem.enrollmentList.Count - 1 do
      ComposeReference{TFhirGroup}(json, '', elem.enrollmentList[i]); {z - Reference(Group)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('sponsor') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'sponsor', elem.sponsor); {a}
  if not elem.noCompose and doCompose('principalInvestigator') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'principalInvestigator', elem.principalInvestigator); {a}
  if not elem.noCompose and doCompose('site') and (SummaryOption in [soFull, soSummary, soData]) and (elem.siteList.Count > 0) then
  begin
    json.valueArray('site');
    for i := 0 to elem.siteList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.siteList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonStopped') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'reasonStopped', elem.reasonStopped); {a}
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('arm') and (SummaryOption in [soFull, soData]) and (elem.armList.Count > 0) then
  begin
    json.valueArray('arm');
    for i := 0 to elem.armList.Count - 1 do
      ComposeResearchStudyArm(json, '', elem.armList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('objective') and (SummaryOption in [soFull, soData]) and (elem.objectiveList.Count > 0) then
  begin
    json.valueArray('objective');
    for i := 0 to elem.objectiveList.Count - 1 do
      ComposeResearchStudyObjective(json, '', elem.objectiveList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
procedure TFHIRJsonParser.ParseResearchSubject(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchSubject(jsn)); {2}
end;

function TFHIRJsonParser.ParseResearchSubject(jsn : TJsonObject) : TFhirResearchSubject;
begin
  result := TFhirResearchSubject.create;
  try
    ParseResearchSubjectProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchSubjectProperties(jsn : TJsonObject; result : TFhirResearchSubject);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirResearchSubjectStatusEnum, SYSTEMS_TFhirResearchSubjectStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('study') then
        result.study := ParseReference{TFhirResearchStudy}(jsn.vObj['study']);{q3}
    if jsn.has('individual') then
        result.individual := ParseReference{TFhirPatient}(jsn.vObj['individual']);{q3}
    if jsn.has('assignedArm') or jsn.has('_assignedArm') then
        result.assignedArmElement := ParseString(jsn['assignedArm'], jsn.vObj['_assignedArm']);{q}
    if jsn.has('actualArm') or jsn.has('_actualArm') then
        result.actualArmElement := ParseString(jsn['actualArm'], jsn.vObj['_actualArm']);{q}
    if jsn.has('consent') then
        result.consent := ParseReference{TFhirConsent}(jsn.vObj['consent']);{q3}
end;

procedure TFHIRJsonComposer.ComposeResearchSubject(json : TJSONWriter; name : string; elem : TFhirResearchSubject; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirResearchSubjectStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirResearchSubjectStatusEnum, false);
  if not elem.noCompose and doCompose('period') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and doCompose('study') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirResearchStudy}(json, 'study', elem.study); {a}
  if not elem.noCompose and doCompose('individual') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'individual', elem.individual); {a}
  if not elem.noCompose and doCompose('assignedArm') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'assignedArm', elem.assignedArmElement, false);
  if not elem.noCompose and doCompose('assignedArm') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'assignedArm', elem.assignedArmElement, false);
  if not elem.noCompose and doCompose('actualArm') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'actualArm', elem.actualArmElement, false);
  if not elem.noCompose and doCompose('actualArm') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'actualArm', elem.actualArmElement, false);
  if not elem.noCompose and doCompose('consent') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirConsent}(json, 'consent', elem.consent); {a}
end;

{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
procedure TFHIRJsonParser.ParseRiskAssessmentPrediction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRiskAssessmentPrediction(jsn)); {2}
end;

function TFHIRJsonParser.ParseRiskAssessmentPrediction(jsn : TJsonObject) : TFhirRiskAssessmentPrediction;
begin
  result := TFhirRiskAssessmentPrediction.create;
  try
    ParseRiskAssessmentPredictionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRiskAssessmentPredictionProperties(jsn : TJsonObject; result : TFhirRiskAssessmentPrediction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('probabilityRange') {a4} then
      result.probability := ParseRange(jsn.vObj['probabilityRange']);
    if jsn.has('probabilityDecimal') or jsn.has('_probabilityDecimal') then
      result.probability := parseDecimal(jsn['probabilityDecimal'], jsn.vObj['_probabilityDecimal']);
    if jsn.has('qualitativeRisk') then
        result.qualitativeRisk := ParseCodeableConcept(jsn.vObj['qualitativeRisk']);{q3}
    if jsn.has('relativeRisk') or jsn.has('_relativeRisk') then
        result.relativeRiskElement := ParseDecimal(jsn['relativeRisk'], jsn.vObj['_relativeRisk']);{q}
    if jsn.has('whenPeriod') {a4} then
      result.when := ParsePeriod(jsn.vObj['whenPeriod']);
    if jsn.has('whenRange') {a4} then
      result.when := ParseRange(jsn.vObj['whenRange']);
    if jsn.has('rationale') or jsn.has('_rationale') then
        result.rationaleElement := ParseString(jsn['rationale'], jsn.vObj['_rationale']);{q}
end;

procedure TFHIRJsonComposer.ComposeRiskAssessmentPrediction(json : TJSONWriter; name : string; elem : TFhirRiskAssessmentPrediction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.probability is TFhirRange) then 
    ComposeRange(json, 'probabilityRange', TFhirRange(elem.probability)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.probability is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'probabilityDecimal', TFhirDecimal(elem.probability), false);
    ComposeDecimalProps(json, 'probabilityDecimal', TFhirDecimal(elem.probability), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'qualitativeRisk', elem.qualitativeRisk); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'relativeRisk', elem.relativeRiskElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'relativeRisk', elem.relativeRiskElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.when is TFhirPeriod) then 
    ComposePeriod(json, 'whenPeriod', TFhirPeriod(elem.when)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.when is TFhirRange) then 
    ComposeRange(json, 'whenRange', TFhirRange(elem.when)) ;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'rationale', elem.rationaleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'rationale', elem.rationaleElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRiskAssessment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRiskAssessment(jsn)); {2}
end;

function TFHIRJsonParser.ParseRiskAssessment(jsn : TJsonObject) : TFhirRiskAssessment;
begin
  result := TFhirRiskAssessment.create;
  try
    ParseRiskAssessmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRiskAssessmentProperties(jsn : TJsonObject; result : TFhirRiskAssessment);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('basedOn') then
        result.basedOn := ParseReference{TFhirReference}(jsn.vObj['basedOn']);{q3}
    if jsn.has('parent') then
        result.parent := ParseReference{TFhirReference}(jsn.vObj['parent']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum);
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('condition') then
        result.condition := ParseReference{TFhirCondition}(jsn.vObj['condition']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{Resource}(jsn.vObj['performer']);{q3}
    if jsn.has('reasonCodeableConcept') {a4} then
      result.reason := ParseCodeableConcept(jsn.vObj['reasonCodeableConcept']);
    if jsn.has('reasonReference') {a3} then
      result.reason := ParseReference(jsn.vObj['reasonReference']);
    if jsn.has('basis') then
      iterateArray(jsn.vArr['basis'], result.basisList, parseReference{TFhirReference});
    if jsn.has('prediction') then
      iterateArray(jsn.vArr['prediction'], result.predictionList, parseRiskAssessmentPrediction);
    if jsn.has('mitigation') or jsn.has('_mitigation') then
        result.mitigationElement := ParseString(jsn['mitigation'], jsn.vObj['_mitigation']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeRiskAssessment(json : TJSONWriter; name : string; elem : TFhirRiskAssessment; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'basedOn', elem.basedOn); {a}
  if not elem.noCompose and doCompose('parent') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'parent', elem.parent); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  if not elem.noCompose and doCompose('method') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if not elem.noCompose and doCompose('condition') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirCondition}(json, 'condition', elem.condition); {a}
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'performer', elem.performer); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'reasonCodeableConcept', TFhirCodeableConcept(elem.reason)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reason is TFhirReference) then
    ComposeReference(json, 'reasonReference', TFhirReference(elem.reason));
  if not elem.noCompose and doCompose('basis') and (SummaryOption in [soFull, soData]) and (elem.basisList.Count > 0) then
  begin
    json.valueArray('basis');
    for i := 0 to elem.basisList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basisList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('prediction') and (SummaryOption in [soFull, soData]) and (elem.predictionList.Count > 0) then
  begin
    json.valueArray('prediction');
    for i := 0 to elem.predictionList.Count - 1 do
      ComposeRiskAssessmentPrediction(json, '', elem.predictionList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('mitigation') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'mitigation', elem.mitigationElement, false);
  if not elem.noCompose and doCompose('mitigation') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'mitigation', elem.mitigationElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
end;

{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
procedure TFHIRJsonParser.ParseSchedule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSchedule(jsn)); {2}
end;

function TFHIRJsonParser.ParseSchedule(jsn : TJsonObject) : TFhirSchedule;
begin
  result := TFhirSchedule.create;
  try
    ParseScheduleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseScheduleProperties(jsn : TJsonObject; result : TFhirSchedule);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := ParseBoolean(jsn['active'], jsn.vObj['_active']);{q}
    if jsn.has('serviceCategory') then
        result.serviceCategory := ParseCodeableConcept(jsn.vObj['serviceCategory']);{q3}
    if jsn.has('serviceType') then
      iterateArray(jsn.vArr['serviceType'], result.serviceTypeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('actor') then
      iterateArray(jsn.vArr['actor'], result.actorList, parseReference{Resource});
    if jsn.has('planningHorizon') then
        result.planningHorizon := ParsePeriod(jsn.vObj['planningHorizon']);{q3}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeSchedule(json : TJSONWriter; name : string; elem : TFhirSchedule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if not elem.noCompose and (not isCanonical or (elem.active <> true)) and doCompose('active') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if not elem.noCompose and doCompose('serviceCategory') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'serviceCategory', elem.serviceCategory); {a}
  if not elem.noCompose and doCompose('serviceType') and (SummaryOption in [soFull, soSummary, soData]) and (elem.serviceTypeList.Count > 0) then
  begin
    json.valueArray('serviceType');
    for i := 0 to elem.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specialty') and (SummaryOption in [soFull, soSummary, soData]) and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('actor') and (SummaryOption in [soFull, soSummary, soData]) and (elem.actorList.Count > 0) then
  begin
    json.valueArray('actor');
    for i := 0 to elem.actorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.actorList[i]); {z - Reference(Patient|Practitioner|PractitionerRole|RelatedPerson|Device|HealthcareService|Location)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('planningHorizon') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'planningHorizon', elem.planningHorizon); {a}
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
end;

{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
procedure TFHIRJsonParser.ParseSearchParameterComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSearchParameterComponent(jsn)); {2}
end;

function TFHIRJsonParser.ParseSearchParameterComponent(jsn : TJsonObject) : TFhirSearchParameterComponent;
begin
  result := TFhirSearchParameterComponent.create;
  try
    ParseSearchParameterComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSearchParameterComponentProperties(jsn : TJsonObject; result : TFhirSearchParameterComponent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('definition') then
        result.definition := ParseReference{TFhirSearchParameter}(jsn.vObj['definition']);{q3}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposeSearchParameterComponent(json : TJSONWriter; name : string; elem : TFhirSearchParameterComponent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirSearchParameter}(json, 'definition', elem.definition); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSearchParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSearchParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseSearchParameter(jsn : TJsonObject) : TFhirSearchParameter;
begin
  result := TFhirSearchParameter.create;
  try
    ParseSearchParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSearchParameterProperties(jsn : TJsonObject; result : TFhirSearchParameter);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('base') or jsn.has('_base') then
      iterateEnumArray(jsn.vArr['base'], jsn.vArr['_base'], jsn.path+'/base', result.base, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum);
    if jsn.has('derivedFrom') or jsn.has('_derivedFrom') then
        result.derivedFromElement := ParseUri(jsn['derivedFrom'], jsn.vObj['_derivedFrom']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('xpath') or jsn.has('_xpath') then
        result.xpathElement := ParseString(jsn['xpath'], jsn.vObj['_xpath']);{q}
    if jsn.has('xpathUsage') or jsn.has('_xpathUsage')  then
      result.xpathUsageElement := parseEnum(jsn.path+'/xpathUsage', jsn['xpathUsage'], jsn.vObj['_xpathUsage'], CODES_TFhirSearchXpathUsageEnum, SYSTEMS_TFhirSearchXpathUsageEnum);
    if jsn.has('target') or jsn.has('_target') then
      iterateEnumArray(jsn.vArr['target'], jsn.vArr['_target'], jsn.path+'/target', result.target, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('comparator') or jsn.has('_comparator') then
      iterateEnumArray(jsn.vArr['comparator'], jsn.vArr['_comparator'], jsn.path+'/comparator', result.comparatorList, parseEnum, CODES_TFhirSearchComparatorEnum, SYSTEMS_TFhirSearchComparatorEnum);
    if jsn.has('modifier') or jsn.has('_modifier') then
      iterateEnumArray(jsn.vArr['modifier'], jsn.vArr['_modifier'], jsn.path+'/modifier', result.modifierList, parseEnum, CODES_TFhirSearchModifierCodeEnum, SYSTEMS_TFhirSearchModifierCodeEnum);
      if jsn.has('chain') or jsn.has('_chain') then
      iteratePrimitiveArray(jsn.vArr['chain'], jsn.vArr['_chain'], result.chainList, parseString);
    if jsn.has('component') then
      iterateArray(jsn.vArr['component'], result.componentList, parseSearchParameterComponent);
end;

procedure TFHIRJsonComposer.ComposeSearchParameter(json : TJSONWriter; name : string; elem : TFhirSearchParameter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and doCompose('base') and (SummaryOption in [soFull, soSummary, soData]) and (elem.base.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.base.Count - 1 do
    begin
      val := val or (elem.base[i].hasPrimitiveValue);
      ext := ext or ((elem.base[i].id <> '') or (elem.base[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('base');
      for i := 0 to elem.base.Count - 1 do
        ComposeEnumValue(json, '', elem.base[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_base');
      for i := 0 to elem.base.Count - 1 do
        ComposeEnumProps(json, '', elem.base[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum, false);
  if not elem.noCompose and doCompose('derivedFrom') and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'derivedFrom', elem.derivedFromElement, false);
  if not elem.noCompose and doCompose('derivedFrom') and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'derivedFrom', elem.derivedFromElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('expression') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and doCompose('expression') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and doCompose('xpath') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'xpath', elem.xpathElement, false);
  if not elem.noCompose and doCompose('xpath') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'xpath', elem.xpathElement, false);
  if not elem.noCompose and doCompose('xpathUsage') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'xpathUsage', elem.XpathUsageElement, CODES_TFhirSearchXpathUsageEnum, false);
  if not elem.noCompose and doCompose('xpathUsage') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'xpathUsage', elem.XpathUsageElement, CODES_TFhirSearchXpathUsageEnum, false);
  if not elem.noCompose and doCompose('target') and (SummaryOption in [soFull, soData]) and (elem.target.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.target.Count - 1 do
    begin
      val := val or (elem.target[i].hasPrimitiveValue);
      ext := ext or ((elem.target[i].id <> '') or (elem.target[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('target');
      for i := 0 to elem.target.Count - 1 do
        ComposeEnumValue(json, '', elem.target[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_target');
      for i := 0 to elem.target.Count - 1 do
        ComposeEnumProps(json, '', elem.target[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('comparator') and (SummaryOption in [soFull, soData]) and (elem.comparatorList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.comparatorList.Count - 1 do
    begin
      val := val or (elem.comparatorList[i].hasPrimitiveValue);
      ext := ext or ((elem.comparatorList[i].id <> '') or (elem.comparatorList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('comparator');
      for i := 0 to elem.comparatorList.Count - 1 do
        ComposeEnumValue(json, '', elem.comparatorList[i], CODES_TFhirSearchComparatorEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_comparator');
      for i := 0 to elem.comparatorList.Count - 1 do
        ComposeEnumProps(json, '', elem.comparatorList[i], CODES_TFhirSearchComparatorEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('modifier') and (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.modifierList.Count - 1 do
    begin
      val := val or (elem.modifierList[i].hasPrimitiveValue);
      ext := ext or ((elem.modifierList[i].id <> '') or (elem.modifierList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('modifier');
      for i := 0 to elem.modifierList.Count - 1 do
        ComposeEnumValue(json, '', elem.modifierList[i], CODES_TFhirSearchModifierCodeEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_modifier');
      for i := 0 to elem.modifierList.Count - 1 do
        ComposeEnumProps(json, '', elem.modifierList[i], CODES_TFhirSearchModifierCodeEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('chain') and (SummaryOption in [soFull, soData]) and (elem.chainList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.chainList.Count - 1 do
    begin
      ext := ext or ((elem.chainList[i].id <> '') or (elem.chainList[i].hasExtensionList) {no-comments or (elem.chainList[i].hasComments)});
      val := val or (elem.chainList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('chain');
      for i := 0 to elem.chainList.Count - 1 do
        ComposeStringValue(json, '',elem.chainList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_chain');
      for i := 0 to elem.chainList.Count - 1 do
        ComposeStringProps(json, '',elem.chainList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('component') and (SummaryOption in [soFull, soData]) and (elem.componentList.Count > 0) then
  begin
    json.valueArray('component');
    for i := 0 to elem.componentList.Count - 1 do
      ComposeSearchParameterComponent(json, '', elem.componentList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
procedure TFHIRJsonParser.ParseSequenceReferenceSeq(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceReferenceSeq(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceReferenceSeq(jsn : TJsonObject) : TFhirSequenceReferenceSeq;
begin
  result := TFhirSequenceReferenceSeq.create;
  try
    ParseSequenceReferenceSeqProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceReferenceSeqProperties(jsn : TJsonObject; result : TFhirSequenceReferenceSeq);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('chromosome') then
        result.chromosome := ParseCodeableConcept(jsn.vObj['chromosome']);{q3}
    if jsn.has('genomeBuild') or jsn.has('_genomeBuild') then
        result.genomeBuildElement := ParseString(jsn['genomeBuild'], jsn.vObj['_genomeBuild']);{q}
    if jsn.has('referenceSeqId') then
        result.referenceSeqId := ParseCodeableConcept(jsn.vObj['referenceSeqId']);{q3}
    if jsn.has('referenceSeqPointer') then
        result.referenceSeqPointer := ParseReference{TFhirSequence}(jsn.vObj['referenceSeqPointer']);{q3}
    if jsn.has('referenceSeqString') or jsn.has('_referenceSeqString') then
        result.referenceSeqStringElement := ParseString(jsn['referenceSeqString'], jsn.vObj['_referenceSeqString']);{q}
    if jsn.has('strand') or jsn.has('_strand') then
        result.strandElement := ParseInteger(jsn['strand'], jsn.vObj['_strand']);{q}
    if jsn.has('windowStart') or jsn.has('_windowStart') then
        result.windowStartElement := ParseInteger(jsn['windowStart'], jsn.vObj['_windowStart']);{q}
    if jsn.has('windowEnd') or jsn.has('_windowEnd') then
        result.windowEndElement := ParseInteger(jsn['windowEnd'], jsn.vObj['_windowEnd']);{q}
end;

procedure TFHIRJsonComposer.ComposeSequenceReferenceSeq(json : TJSONWriter; name : string; elem : TFhirSequenceReferenceSeq; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'chromosome', elem.chromosome); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'genomeBuild', elem.genomeBuildElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'genomeBuild', elem.genomeBuildElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'referenceSeqId', elem.referenceSeqId); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirSequence}(json, 'referenceSeqPointer', elem.referenceSeqPointer); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'referenceSeqString', elem.referenceSeqStringElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'referenceSeqString', elem.referenceSeqStringElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'strand', elem.strandElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'strand', elem.strandElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'windowStart', elem.windowStartElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'windowStart', elem.windowStartElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'windowEnd', elem.windowEndElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'windowEnd', elem.windowEndElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceVariant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceVariant(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceVariant(jsn : TJsonObject) : TFhirSequenceVariant;
begin
  result := TFhirSequenceVariant.create;
  try
    ParseSequenceVariantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceVariantProperties(jsn : TJsonObject; result : TFhirSequenceVariant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := ParseInteger(jsn['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := ParseInteger(jsn['end'], jsn.vObj['_end']);{q}
    if jsn.has('observedAllele') or jsn.has('_observedAllele') then
        result.observedAlleleElement := ParseString(jsn['observedAllele'], jsn.vObj['_observedAllele']);{q}
    if jsn.has('referenceAllele') or jsn.has('_referenceAllele') then
        result.referenceAlleleElement := ParseString(jsn['referenceAllele'], jsn.vObj['_referenceAllele']);{q}
    if jsn.has('cigar') or jsn.has('_cigar') then
        result.cigarElement := ParseString(jsn['cigar'], jsn.vObj['_cigar']);{q}
    if jsn.has('variantPointer') then
        result.variantPointer := ParseReference{TFhirObservation}(jsn.vObj['variantPointer']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSequenceVariant(json : TJSONWriter; name : string; elem : TFhirSequenceVariant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', elem.end_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', elem.end_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'observedAllele', elem.observedAlleleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'observedAllele', elem.observedAlleleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'referenceAllele', elem.referenceAlleleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'referenceAllele', elem.referenceAlleleElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'cigar', elem.cigarElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'cigar', elem.cigarElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirObservation}(json, 'variantPointer', elem.variantPointer); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceQuality(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceQuality(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceQuality(jsn : TJsonObject) : TFhirSequenceQuality;
begin
  result := TFhirSequenceQuality.create;
  try
    ParseSequenceQualityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceQualityProperties(jsn : TJsonObject; result : TFhirSequenceQuality);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirQualityTypeEnum, SYSTEMS_TFhirQualityTypeEnum);
    if jsn.has('standardSequence') then
        result.standardSequence := ParseCodeableConcept(jsn.vObj['standardSequence']);{q3}
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := ParseInteger(jsn['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := ParseInteger(jsn['end'], jsn.vObj['_end']);{q}
    if jsn.has('score') then
        result.score := ParseQuantity(jsn.vObj['score']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('truthTP') or jsn.has('_truthTP') then
        result.truthTPElement := ParseDecimal(jsn['truthTP'], jsn.vObj['_truthTP']);{q}
    if jsn.has('queryTP') or jsn.has('_queryTP') then
        result.queryTPElement := ParseDecimal(jsn['queryTP'], jsn.vObj['_queryTP']);{q}
    if jsn.has('truthFN') or jsn.has('_truthFN') then
        result.truthFNElement := ParseDecimal(jsn['truthFN'], jsn.vObj['_truthFN']);{q}
    if jsn.has('queryFP') or jsn.has('_queryFP') then
        result.queryFPElement := ParseDecimal(jsn['queryFP'], jsn.vObj['_queryFP']);{q}
    if jsn.has('gtFP') or jsn.has('_gtFP') then
        result.gtFPElement := ParseDecimal(jsn['gtFP'], jsn.vObj['_gtFP']);{q}
    if jsn.has('precision') or jsn.has('_precision') then
        result.precisionElement := ParseDecimal(jsn['precision'], jsn.vObj['_precision']);{q}
    if jsn.has('recall') or jsn.has('_recall') then
        result.recallElement := ParseDecimal(jsn['recall'], jsn.vObj['_recall']);{q}
    if jsn.has('fScore') or jsn.has('_fScore') then
        result.fScore_Element := ParseDecimal(jsn['fScore'], jsn.vObj['_fScore']);{q}
    if jsn.has('roc') then
        result.roc := ParseSequenceQualityRoc(jsn.vObj['roc']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSequenceQuality(json : TJSONWriter; name : string; elem : TFhirSequenceQuality; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirQualityTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirQualityTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'standardSequence', elem.standardSequence); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', elem.end_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', elem.end_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'score', elem.score); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'truthTP', elem.truthTPElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'truthTP', elem.truthTPElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'queryTP', elem.queryTPElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'queryTP', elem.queryTPElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'truthFN', elem.truthFNElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'truthFN', elem.truthFNElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'queryFP', elem.queryFPElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'queryFP', elem.queryFPElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'gtFP', elem.gtFPElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'gtFP', elem.gtFPElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'precision', elem.precisionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'precision', elem.precisionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'recall', elem.recallElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'recall', elem.recallElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'fScore', elem.fScore_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'fScore', elem.fScore_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSequenceQualityRoc(json, 'roc', elem.roc); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceQualityRoc(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceQualityRoc(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceQualityRoc(jsn : TJsonObject) : TFhirSequenceQualityRoc;
begin
  result := TFhirSequenceQualityRoc.create;
  try
    ParseSequenceQualityRocProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceQualityRocProperties(jsn : TJsonObject; result : TFhirSequenceQualityRoc);
begin
    ParseBackboneElementProperties(jsn, result);
      if jsn.has('score') or jsn.has('_score') then
      iteratePrimitiveArray(jsn.vArr['score'], jsn.vArr['_score'], result.scoreList, parseInteger);
      if jsn.has('numTP') or jsn.has('_numTP') then
      iteratePrimitiveArray(jsn.vArr['numTP'], jsn.vArr['_numTP'], result.numTPList, parseInteger);
      if jsn.has('numFP') or jsn.has('_numFP') then
      iteratePrimitiveArray(jsn.vArr['numFP'], jsn.vArr['_numFP'], result.numFPList, parseInteger);
      if jsn.has('numFN') or jsn.has('_numFN') then
      iteratePrimitiveArray(jsn.vArr['numFN'], jsn.vArr['_numFN'], result.numFNList, parseInteger);
      if jsn.has('precision') or jsn.has('_precision') then
      iteratePrimitiveArray(jsn.vArr['precision'], jsn.vArr['_precision'], result.precisionList, parseDecimal);
      if jsn.has('sensitivity') or jsn.has('_sensitivity') then
      iteratePrimitiveArray(jsn.vArr['sensitivity'], jsn.vArr['_sensitivity'], result.sensitivityList, parseDecimal);
      if jsn.has('fMeasure') or jsn.has('_fMeasure') then
      iteratePrimitiveArray(jsn.vArr['fMeasure'], jsn.vArr['_fMeasure'], result.fMeasureList, parseDecimal);
end;

procedure TFHIRJsonComposer.ComposeSequenceQualityRoc(json : TJSONWriter; name : string; elem : TFhirSequenceQualityRoc; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.scoreList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.scoreList.Count - 1 do
    begin
      ext := ext or ((elem.scoreList[i].id <> '') or (elem.scoreList[i].hasExtensionList) {no-comments or (elem.scoreList[i].hasComments)});
      val := val or (elem.scoreList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('score');
      for i := 0 to elem.scoreList.Count - 1 do
        ComposeIntegerValue(json, '',elem.scoreList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_score');
      for i := 0 to elem.scoreList.Count - 1 do
        ComposeIntegerProps(json, '',elem.scoreList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.numTPList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.numTPList.Count - 1 do
    begin
      ext := ext or ((elem.numTPList[i].id <> '') or (elem.numTPList[i].hasExtensionList) {no-comments or (elem.numTPList[i].hasComments)});
      val := val or (elem.numTPList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('numTP');
      for i := 0 to elem.numTPList.Count - 1 do
        ComposeIntegerValue(json, '',elem.numTPList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_numTP');
      for i := 0 to elem.numTPList.Count - 1 do
        ComposeIntegerProps(json, '',elem.numTPList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.numFPList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.numFPList.Count - 1 do
    begin
      ext := ext or ((elem.numFPList[i].id <> '') or (elem.numFPList[i].hasExtensionList) {no-comments or (elem.numFPList[i].hasComments)});
      val := val or (elem.numFPList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('numFP');
      for i := 0 to elem.numFPList.Count - 1 do
        ComposeIntegerValue(json, '',elem.numFPList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_numFP');
      for i := 0 to elem.numFPList.Count - 1 do
        ComposeIntegerProps(json, '',elem.numFPList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.numFNList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.numFNList.Count - 1 do
    begin
      ext := ext or ((elem.numFNList[i].id <> '') or (elem.numFNList[i].hasExtensionList) {no-comments or (elem.numFNList[i].hasComments)});
      val := val or (elem.numFNList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('numFN');
      for i := 0 to elem.numFNList.Count - 1 do
        ComposeIntegerValue(json, '',elem.numFNList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_numFN');
      for i := 0 to elem.numFNList.Count - 1 do
        ComposeIntegerProps(json, '',elem.numFNList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.precisionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.precisionList.Count - 1 do
    begin
      ext := ext or ((elem.precisionList[i].id <> '') or (elem.precisionList[i].hasExtensionList) {no-comments or (elem.precisionList[i].hasComments)});
      val := val or (elem.precisionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('precision');
      for i := 0 to elem.precisionList.Count - 1 do
        ComposeDecimalValue(json, '',elem.precisionList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_precision');
      for i := 0 to elem.precisionList.Count - 1 do
        ComposeDecimalProps(json, '',elem.precisionList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.sensitivityList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.sensitivityList.Count - 1 do
    begin
      ext := ext or ((elem.sensitivityList[i].id <> '') or (elem.sensitivityList[i].hasExtensionList) {no-comments or (elem.sensitivityList[i].hasComments)});
      val := val or (elem.sensitivityList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('sensitivity');
      for i := 0 to elem.sensitivityList.Count - 1 do
        ComposeDecimalValue(json, '',elem.sensitivityList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_sensitivity');
      for i := 0 to elem.sensitivityList.Count - 1 do
        ComposeDecimalProps(json, '',elem.sensitivityList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.fMeasureList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.fMeasureList.Count - 1 do
    begin
      ext := ext or ((elem.fMeasureList[i].id <> '') or (elem.fMeasureList[i].hasExtensionList) {no-comments or (elem.fMeasureList[i].hasComments)});
      val := val or (elem.fMeasureList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('fMeasure');
      for i := 0 to elem.fMeasureList.Count - 1 do
        ComposeDecimalValue(json, '',elem.fMeasureList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_fMeasure');
      for i := 0 to elem.fMeasureList.Count - 1 do
        ComposeDecimalProps(json, '',elem.fMeasureList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceRepository(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceRepository(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceRepository(jsn : TJsonObject) : TFhirSequenceRepository;
begin
  result := TFhirSequenceRepository.create;
  try
    ParseSequenceRepositoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceRepositoryProperties(jsn : TJsonObject; result : TFhirSequenceRepository);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirRepositoryTypeEnum, SYSTEMS_TFhirRepositoryTypeEnum);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('datasetId') or jsn.has('_datasetId') then
        result.datasetIdElement := ParseString(jsn['datasetId'], jsn.vObj['_datasetId']);{q}
    if jsn.has('variantsetId') or jsn.has('_variantsetId') then
        result.variantsetIdElement := ParseString(jsn['variantsetId'], jsn.vObj['_variantsetId']);{q}
    if jsn.has('readsetId') or jsn.has('_readsetId') then
        result.readsetIdElement := ParseString(jsn['readsetId'], jsn.vObj['_readsetId']);{q}
end;

procedure TFHIRJsonComposer.ComposeSequenceRepository(json : TJSONWriter; name : string; elem : TFhirSequenceRepository; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirRepositoryTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirRepositoryTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'datasetId', elem.datasetIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'datasetId', elem.datasetIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'variantsetId', elem.variantsetIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'variantsetId', elem.variantsetIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'readsetId', elem.readsetIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'readsetId', elem.readsetIdElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceStructureVariant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceStructureVariant(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceStructureVariant(jsn : TJsonObject) : TFhirSequenceStructureVariant;
begin
  result := TFhirSequenceStructureVariant.create;
  try
    ParseSequenceStructureVariantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceStructureVariantProperties(jsn : TJsonObject; result : TFhirSequenceStructureVariant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('precision') or jsn.has('_precision') then
        result.precisionElement := ParseString(jsn['precision'], jsn.vObj['_precision']);{q}
    if jsn.has('reportedaCGHRatio') or jsn.has('_reportedaCGHRatio') then
        result.reportedaCGHRatioElement := ParseDecimal(jsn['reportedaCGHRatio'], jsn.vObj['_reportedaCGHRatio']);{q}
    if jsn.has('length') or jsn.has('_length') then
        result.lengthElement := ParseInteger(jsn['length'], jsn.vObj['_length']);{q}
    if jsn.has('outer') then
        result.outer := ParseSequenceStructureVariantOuter(jsn.vObj['outer']);{q3}
    if jsn.has('inner') then
        result.inner := ParseSequenceStructureVariantInner(jsn.vObj['inner']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSequenceStructureVariant(json : TJSONWriter; name : string; elem : TFhirSequenceStructureVariant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'precision', elem.precisionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'precision', elem.precisionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'reportedaCGHRatio', elem.reportedaCGHRatioElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'reportedaCGHRatio', elem.reportedaCGHRatioElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'length', elem.lengthElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'length', elem.lengthElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSequenceStructureVariantOuter(json, 'outer', elem.outer); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSequenceStructureVariantInner(json, 'inner', elem.inner); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceStructureVariantOuter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceStructureVariantOuter(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceStructureVariantOuter(jsn : TJsonObject) : TFhirSequenceStructureVariantOuter;
begin
  result := TFhirSequenceStructureVariantOuter.create;
  try
    ParseSequenceStructureVariantOuterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceStructureVariantOuterProperties(jsn : TJsonObject; result : TFhirSequenceStructureVariantOuter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := ParseInteger(jsn['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := ParseInteger(jsn['end'], jsn.vObj['_end']);{q}
end;

procedure TFHIRJsonComposer.ComposeSequenceStructureVariantOuter(json : TJSONWriter; name : string; elem : TFhirSequenceStructureVariantOuter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', elem.end_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', elem.end_Element, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceStructureVariantInner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceStructureVariantInner(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceStructureVariantInner(jsn : TJsonObject) : TFhirSequenceStructureVariantInner;
begin
  result := TFhirSequenceStructureVariantInner.create;
  try
    ParseSequenceStructureVariantInnerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceStructureVariantInnerProperties(jsn : TJsonObject; result : TFhirSequenceStructureVariantInner);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := ParseInteger(jsn['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := ParseInteger(jsn['end'], jsn.vObj['_end']);{q}
end;

procedure TFHIRJsonComposer.ComposeSequenceStructureVariantInner(json : TJSONWriter; name : string; elem : TFhirSequenceStructureVariantInner; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', elem.startElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', elem.end_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', elem.end_Element, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequence(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequence(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequence(jsn : TJsonObject) : TFhirSequence;
begin
  result := TFhirSequence.create;
  try
    ParseSequenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceProperties(jsn : TJsonObject; result : TFhirSequence);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := ParseCode(jsn['type'], jsn.vObj['_type']);{q}
    if jsn.has('coordinateSystem') or jsn.has('_coordinateSystem') then
        result.coordinateSystemElement := ParseInteger(jsn['coordinateSystem'], jsn.vObj['_coordinateSystem']);{q}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('specimen') then
        result.specimen := ParseReference{TFhirSpecimen}(jsn.vObj['specimen']);{q3}
    if jsn.has('device') then
        result.device := ParseReference{TFhirDevice}(jsn.vObj['device']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{TFhirOrganization}(jsn.vObj['performer']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('referenceSeq') then
        result.referenceSeq := ParseSequenceReferenceSeq(jsn.vObj['referenceSeq']);{q3}
    if jsn.has('variant') then
      iterateArray(jsn.vArr['variant'], result.variantList, parseSequenceVariant);
    if jsn.has('observedSeq') or jsn.has('_observedSeq') then
        result.observedSeqElement := ParseString(jsn['observedSeq'], jsn.vObj['_observedSeq']);{q}
    if jsn.has('quality') then
      iterateArray(jsn.vArr['quality'], result.qualityList, parseSequenceQuality);
    if jsn.has('readCoverage') or jsn.has('_readCoverage') then
        result.readCoverageElement := ParseInteger(jsn['readCoverage'], jsn.vObj['_readCoverage']);{q}
    if jsn.has('repository') then
      iterateArray(jsn.vArr['repository'], result.repositoryList, parseSequenceRepository);
    if jsn.has('pointer') then
      iterateArray(jsn.vArr['pointer'], result.pointerList, parseReference{TFhirSequence});
    if jsn.has('structureVariant') then
      iterateArray(jsn.vArr['structureVariant'], result.structureVariantList, parseSequenceStructureVariant);
end;

procedure TFHIRJsonComposer.ComposeSequence(json : TJSONWriter; name : string; elem : TFhirSequence; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'type', elem.type_Element, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'type', elem.type_Element, false);
  if not elem.noCompose and doCompose('coordinateSystem') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'coordinateSystem', elem.coordinateSystemElement, false);
  if not elem.noCompose and doCompose('coordinateSystem') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'coordinateSystem', elem.coordinateSystemElement, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('specimen') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirSpecimen}(json, 'specimen', elem.specimen); {a}
  if not elem.noCompose and doCompose('device') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDevice}(json, 'device', elem.device); {a}
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'performer', elem.performer); {a}
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and doCompose('referenceSeq') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSequenceReferenceSeq(json, 'referenceSeq', elem.referenceSeq); {a}
  if not elem.noCompose and doCompose('variant') and (SummaryOption in [soFull, soSummary, soData]) and (elem.variantList.Count > 0) then
  begin
    json.valueArray('variant');
    for i := 0 to elem.variantList.Count - 1 do
      ComposeSequenceVariant(json, '', elem.variantList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('observedSeq') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'observedSeq', elem.observedSeqElement, false);
  if not elem.noCompose and doCompose('observedSeq') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'observedSeq', elem.observedSeqElement, false);
  if not elem.noCompose and doCompose('quality') and (SummaryOption in [soFull, soSummary, soData]) and (elem.qualityList.Count > 0) then
  begin
    json.valueArray('quality');
    for i := 0 to elem.qualityList.Count - 1 do
      ComposeSequenceQuality(json, '', elem.qualityList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('readCoverage') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'readCoverage', elem.readCoverageElement, false);
  if not elem.noCompose and doCompose('readCoverage') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'readCoverage', elem.readCoverageElement, false);
  if not elem.noCompose and doCompose('repository') and (SummaryOption in [soFull, soSummary, soData]) and (elem.repositoryList.Count > 0) then
  begin
    json.valueArray('repository');
    for i := 0 to elem.repositoryList.Count - 1 do
      ComposeSequenceRepository(json, '', elem.repositoryList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('pointer') and (SummaryOption in [soFull, soSummary, soData]) and (elem.pointerList.Count > 0) then
  begin
    json.valueArray('pointer');
    for i := 0 to elem.pointerList.Count - 1 do
      ComposeReference{TFhirSequence}(json, '', elem.pointerList[i]); {z - Reference(Sequence)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('structureVariant') and (SummaryOption in [soFull, soSummary, soData]) and (elem.structureVariantList.Count > 0) then
  begin
    json.valueArray('structureVariant');
    for i := 0 to elem.structureVariantList.Count - 1 do
      ComposeSequenceStructureVariant(json, '', elem.structureVariantList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
procedure TFHIRJsonParser.ParseServiceDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseServiceDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseServiceDefinition(jsn : TJsonObject) : TFhirServiceDefinition;
begin
  result := TFhirServiceDefinition.create;
  try
    ParseServiceDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseServiceDefinitionProperties(jsn : TJsonObject; result : TFhirServiceDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := ParseString(jsn['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := ParseDate(jsn['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := ParseDate(jsn['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('trigger') then
      iterateArray(jsn.vArr['trigger'], result.triggerList, parseTriggerDefinition);
    if jsn.has('dataRequirement') then
      iterateArray(jsn.vArr['dataRequirement'], result.dataRequirementList, parseDataRequirement);
    if jsn.has('operationDefinition') then
        result.operationDefinition := ParseReference{TFhirOperationDefinition}(jsn.vObj['operationDefinition']);{q3}
end;

procedure TFHIRJsonComposer.ComposeServiceDefinition(json : TJSONWriter; name : string; elem : TFhirServiceDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('usage') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('approvalDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('lastReviewDate') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if not elem.noCompose and doCompose('effectivePeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('topic') and (SummaryOption in [soFull, soData]) and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contributor') and (SummaryOption in [soFull, soData]) and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('relatedArtifact') and (SummaryOption in [soFull, soData]) and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('trigger') and (SummaryOption in [soFull, soData]) and (elem.triggerList.Count > 0) then
  begin
    json.valueArray('trigger');
    for i := 0 to elem.triggerList.Count - 1 do
      ComposeTriggerDefinition(json, '', elem.triggerList[i]); {z - TriggerDefinition}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('dataRequirement') and (SummaryOption in [soFull, soData]) and (elem.dataRequirementList.Count > 0) then
  begin
    json.valueArray('dataRequirement');
    for i := 0 to elem.dataRequirementList.Count - 1 do
      ComposeDataRequirement(json, '', elem.dataRequirementList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('operationDefinition') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOperationDefinition}(json, 'operationDefinition', elem.operationDefinition); {a}
end;

{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SERVICEREQUEST}
procedure TFHIRJsonParser.ParseServiceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseServiceRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseServiceRequest(jsn : TJsonObject) : TFhirServiceRequest;
begin
  result := TFhirServiceRequest.create;
  try
    ParseServiceRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseServiceRequestProperties(jsn : TJsonObject; result : TFhirServiceRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirServiceRequest});
    if jsn.has('requisition') then
        result.requisition := ParseIdentifier(jsn.vObj['requisition']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('doNotPerform') or jsn.has('_doNotPerform') then
        result.doNotPerformElement := ParseBoolean(jsn['doNotPerform'], jsn.vObj['_doNotPerform']);{q}
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('orderDetail') then
      iterateArray(jsn.vArr['orderDetail'], result.orderDetailList, parseCodeableConcept);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('asNeededCodeableConcept') {a4} then
      result.asNeeded := ParseCodeableConcept(jsn.vObj['asNeededCodeableConcept']);
    if jsn.has('asNeededBoolean') or jsn.has('_asNeededBoolean') then
      result.asNeeded := parseBoolean(jsn['asNeededBoolean'], jsn.vObj['_asNeededBoolean']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := ParseDateTime(jsn['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseReference{Resource}(jsn.vObj['requester']);{q3}
    if jsn.has('performerType') then
        result.performerType := ParseCodeableConcept(jsn.vObj['performerType']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{Resource}(jsn.vObj['performer']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], result.insuranceList, parseReference{Resource});
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], result.supportingInfoList, parseReference{TFhirReference});
    if jsn.has('specimen') then
      iterateArray(jsn.vArr['specimen'], result.specimenList, parseReference{TFhirSpecimen});
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], result.bodySiteList, parseCodeableConcept);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('patientInstruction') or jsn.has('_patientInstruction') then
        result.patientInstructionElement := ParseString(jsn['patientInstruction'], jsn.vObj['_patientInstruction']);{q}
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], result.relevantHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeServiceRequest(json : TJSONWriter; name : string; elem : TFhirServiceRequest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('instantiates') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|ServiceRequest|MedicationRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('replaces') and (SummaryOption in [soFull, soSummary, soData]) and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(json, '', elem.replacesList[i]); {z - Reference(ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('requisition') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'requisition', elem.requisition); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and (not isCanonical or (elem.doNotPerform <> false)) and doCompose('doNotPerform') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'doNotPerform', elem.doNotPerformElement, false);
  if not elem.noCompose and (not isCanonical or (elem.doNotPerform <> false)) and doCompose('doNotPerform') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'doNotPerform', elem.doNotPerformElement, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('orderDetail') and (SummaryOption in [soFull, soSummary, soData]) and (elem.orderDetailList.Count > 0) then
  begin
    json.valueArray('orderDetail');
    for i := 0 to elem.orderDetailList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.orderDetailList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.asNeeded is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'asNeededCodeableConcept', TFhirCodeableConcept(elem.asNeeded)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.asNeeded is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'asNeededBoolean', TFhirBoolean(elem.asNeeded), false);
    ComposeBooleanProps(json, 'asNeededBoolean', TFhirBoolean(elem.asNeeded), false);
  end;
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('requester') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'requester', elem.requester); {a}
  if not elem.noCompose and doCompose('performerType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'performerType', elem.performerType); {a}
  if not elem.noCompose and doCompose('performer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'performer', elem.performer); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soSummary, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|DiagnosticReport|DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('insurance') and (SummaryOption in [soFull, soData]) and (elem.insuranceList.Count > 0) then
  begin
    json.valueArray('insurance');
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.insuranceList[i]); {z - Reference(Coverage|ClaimResponse)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('supportingInfo') and (SummaryOption in [soFull, soData]) and (elem.supportingInfoList.Count > 0) then
  begin
    json.valueArray('supportingInfo');
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInfoList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specimen') and (SummaryOption in [soFull, soSummary, soData]) and (elem.specimenList.Count > 0) then
  begin
    json.valueArray('specimen');
    for i := 0 to elem.specimenList.Count - 1 do
      ComposeReference{TFhirSpecimen}(json, '', elem.specimenList[i]); {z - Reference(Specimen)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('bodySite') and (SummaryOption in [soFull, soSummary, soData]) and (elem.bodySiteList.Count > 0) then
  begin
    json.valueArray('bodySite');
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodySiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('patientInstruction') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'patientInstruction', elem.patientInstructionElement, false);
  if not elem.noCompose and doCompose('patientInstruction') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'patientInstruction', elem.patientInstructionElement, false);
  if not elem.noCompose and doCompose('relevantHistory') and (SummaryOption in [soFull, soData]) and (elem.relevantHistoryList.Count > 0) then
  begin
    json.valueArray('relevantHistory');
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.relevantHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
procedure TFHIRJsonParser.ParseSlot(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSlot(jsn)); {2}
end;

function TFHIRJsonParser.ParseSlot(jsn : TJsonObject) : TFhirSlot;
begin
  result := TFhirSlot.create;
  try
    ParseSlotProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSlotProperties(jsn : TJsonObject; result : TFhirSlot);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('serviceCategory') then
        result.serviceCategory := ParseCodeableConcept(jsn.vObj['serviceCategory']);{q3}
    if jsn.has('serviceType') then
      iterateArray(jsn.vArr['serviceType'], result.serviceTypeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('appointmentType') then
        result.appointmentType := ParseCodeableConcept(jsn.vObj['appointmentType']);{q3}
    if jsn.has('schedule') then
        result.schedule := ParseReference{TFhirSchedule}(jsn.vObj['schedule']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirSlotstatusEnum, SYSTEMS_TFhirSlotstatusEnum);
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := ParseInstant(jsn['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := ParseInstant(jsn['end'], jsn.vObj['_end']);{q}
    if jsn.has('overbooked') or jsn.has('_overbooked') then
        result.overbookedElement := ParseBoolean(jsn['overbooked'], jsn.vObj['_overbooked']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeSlot(json : TJSONWriter; name : string; elem : TFhirSlot; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('serviceCategory') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'serviceCategory', elem.serviceCategory); {a}
  if not elem.noCompose and doCompose('serviceType') and (SummaryOption in [soFull, soSummary, soData]) and (elem.serviceTypeList.Count > 0) then
  begin
    json.valueArray('serviceType');
    for i := 0 to elem.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specialty') and (SummaryOption in [soFull, soSummary, soData]) and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('appointmentType') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'appointmentType', elem.appointmentType); {a}
  if not elem.noCompose and doCompose('schedule') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirSchedule}(json, 'schedule', elem.schedule); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSlotstatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSlotstatusEnum, false);
  if not elem.noCompose and doCompose('start') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'start', elem.startElement, false);
  if not elem.noCompose and doCompose('start') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'start', elem.startElement, false);
  if not elem.noCompose and doCompose('end_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'end', elem.end_Element, false);
  if not elem.noCompose and doCompose('end_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'end', elem.end_Element, false);
  if not elem.noCompose and doCompose('overbooked') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'overbooked', elem.overbookedElement, false);
  if not elem.noCompose and doCompose('overbooked') and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'overbooked', elem.overbookedElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
end;

{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
procedure TFHIRJsonParser.ParseSpecimenCollection(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenCollection(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenCollection(jsn : TJsonObject) : TFhirSpecimenCollection;
begin
  result := TFhirSpecimenCollection.create;
  try
    ParseSpecimenCollectionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenCollectionProperties(jsn : TJsonObject; result : TFhirSpecimenCollection);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('collector') then
        result.collector := ParseReference{TFhirPractitioner}(jsn.vObj['collector']);{q3}
    if jsn.has('collectedPeriod') {a4} then
      result.collected := ParsePeriod(jsn.vObj['collectedPeriod']);
    if jsn.has('collectedDateTime') or jsn.has('_collectedDateTime') then
      result.collected := parseDateTime(jsn['collectedDateTime'], jsn.vObj['_collectedDateTime']);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSpecimenCollection(json : TJSONWriter; name : string; elem : TFhirSpecimenCollection; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'collector', elem.collector); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.collected is TFhirPeriod) then 
    ComposePeriod(json, 'collectedPeriod', TFhirPeriod(elem.collected)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.collected is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'collectedDateTime', TFhirDateTime(elem.collected), false);
    ComposeDateTimeProps(json, 'collectedDateTime', TFhirDateTime(elem.collected), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSpecimenProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenProcessing(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenProcessing(jsn : TJsonObject) : TFhirSpecimenProcessing;
begin
  result := TFhirSpecimenProcessing.create;
  try
    ParseSpecimenProcessingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenProcessingProperties(jsn : TJsonObject; result : TFhirSpecimenProcessing);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('procedure') then
        result.procedure_ := ParseCodeableConcept(jsn.vObj['procedure']);{q3}
    if jsn.has('additive') then
      iterateArray(jsn.vArr['additive'], result.additiveList, parseReference{TFhirSubstance});
    if jsn.has('timePeriod') {a4} then
      result.time := ParsePeriod(jsn.vObj['timePeriod']);
    if jsn.has('timeDateTime') or jsn.has('_timeDateTime') then
      result.time := parseDateTime(jsn['timeDateTime'], jsn.vObj['_timeDateTime']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenProcessing(json : TJSONWriter; name : string; elem : TFhirSpecimenProcessing; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'procedure', elem.procedure_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.additiveList.Count > 0) then
  begin
    json.valueArray('additive');
    for i := 0 to elem.additiveList.Count - 1 do
      ComposeReference{TFhirSubstance}(json, '', elem.additiveList[i]); {z - Reference(Substance)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.time is TFhirPeriod) then 
    ComposePeriod(json, 'timePeriod', TFhirPeriod(elem.time)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.time is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timeDateTime', TFhirDateTime(elem.time), false);
    ComposeDateTimeProps(json, 'timeDateTime', TFhirDateTime(elem.time), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSpecimenContainer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenContainer(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenContainer(jsn : TJsonObject) : TFhirSpecimenContainer;
begin
  result := TFhirSpecimenContainer.create;
  try
    ParseSpecimenContainerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenContainerProperties(jsn : TJsonObject; result : TFhirSpecimenContainer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('capacity') then
        result.capacity := ParseQuantity(jsn.vObj['capacity']);{q3}
    if jsn.has('specimenQuantity') then
        result.specimenQuantity := ParseQuantity(jsn.vObj['specimenQuantity']);{q3}
    if jsn.has('additiveCodeableConcept') {a4} then
      result.additive := ParseCodeableConcept(jsn.vObj['additiveCodeableConcept']);
    if jsn.has('additiveReference') {a3} then
      result.additive := ParseReference(jsn.vObj['additiveReference']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenContainer(json : TJSONWriter; name : string; elem : TFhirSpecimenContainer; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'capacity', elem.capacity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'specimenQuantity', elem.specimenQuantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.additive is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'additiveCodeableConcept', TFhirCodeableConcept(elem.additive)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.additive is TFhirReference) then
    ComposeReference(json, 'additiveReference', TFhirReference(elem.additive));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSpecimen(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimen(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimen(jsn : TJsonObject) : TFhirSpecimen;
begin
  result := TFhirSpecimen.create;
  try
    ParseSpecimenProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenProperties(jsn : TJsonObject; result : TFhirSpecimen);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('accessionIdentifier') then
        result.accessionIdentifier := ParseIdentifier(jsn.vObj['accessionIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirSpecimenStatusEnum, SYSTEMS_TFhirSpecimenStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('receivedTime') or jsn.has('_receivedTime') then
        result.receivedTimeElement := ParseDateTime(jsn['receivedTime'], jsn.vObj['_receivedTime']);{q}
    if jsn.has('parent') then
      iterateArray(jsn.vArr['parent'], result.parentList, parseReference{TFhirSpecimen});
    if jsn.has('request') then
      iterateArray(jsn.vArr['request'], result.requestList, parseReference{TFhirServiceRequest});
    if jsn.has('collection') then
        result.collection := ParseSpecimenCollection(jsn.vObj['collection']);{q3}
    if jsn.has('processing') then
      iterateArray(jsn.vArr['processing'], result.processingList, parseSpecimenProcessing);
    if jsn.has('container') then
      iterateArray(jsn.vArr['container'], result.containerList, parseSpecimenContainer);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeSpecimen(json : TJSONWriter; name : string; elem : TFhirSpecimen; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('accessionIdentifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'accessionIdentifier', elem.accessionIdentifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSpecimenStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSpecimenStatusEnum, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('subject') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if not elem.noCompose and doCompose('receivedTime') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'receivedTime', elem.receivedTimeElement, false);
  if not elem.noCompose and doCompose('receivedTime') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'receivedTime', elem.receivedTimeElement, false);
  if not elem.noCompose and doCompose('parent') and (SummaryOption in [soFull, soData]) and (elem.parentList.Count > 0) then
  begin
    json.valueArray('parent');
    for i := 0 to elem.parentList.Count - 1 do
      ComposeReference{TFhirSpecimen}(json, '', elem.parentList[i]); {z - Reference(Specimen)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('request') and (SummaryOption in [soFull, soData]) and (elem.requestList.Count > 0) then
  begin
    json.valueArray('request');
    for i := 0 to elem.requestList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(json, '', elem.requestList[i]); {z - Reference(ServiceRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('collection') and (SummaryOption in [soFull, soData]) then
    ComposeSpecimenCollection(json, 'collection', elem.collection); {a}
  if not elem.noCompose and doCompose('processing') and (SummaryOption in [soFull, soData]) and (elem.processingList.Count > 0) then
  begin
    json.valueArray('processing');
    for i := 0 to elem.processingList.Count - 1 do
      ComposeSpecimenProcessing(json, '', elem.processingList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('container') and (SummaryOption in [soFull, soData]) and (elem.containerList.Count > 0) then
  begin
    json.valueArray('container');
    for i := 0 to elem.containerList.Count - 1 do
      ComposeSpecimenContainer(json, '', elem.containerList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
procedure TFHIRJsonParser.ParseSpecimenDefinitionSpecimenToLab(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenDefinitionSpecimenToLab(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenDefinitionSpecimenToLab(jsn : TJsonObject) : TFhirSpecimenDefinitionSpecimenToLab;
begin
  result := TFhirSpecimenDefinitionSpecimenToLab.create;
  try
    ParseSpecimenDefinitionSpecimenToLabProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionSpecimenToLabProperties(jsn : TJsonObject; result : TFhirSpecimenDefinitionSpecimenToLab);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('isDerived') or jsn.has('_isDerived') then
        result.isDerivedElement := ParseBoolean(jsn['isDerived'], jsn.vObj['_isDerived']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('preference') or jsn.has('_preference')  then
      result.preferenceElement := parseEnum(jsn.path+'/preference', jsn['preference'], jsn.vObj['_preference'], CODES_TFhirSpecimenContainedPreferenceEnum, SYSTEMS_TFhirSpecimenContainedPreferenceEnum);
    if jsn.has('containerMaterial') then
        result.containerMaterial := ParseCodeableConcept(jsn.vObj['containerMaterial']);{q3}
    if jsn.has('containerType') then
        result.containerType := ParseCodeableConcept(jsn.vObj['containerType']);{q3}
    if jsn.has('containerCap') then
        result.containerCap := ParseCodeableConcept(jsn.vObj['containerCap']);{q3}
    if jsn.has('containerDescription') or jsn.has('_containerDescription') then
        result.containerDescriptionElement := ParseString(jsn['containerDescription'], jsn.vObj['_containerDescription']);{q}
    if jsn.has('containerCapacity') then
        result.containerCapacity := ParseQuantity(jsn.vObj['containerCapacity']);{q3}
    if jsn.has('containerMinimumVolume') then
        result.containerMinimumVolume := ParseQuantity(jsn.vObj['containerMinimumVolume']);{q3}
    if jsn.has('containerAdditive') then
      iterateArray(jsn.vArr['containerAdditive'], result.containerAdditiveList, parseSpecimenDefinitionSpecimenToLabContainerAdditive);
    if jsn.has('containerPreparation') or jsn.has('_containerPreparation') then
        result.containerPreparationElement := ParseString(jsn['containerPreparation'], jsn.vObj['_containerPreparation']);{q}
    if jsn.has('requirement') or jsn.has('_requirement') then
        result.requirementElement := ParseString(jsn['requirement'], jsn.vObj['_requirement']);{q}
    if jsn.has('retentionTime') then
        result.retentionTime := ParseDuration(jsn.vObj['retentionTime']);{q3}
    if jsn.has('rejectionCriterion') then
      iterateArray(jsn.vArr['rejectionCriterion'], result.rejectionCriterionList, parseCodeableConcept);
    if jsn.has('handling') then
      iterateArray(jsn.vArr['handling'], result.handlingList, parseSpecimenDefinitionSpecimenToLabHandling);
end;

procedure TFHIRJsonComposer.ComposeSpecimenDefinitionSpecimenToLab(json : TJSONWriter; name : string; elem : TFhirSpecimenDefinitionSpecimenToLab; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'isDerived', elem.isDerivedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'isDerived', elem.isDerivedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'preference', elem.PreferenceElement, CODES_TFhirSpecimenContainedPreferenceEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'preference', elem.PreferenceElement, CODES_TFhirSpecimenContainedPreferenceEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'containerMaterial', elem.containerMaterial); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'containerType', elem.containerType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'containerCap', elem.containerCap); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'containerDescription', elem.containerDescriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'containerDescription', elem.containerDescriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'containerCapacity', elem.containerCapacity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'containerMinimumVolume', elem.containerMinimumVolume); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.containerAdditiveList.Count > 0) then
  begin
    json.valueArray('containerAdditive');
    for i := 0 to elem.containerAdditiveList.Count - 1 do
      ComposeSpecimenDefinitionSpecimenToLabContainerAdditive(json, '', elem.containerAdditiveList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'containerPreparation', elem.containerPreparationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'containerPreparation', elem.containerPreparationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'requirement', elem.requirementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'requirement', elem.requirementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'retentionTime', elem.retentionTime); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.rejectionCriterionList.Count > 0) then
  begin
    json.valueArray('rejectionCriterion');
    for i := 0 to elem.rejectionCriterionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.rejectionCriterionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.handlingList.Count > 0) then
  begin
    json.valueArray('handling');
    for i := 0 to elem.handlingList.Count - 1 do
      ComposeSpecimenDefinitionSpecimenToLabHandling(json, '', elem.handlingList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionSpecimenToLabContainerAdditive(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenDefinitionSpecimenToLabContainerAdditive(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenDefinitionSpecimenToLabContainerAdditive(jsn : TJsonObject) : TFhirSpecimenDefinitionSpecimenToLabContainerAdditive;
begin
  result := TFhirSpecimenDefinitionSpecimenToLabContainerAdditive.create;
  try
    ParseSpecimenDefinitionSpecimenToLabContainerAdditiveProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionSpecimenToLabContainerAdditiveProperties(jsn : TJsonObject; result : TFhirSpecimenDefinitionSpecimenToLabContainerAdditive);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('additiveCodeableConcept') {a4} then
      result.additive := ParseCodeableConcept(jsn.vObj['additiveCodeableConcept']);
    if jsn.has('additiveReference') {a3} then
      result.additive := ParseReference(jsn.vObj['additiveReference']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenDefinitionSpecimenToLabContainerAdditive(json : TJSONWriter; name : string; elem : TFhirSpecimenDefinitionSpecimenToLabContainerAdditive; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.additive is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'additiveCodeableConcept', TFhirCodeableConcept(elem.additive)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.additive is TFhirReference) then
    ComposeReference(json, 'additiveReference', TFhirReference(elem.additive));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionSpecimenToLabHandling(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenDefinitionSpecimenToLabHandling(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenDefinitionSpecimenToLabHandling(jsn : TJsonObject) : TFhirSpecimenDefinitionSpecimenToLabHandling;
begin
  result := TFhirSpecimenDefinitionSpecimenToLabHandling.create;
  try
    ParseSpecimenDefinitionSpecimenToLabHandlingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionSpecimenToLabHandlingProperties(jsn : TJsonObject; result : TFhirSpecimenDefinitionSpecimenToLabHandling);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('conditionSet') then
        result.conditionSet := ParseCodeableConcept(jsn.vObj['conditionSet']);{q3}
    if jsn.has('tempRange') then
        result.tempRange := ParseRange(jsn.vObj['tempRange']);{q3}
    if jsn.has('maxDuration') then
        result.maxDuration := ParseDuration(jsn.vObj['maxDuration']);{q3}
    if jsn.has('lightExposure') or jsn.has('_lightExposure') then
        result.lightExposureElement := ParseString(jsn['lightExposure'], jsn.vObj['_lightExposure']);{q}
    if jsn.has('instruction') or jsn.has('_instruction') then
        result.instructionElement := ParseString(jsn['instruction'], jsn.vObj['_instruction']);{q}
end;

procedure TFHIRJsonComposer.ComposeSpecimenDefinitionSpecimenToLabHandling(json : TJSONWriter; name : string; elem : TFhirSpecimenDefinitionSpecimenToLabHandling; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'conditionSet', elem.conditionSet); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'tempRange', elem.tempRange); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'maxDuration', elem.maxDuration); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lightExposure', elem.lightExposureElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lightExposure', elem.lightExposureElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'instruction', elem.instructionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'instruction', elem.instructionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenDefinition(jsn : TJsonObject) : TFhirSpecimenDefinition;
begin
  result := TFhirSpecimenDefinition.create;
  try
    ParseSpecimenDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionProperties(jsn : TJsonObject; result : TFhirSpecimenDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('typeCollected') then
        result.typeCollected := ParseCodeableConcept(jsn.vObj['typeCollected']);{q3}
    if jsn.has('patientPreparation') or jsn.has('_patientPreparation') then
        result.patientPreparationElement := ParseString(jsn['patientPreparation'], jsn.vObj['_patientPreparation']);{q}
    if jsn.has('timeAspect') or jsn.has('_timeAspect') then
        result.timeAspectElement := ParseString(jsn['timeAspect'], jsn.vObj['_timeAspect']);{q}
    if jsn.has('collection') then
      iterateArray(jsn.vArr['collection'], result.collectionList, parseCodeableConcept);
    if jsn.has('specimenToLab') then
      iterateArray(jsn.vArr['specimenToLab'], result.specimenToLabList, parseSpecimenDefinitionSpecimenToLab);
end;

procedure TFHIRJsonComposer.ComposeSpecimenDefinition(json : TJSONWriter; name : string; elem : TFhirSpecimenDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('typeCollected') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'typeCollected', elem.typeCollected); {a}
  if not elem.noCompose and doCompose('patientPreparation') and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'patientPreparation', elem.patientPreparationElement, false);
  if not elem.noCompose and doCompose('patientPreparation') and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'patientPreparation', elem.patientPreparationElement, false);
  if not elem.noCompose and doCompose('timeAspect') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'timeAspect', elem.timeAspectElement, false);
  if not elem.noCompose and doCompose('timeAspect') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'timeAspect', elem.timeAspectElement, false);
  if not elem.noCompose and doCompose('collection') and (SummaryOption in [soFull, soSummary, soData]) and (elem.collectionList.Count > 0) then
  begin
    json.valueArray('collection');
    for i := 0 to elem.collectionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.collectionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('specimenToLab') and (SummaryOption in [soFull, soData]) and (elem.specimenToLabList.Count > 0) then
  begin
    json.valueArray('specimenToLab');
    for i := 0 to elem.specimenToLabList.Count - 1 do
      ComposeSpecimenDefinitionSpecimenToLab(json, '', elem.specimenToLabList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
procedure TFHIRJsonParser.ParseStructureDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionMapping(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureDefinitionMapping(jsn : TJsonObject) : TFhirStructureDefinitionMapping;
begin
  result := TFhirStructureDefinitionMapping.create;
  try
    ParseStructureDefinitionMappingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionMappingProperties(jsn : TJsonObject; result : TFhirStructureDefinitionMapping);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identity') or jsn.has('_identity') then
        result.identityElement := ParseId(jsn['identity'], jsn.vObj['_identity']);{q}
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := ParseUri(jsn['uri'], jsn.vObj['_uri']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionMapping(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionMapping; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'identity', elem.identityElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'identity', elem.identityElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionSnapshot(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionSnapshot(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureDefinitionSnapshot(jsn : TJsonObject) : TFhirStructureDefinitionSnapshot;
begin
  result := TFhirStructureDefinitionSnapshot.create;
  try
    ParseStructureDefinitionSnapshotProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionSnapshotProperties(jsn : TJsonObject; result : TFhirStructureDefinitionSnapshot);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], result.elementList, parseElementDefinition);
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionSnapshot(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionSnapshot; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.elementList.Count > 0) then
  begin
    json.valueArray('element');
    for i := 0 to elem.elementList.Count - 1 do
      ComposeElementDefinition(json, '', elem.elementList[i]); {z - ElementDefinition}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionDifferential(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionDifferential(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureDefinitionDifferential(jsn : TJsonObject) : TFhirStructureDefinitionDifferential;
begin
  result := TFhirStructureDefinitionDifferential.create;
  try
    ParseStructureDefinitionDifferentialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionDifferentialProperties(jsn : TJsonObject; result : TFhirStructureDefinitionDifferential);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], result.elementList, parseElementDefinition);
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionDifferential(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionDifferential; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.elementList.Count > 0) then
  begin
    json.valueArray('element');
    for i := 0 to elem.elementList.Count - 1 do
      ComposeElementDefinition(json, '', elem.elementList[i]); {z - ElementDefinition}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureDefinition(jsn : TJsonObject) : TFhirStructureDefinition;
begin
  result := TFhirStructureDefinition.create;
  try
    ParseStructureDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionProperties(jsn : TJsonObject; result : TFhirStructureDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('keyword') then
      iterateArray(jsn.vArr['keyword'], result.keywordList, parseCoding);
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        result.fhirVersionElement := ParseId(jsn['fhirVersion'], jsn.vObj['_fhirVersion']);{q}
    if jsn.has('mapping') then
      iterateArray(jsn.vArr['mapping'], result.mappingList, parseStructureDefinitionMapping);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn['kind'], jsn.vObj['_kind'], CODES_TFhirStructureDefinitionKindEnum, SYSTEMS_TFhirStructureDefinitionKindEnum);
    if jsn.has('abstract') or jsn.has('_abstract') then
        result.abstractElement := ParseBoolean(jsn['abstract'], jsn.vObj['_abstract']);{q}
    if jsn.has('contextType') or jsn.has('_contextType')  then
      result.contextTypeElement := parseEnum(jsn.path+'/contextType', jsn['contextType'], jsn.vObj['_contextType'], CODES_TFhirExtensionContextEnum, SYSTEMS_TFhirExtensionContextEnum);
      if jsn.has('context') or jsn.has('_context') then
      iteratePrimitiveArray(jsn.vArr['context'], jsn.vArr['_context'], result.contextList, parseString);
      if jsn.has('contextInvariant') or jsn.has('_contextInvariant') then
      iteratePrimitiveArray(jsn.vArr['contextInvariant'], jsn.vArr['_contextInvariant'], result.contextInvariantList, parseString);
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := ParseCode(jsn['type'], jsn.vObj['_type']);{q}
    if jsn.has('baseDefinition') or jsn.has('_baseDefinition') then
        result.baseDefinitionElement := ParseUri(jsn['baseDefinition'], jsn.vObj['_baseDefinition']);{q}
    if jsn.has('derivation') or jsn.has('_derivation')  then
      result.derivationElement := parseEnum(jsn.path+'/derivation', jsn['derivation'], jsn.vObj['_derivation'], CODES_TFhirTypeDerivationRuleEnum, SYSTEMS_TFhirTypeDerivationRuleEnum);
    if jsn.has('snapshot') then
        result.snapshot := ParseStructureDefinitionSnapshot(jsn.vObj['snapshot']);{q3}
    if jsn.has('differential') then
        result.differential := ParseStructureDefinitionDifferential(jsn.vObj['differential']);{q3}
end;

procedure TFHIRJsonComposer.ComposeStructureDefinition(json : TJSONWriter; name : string; elem : TFhirStructureDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('keyword') and (SummaryOption in [soFull, soSummary, soData]) and (elem.keywordList.Count > 0) then
  begin
    json.valueArray('keyword');
    for i := 0 to elem.keywordList.Count - 1 do
      ComposeCoding(json, '', elem.keywordList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('fhirVersion') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'fhirVersion', elem.fhirVersionElement, false);
  if not elem.noCompose and doCompose('mapping') and (SummaryOption in [soFull, soData]) and (elem.mappingList.Count > 0) then
  begin
    json.valueArray('mapping');
    for i := 0 to elem.mappingList.Count - 1 do
      ComposeStructureDefinitionMapping(json, '', elem.mappingList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirStructureDefinitionKindEnum, false);
  if not elem.noCompose and doCompose('kind') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirStructureDefinitionKindEnum, false);
  if not elem.noCompose and doCompose('abstract') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'abstract', elem.abstractElement, false);
  if not elem.noCompose and doCompose('abstract') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'abstract', elem.abstractElement, false);
  if not elem.noCompose and doCompose('contextType') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'contextType', elem.ContextTypeElement, CODES_TFhirExtensionContextEnum, false);
  if not elem.noCompose and doCompose('contextType') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'contextType', elem.ContextTypeElement, CODES_TFhirExtensionContextEnum, false);
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contextList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.contextList.Count - 1 do
    begin
      ext := ext or ((elem.contextList[i].id <> '') or (elem.contextList[i].hasExtensionList) {no-comments or (elem.contextList[i].hasComments)});
      val := val or (elem.contextList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('context');
      for i := 0 to elem.contextList.Count - 1 do
        ComposeStringValue(json, '',elem.contextList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_context');
      for i := 0 to elem.contextList.Count - 1 do
        ComposeStringProps(json, '',elem.contextList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('contextInvariant') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contextInvariantList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.contextInvariantList.Count - 1 do
    begin
      ext := ext or ((elem.contextInvariantList[i].id <> '') or (elem.contextInvariantList[i].hasExtensionList) {no-comments or (elem.contextInvariantList[i].hasComments)});
      val := val or (elem.contextInvariantList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('contextInvariant');
      for i := 0 to elem.contextInvariantList.Count - 1 do
        ComposeStringValue(json, '',elem.contextInvariantList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_contextInvariant');
      for i := 0 to elem.contextInvariantList.Count - 1 do
        ComposeStringProps(json, '',elem.contextInvariantList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'type', elem.type_Element, false);
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'type', elem.type_Element, false);
  if not elem.noCompose and doCompose('baseDefinition') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'baseDefinition', elem.baseDefinitionElement, false);
  if not elem.noCompose and doCompose('baseDefinition') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'baseDefinition', elem.baseDefinitionElement, false);
  if not elem.noCompose and doCompose('derivation') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'derivation', elem.DerivationElement, CODES_TFhirTypeDerivationRuleEnum, false);
  if not elem.noCompose and doCompose('derivation') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'derivation', elem.DerivationElement, CODES_TFhirTypeDerivationRuleEnum, false);
  if not elem.noCompose and doCompose('snapshot') and (SummaryOption in [soFull, soData]) then
    ComposeStructureDefinitionSnapshot(json, 'snapshot', elem.snapshot); {a}
  if not elem.noCompose and doCompose('differential') and (SummaryOption in [soFull, soData]) then
    ComposeStructureDefinitionDifferential(json, 'differential', elem.differential); {a}
end;

{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
procedure TFHIRJsonParser.ParseStructureMapStructure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapStructure(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapStructure(jsn : TJsonObject) : TFhirStructureMapStructure;
begin
  result := TFhirStructureMapStructure.create;
  try
    ParseStructureMapStructureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapStructureProperties(jsn : TJsonObject; result : TFhirStructureMapStructure);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirMapModelModeEnum, SYSTEMS_TFhirMapModelModeEnum);
    if jsn.has('alias') or jsn.has('_alias') then
        result.aliasElement := ParseString(jsn['alias'], jsn.vObj['_alias']);{q}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureMapStructure(json : TJSONWriter; name : string; elem : TFhirStructureMapStructure; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirMapModelModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirMapModelModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'alias', elem.aliasElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'alias', elem.aliasElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroup(jsn : TJsonObject) : TFhirStructureMapGroup;
begin
  result := TFhirStructureMapGroup.create;
  try
    ParseStructureMapGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupProperties(jsn : TJsonObject; result : TFhirStructureMapGroup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseId(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('extends') or jsn.has('_extends') then
        result.extendsElement := ParseId(jsn['extends'], jsn.vObj['_extends']);{q}
    if jsn.has('typeMode') or jsn.has('_typeMode')  then
      result.typeModeElement := parseEnum(jsn.path+'/typeMode', jsn['typeMode'], jsn.vObj['_typeMode'], CODES_TFhirMapGroupTypeModeEnum, SYSTEMS_TFhirMapGroupTypeModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('input') then
      iterateArray(jsn.vArr['input'], result.inputList, parseStructureMapGroupInput);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseStructureMapGroupRule);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroup(json : TJSONWriter; name : string; elem : TFhirStructureMapGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'extends', elem.extendsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'extends', elem.extendsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'typeMode', elem.TypeModeElement, CODES_TFhirMapGroupTypeModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'typeMode', elem.TypeModeElement, CODES_TFhirMapGroupTypeModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.inputList.Count > 0) then
  begin
    json.valueArray('input');
    for i := 0 to elem.inputList.Count - 1 do
      ComposeStructureMapGroupInput(json, '', elem.inputList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(json, '', elem.ruleList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupInput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupInput(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupInput(jsn : TJsonObject) : TFhirStructureMapGroupInput;
begin
  result := TFhirStructureMapGroupInput.create;
  try
    ParseStructureMapGroupInputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupInputProperties(jsn : TJsonObject; result : TFhirStructureMapGroupInput);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseId(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := ParseString(jsn['type'], jsn.vObj['_type']);{q}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn['mode'], jsn.vObj['_mode'], CODES_TFhirMapInputModeEnum, SYSTEMS_TFhirMapInputModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupInput(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupInput; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirMapInputModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirMapInputModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRule(jsn : TJsonObject) : TFhirStructureMapGroupRule;
begin
  result := TFhirStructureMapGroupRule.create;
  try
    ParseStructureMapGroupRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseId(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], result.sourceList, parseStructureMapGroupRuleSource);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseStructureMapGroupRuleTarget);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseStructureMapGroupRule);
    if jsn.has('dependent') then
      iterateArray(jsn.vArr['dependent'], result.dependentList, parseStructureMapGroupRuleDependent);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := ParseString(jsn['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRule(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.sourceList.Count > 0) then
  begin
    json.valueArray('source');
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeStructureMapGroupRuleSource(json, '', elem.sourceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeStructureMapGroupRuleTarget(json, '', elem.targetList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(json, '', elem.ruleList[i]); {z - @StructureMap.group.rule}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.dependentList.Count > 0) then
  begin
    json.valueArray('dependent');
    for i := 0 to elem.dependentList.Count - 1 do
      ComposeStructureMapGroupRuleDependent(json, '', elem.dependentList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleSource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleSource(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleSource(jsn : TJsonObject) : TFhirStructureMapGroupRuleSource;
begin
  result := TFhirStructureMapGroupRuleSource.create;
  try
    ParseStructureMapGroupRuleSourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleSourceProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleSource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('context') or jsn.has('_context') then
        result.contextElement := ParseId(jsn['context'], jsn.vObj['_context']);{q}
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := ParseInteger(jsn['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := ParseString(jsn['max'], jsn.vObj['_max']);{q}
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := ParseString(jsn['type'], jsn.vObj['_type']);{q}
    if jsn.has('defaultValueCode') or jsn.has('_defaultValueCode') then
      result.defaultValue := parseCode(jsn['defaultValueCode'], jsn.vObj['_defaultValueCode']);
    if jsn.has('defaultValueId') or jsn.has('_defaultValueId') then
      result.defaultValue := parseId(jsn['defaultValueId'], jsn.vObj['_defaultValueId']);
    if jsn.has('defaultValueMarkdown') or jsn.has('_defaultValueMarkdown') then
      result.defaultValue := parseMarkdown(jsn['defaultValueMarkdown'], jsn.vObj['_defaultValueMarkdown']);
    if jsn.has('defaultValueOid') or jsn.has('_defaultValueOid') then
      result.defaultValue := parseOid(jsn['defaultValueOid'], jsn.vObj['_defaultValueOid']);
    if jsn.has('defaultValuePositiveInt') or jsn.has('_defaultValuePositiveInt') then
      result.defaultValue := parsePositiveInt(jsn['defaultValuePositiveInt'], jsn.vObj['_defaultValuePositiveInt']);
    if jsn.has('defaultValueUnsignedInt') or jsn.has('_defaultValueUnsignedInt') then
      result.defaultValue := parseUnsignedInt(jsn['defaultValueUnsignedInt'], jsn.vObj['_defaultValueUnsignedInt']);
    if jsn.has('defaultValueAddress') {a4} then
      result.defaultValue := ParseAddress(jsn.vObj['defaultValueAddress']);
    if jsn.has('defaultValueAge') {a4} then
      result.defaultValue := ParseAge(jsn.vObj['defaultValueAge']);
    if jsn.has('defaultValueAnnotation') {a4} then
      result.defaultValue := ParseAnnotation(jsn.vObj['defaultValueAnnotation']);
    if jsn.has('defaultValueAttachment') {a4} then
      result.defaultValue := ParseAttachment(jsn.vObj['defaultValueAttachment']);
    if jsn.has('defaultValueCodeableConcept') {a4} then
      result.defaultValue := ParseCodeableConcept(jsn.vObj['defaultValueCodeableConcept']);
    if jsn.has('defaultValueCoding') {a4} then
      result.defaultValue := ParseCoding(jsn.vObj['defaultValueCoding']);
    if jsn.has('defaultValueContactPoint') {a4} then
      result.defaultValue := ParseContactPoint(jsn.vObj['defaultValueContactPoint']);
    if jsn.has('defaultValueCount') {a4} then
      result.defaultValue := ParseCount(jsn.vObj['defaultValueCount']);
    if jsn.has('defaultValueDistance') {a4} then
      result.defaultValue := ParseDistance(jsn.vObj['defaultValueDistance']);
    if jsn.has('defaultValueDuration') {a4} then
      result.defaultValue := ParseDuration(jsn.vObj['defaultValueDuration']);
    if jsn.has('defaultValueHumanName') {a4} then
      result.defaultValue := ParseHumanName(jsn.vObj['defaultValueHumanName']);
    if jsn.has('defaultValueIdentifier') {a4} then
      result.defaultValue := ParseIdentifier(jsn.vObj['defaultValueIdentifier']);
    if jsn.has('defaultValueMoney') {a4} then
      result.defaultValue := ParseMoney(jsn.vObj['defaultValueMoney']);
    if jsn.has('defaultValuePeriod') {a4} then
      result.defaultValue := ParsePeriod(jsn.vObj['defaultValuePeriod']);
    if jsn.has('defaultValueQuantity') {a4} then
      result.defaultValue := ParseQuantity(jsn.vObj['defaultValueQuantity']);
    if jsn.has('defaultValueRange') {a4} then
      result.defaultValue := ParseRange(jsn.vObj['defaultValueRange']);
    if jsn.has('defaultValueRatio') {a4} then
      result.defaultValue := ParseRatio(jsn.vObj['defaultValueRatio']);
    if jsn.has('defaultValueReference') {a4} then
      result.defaultValue := ParseReference(jsn.vObj['defaultValueReference']);
    if jsn.has('defaultValueSampledData') {a4} then
      result.defaultValue := ParseSampledData(jsn.vObj['defaultValueSampledData']);
    if jsn.has('defaultValueSignature') {a4} then
      result.defaultValue := ParseSignature(jsn.vObj['defaultValueSignature']);
    if jsn.has('defaultValueTiming') {a4} then
      result.defaultValue := ParseTiming(jsn.vObj['defaultValueTiming']);
    if jsn.has('defaultValueDosage') {a4} then
      result.defaultValue := ParseDosage(jsn.vObj['defaultValueDosage']);
    if jsn.has('defaultValueContactDetail') {a4} then
      result.defaultValue := ParseContactDetail(jsn.vObj['defaultValueContactDetail']);
    if jsn.has('defaultValueContributor') {a4} then
      result.defaultValue := ParseContributor(jsn.vObj['defaultValueContributor']);
    if jsn.has('defaultValueDataRequirement') {a4} then
      result.defaultValue := ParseDataRequirement(jsn.vObj['defaultValueDataRequirement']);
    if jsn.has('defaultValueParameterDefinition') {a4} then
      result.defaultValue := ParseParameterDefinition(jsn.vObj['defaultValueParameterDefinition']);
    if jsn.has('defaultValueRelatedArtifact') {a4} then
      result.defaultValue := ParseRelatedArtifact(jsn.vObj['defaultValueRelatedArtifact']);
    if jsn.has('defaultValueTriggerDefinition') {a4} then
      result.defaultValue := ParseTriggerDefinition(jsn.vObj['defaultValueTriggerDefinition']);
    if jsn.has('defaultValueUsageContext') {a4} then
      result.defaultValue := ParseUsageContext(jsn.vObj['defaultValueUsageContext']);
    if jsn.has('defaultValueMeta') {a4} then
      result.defaultValue := ParseMeta(jsn.vObj['defaultValueMeta']);
    if jsn.has('defaultValueBase64Binary') or jsn.has('_defaultValueBase64Binary') then
      result.defaultValue := parseBase64Binary(jsn['defaultValueBase64Binary'], jsn.vObj['_defaultValueBase64Binary']);
    if jsn.has('defaultValueBoolean') or jsn.has('_defaultValueBoolean') then
      result.defaultValue := parseBoolean(jsn['defaultValueBoolean'], jsn.vObj['_defaultValueBoolean']);
    if jsn.has('defaultValueDate') or jsn.has('_defaultValueDate') then
      result.defaultValue := parseDate(jsn['defaultValueDate'], jsn.vObj['_defaultValueDate']);
    if jsn.has('defaultValueDateTime') or jsn.has('_defaultValueDateTime') then
      result.defaultValue := parseDateTime(jsn['defaultValueDateTime'], jsn.vObj['_defaultValueDateTime']);
    if jsn.has('defaultValueDecimal') or jsn.has('_defaultValueDecimal') then
      result.defaultValue := parseDecimal(jsn['defaultValueDecimal'], jsn.vObj['_defaultValueDecimal']);
    if jsn.has('defaultValueInstant') or jsn.has('_defaultValueInstant') then
      result.defaultValue := parseInstant(jsn['defaultValueInstant'], jsn.vObj['_defaultValueInstant']);
    if jsn.has('defaultValueInteger') or jsn.has('_defaultValueInteger') then
      result.defaultValue := parseInteger(jsn['defaultValueInteger'], jsn.vObj['_defaultValueInteger']);
    if jsn.has('defaultValueString') or jsn.has('_defaultValueString') then
      result.defaultValue := parseString(jsn['defaultValueString'], jsn.vObj['_defaultValueString']);
    if jsn.has('defaultValueTime') or jsn.has('_defaultValueTime') then
      result.defaultValue := parseTime(jsn['defaultValueTime'], jsn.vObj['_defaultValueTime']);
    if jsn.has('defaultValueUri') or jsn.has('_defaultValueUri') then
      result.defaultValue := parseUri(jsn['defaultValueUri'], jsn.vObj['_defaultValueUri']);
    if jsn.has('element') or jsn.has('_element') then
        result.elementElement := ParseString(jsn['element'], jsn.vObj['_element']);{q}
    if jsn.has('listMode') or jsn.has('_listMode')  then
      result.listModeElement := parseEnum(jsn.path+'/listMode', jsn['listMode'], jsn.vObj['_listMode'], CODES_TFhirMapSourceListModeEnum, SYSTEMS_TFhirMapSourceListModeEnum);
    if jsn.has('variable') or jsn.has('_variable') then
        result.variableElement := ParseId(jsn['variable'], jsn.vObj['_variable']);{q}
    if jsn.has('condition') or jsn.has('_condition') then
        result.conditionElement := ParseString(jsn['condition'], jsn.vObj['_condition']);{q}
    if jsn.has('check') or jsn.has('_check') then
        result.checkElement := ParseString(jsn['check'], jsn.vObj['_check']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleSource(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleSource; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'context', elem.contextElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'context', elem.contextElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'min', elem.minElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'defaultValueCode', TFhirCode(elem.defaultValue), false);
    ComposeCodeProps(json, 'defaultValueCode', TFhirCode(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirId) then 
  begin
    ComposeIdValue(json, 'defaultValueId', TFhirId(elem.defaultValue), false);
    ComposeIdProps(json, 'defaultValueId', TFhirId(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue), false);
    ComposeMarkdownProps(json, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirOid) then 
  begin
    ComposeOidValue(json, 'defaultValueOid', TFhirOid(elem.defaultValue), false);
    ComposeOidProps(json, 'defaultValueOid', TFhirOid(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue), false);
    ComposePositiveIntProps(json, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue), false);
    ComposeUnsignedIntProps(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAddress) then 
    ComposeAddress(json, 'defaultValueAddress', TFhirAddress(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAge) then 
    ComposeAge(json, 'defaultValueAge', TFhirAge(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAnnotation) then 
    ComposeAnnotation(json, 'defaultValueAnnotation', TFhirAnnotation(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAttachment) then 
    ComposeAttachment(json, 'defaultValueAttachment', TFhirAttachment(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'defaultValueCodeableConcept', TFhirCodeableConcept(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCoding) then 
    ComposeCoding(json, 'defaultValueCoding', TFhirCoding(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirContactPoint) then 
    ComposeContactPoint(json, 'defaultValueContactPoint', TFhirContactPoint(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCount) then 
    ComposeCount(json, 'defaultValueCount', TFhirCount(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDistance) then 
    ComposeDistance(json, 'defaultValueDistance', TFhirDistance(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDuration) then 
    ComposeDuration(json, 'defaultValueDuration', TFhirDuration(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirHumanName) then 
    ComposeHumanName(json, 'defaultValueHumanName', TFhirHumanName(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirIdentifier) then 
    ComposeIdentifier(json, 'defaultValueIdentifier', TFhirIdentifier(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirMoney) then 
    ComposeMoney(json, 'defaultValueMoney', TFhirMoney(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirPeriod) then 
    ComposePeriod(json, 'defaultValuePeriod', TFhirPeriod(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirQuantity) then 
    ComposeQuantity(json, 'defaultValueQuantity', TFhirQuantity(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirRange) then 
    ComposeRange(json, 'defaultValueRange', TFhirRange(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirRatio) then 
    ComposeRatio(json, 'defaultValueRatio', TFhirRatio(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirReference) then 
    ComposeReference(json, 'defaultValueReference', TFhirReference(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirSampledData) then 
    ComposeSampledData(json, 'defaultValueSampledData', TFhirSampledData(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirSignature) then 
    ComposeSignature(json, 'defaultValueSignature', TFhirSignature(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirTiming) then 
    ComposeTiming(json, 'defaultValueTiming', TFhirTiming(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDosage) then 
    ComposeDosage(json, 'defaultValueDosage', TFhirDosage(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirContactDetail) then 
    ComposeContactDetail(json, 'defaultValueContactDetail', TFhirContactDetail(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirContributor) then 
    ComposeContributor(json, 'defaultValueContributor', TFhirContributor(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'defaultValueDataRequirement', TFhirDataRequirement(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'defaultValueParameterDefinition', TFhirParameterDefinition(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'defaultValueRelatedArtifact', TFhirRelatedArtifact(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'defaultValueTriggerDefinition', TFhirTriggerDefinition(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUsageContext) then 
    ComposeUsageContext(json, 'defaultValueUsageContext', TFhirUsageContext(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirMeta) then 
    ComposeMeta(json, 'defaultValueMeta', TFhirMeta(elem.defaultValue)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue), false);
    ComposeBase64BinaryProps(json, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue), false);
    ComposeBooleanProps(json, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'defaultValueDate', TFhirDate(elem.defaultValue), false);
    ComposeDateProps(json, 'defaultValueDate', TFhirDate(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue), false);
    ComposeDateTimeProps(json, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue), false);
    ComposeDecimalProps(json, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'defaultValueInstant', TFhirInstant(elem.defaultValue), false);
    ComposeInstantProps(json, 'defaultValueInstant', TFhirInstant(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'defaultValueInteger', TFhirInteger(elem.defaultValue), false);
    ComposeIntegerProps(json, 'defaultValueInteger', TFhirInteger(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirString) then 
  begin
    ComposeStringValue(json, 'defaultValueString', TFhirString(elem.defaultValue), false);
    ComposeStringProps(json, 'defaultValueString', TFhirString(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'defaultValueTime', TFhirTime(elem.defaultValue), false);
    ComposeTimeProps(json, 'defaultValueTime', TFhirTime(elem.defaultValue), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUri) then 
  begin
    ComposeUriValue(json, 'defaultValueUri', TFhirUri(elem.defaultValue), false);
    ComposeUriProps(json, 'defaultValueUri', TFhirUri(elem.defaultValue), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'element', elem.elementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'element', elem.elementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'listMode', elem.ListModeElement, CODES_TFhirMapSourceListModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'listMode', elem.ListModeElement, CODES_TFhirMapSourceListModeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'variable', elem.variableElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'variable', elem.variableElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'condition', elem.conditionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'condition', elem.conditionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'check', elem.checkElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'check', elem.checkElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleTarget(jsn : TJsonObject) : TFhirStructureMapGroupRuleTarget;
begin
  result := TFhirStructureMapGroupRuleTarget.create;
  try
    ParseStructureMapGroupRuleTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTargetProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('context') or jsn.has('_context') then
        result.contextElement := ParseId(jsn['context'], jsn.vObj['_context']);{q}
    if jsn.has('contextType') or jsn.has('_contextType')  then
      result.contextTypeElement := parseEnum(jsn.path+'/contextType', jsn['contextType'], jsn.vObj['_contextType'], CODES_TFhirMapContextTypeEnum, SYSTEMS_TFhirMapContextTypeEnum);
    if jsn.has('element') or jsn.has('_element') then
        result.elementElement := ParseString(jsn['element'], jsn.vObj['_element']);{q}
    if jsn.has('variable') or jsn.has('_variable') then
        result.variableElement := ParseId(jsn['variable'], jsn.vObj['_variable']);{q}
    if jsn.has('listMode') or jsn.has('_listMode') then
      iterateEnumArray(jsn.vArr['listMode'], jsn.vArr['_listMode'], jsn.path+'/listMode', result.listModeList, parseEnum, CODES_TFhirMapTargetListModeEnum, SYSTEMS_TFhirMapTargetListModeEnum);
    if jsn.has('listRuleId') or jsn.has('_listRuleId') then
        result.listRuleIdElement := ParseId(jsn['listRuleId'], jsn.vObj['_listRuleId']);{q}
    if jsn.has('transform') or jsn.has('_transform')  then
      result.transformElement := parseEnum(jsn.path+'/transform', jsn['transform'], jsn.vObj['_transform'], CODES_TFhirMapTransformEnum, SYSTEMS_TFhirMapTransformEnum);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseStructureMapGroupRuleTargetParameter);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleTarget(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleTarget; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'context', elem.contextElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'context', elem.contextElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'contextType', elem.ContextTypeElement, CODES_TFhirMapContextTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'contextType', elem.ContextTypeElement, CODES_TFhirMapContextTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'element', elem.elementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'element', elem.elementElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'variable', elem.variableElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'variable', elem.variableElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.listModeList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.listModeList.Count - 1 do
    begin
      val := val or (elem.listModeList[i].hasPrimitiveValue);
      ext := ext or ((elem.listModeList[i].id <> '') or (elem.listModeList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('listMode');
      for i := 0 to elem.listModeList.Count - 1 do
        ComposeEnumValue(json, '', elem.listModeList[i], CODES_TFhirMapTargetListModeEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_listMode');
      for i := 0 to elem.listModeList.Count - 1 do
        ComposeEnumProps(json, '', elem.listModeList[i], CODES_TFhirMapTargetListModeEnum, true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'listRuleId', elem.listRuleIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'listRuleId', elem.listRuleIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'transform', elem.TransformElement, CODES_TFhirMapTransformEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'transform', elem.TransformElement, CODES_TFhirMapTransformEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeStructureMapGroupRuleTargetParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleTargetParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject) : TFhirStructureMapGroupRuleTargetParameter;
begin
  result := TFhirStructureMapGroupRuleTargetParameter.create;
  try
    ParseStructureMapGroupRuleTargetParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTargetParameterProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleTargetParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn['valueDecimal'], jsn.vObj['_valueDecimal']);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleTargetParameter(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleTargetParameter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleDependent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleDependent(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleDependent(jsn : TJsonObject) : TFhirStructureMapGroupRuleDependent;
begin
  result := TFhirStructureMapGroupRuleDependent.create;
  try
    ParseStructureMapGroupRuleDependentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleDependentProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleDependent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseId(jsn['name'], jsn.vObj['_name']);{q}
      if jsn.has('variable') or jsn.has('_variable') then
      iteratePrimitiveArray(jsn.vArr['variable'], jsn.vArr['_variable'], result.variableList, parseString);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleDependent(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleDependent; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.variableList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.variableList.Count - 1 do
    begin
      ext := ext or ((elem.variableList[i].id <> '') or (elem.variableList[i].hasExtensionList) {no-comments or (elem.variableList[i].hasComments)});
      val := val or (elem.variableList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('variable');
      for i := 0 to elem.variableList.Count - 1 do
        ComposeStringValue(json, '',elem.variableList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_variable');
      for i := 0 to elem.variableList.Count - 1 do
        ComposeStringProps(json, '',elem.variableList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMap(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMap(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMap(jsn : TJsonObject) : TFhirStructureMap;
begin
  result := TFhirStructureMap.create;
  try
    ParseStructureMapProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapProperties(jsn : TJsonObject; result : TFhirStructureMap);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('structure') then
      iterateArray(jsn.vArr['structure'], result.structureList, parseStructureMapStructure);
      if jsn.has('import') or jsn.has('_import') then
      iteratePrimitiveArray(jsn.vArr['import'], jsn.vArr['_import'], result.importList, parseUri);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseStructureMapGroup);
end;

procedure TFHIRJsonComposer.ComposeStructureMap(json : TJSONWriter; name : string; elem : TFhirStructureMap; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('structure') and (SummaryOption in [soFull, soSummary, soData]) and (elem.structureList.Count > 0) then
  begin
    json.valueArray('structure');
    for i := 0 to elem.structureList.Count - 1 do
      ComposeStructureMapStructure(json, '', elem.structureList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('import') and (SummaryOption in [soFull, soSummary, soData]) and (elem.importList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.importList.Count - 1 do
    begin
      ext := ext or ((elem.importList[i].id <> '') or (elem.importList[i].hasExtensionList) {no-comments or (elem.importList[i].hasComments)});
      val := val or (elem.importList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('import');
      for i := 0 to elem.importList.Count - 1 do
        ComposeUriValue(json, '',elem.importList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_import');
      for i := 0 to elem.importList.Count - 1 do
        ComposeUriProps(json, '',elem.importList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('group') and (SummaryOption in [soFull, soSummary, soData]) and (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeStructureMapGroup(json, '', elem.groupList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
procedure TFHIRJsonParser.ParseSubscriptionChannel(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionChannel(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubscriptionChannel(jsn : TJsonObject) : TFhirSubscriptionChannel;
begin
  result := TFhirSubscriptionChannel.create;
  try
    ParseSubscriptionChannelProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionChannelProperties(jsn : TJsonObject; result : TFhirSubscriptionChannel);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirSubscriptionChannelTypeEnum, SYSTEMS_TFhirSubscriptionChannelTypeEnum);
    if jsn.has('endpoint') or jsn.has('_endpoint') then
        result.endpointElement := ParseUri(jsn['endpoint'], jsn.vObj['_endpoint']);{q}
    if jsn.has('payload') or jsn.has('_payload') then
        result.payloadElement := ParseString(jsn['payload'], jsn.vObj['_payload']);{q}
      if jsn.has('header') or jsn.has('_header') then
      iteratePrimitiveArray(jsn.vArr['header'], jsn.vArr['_header'], result.headerList, parseString);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionChannel(json : TJSONWriter; name : string; elem : TFhirSubscriptionChannel; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirSubscriptionChannelTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirSubscriptionChannelTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'endpoint', elem.endpointElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'endpoint', elem.endpointElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'payload', elem.payloadElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'payload', elem.payloadElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.headerList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.headerList.Count - 1 do
    begin
      ext := ext or ((elem.headerList[i].id <> '') or (elem.headerList[i].hasExtensionList) {no-comments or (elem.headerList[i].hasComments)});
      val := val or (elem.headerList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('header');
      for i := 0 to elem.headerList.Count - 1 do
        ComposeStringValue(json, '',elem.headerList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_header');
      for i := 0 to elem.headerList.Count - 1 do
        ComposeStringProps(json, '',elem.headerList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubscription(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscription(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubscription(jsn : TJsonObject) : TFhirSubscription;
begin
  result := TFhirSubscription.create;
  try
    ParseSubscriptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionProperties(jsn : TJsonObject; result : TFhirSubscription);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirSubscriptionStatusEnum, SYSTEMS_TFhirSubscriptionStatusEnum);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactPoint);
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := ParseInstant(jsn['end'], jsn.vObj['_end']);{q}
    if jsn.has('reason') or jsn.has('_reason') then
        result.reasonElement := ParseString(jsn['reason'], jsn.vObj['_reason']);{q}
    if jsn.has('criteria') or jsn.has('_criteria') then
        result.criteriaElement := ParseString(jsn['criteria'], jsn.vObj['_criteria']);{q}
    if jsn.has('error') or jsn.has('_error') then
        result.errorElement := ParseString(jsn['error'], jsn.vObj['_error']);{q}
    if jsn.has('channel') then
        result.channel := ParseSubscriptionChannel(jsn.vObj['channel']);{q3}
    if jsn.has('tag') then
      iterateArray(jsn.vArr['tag'], result.tagList, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeSubscription(json : TJSONWriter; name : string; elem : TFhirSubscription; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSubscriptionStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSubscriptionStatusEnum, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(json, '', elem.contactList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('end_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'end', elem.end_Element, false);
  if not elem.noCompose and doCompose('end_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'end', elem.end_Element, false);
  if not elem.noCompose and doCompose('reason') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'reason', elem.reasonElement, false);
  if not elem.noCompose and doCompose('reason') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'reason', elem.reasonElement, false);
  if not elem.noCompose and doCompose('criteria') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'criteria', elem.criteriaElement, false);
  if not elem.noCompose and doCompose('criteria') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'criteria', elem.criteriaElement, false);
  if not elem.noCompose and doCompose('error') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'error', elem.errorElement, false);
  if not elem.noCompose and doCompose('error') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'error', elem.errorElement, false);
  if not elem.noCompose and doCompose('channel') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubscriptionChannel(json, 'channel', elem.channel); {a}
  if not elem.noCompose and doCompose('tag') and (SummaryOption in [soFull, soSummary, soData]) and (elem.tagList.Count > 0) then
  begin
    json.valueArray('tag');
    for i := 0 to elem.tagList.Count - 1 do
      ComposeCoding(json, '', elem.tagList[i]); {z - Coding}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
procedure TFHIRJsonParser.ParseSubstanceInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceInstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceInstance(jsn : TJsonObject) : TFhirSubstanceInstance;
begin
  result := TFhirSubstanceInstance.create;
  try
    ParseSubstanceInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceInstanceProperties(jsn : TJsonObject; result : TFhirSubstanceInstance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('expiry') or jsn.has('_expiry') then
        result.expiryElement := ParseDateTime(jsn['expiry'], jsn.vObj['_expiry']);{q}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstanceInstance(json : TJSONWriter; name : string; elem : TFhirSubstanceInstance; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'expiry', elem.expiryElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'expiry', elem.expiryElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceIngredient(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceIngredient(jsn : TJsonObject) : TFhirSubstanceIngredient;
begin
  result := TFhirSubstanceIngredient.create;
  try
    ParseSubstanceIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceIngredientProperties(jsn : TJsonObject; result : TFhirSubstanceIngredient);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('quantity') then
        result.quantity := ParseRatio(jsn.vObj['quantity']);{q3}
    if jsn.has('substanceCodeableConcept') {a4} then
      result.substance := ParseCodeableConcept(jsn.vObj['substanceCodeableConcept']);
    if jsn.has('substanceReference') {a3} then
      result.substance := ParseReference(jsn.vObj['substanceReference']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceIngredient(json : TJSONWriter; name : string; elem : TFhirSubstanceIngredient; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.substance is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'substanceCodeableConcept', TFhirCodeableConcept(elem.substance)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.substance is TFhirReference) then
    ComposeReference(json, 'substanceReference', TFhirReference(elem.substance));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstance(jsn : TJsonObject) : TFhirSubstance;
begin
  result := TFhirSubstance.create;
  try
    ParseSubstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceProperties(jsn : TJsonObject; result : TFhirSubstance);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirSubstanceStatusEnum, SYSTEMS_TFhirSubstanceStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], result.instanceList, parseSubstanceInstance);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], result.ingredientList, parseSubstanceIngredient);
end;

procedure TFHIRJsonComposer.ComposeSubstance(json : TJSONWriter; name : string; elem : TFhirSubstance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSubstanceStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSubstanceStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('instance') and (SummaryOption in [soFull, soSummary, soData]) and (elem.instanceList.Count > 0) then
  begin
    json.valueArray('instance');
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeSubstanceInstance(json, '', elem.instanceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('ingredient') and (SummaryOption in [soFull, soSummary, soData]) and (elem.ingredientList.Count > 0) then
  begin
    json.valueArray('ingredient');
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeSubstanceIngredient(json, '', elem.ingredientList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
procedure TFHIRJsonParser.ParseSubstancePolymerMonomerSet(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstancePolymerMonomerSet(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstancePolymerMonomerSet(jsn : TJsonObject) : TFhirSubstancePolymerMonomerSet;
begin
  result := TFhirSubstancePolymerMonomerSet.create;
  try
    ParseSubstancePolymerMonomerSetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerMonomerSetProperties(jsn : TJsonObject; result : TFhirSubstancePolymerMonomerSet);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('ratioType') then
        result.ratioType := ParseCodeableConcept(jsn.vObj['ratioType']);{q3}
    if jsn.has('startingMaterial') then
      iterateArray(jsn.vArr['startingMaterial'], result.startingMaterialList, parseSubstancePolymerMonomerSetStartingMaterial);
end;

procedure TFHIRJsonComposer.ComposeSubstancePolymerMonomerSet(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerMonomerSet; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'ratioType', elem.ratioType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.startingMaterialList.Count > 0) then
  begin
    json.valueArray('startingMaterial');
    for i := 0 to elem.startingMaterialList.Count - 1 do
      ComposeSubstancePolymerMonomerSetStartingMaterial(json, '', elem.startingMaterialList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerMonomerSetStartingMaterial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstancePolymerMonomerSetStartingMaterial(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstancePolymerMonomerSetStartingMaterial(jsn : TJsonObject) : TFhirSubstancePolymerMonomerSetStartingMaterial;
begin
  result := TFhirSubstancePolymerMonomerSetStartingMaterial.create;
  try
    ParseSubstancePolymerMonomerSetStartingMaterialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerMonomerSetStartingMaterialProperties(jsn : TJsonObject; result : TFhirSubstancePolymerMonomerSetStartingMaterial);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('material') then
        result.material := ParseCodeableConcept(jsn.vObj['material']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('isDefining') or jsn.has('_isDefining') then
        result.isDefiningElement := ParseBoolean(jsn['isDefining'], jsn.vObj['_isDefining']);{q}
    if jsn.has('amount') then
        result.amount := ParseSubstanceAmount(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstancePolymerMonomerSetStartingMaterial(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerMonomerSetStartingMaterial; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'material', elem.material); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'isDefining', elem.isDefiningElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'isDefining', elem.isDefiningElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceAmount(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerRepeat(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstancePolymerRepeat(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstancePolymerRepeat(jsn : TJsonObject) : TFhirSubstancePolymerRepeat;
begin
  result := TFhirSubstancePolymerRepeat.create;
  try
    ParseSubstancePolymerRepeatProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerRepeatProperties(jsn : TJsonObject; result : TFhirSubstancePolymerRepeat);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('numberOfUnits') or jsn.has('_numberOfUnits') then
        result.numberOfUnitsElement := ParseInteger(jsn['numberOfUnits'], jsn.vObj['_numberOfUnits']);{q}
    if jsn.has('averageMolecularFormula') or jsn.has('_averageMolecularFormula') then
        result.averageMolecularFormulaElement := ParseString(jsn['averageMolecularFormula'], jsn.vObj['_averageMolecularFormula']);{q}
    if jsn.has('repeatUnitAmountType') then
        result.repeatUnitAmountType := ParseCodeableConcept(jsn.vObj['repeatUnitAmountType']);{q3}
    if jsn.has('repeatUnit') then
      iterateArray(jsn.vArr['repeatUnit'], result.repeatUnitList, parseSubstancePolymerRepeatRepeatUnit);
end;

procedure TFHIRJsonComposer.ComposeSubstancePolymerRepeat(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerRepeat; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'numberOfUnits', elem.numberOfUnitsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'numberOfUnits', elem.numberOfUnitsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'averageMolecularFormula', elem.averageMolecularFormulaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'averageMolecularFormula', elem.averageMolecularFormulaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'repeatUnitAmountType', elem.repeatUnitAmountType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.repeatUnitList.Count > 0) then
  begin
    json.valueArray('repeatUnit');
    for i := 0 to elem.repeatUnitList.Count - 1 do
      ComposeSubstancePolymerRepeatRepeatUnit(json, '', elem.repeatUnitList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerRepeatRepeatUnit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstancePolymerRepeatRepeatUnit(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstancePolymerRepeatRepeatUnit(jsn : TJsonObject) : TFhirSubstancePolymerRepeatRepeatUnit;
begin
  result := TFhirSubstancePolymerRepeatRepeatUnit.create;
  try
    ParseSubstancePolymerRepeatRepeatUnitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerRepeatRepeatUnitProperties(jsn : TJsonObject; result : TFhirSubstancePolymerRepeatRepeatUnit);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('orientationOfPolymerisation') then
        result.orientationOfPolymerisation := ParseCodeableConcept(jsn.vObj['orientationOfPolymerisation']);{q3}
    if jsn.has('repeatUnit') or jsn.has('_repeatUnit') then
        result.repeatUnitElement := ParseString(jsn['repeatUnit'], jsn.vObj['_repeatUnit']);{q}
    if jsn.has('amount') then
        result.amount := ParseSubstanceAmount(jsn.vObj['amount']);{q3}
    if jsn.has('degreeOfPolymerisation') then
      iterateArray(jsn.vArr['degreeOfPolymerisation'], result.degreeOfPolymerisationList, parseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
    if jsn.has('structuralRepresentation') then
      iterateArray(jsn.vArr['structuralRepresentation'], result.structuralRepresentationList, parseSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
end;

procedure TFHIRJsonComposer.ComposeSubstancePolymerRepeatRepeatUnit(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerRepeatRepeatUnit; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'orientationOfPolymerisation', elem.orientationOfPolymerisation); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'repeatUnit', elem.repeatUnitElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'repeatUnit', elem.repeatUnitElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceAmount(json, 'amount', elem.amount); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.degreeOfPolymerisationList.Count > 0) then
  begin
    json.valueArray('degreeOfPolymerisation');
    for i := 0 to elem.degreeOfPolymerisationList.Count - 1 do
      ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(json, '', elem.degreeOfPolymerisationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.structuralRepresentationList.Count > 0) then
  begin
    json.valueArray('structuralRepresentation');
    for i := 0 to elem.structuralRepresentationList.Count - 1 do
      ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(json, '', elem.structuralRepresentationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(jsn : TJsonObject) : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation;
begin
  result := TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation.create;
  try
    ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationProperties(jsn : TJsonObject; result : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('degree') then
        result.degree := ParseCodeableConcept(jsn.vObj['degree']);{q3}
    if jsn.has('amount') then
        result.amount := ParseSubstanceAmount(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'degree', elem.degree); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceAmount(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(jsn : TJsonObject) : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation;
begin
  result := TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation.create;
  try
    ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentationProperties(jsn : TJsonObject; result : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('representation') or jsn.has('_representation') then
        result.representationElement := ParseString(jsn['representation'], jsn.vObj['_representation']);{q}
    if jsn.has('attachment') then
        result.attachment := ParseAttachment(jsn.vObj['attachment']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(json : TJSONWriter; name : string; elem : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'representation', elem.representationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'representation', elem.representationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(json, 'attachment', elem.attachment); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstancePolymer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstancePolymer(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstancePolymer(jsn : TJsonObject) : TFhirSubstancePolymer;
begin
  result := TFhirSubstancePolymer.create;
  try
    ParseSubstancePolymerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstancePolymerProperties(jsn : TJsonObject; result : TFhirSubstancePolymer);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('class') then
        result.class_ := ParseCodeableConcept(jsn.vObj['class']);{q3}
    if jsn.has('geometry') then
        result.geometry := ParseCodeableConcept(jsn.vObj['geometry']);{q3}
    if jsn.has('copolymerConnectivity') then
      iterateArray(jsn.vArr['copolymerConnectivity'], result.copolymerConnectivityList, parseCodeableConcept);
      if jsn.has('modification') or jsn.has('_modification') then
      iteratePrimitiveArray(jsn.vArr['modification'], jsn.vArr['_modification'], result.modificationList, parseString);
    if jsn.has('monomerSet') then
      iterateArray(jsn.vArr['monomerSet'], result.monomerSetList, parseSubstancePolymerMonomerSet);
    if jsn.has('repeat') then
      iterateArray(jsn.vArr['repeat'], result.repeat_List, parseSubstancePolymerRepeat);
end;

procedure TFHIRJsonComposer.ComposeSubstancePolymer(json : TJSONWriter; name : string; elem : TFhirSubstancePolymer; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('class_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'class', elem.class_); {a}
  if not elem.noCompose and doCompose('geometry') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'geometry', elem.geometry); {a}
  if not elem.noCompose and doCompose('copolymerConnectivity') and (SummaryOption in [soFull, soSummary, soData]) and (elem.copolymerConnectivityList.Count > 0) then
  begin
    json.valueArray('copolymerConnectivity');
    for i := 0 to elem.copolymerConnectivityList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.copolymerConnectivityList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('modification') and (SummaryOption in [soFull, soSummary, soData]) and (elem.modificationList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.modificationList.Count - 1 do
    begin
      ext := ext or ((elem.modificationList[i].id <> '') or (elem.modificationList[i].hasExtensionList) {no-comments or (elem.modificationList[i].hasComments)});
      val := val or (elem.modificationList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('modification');
      for i := 0 to elem.modificationList.Count - 1 do
        ComposeStringValue(json, '',elem.modificationList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_modification');
      for i := 0 to elem.modificationList.Count - 1 do
        ComposeStringProps(json, '',elem.modificationList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('monomerSet') and (SummaryOption in [soFull, soSummary, soData]) and (elem.monomerSetList.Count > 0) then
  begin
    json.valueArray('monomerSet');
    for i := 0 to elem.monomerSetList.Count - 1 do
      ComposeSubstancePolymerMonomerSet(json, '', elem.monomerSetList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('repeat_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.repeat_List.Count > 0) then
  begin
    json.valueArray('repeat');
    for i := 0 to elem.repeat_List.Count - 1 do
      ComposeSubstancePolymerRepeat(json, '', elem.repeat_List[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
procedure TFHIRJsonParser.ParseSubstanceReferenceInformationGene(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceReferenceInformationGene(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceReferenceInformationGene(jsn : TJsonObject) : TFhirSubstanceReferenceInformationGene;
begin
  result := TFhirSubstanceReferenceInformationGene.create;
  try
    ParseSubstanceReferenceInformationGeneProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationGeneProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationGene);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('geneSequenceOrigin') then
        result.geneSequenceOrigin := ParseCodeableConcept(jsn.vObj['geneSequenceOrigin']);{q3}
    if jsn.has('gene') then
        result.gene := ParseCodeableConcept(jsn.vObj['gene']);{q3}
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], result.sourceList, parseReference{TFhirDocumentReference});
end;

procedure TFHIRJsonComposer.ComposeSubstanceReferenceInformationGene(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationGene; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'geneSequenceOrigin', elem.geneSequenceOrigin); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'gene', elem.gene); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.sourceList.Count > 0) then
  begin
    json.valueArray('source');
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.sourceList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationGeneElement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceReferenceInformationGeneElement(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceReferenceInformationGeneElement(jsn : TJsonObject) : TFhirSubstanceReferenceInformationGeneElement;
begin
  result := TFhirSubstanceReferenceInformationGeneElement.create;
  try
    ParseSubstanceReferenceInformationGeneElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationGeneElementProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationGeneElement);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('element') then
        result.element := ParseIdentifier(jsn.vObj['element']);{q3}
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], result.sourceList, parseReference{TFhirDocumentReference});
end;

procedure TFHIRJsonComposer.ComposeSubstanceReferenceInformationGeneElement(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationGeneElement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'element', elem.element); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.sourceList.Count > 0) then
  begin
    json.valueArray('source');
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.sourceList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationClassification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceReferenceInformationClassification(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceReferenceInformationClassification(jsn : TJsonObject) : TFhirSubstanceReferenceInformationClassification;
begin
  result := TFhirSubstanceReferenceInformationClassification.create;
  try
    ParseSubstanceReferenceInformationClassificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationClassificationProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationClassification);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('domain') then
        result.domain := ParseCodeableConcept(jsn.vObj['domain']);{q3}
    if jsn.has('classification') then
        result.classification := ParseCodeableConcept(jsn.vObj['classification']);{q3}
    if jsn.has('subtype') then
      iterateArray(jsn.vArr['subtype'], result.subtypeList, parseCodeableConcept);
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], result.sourceList, parseReference{TFhirDocumentReference});
end;

procedure TFHIRJsonComposer.ComposeSubstanceReferenceInformationClassification(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationClassification; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'domain', elem.domain); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'classification', elem.classification); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.subtypeList.Count > 0) then
  begin
    json.valueArray('subtype');
    for i := 0 to elem.subtypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subtypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.sourceList.Count > 0) then
  begin
    json.valueArray('source');
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.sourceList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationRelationship(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceReferenceInformationRelationship(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceReferenceInformationRelationship(jsn : TJsonObject) : TFhirSubstanceReferenceInformationRelationship;
begin
  result := TFhirSubstanceReferenceInformationRelationship.create;
  try
    ParseSubstanceReferenceInformationRelationshipProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationRelationshipProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationRelationship);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('substanceReference') {a3} then
      result.substance := ParseReference(jsn.vObj['substanceReference']);
    if jsn.has('substanceCodeableConcept') {a4} then
      result.substance := ParseCodeableConcept(jsn.vObj['substanceCodeableConcept']);
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('interaction') then
        result.interaction := ParseCodeableConcept(jsn.vObj['interaction']);{q3}
    if jsn.has('isDefining') or jsn.has('_isDefining') then
        result.isDefiningElement := ParseBoolean(jsn['isDefining'], jsn.vObj['_isDefining']);{q}
    if jsn.has('amountQuantity') {a4} then
      result.amount := ParseQuantity(jsn.vObj['amountQuantity']);
    if jsn.has('amountRange') {a4} then
      result.amount := ParseRange(jsn.vObj['amountRange']);
    if jsn.has('amountString') or jsn.has('_amountString') then
      result.amount := parseString(jsn['amountString'], jsn.vObj['_amountString']);
    if jsn.has('amountType') then
        result.amountType := ParseCodeableConcept(jsn.vObj['amountType']);{q3}
    if jsn.has('amountText') or jsn.has('_amountText') then
        result.amountTextElement := ParseString(jsn['amountText'], jsn.vObj['_amountText']);{q}
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], result.sourceList, parseReference{TFhirDocumentReference});
end;

procedure TFHIRJsonComposer.ComposeSubstanceReferenceInformationRelationship(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationRelationship; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.substance is TFhirReference) then
    ComposeReference(json, 'substanceReference', TFhirReference(elem.substance))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.substance is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'substanceCodeableConcept', TFhirCodeableConcept(elem.substance)) ;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'interaction', elem.interaction); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'isDefining', elem.isDefiningElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'isDefining', elem.isDefiningElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirQuantity) then 
    ComposeQuantity(json, 'amountQuantity', TFhirQuantity(elem.amount)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirRange) then 
    ComposeRange(json, 'amountRange', TFhirRange(elem.amount)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirString) then 
  begin
    ComposeStringValue(json, 'amountString', TFhirString(elem.amount), false);
    ComposeStringProps(json, 'amountString', TFhirString(elem.amount), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'amountType', elem.amountType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'amountText', elem.amountTextElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'amountText', elem.amountTextElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.sourceList.Count > 0) then
  begin
    json.valueArray('source');
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.sourceList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceReferenceInformationTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceReferenceInformationTarget(jsn : TJsonObject) : TFhirSubstanceReferenceInformationTarget;
begin
  result := TFhirSubstanceReferenceInformationTarget.create;
  try
    ParseSubstanceReferenceInformationTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationTargetProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformationTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('target') then
        result.target := ParseIdentifier(jsn.vObj['target']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('interaction') then
        result.interaction := ParseCodeableConcept(jsn.vObj['interaction']);{q3}
    if jsn.has('organism') then
        result.organism := ParseCodeableConcept(jsn.vObj['organism']);{q3}
    if jsn.has('organismType') then
        result.organismType := ParseCodeableConcept(jsn.vObj['organismType']);{q3}
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], result.sourceList, parseReference{TFhirDocumentReference});
    if jsn.has('amountQuantity') {a4} then
      result.amount := ParseQuantity(jsn.vObj['amountQuantity']);
    if jsn.has('amountRange') {a4} then
      result.amount := ParseRange(jsn.vObj['amountRange']);
    if jsn.has('amountString') or jsn.has('_amountString') then
      result.amount := parseString(jsn['amountString'], jsn.vObj['_amountString']);
    if jsn.has('amountType') then
        result.amountType := ParseCodeableConcept(jsn.vObj['amountType']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstanceReferenceInformationTarget(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformationTarget; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'target', elem.target); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'interaction', elem.interaction); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'organism', elem.organism); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'organismType', elem.organismType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.sourceList.Count > 0) then
  begin
    json.valueArray('source');
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.sourceList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirQuantity) then 
    ComposeQuantity(json, 'amountQuantity', TFhirQuantity(elem.amount)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirRange) then 
    ComposeRange(json, 'amountRange', TFhirRange(elem.amount)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirString) then 
  begin
    ComposeStringValue(json, 'amountString', TFhirString(elem.amount), false);
    ComposeStringProps(json, 'amountString', TFhirString(elem.amount), false);
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'amountType', elem.amountType); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceReferenceInformation(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceReferenceInformation(jsn : TJsonObject) : TFhirSubstanceReferenceInformation;
begin
  result := TFhirSubstanceReferenceInformation.create;
  try
    ParseSubstanceReferenceInformationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceReferenceInformationProperties(jsn : TJsonObject; result : TFhirSubstanceReferenceInformation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('gene') then
      iterateArray(jsn.vArr['gene'], result.geneList, parseSubstanceReferenceInformationGene);
    if jsn.has('geneElement') then
      iterateArray(jsn.vArr['geneElement'], result.geneElementList, parseSubstanceReferenceInformationGeneElement);
    if jsn.has('classification') then
      iterateArray(jsn.vArr['classification'], result.classificationList, parseSubstanceReferenceInformationClassification);
    if jsn.has('relationship') then
      iterateArray(jsn.vArr['relationship'], result.relationshipList, parseSubstanceReferenceInformationRelationship);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseSubstanceReferenceInformationTarget);
end;

procedure TFHIRJsonComposer.ComposeSubstanceReferenceInformation(json : TJSONWriter; name : string; elem : TFhirSubstanceReferenceInformation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('gene') and (SummaryOption in [soFull, soSummary, soData]) and (elem.geneList.Count > 0) then
  begin
    json.valueArray('gene');
    for i := 0 to elem.geneList.Count - 1 do
      ComposeSubstanceReferenceInformationGene(json, '', elem.geneList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('geneElement') and (SummaryOption in [soFull, soSummary, soData]) and (elem.geneElementList.Count > 0) then
  begin
    json.valueArray('geneElement');
    for i := 0 to elem.geneElementList.Count - 1 do
      ComposeSubstanceReferenceInformationGeneElement(json, '', elem.geneElementList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('classification') and (SummaryOption in [soFull, soSummary, soData]) and (elem.classificationList.Count > 0) then
  begin
    json.valueArray('classification');
    for i := 0 to elem.classificationList.Count - 1 do
      ComposeSubstanceReferenceInformationClassification(json, '', elem.classificationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('relationship') and (SummaryOption in [soFull, soSummary, soData]) and (elem.relationshipList.Count > 0) then
  begin
    json.valueArray('relationship');
    for i := 0 to elem.relationshipList.Count - 1 do
      ComposeSubstanceReferenceInformationRelationship(json, '', elem.relationshipList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('target') and (SummaryOption in [soFull, soSummary, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeSubstanceReferenceInformationTarget(json, '', elem.targetList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
procedure TFHIRJsonParser.ParseSubstanceSpecificationMoiety(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecificationMoiety(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecificationMoiety(jsn : TJsonObject) : TFhirSubstanceSpecificationMoiety;
begin
  result := TFhirSubstanceSpecificationMoiety.create;
  try
    ParseSubstanceSpecificationMoietyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationMoietyProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationMoiety);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('stereochemistry') then
        result.stereochemistry := ParseCodeableConcept(jsn.vObj['stereochemistry']);{q3}
    if jsn.has('opticalActivity') then
        result.opticalActivity := ParseCodeableConcept(jsn.vObj['opticalActivity']);{q3}
    if jsn.has('molecularFormula') or jsn.has('_molecularFormula') then
        result.molecularFormulaElement := ParseString(jsn['molecularFormula'], jsn.vObj['_molecularFormula']);{q}
    if jsn.has('amount') or jsn.has('_amount') then
        result.amountElement := ParseString(jsn['amount'], jsn.vObj['_amount']);{q}
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecificationMoiety(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationMoiety; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'stereochemistry', elem.stereochemistry); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'opticalActivity', elem.opticalActivity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'molecularFormula', elem.molecularFormulaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'molecularFormula', elem.molecularFormulaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'amount', elem.amountElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'amount', elem.amountElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecificationProperty(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecificationProperty(jsn : TJsonObject) : TFhirSubstanceSpecificationProperty;
begin
  result := TFhirSubstanceSpecificationProperty.create;
  try
    ParseSubstanceSpecificationPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationPropertyProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationProperty);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('name') then
        result.name := ParseCodeableConcept(jsn.vObj['name']);{q3}
    if jsn.has('parameters') or jsn.has('_parameters') then
        result.parametersElement := ParseString(jsn['parameters'], jsn.vObj['_parameters']);{q}
    if jsn.has('substanceId') then
        result.substanceId := ParseIdentifier(jsn.vObj['substanceId']);{q3}
    if jsn.has('substanceName') or jsn.has('_substanceName') then
        result.substanceNameElement := ParseString(jsn['substanceName'], jsn.vObj['_substanceName']);{q}
    if jsn.has('amount') or jsn.has('_amount') then
        result.amountElement := ParseString(jsn['amount'], jsn.vObj['_amount']);{q}
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecificationProperty(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationProperty; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'name', elem.name); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'parameters', elem.parametersElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'parameters', elem.parametersElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'substanceId', elem.substanceId); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'substanceName', elem.substanceNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'substanceName', elem.substanceNameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'amount', elem.amountElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'amount', elem.amountElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationStructure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecificationStructure(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecificationStructure(jsn : TJsonObject) : TFhirSubstanceSpecificationStructure;
begin
  result := TFhirSubstanceSpecificationStructure.create;
  try
    ParseSubstanceSpecificationStructureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationStructureProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationStructure);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('stereochemistry') then
        result.stereochemistry := ParseCodeableConcept(jsn.vObj['stereochemistry']);{q3}
    if jsn.has('opticalActivity') then
        result.opticalActivity := ParseCodeableConcept(jsn.vObj['opticalActivity']);{q3}
    if jsn.has('molecularFormula') or jsn.has('_molecularFormula') then
        result.molecularFormulaElement := ParseString(jsn['molecularFormula'], jsn.vObj['_molecularFormula']);{q}
    if jsn.has('molecularFormulaByMoiety') or jsn.has('_molecularFormulaByMoiety') then
        result.molecularFormulaByMoietyElement := ParseString(jsn['molecularFormulaByMoiety'], jsn.vObj['_molecularFormulaByMoiety']);{q}
    if jsn.has('isotope') then
      iterateArray(jsn.vArr['isotope'], result.isotopeList, parseSubstanceSpecificationStructureIsotope);
    if jsn.has('molecularWeight') then
        result.molecularWeight := ParseSubstanceSpecificationStructureIsotopeMolecularWeight(jsn.vObj['molecularWeight']);{q3}
    if jsn.has('referenceSource') then
      iterateArray(jsn.vArr['referenceSource'], result.referenceSourceList, parseReference{TFhirDocumentReference});
    if jsn.has('structuralRepresentation') then
      iterateArray(jsn.vArr['structuralRepresentation'], result.structuralRepresentationList, parseSubstanceSpecificationStructureStructuralRepresentation);
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecificationStructure(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationStructure; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'stereochemistry', elem.stereochemistry); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'opticalActivity', elem.opticalActivity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'molecularFormula', elem.molecularFormulaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'molecularFormula', elem.molecularFormulaElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'molecularFormulaByMoiety', elem.molecularFormulaByMoietyElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'molecularFormulaByMoiety', elem.molecularFormulaByMoietyElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.isotopeList.Count > 0) then
  begin
    json.valueArray('isotope');
    for i := 0 to elem.isotopeList.Count - 1 do
      ComposeSubstanceSpecificationStructureIsotope(json, '', elem.isotopeList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(json, 'molecularWeight', elem.molecularWeight); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.referenceSourceList.Count > 0) then
  begin
    json.valueArray('referenceSource');
    for i := 0 to elem.referenceSourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.referenceSourceList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.structuralRepresentationList.Count > 0) then
  begin
    json.valueArray('structuralRepresentation');
    for i := 0 to elem.structuralRepresentationList.Count - 1 do
      ComposeSubstanceSpecificationStructureStructuralRepresentation(json, '', elem.structuralRepresentationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationStructureIsotope(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecificationStructureIsotope(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecificationStructureIsotope(jsn : TJsonObject) : TFhirSubstanceSpecificationStructureIsotope;
begin
  result := TFhirSubstanceSpecificationStructureIsotope.create;
  try
    ParseSubstanceSpecificationStructureIsotopeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationStructureIsotopeProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationStructureIsotope);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('nuclideId') then
        result.nuclideId := ParseIdentifier(jsn.vObj['nuclideId']);{q3}
    if jsn.has('nuclideName') then
        result.nuclideName := ParseCodeableConcept(jsn.vObj['nuclideName']);{q3}
    if jsn.has('substitutionType') then
        result.substitutionType := ParseCodeableConcept(jsn.vObj['substitutionType']);{q3}
    if jsn.has('nuclideHalfLife') then
        result.nuclideHalfLife := ParseQuantity(jsn.vObj['nuclideHalfLife']);{q3}
    if jsn.has('amount') or jsn.has('_amount') then
        result.amountElement := ParseString(jsn['amount'], jsn.vObj['_amount']);{q}
    if jsn.has('molecularWeight') then
        result.molecularWeight := ParseSubstanceSpecificationStructureIsotopeMolecularWeight(jsn.vObj['molecularWeight']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecificationStructureIsotope(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationStructureIsotope; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'nuclideId', elem.nuclideId); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'nuclideName', elem.nuclideName); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'substitutionType', elem.substitutionType); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'nuclideHalfLife', elem.nuclideHalfLife); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'amount', elem.amountElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'amount', elem.amountElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(json, 'molecularWeight', elem.molecularWeight); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationStructureIsotopeMolecularWeight(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecificationStructureIsotopeMolecularWeight(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecificationStructureIsotopeMolecularWeight(jsn : TJsonObject) : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight;
begin
  result := TFhirSubstanceSpecificationStructureIsotopeMolecularWeight.create;
  try
    ParseSubstanceSpecificationStructureIsotopeMolecularWeightProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationStructureIsotopeMolecularWeightProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('amount') or jsn.has('_amount') then
        result.amountElement := ParseString(jsn['amount'], jsn.vObj['_amount']);{q}
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'amount', elem.amountElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'amount', elem.amountElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationStructureStructuralRepresentation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecificationStructureStructuralRepresentation(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecificationStructureStructuralRepresentation(jsn : TJsonObject) : TFhirSubstanceSpecificationStructureStructuralRepresentation;
begin
  result := TFhirSubstanceSpecificationStructureStructuralRepresentation.create;
  try
    ParseSubstanceSpecificationStructureStructuralRepresentationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationStructureStructuralRepresentationProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationStructureStructuralRepresentation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('representation') or jsn.has('_representation') then
        result.representationElement := ParseString(jsn['representation'], jsn.vObj['_representation']);{q}
    if jsn.has('attachment') then
        result.attachment := ParseAttachment(jsn.vObj['attachment']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecificationStructureStructuralRepresentation(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationStructureStructuralRepresentation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'representation', elem.representationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'representation', elem.representationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(json, 'attachment', elem.attachment); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationSubstanceCode(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecificationSubstanceCode(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecificationSubstanceCode(jsn : TJsonObject) : TFhirSubstanceSpecificationSubstanceCode;
begin
  result := TFhirSubstanceSpecificationSubstanceCode.create;
  try
    ParseSubstanceSpecificationSubstanceCodeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationSubstanceCodeProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationSubstanceCode);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('status') then
        result.status := ParseCodeableConcept(jsn.vObj['status']);{q3}
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        result.statusDateElement := ParseDateTime(jsn['statusDate'], jsn.vObj['_statusDate']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
      if jsn.has('referenceSource') or jsn.has('_referenceSource') then
      iteratePrimitiveArray(jsn.vArr['referenceSource'], jsn.vArr['_referenceSource'], result.referenceSourceList, parseString);
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecificationSubstanceCode(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationSubstanceCode; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', elem.status); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.referenceSourceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.referenceSourceList.Count - 1 do
    begin
      ext := ext or ((elem.referenceSourceList[i].id <> '') or (elem.referenceSourceList[i].hasExtensionList) {no-comments or (elem.referenceSourceList[i].hasComments)});
      val := val or (elem.referenceSourceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('referenceSource');
      for i := 0 to elem.referenceSourceList.Count - 1 do
        ComposeStringValue(json, '',elem.referenceSourceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_referenceSource');
      for i := 0 to elem.referenceSourceList.Count - 1 do
        ComposeStringProps(json, '',elem.referenceSourceList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationSubstanceName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecificationSubstanceName(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecificationSubstanceName(jsn : TJsonObject) : TFhirSubstanceSpecificationSubstanceName;
begin
  result := TFhirSubstanceSpecificationSubstanceName.create;
  try
    ParseSubstanceSpecificationSubstanceNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationSubstanceNameProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationSubstanceName);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('language') then
      iterateArray(jsn.vArr['language'], result.languageList, parseCodeableConcept);
    if jsn.has('domain') then
      iterateArray(jsn.vArr['domain'], result.domainList, parseCodeableConcept);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('officialName') then
      iterateArray(jsn.vArr['officialName'], result.officialNameList, parseSubstanceSpecificationSubstanceNameOfficialName);
      if jsn.has('referenceSource') or jsn.has('_referenceSource') then
      iteratePrimitiveArray(jsn.vArr['referenceSource'], jsn.vArr['_referenceSource'], result.referenceSourceList, parseString);
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecificationSubstanceName(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationSubstanceName; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.languageList.Count > 0) then
  begin
    json.valueArray('language');
    for i := 0 to elem.languageList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.languageList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.domainList.Count > 0) then
  begin
    json.valueArray('domain');
    for i := 0 to elem.domainList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.domainList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.officialNameList.Count > 0) then
  begin
    json.valueArray('officialName');
    for i := 0 to elem.officialNameList.Count - 1 do
      ComposeSubstanceSpecificationSubstanceNameOfficialName(json, '', elem.officialNameList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.referenceSourceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.referenceSourceList.Count - 1 do
    begin
      ext := ext or ((elem.referenceSourceList[i].id <> '') or (elem.referenceSourceList[i].hasExtensionList) {no-comments or (elem.referenceSourceList[i].hasComments)});
      val := val or (elem.referenceSourceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('referenceSource');
      for i := 0 to elem.referenceSourceList.Count - 1 do
        ComposeStringValue(json, '',elem.referenceSourceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_referenceSource');
      for i := 0 to elem.referenceSourceList.Count - 1 do
        ComposeStringProps(json, '',elem.referenceSourceList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationSubstanceNameOfficialName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecificationSubstanceNameOfficialName(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecificationSubstanceNameOfficialName(jsn : TJsonObject) : TFhirSubstanceSpecificationSubstanceNameOfficialName;
begin
  result := TFhirSubstanceSpecificationSubstanceNameOfficialName.create;
  try
    ParseSubstanceSpecificationSubstanceNameOfficialNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationSubstanceNameOfficialNameProperties(jsn : TJsonObject; result : TFhirSubstanceSpecificationSubstanceNameOfficialName);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('authority') then
        result.authority := ParseCodeableConcept(jsn.vObj['authority']);{q3}
    if jsn.has('status') then
        result.status := ParseCodeableConcept(jsn.vObj['status']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecificationSubstanceNameOfficialName(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecificationSubstanceNameOfficialName; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'authority', elem.authority); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', elem.status); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceSpecification(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceSpecification(jsn : TJsonObject) : TFhirSubstanceSpecification;
begin
  result := TFhirSubstanceSpecification.create;
  try
    ParseSubstanceSpecificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceSpecificationProperties(jsn : TJsonObject; result : TFhirSubstanceSpecification);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := ParseString(jsn['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('stoichiometric') or jsn.has('_stoichiometric') then
        result.stoichiometricElement := ParseBoolean(jsn['stoichiometric'], jsn.vObj['_stoichiometric']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
      if jsn.has('referenceSource') or jsn.has('_referenceSource') then
      iteratePrimitiveArray(jsn.vArr['referenceSource'], jsn.vArr['_referenceSource'], result.referenceSourceList, parseString);
    if jsn.has('moiety') then
      iterateArray(jsn.vArr['moiety'], result.moietyList, parseSubstanceSpecificationMoiety);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], result.property_List, parseSubstanceSpecificationProperty);
    if jsn.has('referenceInformation') then
        result.referenceInformation := ParseReference{TFhirSubstanceReferenceInformation}(jsn.vObj['referenceInformation']);{q3}
    if jsn.has('structure') then
        result.structure := ParseSubstanceSpecificationStructure(jsn.vObj['structure']);{q3}
    if jsn.has('substanceCode') then
      iterateArray(jsn.vArr['substanceCode'], result.substanceCodeList, parseSubstanceSpecificationSubstanceCode);
    if jsn.has('substanceName') then
      iterateArray(jsn.vArr['substanceName'], result.substanceNameList, parseSubstanceSpecificationSubstanceName);
    if jsn.has('molecularWeight') then
      iterateArray(jsn.vArr['molecularWeight'], result.molecularWeightList, parseSubstanceSpecificationStructureIsotopeMolecularWeight);
    if jsn.has('polymer') then
        result.polymer := ParseReference{TFhirSubstancePolymer}(jsn.vObj['polymer']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstanceSpecification(json : TJSONWriter; name : string; elem : TFhirSubstanceSpecification; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('comment') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not elem.noCompose and doCompose('stoichiometric') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'stoichiometric', elem.stoichiometricElement, false);
  if not elem.noCompose and doCompose('stoichiometric') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'stoichiometric', elem.stoichiometricElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('referenceSource') and (SummaryOption in [soFull, soSummary, soData]) and (elem.referenceSourceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.referenceSourceList.Count - 1 do
    begin
      ext := ext or ((elem.referenceSourceList[i].id <> '') or (elem.referenceSourceList[i].hasExtensionList) {no-comments or (elem.referenceSourceList[i].hasComments)});
      val := val or (elem.referenceSourceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('referenceSource');
      for i := 0 to elem.referenceSourceList.Count - 1 do
        ComposeStringValue(json, '',elem.referenceSourceList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_referenceSource');
      for i := 0 to elem.referenceSourceList.Count - 1 do
        ComposeStringProps(json, '',elem.referenceSourceList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('moiety') and (SummaryOption in [soFull, soSummary, soData]) and (elem.moietyList.Count > 0) then
  begin
    json.valueArray('moiety');
    for i := 0 to elem.moietyList.Count - 1 do
      ComposeSubstanceSpecificationMoiety(json, '', elem.moietyList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('property_') and (SummaryOption in [soFull, soSummary, soData]) and (elem.property_List.Count > 0) then
  begin
    json.valueArray('property');
    for i := 0 to elem.property_List.Count - 1 do
      ComposeSubstanceSpecificationProperty(json, '', elem.property_List[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('referenceInformation') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirSubstanceReferenceInformation}(json, 'referenceInformation', elem.referenceInformation); {a}
  if not elem.noCompose and doCompose('structure') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSpecificationStructure(json, 'structure', elem.structure); {a}
  if not elem.noCompose and doCompose('substanceCode') and (SummaryOption in [soFull, soSummary, soData]) and (elem.substanceCodeList.Count > 0) then
  begin
    json.valueArray('substanceCode');
    for i := 0 to elem.substanceCodeList.Count - 1 do
      ComposeSubstanceSpecificationSubstanceCode(json, '', elem.substanceCodeList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('substanceName') and (SummaryOption in [soFull, soSummary, soData]) and (elem.substanceNameList.Count > 0) then
  begin
    json.valueArray('substanceName');
    for i := 0 to elem.substanceNameList.Count - 1 do
      ComposeSubstanceSpecificationSubstanceName(json, '', elem.substanceNameList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('molecularWeight') and (SummaryOption in [soFull, soSummary, soData]) and (elem.molecularWeightList.Count > 0) then
  begin
    json.valueArray('molecularWeight');
    for i := 0 to elem.molecularWeightList.Count - 1 do
      ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(json, '', elem.molecularWeightList[i]); {z - @SubstanceSpecification.structure.isotope.molecularWeight}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('polymer') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirSubstancePolymer}(json, 'polymer', elem.polymer); {a}
end;

{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
procedure TFHIRJsonParser.ParseSupplyDeliverySuppliedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyDeliverySuppliedItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseSupplyDeliverySuppliedItem(jsn : TJsonObject) : TFhirSupplyDeliverySuppliedItem;
begin
  result := TFhirSupplyDeliverySuppliedItem.create;
  try
    ParseSupplyDeliverySuppliedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyDeliverySuppliedItemProperties(jsn : TJsonObject; result : TFhirSupplyDeliverySuppliedItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('itemCodeableConcept') {a4} then
      result.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      result.item := ParseReference(jsn.vObj['itemReference']);
end;

procedure TFHIRJsonComposer.ComposeSupplyDeliverySuppliedItem(json : TJSONWriter; name : string; elem : TFhirSupplyDeliverySuppliedItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(elem.item)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(elem.item));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSupplyDelivery(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyDelivery(jsn)); {2}
end;

function TFHIRJsonParser.ParseSupplyDelivery(jsn : TJsonObject) : TFhirSupplyDelivery;
begin
  result := TFhirSupplyDelivery.create;
  try
    ParseSupplyDeliveryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyDeliveryProperties(jsn : TJsonObject; result : TFhirSupplyDelivery);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirSupplyRequest});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirSupplydeliveryStatusEnum, SYSTEMS_TFhirSupplydeliveryStatusEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('suppliedItem') then
        result.suppliedItem := ParseSupplyDeliverySuppliedItem(jsn.vObj['suppliedItem']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('supplier') then
        result.supplier := ParseReference{Resource}(jsn.vObj['supplier']);{q3}
    if jsn.has('destination') then
        result.destination := ParseReference{TFhirLocation}(jsn.vObj['destination']);{q3}
    if jsn.has('receiver') then
      iterateArray(jsn.vArr['receiver'], result.receiverList, parseReference{TFhirPractitioner});
end;

procedure TFHIRJsonComposer.ComposeSupplyDelivery(json : TJSONWriter; name : string; elem : TFhirSupplyDelivery; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirSupplyRequest}(json, '', elem.basedOnList[i]); {z - Reference(SupplyRequest)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(SupplyDelivery|Contract)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSupplydeliveryStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSupplydeliveryStatusEnum, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('type_') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and doCompose('suppliedItem') and (SummaryOption in [soFull, soData]) then
    ComposeSupplyDeliverySuppliedItem(json, 'suppliedItem', elem.suppliedItem); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if not elem.noCompose and doCompose('supplier') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'supplier', elem.supplier); {a}
  if not elem.noCompose and doCompose('destination') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'destination', elem.destination); {a}
  if not elem.noCompose and doCompose('receiver') and (SummaryOption in [soFull, soData]) and (elem.receiverList.Count > 0) then
  begin
    json.valueArray('receiver');
    for i := 0 to elem.receiverList.Count - 1 do
      ComposeReference{TFhirPractitioner}(json, '', elem.receiverList[i]); {z - Reference(Practitioner)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
procedure TFHIRJsonParser.ParseSupplyRequestParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyRequestParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseSupplyRequestParameter(jsn : TJsonObject) : TFhirSupplyRequestParameter;
begin
  result := TFhirSupplyRequestParameter.create;
  try
    ParseSupplyRequestParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyRequestParameterProperties(jsn : TJsonObject; result : TFhirSupplyRequestParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
end;

procedure TFHIRJsonComposer.ComposeSupplyRequestParameter(json : TJSONWriter; name : string; elem : TFhirSupplyRequestParameter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSupplyRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseSupplyRequest(jsn : TJsonObject) : TFhirSupplyRequest;
begin
  result := TFhirSupplyRequest.create;
  try
    ParseSupplyRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyRequestProperties(jsn : TJsonObject; result : TFhirSupplyRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirSupplyrequestStatusEnum, SYSTEMS_TFhirSupplyrequestStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('itemCodeableConcept') {a4} then
      result.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      result.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseSupplyRequestParameter);
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := ParseDateTime(jsn['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseReference{Resource}(jsn.vObj['requester']);{q3}
    if jsn.has('supplier') then
      iterateArray(jsn.vArr['supplier'], result.supplierList, parseReference{Resource});
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('deliverFrom') then
        result.deliverFrom := ParseReference{Resource}(jsn.vObj['deliverFrom']);{q3}
    if jsn.has('deliverTo') then
        result.deliverTo := ParseReference{Resource}(jsn.vObj['deliverTo']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSupplyRequest(json : TJSONWriter; name : string; elem : TFhirSupplyRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSupplyrequestStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSupplyrequestStatusEnum, false);
  if not elem.noCompose and doCompose('category') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(elem.item)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(elem.item));
  if not elem.noCompose and doCompose('quantity') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not elem.noCompose and doCompose('parameter') and (SummaryOption in [soFull, soData]) and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeSupplyRequestParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('requester') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'requester', elem.requester); {a}
  if not elem.noCompose and doCompose('supplier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.supplierList.Count > 0) then
  begin
    json.valueArray('supplier');
    for i := 0 to elem.supplierList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.supplierList[i]); {z - Reference(Organization|HealthcareService)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|DiagnosticReport|DocumentReference)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('deliverFrom') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'deliverFrom', elem.deliverFrom); {a}
  if not elem.noCompose and doCompose('deliverTo') and (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'deliverTo', elem.deliverTo); {a}
end;

{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
procedure TFHIRJsonParser.ParseTaskRestriction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskRestriction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTaskRestriction(jsn : TJsonObject) : TFhirTaskRestriction;
begin
  result := TFhirTaskRestriction.create;
  try
    ParseTaskRestrictionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskRestrictionProperties(jsn : TJsonObject; result : TFhirTaskRestriction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('repetitions') or jsn.has('_repetitions') then
        result.repetitionsElement := ParsePositiveInt(jsn['repetitions'], jsn.vObj['_repetitions']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], result.recipientList, parseReference{Resource});
end;

procedure TFHIRJsonComposer.ComposeTaskRestriction(json : TJSONWriter; name : string; elem : TFhirTaskRestriction; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'repetitions', elem.repetitionsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'repetitions', elem.repetitionsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.recipientList.Count > 0) then
  begin
    json.valueArray('recipient');
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.recipientList[i]); {z - Reference(Patient|Practitioner|RelatedPerson|Group|Organization)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTaskInput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskInput(jsn)); {2}
end;

function TFHIRJsonParser.ParseTaskInput(jsn : TJsonObject) : TFhirTaskInput;
begin
  result := TFhirTaskInput.create;
  try
    ParseTaskInputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskInputProperties(jsn : TJsonObject; result : TFhirTaskInput);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueDosage') {a4} then
      result.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueContactDetail') {a4} then
      result.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      result.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      result.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueParameterDefinition') {a4} then
      result.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      result.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      result.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      result.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeTaskInput(json : TJSONWriter; name : string; elem : TFhirTaskInput; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTaskOutput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskOutput(jsn)); {2}
end;

function TFHIRJsonParser.ParseTaskOutput(jsn : TJsonObject) : TFhirTaskOutput;
begin
  result := TFhirTaskOutput.create;
  try
    ParseTaskOutputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskOutputProperties(jsn : TJsonObject; result : TFhirTaskOutput);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueDosage') {a4} then
      result.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueContactDetail') {a4} then
      result.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      result.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      result.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueParameterDefinition') {a4} then
      result.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      result.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      result.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      result.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeTaskOutput(json : TJSONWriter; name : string; elem : TFhirTaskOutput; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTask(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTask(jsn)); {2}
end;

function TFHIRJsonParser.ParseTask(jsn : TJsonObject) : TFhirTask;
begin
  result := TFhirTask.create;
  try
    ParseTaskProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskProperties(jsn : TJsonObject; result : TFhirTask);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('instantiatesReference') {a3} then
      result.instantiates := ParseReference(jsn.vObj['instantiatesReference']);
    if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      result.instantiates := parseUri(jsn['instantiatesUri'], jsn.vObj['_instantiatesUri']);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirTask});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirTaskStatusEnum, SYSTEMS_TFhirTaskStatusEnum);
    if jsn.has('statusReason') then
        result.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);{q3}
    if jsn.has('businessStatus') then
        result.businessStatus := ParseCodeableConcept(jsn.vObj['businessStatus']);{q3}
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('focus') then
        result.focus := ParseReference{TFhirReference}(jsn.vObj['focus']);{q3}
    if jsn.has('for') then
        result.for_ := ParseReference{TFhirReference}(jsn.vObj['for']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('executionPeriod') then
        result.executionPeriod := ParsePeriod(jsn.vObj['executionPeriod']);{q3}
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := ParseDateTime(jsn['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('lastModified') or jsn.has('_lastModified') then
        result.lastModifiedElement := ParseDateTime(jsn['lastModified'], jsn.vObj['_lastModified']);{q}
    if jsn.has('requester') then
        result.requester := ParseReference{Resource}(jsn.vObj['requester']);{q3}
    if jsn.has('performerType') then
      iterateArray(jsn.vArr['performerType'], result.performerTypeList, parseCodeableConcept);
    if jsn.has('owner') then
        result.owner := ParseReference{Resource}(jsn.vObj['owner']);{q3}
    if jsn.has('reasonCode') then
        result.reasonCode := ParseCodeableConcept(jsn.vObj['reasonCode']);{q3}
    if jsn.has('reasonReference') then
        result.reasonReference := ParseReference{TFhirReference}(jsn.vObj['reasonReference']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], result.relevantHistoryList, parseReference{TFhirProvenance});
    if jsn.has('restriction') then
        result.restriction := ParseTaskRestriction(jsn.vObj['restriction']);{q3}
    if jsn.has('input') then
      iterateArray(jsn.vArr['input'], result.inputList, parseTaskInput);
    if jsn.has('output') then
      iterateArray(jsn.vArr['output'], result.outputList, parseTaskOutput);
end;

procedure TFHIRJsonComposer.ComposeTask(json : TJSONWriter; name : string; elem : TFhirTask; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiates is TFhirReference) then
    ComposeReference(json, 'instantiatesReference', TFhirReference(elem.instantiates))
  else if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.instantiates is TFhirUri) then 
  begin
    ComposeUriValue(json, 'instantiatesUri', TFhirUri(elem.instantiates), false);
    ComposeUriProps(json, 'instantiatesUri', TFhirUri(elem.instantiates), false);
  end;
  if not elem.noCompose and doCompose('basedOn') and (SummaryOption in [soFull, soSummary, soData]) and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('groupIdentifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  if not elem.noCompose and doCompose('partOf') and (SummaryOption in [soFull, soSummary, soData]) and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirTask}(json, '', elem.partOfList[i]); {z - Reference(Task)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirTaskStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirTaskStatusEnum, false);
  if not elem.noCompose and doCompose('statusReason') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'statusReason', elem.statusReason); {a}
  if not elem.noCompose and doCompose('businessStatus') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'businessStatus', elem.businessStatus); {a}
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if not elem.noCompose and doCompose('intent') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('priority') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if not elem.noCompose and doCompose('code') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('focus') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'focus', elem.focus); {a}
  if not elem.noCompose and doCompose('for_') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'for', elem.for_); {a}
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if not elem.noCompose and doCompose('executionPeriod') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'executionPeriod', elem.executionPeriod); {a}
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('authoredOn') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if not elem.noCompose and doCompose('lastModified') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'lastModified', elem.lastModifiedElement, false);
  if not elem.noCompose and doCompose('lastModified') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'lastModified', elem.lastModifiedElement, false);
  if not elem.noCompose and doCompose('requester') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'requester', elem.requester); {a}
  if not elem.noCompose and doCompose('performerType') and (SummaryOption in [soFull, soData]) and (elem.performerTypeList.Count > 0) then
  begin
    json.valueArray('performerType');
    for i := 0 to elem.performerTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.performerTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('owner') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'owner', elem.owner); {a}
  if not elem.noCompose and doCompose('reasonCode') and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reasonCode', elem.reasonCode); {a}
  if not elem.noCompose and doCompose('reasonReference') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'reasonReference', elem.reasonReference); {a}
  if not elem.noCompose and doCompose('note') and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('relevantHistory') and (SummaryOption in [soFull, soData]) and (elem.relevantHistoryList.Count > 0) then
  begin
    json.valueArray('relevantHistory');
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.relevantHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('restriction') and (SummaryOption in [soFull, soData]) then
    ComposeTaskRestriction(json, 'restriction', elem.restriction); {a}
  if not elem.noCompose and doCompose('input') and (SummaryOption in [soFull, soData]) and (elem.inputList.Count > 0) then
  begin
    json.valueArray('input');
    for i := 0 to elem.inputList.Count - 1 do
      ComposeTaskInput(json, '', elem.inputList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('output') and (SummaryOption in [soFull, soData]) and (elem.outputList.Count > 0) then
  begin
    json.valueArray('output');
    for i := 0 to elem.outputList.Count - 1 do
      ComposeTaskOutput(json, '', elem.outputList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesCodeSystem(jsn)); {2}
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystem(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystem;
begin
  result := TFhirTerminologyCapabilitiesCodeSystem.create;
  try
    ParseTerminologyCapabilitiesCodeSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesCodeSystem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := ParseUri(jsn['uri'], jsn.vObj['_uri']);{q}
    if jsn.has('version') then
      iterateArray(jsn.vArr['version'], result.versionList, parseTerminologyCapabilitiesCodeSystemVersion);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesCodeSystem(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesCodeSystem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.versionList.Count > 0) then
  begin
    json.valueArray('version');
    for i := 0 to elem.versionList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystemVersion(json, '', elem.versionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesCodeSystemVersion(jsn)); {2}
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersion(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystemVersion;
begin
  result := TFhirTerminologyCapabilitiesCodeSystemVersion.create;
  try
    ParseTerminologyCapabilitiesCodeSystemVersionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersionProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesCodeSystemVersion);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseString(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('isDefault') or jsn.has('_isDefault') then
        result.isDefaultElement := ParseBoolean(jsn['isDefault'], jsn.vObj['_isDefault']);{q}
    if jsn.has('compositional') or jsn.has('_compositional') then
        result.compositionalElement := ParseBoolean(jsn['compositional'], jsn.vObj['_compositional']);{q}
      if jsn.has('language') or jsn.has('_language') then
      iteratePrimitiveArray(jsn.vArr['language'], jsn.vArr['_language'], result.languageList, parseCode);
    if jsn.has('filter') then
      iterateArray(jsn.vArr['filter'], result.filterList, parseTerminologyCapabilitiesCodeSystemVersionFilter);
      if jsn.has('property') or jsn.has('_property') then
      iteratePrimitiveArray(jsn.vArr['property'], jsn.vArr['_property'], result.property_List, parseCode);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesCodeSystemVersion(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesCodeSystemVersion; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'isDefault', elem.isDefaultElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'isDefault', elem.isDefaultElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'compositional', elem.compositionalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'compositional', elem.compositionalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.languageList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.languageList.Count - 1 do
    begin
      ext := ext or ((elem.languageList[i].id <> '') or (elem.languageList[i].hasExtensionList) {no-comments or (elem.languageList[i].hasComments)});
      val := val or (elem.languageList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('language');
      for i := 0 to elem.languageList.Count - 1 do
        ComposeCodeValue(json, '',elem.languageList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_language');
      for i := 0 to elem.languageList.Count - 1 do
        ComposeCodeProps(json, '',elem.languageList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.filterList.Count > 0) then
  begin
    json.valueArray('filter');
    for i := 0 to elem.filterList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystemVersionFilter(json, '', elem.filterList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.property_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.property_List.Count - 1 do
    begin
      ext := ext or ((elem.property_List[i].id <> '') or (elem.property_List[i].hasExtensionList) {no-comments or (elem.property_List[i].hasComments)});
      val := val or (elem.property_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('property');
      for i := 0 to elem.property_List.Count - 1 do
        ComposeCodeValue(json, '',elem.property_List[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_property');
      for i := 0 to elem.property_List.Count - 1 do
        ComposeCodeProps(json, '',elem.property_List[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn)); {2}
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystemVersionFilter;
begin
  result := TFhirTerminologyCapabilitiesCodeSystemVersionFilter.create;
  try
    ParseTerminologyCapabilitiesCodeSystemVersionFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersionFilterProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
      if jsn.has('op') or jsn.has('_op') then
      iteratePrimitiveArray(jsn.vArr['op'], jsn.vArr['_op'], result.opList, parseCode);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesCodeSystemVersionFilter(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.opList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.opList.Count - 1 do
    begin
      ext := ext or ((elem.opList[i].id <> '') or (elem.opList[i].hasExtensionList) {no-comments or (elem.opList[i].hasComments)});
      val := val or (elem.opList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('op');
      for i := 0 to elem.opList.Count - 1 do
        ComposeCodeValue(json, '',elem.opList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_op');
      for i := 0 to elem.opList.Count - 1 do
        ComposeCodeProps(json, '',elem.opList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesExpansion(jsn)); {2}
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesExpansion(jsn : TJsonObject) : TFhirTerminologyCapabilitiesExpansion;
begin
  result := TFhirTerminologyCapabilitiesExpansion.create;
  try
    ParseTerminologyCapabilitiesExpansionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesExpansionProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesExpansion);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('hierarchical') or jsn.has('_hierarchical') then
        result.hierarchicalElement := ParseBoolean(jsn['hierarchical'], jsn.vObj['_hierarchical']);{q}
    if jsn.has('paging') or jsn.has('_paging') then
        result.pagingElement := ParseBoolean(jsn['paging'], jsn.vObj['_paging']);{q}
    if jsn.has('incomplete') or jsn.has('_incomplete') then
        result.incompleteElement := ParseBoolean(jsn['incomplete'], jsn.vObj['_incomplete']);{q}
    if jsn.has('definition') then
        result.definition := ParseReference{TFhirStructureDefinition}(jsn.vObj['definition']);{q3}
    if jsn.has('profile') then
      iterateArray(jsn.vArr['profile'], result.profileList, parseReference{TFhirExpansionProfile});
    if jsn.has('textFilter') or jsn.has('_textFilter') then
        result.textFilterElement := ParseMarkdown(jsn['textFilter'], jsn.vObj['_textFilter']);{q}
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesExpansion(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesExpansion; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'hierarchical', elem.hierarchicalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'hierarchical', elem.hierarchicalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'paging', elem.pagingElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'paging', elem.pagingElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'incomplete', elem.incompleteElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'incomplete', elem.incompleteElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'definition', elem.definition); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.profileList.Count > 0) then
  begin
    json.valueArray('profile');
    for i := 0 to elem.profileList.Count - 1 do
      ComposeReference{TFhirExpansionProfile}(json, '', elem.profileList[i]); {z - Reference(ExpansionProfile)}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'textFilter', elem.textFilterElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'textFilter', elem.textFilterElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesValidateCode(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesValidateCode(jsn)); {2}
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesValidateCode(jsn : TJsonObject) : TFhirTerminologyCapabilitiesValidateCode;
begin
  result := TFhirTerminologyCapabilitiesValidateCode.create;
  try
    ParseTerminologyCapabilitiesValidateCodeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesValidateCodeProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesValidateCode);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('translations') or jsn.has('_translations') then
        result.translationsElement := ParseBoolean(jsn['translations'], jsn.vObj['_translations']);{q}
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesValidateCode(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesValidateCode; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'translations', elem.translationsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'translations', elem.translationsElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesTranslation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesTranslation(jsn)); {2}
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesTranslation(jsn : TJsonObject) : TFhirTerminologyCapabilitiesTranslation;
begin
  result := TFhirTerminologyCapabilitiesTranslation.create;
  try
    ParseTerminologyCapabilitiesTranslationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesTranslationProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesTranslation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('needsMap') or jsn.has('_needsMap') then
        result.needsMapElement := ParseBoolean(jsn['needsMap'], jsn.vObj['_needsMap']);{q}
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesTranslation(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesTranslation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'needsMap', elem.needsMapElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'needsMap', elem.needsMapElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesClosure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesClosure(jsn)); {2}
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesClosure(jsn : TJsonObject) : TFhirTerminologyCapabilitiesClosure;
begin
  result := TFhirTerminologyCapabilitiesClosure.create;
  try
    ParseTerminologyCapabilitiesClosureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesClosureProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilitiesClosure);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('translation') or jsn.has('_translation') then
        result.translationElement := ParseBoolean(jsn['translation'], jsn.vObj['_translation']);{q}
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesClosure(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilitiesClosure; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'translation', elem.translationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'translation', elem.translationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilities(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilities(jsn)); {2}
end;

function TFHIRJsonParser.ParseTerminologyCapabilities(jsn : TJsonObject) : TFhirTerminologyCapabilities;
begin
  result := TFhirTerminologyCapabilities.create;
  try
    ParseTerminologyCapabilitiesProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesProperties(jsn : TJsonObject; result : TFhirTerminologyCapabilities);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('lockedDate') or jsn.has('_lockedDate') then
        result.lockedDateElement := ParseBoolean(jsn['lockedDate'], jsn.vObj['_lockedDate']);{q}
    if jsn.has('codeSystem') then
      iterateArray(jsn.vArr['codeSystem'], result.codeSystemList, parseTerminologyCapabilitiesCodeSystem);
    if jsn.has('expansion') then
        result.expansion := ParseTerminologyCapabilitiesExpansion(jsn.vObj['expansion']);{q3}
    if jsn.has('codeSearch') or jsn.has('_codeSearch')  then
      result.codeSearchElement := parseEnum(jsn.path+'/codeSearch', jsn['codeSearch'], jsn.vObj['_codeSearch'], CODES_TFhirCodeSearchSupportEnum, SYSTEMS_TFhirCodeSearchSupportEnum);
    if jsn.has('validateCode') then
        result.validateCode := ParseTerminologyCapabilitiesValidateCode(jsn.vObj['validateCode']);{q3}
    if jsn.has('translation') then
        result.translation := ParseTerminologyCapabilitiesTranslation(jsn.vObj['translation']);{q3}
    if jsn.has('closure') then
        result.closure := ParseTerminologyCapabilitiesClosure(jsn.vObj['closure']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilities(json : TJSONWriter; name : string; elem : TFhirTerminologyCapabilities; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('lockedDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'lockedDate', elem.lockedDateElement, false);
  if not elem.noCompose and doCompose('lockedDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'lockedDate', elem.lockedDateElement, false);
  if not elem.noCompose and doCompose('codeSystem') and (SummaryOption in [soFull, soData]) and (elem.codeSystemList.Count > 0) then
  begin
    json.valueArray('codeSystem');
    for i := 0 to elem.codeSystemList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystem(json, '', elem.codeSystemList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('expansion') and (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesExpansion(json, 'expansion', elem.expansion); {a}
  if not elem.noCompose and doCompose('codeSearch') and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'codeSearch', elem.CodeSearchElement, CODES_TFhirCodeSearchSupportEnum, false);
  if not elem.noCompose and doCompose('codeSearch') and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'codeSearch', elem.CodeSearchElement, CODES_TFhirCodeSearchSupportEnum, false);
  if not elem.noCompose and doCompose('validateCode') and (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesValidateCode(json, 'validateCode', elem.validateCode); {a}
  if not elem.noCompose and doCompose('translation') and (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesTranslation(json, 'translation', elem.translation); {a}
  if not elem.noCompose and doCompose('closure') and (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesClosure(json, 'closure', elem.closure); {a}
end;

{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
procedure TFHIRJsonParser.ParseTestReportParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportParticipant(jsn : TJsonObject) : TFhirTestReportParticipant;
begin
  result := TFhirTestReportParticipant.create;
  try
    ParseTestReportParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportParticipantProperties(jsn : TJsonObject; result : TFhirTestReportParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn['type'], jsn.vObj['_type'], CODES_TFhirReportParticipantTypeEnum, SYSTEMS_TFhirReportParticipantTypeEnum);
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := ParseUri(jsn['uri'], jsn.vObj['_uri']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestReportParticipant(json : TJSONWriter; name : string; elem : TFhirTestReportParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirReportParticipantTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirReportParticipantTypeEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportSetup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetup(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportSetup(jsn : TJsonObject) : TFhirTestReportSetup;
begin
  result := TFhirTestReportSetup.create;
  try
    ParseTestReportSetupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupProperties(jsn : TJsonObject; result : TFhirTestReportSetup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestReportSetupAction);
end;

procedure TFHIRJsonComposer.ComposeTestReportSetup(json : TJSONWriter; name : string; elem : TFhirTestReportSetup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestReportSetupAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetupAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportSetupAction(jsn : TJsonObject) : TFhirTestReportSetupAction;
begin
  result := TFhirTestReportSetupAction.create;
  try
    ParseTestReportSetupActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionProperties(jsn : TJsonObject; result : TFhirTestReportSetupAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestReportSetupActionOperation(jsn.vObj['operation']);{q3}
    if jsn.has('assert') then
        result.assert := ParseTestReportSetupActionAssert(jsn.vObj['assert']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestReportSetupAction(json : TJSONWriter; name : string; elem : TFhirTestReportSetupAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(json, 'operation', elem.operation); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(json, 'assert', elem.assert); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetupActionOperation(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportSetupActionOperation(jsn : TJsonObject) : TFhirTestReportSetupActionOperation;
begin
  result := TFhirTestReportSetupActionOperation.create;
  try
    ParseTestReportSetupActionOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionOperationProperties(jsn : TJsonObject; result : TFhirTestReportSetupActionOperation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('result') or jsn.has('_result')  then
      result.resultElement := parseEnum(jsn.path+'/result', jsn['result'], jsn.vObj['_result'], CODES_TFhirReportActionResultCodesEnum, SYSTEMS_TFhirReportActionResultCodesEnum);
    if jsn.has('message') or jsn.has('_message') then
        result.messageElement := ParseMarkdown(jsn['message'], jsn.vObj['_message']);{q}
    if jsn.has('detail') or jsn.has('_detail') then
        result.detailElement := ParseUri(jsn['detail'], jsn.vObj['_detail']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestReportSetupActionOperation(json : TJSONWriter; name : string; elem : TFhirTestReportSetupActionOperation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'message', elem.messageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'message', elem.messageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'detail', elem.detailElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'detail', elem.detailElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetupActionAssert(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportSetupActionAssert(jsn : TJsonObject) : TFhirTestReportSetupActionAssert;
begin
  result := TFhirTestReportSetupActionAssert.create;
  try
    ParseTestReportSetupActionAssertProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionAssertProperties(jsn : TJsonObject; result : TFhirTestReportSetupActionAssert);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('result') or jsn.has('_result')  then
      result.resultElement := parseEnum(jsn.path+'/result', jsn['result'], jsn.vObj['_result'], CODES_TFhirReportActionResultCodesEnum, SYSTEMS_TFhirReportActionResultCodesEnum);
    if jsn.has('message') or jsn.has('_message') then
        result.messageElement := ParseMarkdown(jsn['message'], jsn.vObj['_message']);{q}
    if jsn.has('detail') or jsn.has('_detail') then
        result.detailElement := ParseString(jsn['detail'], jsn.vObj['_detail']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestReportSetupActionAssert(json : TJSONWriter; name : string; elem : TFhirTestReportSetupActionAssert; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'message', elem.messageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'message', elem.messageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'detail', elem.detailElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'detail', elem.detailElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportTest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTest(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportTest(jsn : TJsonObject) : TFhirTestReportTest;
begin
  result := TFhirTestReportTest.create;
  try
    ParseTestReportTestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTestProperties(jsn : TJsonObject; result : TFhirTestReportTest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestReportTestAction);
end;

procedure TFHIRJsonComposer.ComposeTestReportTest(json : TJSONWriter; name : string; elem : TFhirTestReportTest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestReportTestAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTestAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportTestAction(jsn : TJsonObject) : TFhirTestReportTestAction;
begin
  result := TFhirTestReportTestAction.create;
  try
    ParseTestReportTestActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTestActionProperties(jsn : TJsonObject; result : TFhirTestReportTestAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestReportSetupActionOperation(jsn.vObj['operation']);{q3}
    if jsn.has('assert') then
        result.assert := ParseTestReportSetupActionAssert(jsn.vObj['assert']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestReportTestAction(json : TJSONWriter; name : string; elem : TFhirTestReportTestAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(json, 'operation', elem.operation); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(json, 'assert', elem.assert); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTeardown(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportTeardown(jsn : TJsonObject) : TFhirTestReportTeardown;
begin
  result := TFhirTestReportTeardown.create;
  try
    ParseTestReportTeardownProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTeardownProperties(jsn : TJsonObject; result : TFhirTestReportTeardown);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestReportTeardownAction);
end;

procedure TFHIRJsonComposer.ComposeTestReportTeardown(json : TJSONWriter; name : string; elem : TFhirTestReportTeardown; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestReportTeardownAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTeardownAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportTeardownAction(jsn : TJsonObject) : TFhirTestReportTeardownAction;
begin
  result := TFhirTestReportTeardownAction.create;
  try
    ParseTestReportTeardownActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTeardownActionProperties(jsn : TJsonObject; result : TFhirTestReportTeardownAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestReportSetupActionOperation(jsn.vObj['operation']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestReportTeardownAction(json : TJSONWriter; name : string; elem : TFhirTestReportTeardownAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(json, 'operation', elem.operation); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReport(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReport(jsn : TJsonObject) : TFhirTestReport;
begin
  result := TFhirTestReport.create;
  try
    ParseTestReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportProperties(jsn : TJsonObject; result : TFhirTestReport);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirReportStatusCodesEnum, SYSTEMS_TFhirReportStatusCodesEnum);
    if jsn.has('testScript') then
        result.testScript := ParseReference{TFhirTestScript}(jsn.vObj['testScript']);{q3}
    if jsn.has('result') or jsn.has('_result')  then
      result.resultElement := parseEnum(jsn.path+'/result', jsn['result'], jsn.vObj['_result'], CODES_TFhirReportResultCodesEnum, SYSTEMS_TFhirReportResultCodesEnum);
    if jsn.has('score') or jsn.has('_score') then
        result.scoreElement := ParseDecimal(jsn['score'], jsn.vObj['_score']);{q}
    if jsn.has('tester') or jsn.has('_tester') then
        result.testerElement := ParseString(jsn['tester'], jsn.vObj['_tester']);{q}
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := ParseDateTime(jsn['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseTestReportParticipant);
    if jsn.has('setup') then
        result.setup := ParseTestReportSetup(jsn.vObj['setup']);{q3}
    if jsn.has('test') then
      iterateArray(jsn.vArr['test'], result.testList, parseTestReportTest);
    if jsn.has('teardown') then
        result.teardown := ParseTestReportTeardown(jsn.vObj['teardown']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestReport(json : TJSONWriter; name : string; elem : TFhirTestReport; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirReportStatusCodesEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirReportStatusCodesEnum, false);
  if not elem.noCompose and doCompose('testScript') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirTestScript}(json, 'testScript', elem.testScript); {a}
  if not elem.noCompose and doCompose('result') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'result', elem.ResultElement, CODES_TFhirReportResultCodesEnum, false);
  if not elem.noCompose and doCompose('result') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'result', elem.ResultElement, CODES_TFhirReportResultCodesEnum, false);
  if not elem.noCompose and doCompose('score') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'score', elem.scoreElement, false);
  if not elem.noCompose and doCompose('score') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'score', elem.scoreElement, false);
  if not elem.noCompose and doCompose('tester') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'tester', elem.testerElement, false);
  if not elem.noCompose and doCompose('tester') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'tester', elem.testerElement, false);
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('issued') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'issued', elem.issuedElement, false);
  if not elem.noCompose and doCompose('participant') and (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeTestReportParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('setup') and (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetup(json, 'setup', elem.setup); {a}
  if not elem.noCompose and doCompose('test') and (SummaryOption in [soFull, soData]) and (elem.testList.Count > 0) then
  begin
    json.valueArray('test');
    for i := 0 to elem.testList.Count - 1 do
      ComposeTestReportTest(json, '', elem.testList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('teardown') and (SummaryOption in [soFull, soData]) then
    ComposeTestReportTeardown(json, 'teardown', elem.teardown); {a}
end;

{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
procedure TFHIRJsonParser.ParseTestScriptOrigin(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptOrigin(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptOrigin(jsn : TJsonObject) : TFhirTestScriptOrigin;
begin
  result := TFhirTestScriptOrigin.create;
  try
    ParseTestScriptOriginProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptOriginProperties(jsn : TJsonObject; result : TFhirTestScriptOrigin);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('index') or jsn.has('_index') then
        result.indexElement := ParseInteger(jsn['index'], jsn.vObj['_index']);{q}
    if jsn.has('profile') then
        result.profile := ParseCoding(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptOrigin(json : TJSONWriter; name : string; elem : TFhirTestScriptOrigin; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'index', elem.indexElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'index', elem.indexElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptDestination(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptDestination(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptDestination(jsn : TJsonObject) : TFhirTestScriptDestination;
begin
  result := TFhirTestScriptDestination.create;
  try
    ParseTestScriptDestinationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptDestinationProperties(jsn : TJsonObject; result : TFhirTestScriptDestination);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('index') or jsn.has('_index') then
        result.indexElement := ParseInteger(jsn['index'], jsn.vObj['_index']);{q}
    if jsn.has('profile') then
        result.profile := ParseCoding(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptDestination(json : TJSONWriter; name : string; elem : TFhirTestScriptDestination; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'index', elem.indexElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'index', elem.indexElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadata(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptMetadata(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptMetadata(jsn : TJsonObject) : TFhirTestScriptMetadata;
begin
  result := TFhirTestScriptMetadata.create;
  try
    ParseTestScriptMetadataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataProperties(jsn : TJsonObject; result : TFhirTestScriptMetadata);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseTestScriptMetadataLink);
    if jsn.has('capability') then
      iterateArray(jsn.vArr['capability'], result.capabilityList, parseTestScriptMetadataCapability);
end;

procedure TFHIRJsonComposer.ComposeTestScriptMetadata(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadata; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeTestScriptMetadataLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.capabilityList.Count > 0) then
  begin
    json.valueArray('capability');
    for i := 0 to elem.capabilityList.Count - 1 do
      ComposeTestScriptMetadataCapability(json, '', elem.capabilityList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptMetadataLink(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptMetadataLink(jsn : TJsonObject) : TFhirTestScriptMetadataLink;
begin
  result := TFhirTestScriptMetadataLink.create;
  try
    ParseTestScriptMetadataLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataLinkProperties(jsn : TJsonObject; result : TFhirTestScriptMetadataLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptMetadataLink(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadataLink; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataCapability(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptMetadataCapability(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptMetadataCapability(jsn : TJsonObject) : TFhirTestScriptMetadataCapability;
begin
  result := TFhirTestScriptMetadataCapability.create;
  try
    ParseTestScriptMetadataCapabilityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataCapabilityProperties(jsn : TJsonObject; result : TFhirTestScriptMetadataCapability);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('required') or jsn.has('_required') then
        result.requiredElement := ParseBoolean(jsn['required'], jsn.vObj['_required']);{q}
    if jsn.has('validated') or jsn.has('_validated') then
        result.validatedElement := ParseBoolean(jsn['validated'], jsn.vObj['_validated']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
      if jsn.has('origin') or jsn.has('_origin') then
      iteratePrimitiveArray(jsn.vArr['origin'], jsn.vArr['_origin'], result.originList, parseInteger);
    if jsn.has('destination') or jsn.has('_destination') then
        result.destinationElement := ParseInteger(jsn['destination'], jsn.vObj['_destination']);{q}
      if jsn.has('link') or jsn.has('_link') then
      iteratePrimitiveArray(jsn.vArr['link'], jsn.vArr['_link'], result.link_List, parseUri);
    if jsn.has('capabilities') then
        result.capabilities := ParseReference{TFhirCapabilityStatement}(jsn.vObj['capabilities']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptMetadataCapability(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadataCapability; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (not isCanonical or (elem.required <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'required', elem.requiredElement, false);
  if not elem.noCompose and (not isCanonical or (elem.required <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'required', elem.requiredElement, false);
  if not elem.noCompose and (not isCanonical or (elem.validated <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'validated', elem.validatedElement, false);
  if not elem.noCompose and (not isCanonical or (elem.validated <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'validated', elem.validatedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.originList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.originList.Count - 1 do
    begin
      ext := ext or ((elem.originList[i].id <> '') or (elem.originList[i].hasExtensionList) {no-comments or (elem.originList[i].hasComments)});
      val := val or (elem.originList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('origin');
      for i := 0 to elem.originList.Count - 1 do
        ComposeIntegerValue(json, '',elem.originList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_origin');
      for i := 0 to elem.originList.Count - 1 do
        ComposeIntegerProps(json, '',elem.originList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'destination', elem.destinationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'destination', elem.destinationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.link_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.link_List.Count - 1 do
    begin
      ext := ext or ((elem.link_List[i].id <> '') or (elem.link_List[i].hasExtensionList) {no-comments or (elem.link_List[i].hasComments)});
      val := val or (elem.link_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('link');
      for i := 0 to elem.link_List.Count - 1 do
        ComposeUriValue(json, '',elem.link_List[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_link');
      for i := 0 to elem.link_List.Count - 1 do
        ComposeUriProps(json, '',elem.link_List[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCapabilityStatement}(json, 'capabilities', elem.capabilities); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptFixture(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptFixture(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptFixture(jsn : TJsonObject) : TFhirTestScriptFixture;
begin
  result := TFhirTestScriptFixture.create;
  try
    ParseTestScriptFixtureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptFixtureProperties(jsn : TJsonObject; result : TFhirTestScriptFixture);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('autocreate') or jsn.has('_autocreate') then
        result.autocreateElement := ParseBoolean(jsn['autocreate'], jsn.vObj['_autocreate']);{q}
    if jsn.has('autodelete') or jsn.has('_autodelete') then
        result.autodeleteElement := ParseBoolean(jsn['autodelete'], jsn.vObj['_autodelete']);{q}
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptFixture(json : TJSONWriter; name : string; elem : TFhirTestScriptFixture; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (not isCanonical or (elem.autocreate <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'autocreate', elem.autocreateElement, false);
  if not elem.noCompose and (not isCanonical or (elem.autocreate <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'autocreate', elem.autocreateElement, false);
  if not elem.noCompose and (not isCanonical or (elem.autodelete <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'autodelete', elem.autodeleteElement, false);
  if not elem.noCompose and (not isCanonical or (elem.autodelete <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'autodelete', elem.autodeleteElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptVariable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptVariable(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptVariable(jsn : TJsonObject) : TFhirTestScriptVariable;
begin
  result := TFhirTestScriptVariable.create;
  try
    ParseTestScriptVariableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptVariableProperties(jsn : TJsonObject; result : TFhirTestScriptVariable);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('defaultValue') or jsn.has('_defaultValue') then
        result.defaultValueElement := ParseString(jsn['defaultValue'], jsn.vObj['_defaultValue']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('headerField') or jsn.has('_headerField') then
        result.headerFieldElement := ParseString(jsn['headerField'], jsn.vObj['_headerField']);{q}
    if jsn.has('hint') or jsn.has('_hint') then
        result.hintElement := ParseString(jsn['hint'], jsn.vObj['_hint']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        result.sourceIdElement := ParseId(jsn['sourceId'], jsn.vObj['_sourceId']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptVariable(json : TJSONWriter; name : string; elem : TFhirTestScriptVariable; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'defaultValue', elem.defaultValueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'defaultValue', elem.defaultValueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'headerField', elem.headerFieldElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'headerField', elem.headerFieldElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'hint', elem.hintElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'hint', elem.hintElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'sourceId', elem.sourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'sourceId', elem.sourceIdElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRule(jsn : TJsonObject) : TFhirTestScriptRule;
begin
  result := TFhirTestScriptRule.create;
  try
    ParseTestScriptRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRuleProperties(jsn : TJsonObject; result : TFhirTestScriptRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
    if jsn.has('param') then
      iterateArray(jsn.vArr['param'], result.paramList, parseTestScriptRuleParam);
end;

procedure TFHIRJsonComposer.ComposeTestScriptRule(json : TJSONWriter; name : string; elem : TFhirTestScriptRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.paramList.Count > 0) then
  begin
    json.valueArray('param');
    for i := 0 to elem.paramList.Count - 1 do
      ComposeTestScriptRuleParam(json, '', elem.paramList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRuleParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRuleParam(jsn : TJsonObject) : TFhirTestScriptRuleParam;
begin
  result := TFhirTestScriptRuleParam.create;
  try
    ParseTestScriptRuleParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptRuleParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptRuleParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRuleset(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRuleset(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRuleset(jsn : TJsonObject) : TFhirTestScriptRuleset;
begin
  result := TFhirTestScriptRuleset.create;
  try
    ParseTestScriptRulesetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetProperties(jsn : TJsonObject; result : TFhirTestScriptRuleset);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseTestScriptRulesetRule);
end;

procedure TFHIRJsonComposer.ComposeTestScriptRuleset(json : TJSONWriter; name : string; elem : TFhirTestScriptRuleset; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeTestScriptRulesetRule(json, '', elem.ruleList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRulesetRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRulesetRule(jsn : TJsonObject) : TFhirTestScriptRulesetRule;
begin
  result := TFhirTestScriptRulesetRule.create;
  try
    ParseTestScriptRulesetRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetRuleProperties(jsn : TJsonObject; result : TFhirTestScriptRulesetRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('ruleId') or jsn.has('_ruleId') then
        result.ruleIdElement := ParseId(jsn['ruleId'], jsn.vObj['_ruleId']);{q}
    if jsn.has('param') then
      iterateArray(jsn.vArr['param'], result.paramList, parseTestScriptRulesetRuleParam);
end;

procedure TFHIRJsonComposer.ComposeTestScriptRulesetRule(json : TJSONWriter; name : string; elem : TFhirTestScriptRulesetRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'ruleId', elem.ruleIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'ruleId', elem.ruleIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.paramList.Count > 0) then
  begin
    json.valueArray('param');
    for i := 0 to elem.paramList.Count - 1 do
      ComposeTestScriptRulesetRuleParam(json, '', elem.paramList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRulesetRuleParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRulesetRuleParam(jsn : TJsonObject) : TFhirTestScriptRulesetRuleParam;
begin
  result := TFhirTestScriptRulesetRuleParam.create;
  try
    ParseTestScriptRulesetRuleParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptRulesetRuleParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptRulesetRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptRulesetRuleParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetup(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetup(jsn : TJsonObject) : TFhirTestScriptSetup;
begin
  result := TFhirTestScriptSetup.create;
  try
    ParseTestScriptSetupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupProperties(jsn : TJsonObject; result : TFhirTestScriptSetup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestScriptSetupAction);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetup(json : TJSONWriter; name : string; elem : TFhirTestScriptSetup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestScriptSetupAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupAction(jsn : TJsonObject) : TFhirTestScriptSetupAction;
begin
  result := TFhirTestScriptSetupAction.create;
  try
    ParseTestScriptSetupActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionProperties(jsn : TJsonObject; result : TFhirTestScriptSetupAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestScriptSetupActionOperation(jsn.vObj['operation']);{q3}
    if jsn.has('assert') then
        result.assert := ParseTestScriptSetupActionAssert(jsn.vObj['assert']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupAction(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(json, 'operation', elem.operation); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(json, 'assert', elem.assert); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionOperation(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionOperation(jsn : TJsonObject) : TFhirTestScriptSetupActionOperation;
begin
  result := TFhirTestScriptSetupActionOperation.create;
  try
    ParseTestScriptSetupActionOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperationProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionOperation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('resource') or jsn.has('_resource') then
        result.resourceElement := ParseCode(jsn['resource'], jsn.vObj['_resource']);{q}
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := ParseString(jsn['label'], jsn.vObj['_label']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('accept') or jsn.has('_accept') then
        result.acceptElement := ParseCode(jsn['accept'], jsn.vObj['_accept']);{q}
    if jsn.has('contentType') or jsn.has('_contentType') then
        result.contentTypeElement := ParseCode(jsn['contentType'], jsn.vObj['_contentType']);{q}
    if jsn.has('destination') or jsn.has('_destination') then
        result.destinationElement := ParseInteger(jsn['destination'], jsn.vObj['_destination']);{q}
    if jsn.has('encodeRequestUrl') or jsn.has('_encodeRequestUrl') then
        result.encodeRequestUrlElement := ParseBoolean(jsn['encodeRequestUrl'], jsn.vObj['_encodeRequestUrl']);{q}
    if jsn.has('origin') or jsn.has('_origin') then
        result.originElement := ParseInteger(jsn['origin'], jsn.vObj['_origin']);{q}
    if jsn.has('params') or jsn.has('_params') then
        result.paramsElement := ParseString(jsn['params'], jsn.vObj['_params']);{q}
    if jsn.has('requestHeader') then
      iterateArray(jsn.vArr['requestHeader'], result.requestHeaderList, parseTestScriptSetupActionOperationRequestHeader);
    if jsn.has('requestId') or jsn.has('_requestId') then
        result.requestIdElement := ParseId(jsn['requestId'], jsn.vObj['_requestId']);{q}
    if jsn.has('responseId') or jsn.has('_responseId') then
        result.responseIdElement := ParseId(jsn['responseId'], jsn.vObj['_responseId']);{q}
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        result.sourceIdElement := ParseId(jsn['sourceId'], jsn.vObj['_sourceId']);{q}
    if jsn.has('targetId') or jsn.has('_targetId') then
        result.targetIdElement := ParseId(jsn['targetId'], jsn.vObj['_targetId']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseString(jsn['url'], jsn.vObj['_url']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionOperation(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionOperation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'resource', elem.resourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'resource', elem.resourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'label', elem.label_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'label', elem.label_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'accept', elem.acceptElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'accept', elem.acceptElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'contentType', elem.contentTypeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'contentType', elem.contentTypeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'destination', elem.destinationElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'destination', elem.destinationElement, false);
  if not elem.noCompose and (not isCanonical or (elem.encodeRequestUrl <> true)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'encodeRequestUrl', elem.encodeRequestUrlElement, false);
  if not elem.noCompose and (not isCanonical or (elem.encodeRequestUrl <> true)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'encodeRequestUrl', elem.encodeRequestUrlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'origin', elem.originElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'origin', elem.originElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'params', elem.paramsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'params', elem.paramsElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.requestHeaderList.Count > 0) then
  begin
    json.valueArray('requestHeader');
    for i := 0 to elem.requestHeaderList.Count - 1 do
      ComposeTestScriptSetupActionOperationRequestHeader(json, '', elem.requestHeaderList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'requestId', elem.requestIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'requestId', elem.requestIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'responseId', elem.responseIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'responseId', elem.responseIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'sourceId', elem.sourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'sourceId', elem.sourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'targetId', elem.targetIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'targetId', elem.targetIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'url', elem.urlElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionOperationRequestHeader(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject) : TFhirTestScriptSetupActionOperationRequestHeader;
begin
  result := TFhirTestScriptSetupActionOperationRequestHeader.create;
  try
    ParseTestScriptSetupActionOperationRequestHeaderProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperationRequestHeaderProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionOperationRequestHeader);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('field') or jsn.has('_field') then
        result.fieldElement := ParseString(jsn['field'], jsn.vObj['_field']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionOperationRequestHeader(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionOperationRequestHeader; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'field', elem.fieldElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'field', elem.fieldElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssert(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssert(jsn : TJsonObject) : TFhirTestScriptSetupActionAssert;
begin
  result := TFhirTestScriptSetupActionAssert.create;
  try
    ParseTestScriptSetupActionAssertProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssert);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := ParseString(jsn['label'], jsn.vObj['_label']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('direction') or jsn.has('_direction')  then
      result.directionElement := parseEnum(jsn.path+'/direction', jsn['direction'], jsn.vObj['_direction'], CODES_TFhirAssertDirectionCodesEnum, SYSTEMS_TFhirAssertDirectionCodesEnum);
    if jsn.has('compareToSourceId') or jsn.has('_compareToSourceId') then
        result.compareToSourceIdElement := ParseString(jsn['compareToSourceId'], jsn.vObj['_compareToSourceId']);{q}
    if jsn.has('compareToSourceExpression') or jsn.has('_compareToSourceExpression') then
        result.compareToSourceExpressionElement := ParseString(jsn['compareToSourceExpression'], jsn.vObj['_compareToSourceExpression']);{q}
    if jsn.has('compareToSourcePath') or jsn.has('_compareToSourcePath') then
        result.compareToSourcePathElement := ParseString(jsn['compareToSourcePath'], jsn.vObj['_compareToSourcePath']);{q}
    if jsn.has('contentType') or jsn.has('_contentType') then
        result.contentTypeElement := ParseCode(jsn['contentType'], jsn.vObj['_contentType']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := ParseString(jsn['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('headerField') or jsn.has('_headerField') then
        result.headerFieldElement := ParseString(jsn['headerField'], jsn.vObj['_headerField']);{q}
    if jsn.has('minimumId') or jsn.has('_minimumId') then
        result.minimumIdElement := ParseString(jsn['minimumId'], jsn.vObj['_minimumId']);{q}
    if jsn.has('navigationLinks') or jsn.has('_navigationLinks') then
        result.navigationLinksElement := ParseBoolean(jsn['navigationLinks'], jsn.vObj['_navigationLinks']);{q}
    if jsn.has('operator') or jsn.has('_operator')  then
      result.operatorElement := parseEnum(jsn.path+'/operator', jsn['operator'], jsn.vObj['_operator'], CODES_TFhirAssertOperatorCodesEnum, SYSTEMS_TFhirAssertOperatorCodesEnum);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := ParseString(jsn['path'], jsn.vObj['_path']);{q}
    if jsn.has('requestMethod') or jsn.has('_requestMethod')  then
      result.requestMethodElement := parseEnum(jsn.path+'/requestMethod', jsn['requestMethod'], jsn.vObj['_requestMethod'], CODES_TFhirHttpOperationsEnum, SYSTEMS_TFhirHttpOperationsEnum);
    if jsn.has('requestURL') or jsn.has('_requestURL') then
        result.requestURLElement := ParseString(jsn['requestURL'], jsn.vObj['_requestURL']);{q}
    if jsn.has('resource') or jsn.has('_resource') then
        result.resourceElement := ParseCode(jsn['resource'], jsn.vObj['_resource']);{q}
    if jsn.has('response') or jsn.has('_response')  then
      result.responseElement := parseEnum(jsn.path+'/response', jsn['response'], jsn.vObj['_response'], CODES_TFhirAssertResponseCodeTypesEnum, SYSTEMS_TFhirAssertResponseCodeTypesEnum);
    if jsn.has('responseCode') or jsn.has('_responseCode') then
        result.responseCodeElement := ParseString(jsn['responseCode'], jsn.vObj['_responseCode']);{q}
    if jsn.has('rule') then
        result.rule := ParseTestScriptSetupActionAssertRule(jsn.vObj['rule']);{q3}
    if jsn.has('ruleset') then
        result.ruleset := ParseTestScriptSetupActionAssertRuleset(jsn.vObj['ruleset']);{q3}
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        result.sourceIdElement := ParseId(jsn['sourceId'], jsn.vObj['_sourceId']);{q}
    if jsn.has('validateProfileId') or jsn.has('_validateProfileId') then
        result.validateProfileIdElement := ParseId(jsn['validateProfileId'], jsn.vObj['_validateProfileId']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
    if jsn.has('warningOnly') or jsn.has('_warningOnly') then
        result.warningOnlyElement := ParseBoolean(jsn['warningOnly'], jsn.vObj['_warningOnly']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssert(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssert; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'label', elem.label_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'label', elem.label_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'direction', elem.DirectionElement, CODES_TFhirAssertDirectionCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'direction', elem.DirectionElement, CODES_TFhirAssertDirectionCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'compareToSourceId', elem.compareToSourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'compareToSourceId', elem.compareToSourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'compareToSourceExpression', elem.compareToSourceExpressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'compareToSourceExpression', elem.compareToSourceExpressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'compareToSourcePath', elem.compareToSourcePathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'compareToSourcePath', elem.compareToSourcePathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'contentType', elem.contentTypeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'contentType', elem.contentTypeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'headerField', elem.headerFieldElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'headerField', elem.headerFieldElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'minimumId', elem.minimumIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'minimumId', elem.minimumIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'navigationLinks', elem.navigationLinksElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'navigationLinks', elem.navigationLinksElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'operator', elem.OperatorElement, CODES_TFhirAssertOperatorCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'operator', elem.OperatorElement, CODES_TFhirAssertOperatorCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'requestMethod', elem.RequestMethodElement, CODES_TFhirHttpOperationsEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'requestMethod', elem.RequestMethodElement, CODES_TFhirHttpOperationsEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'requestURL', elem.requestURLElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'requestURL', elem.requestURLElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'resource', elem.resourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'resource', elem.resourceElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'response', elem.ResponseElement, CODES_TFhirAssertResponseCodeTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'response', elem.ResponseElement, CODES_TFhirAssertResponseCodeTypesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'responseCode', elem.responseCodeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'responseCode', elem.responseCodeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssertRule(json, 'rule', elem.rule); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssertRuleset(json, 'ruleset', elem.ruleset); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'sourceId', elem.sourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'sourceId', elem.sourceIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'validateProfileId', elem.validateProfileIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'validateProfileId', elem.validateProfileIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (not isCanonical or (elem.warningOnly <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'warningOnly', elem.warningOnlyElement, false);
  if not elem.noCompose and (not isCanonical or (elem.warningOnly <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'warningOnly', elem.warningOnlyElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRule(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRule;
begin
  result := TFhirTestScriptSetupActionAssertRule.create;
  try
    ParseTestScriptSetupActionAssertRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('ruleId') or jsn.has('_ruleId') then
        result.ruleIdElement := ParseId(jsn['ruleId'], jsn.vObj['_ruleId']);{q}
    if jsn.has('param') then
      iterateArray(jsn.vArr['param'], result.paramList, parseTestScriptSetupActionAssertRuleParam);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRule(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'ruleId', elem.ruleIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'ruleId', elem.ruleIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.paramList.Count > 0) then
  begin
    json.valueArray('param');
    for i := 0 to elem.paramList.Count - 1 do
      ComposeTestScriptSetupActionAssertRuleParam(json, '', elem.paramList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRuleParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleParam(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRuleParam;
begin
  result := TFhirTestScriptSetupActionAssertRuleParam.create;
  try
    ParseTestScriptSetupActionAssertRuleParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRuleParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRuleParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleset(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRuleset(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleset(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRuleset;
begin
  result := TFhirTestScriptSetupActionAssertRuleset.create;
  try
    ParseTestScriptSetupActionAssertRulesetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRuleset);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('rulesetId') or jsn.has('_rulesetId') then
        result.rulesetIdElement := ParseId(jsn['rulesetId'], jsn.vObj['_rulesetId']);{q}
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseTestScriptSetupActionAssertRulesetRule);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRuleset(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRuleset; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'rulesetId', elem.rulesetIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'rulesetId', elem.rulesetIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeTestScriptSetupActionAssertRulesetRule(json, '', elem.ruleList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRulesetRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRule(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRulesetRule;
begin
  result := TFhirTestScriptSetupActionAssertRulesetRule.create;
  try
    ParseTestScriptSetupActionAssertRulesetRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRuleProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRulesetRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('ruleId') or jsn.has('_ruleId') then
        result.ruleIdElement := ParseId(jsn['ruleId'], jsn.vObj['_ruleId']);{q}
    if jsn.has('param') then
      iterateArray(jsn.vArr['param'], result.paramList, parseTestScriptSetupActionAssertRulesetRuleParam);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRulesetRule(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRulesetRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'ruleId', elem.ruleIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'ruleId', elem.ruleIdElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.paramList.Count > 0) then
  begin
    json.valueArray('param');
    for i := 0 to elem.paramList.Count - 1 do
      ComposeTestScriptSetupActionAssertRulesetRuleParam(json, '', elem.paramList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRulesetRuleParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRuleParam(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRulesetRuleParam;
begin
  result := TFhirTestScriptSetupActionAssertRulesetRuleParam.create;
  try
    ParseTestScriptSetupActionAssertRulesetRuleParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRulesetRuleParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRulesetRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRulesetRuleParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptTest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTest(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptTest(jsn : TJsonObject) : TFhirTestScriptTest;
begin
  result := TFhirTestScriptTest.create;
  try
    ParseTestScriptTestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTestProperties(jsn : TJsonObject; result : TFhirTestScriptTest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseString(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestScriptTestAction);
end;

procedure TFHIRJsonComposer.ComposeTestScriptTest(json : TJSONWriter; name : string; elem : TFhirTestScriptTest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestScriptTestAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTestAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptTestAction(jsn : TJsonObject) : TFhirTestScriptTestAction;
begin
  result := TFhirTestScriptTestAction.create;
  try
    ParseTestScriptTestActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTestActionProperties(jsn : TJsonObject; result : TFhirTestScriptTestAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestScriptSetupActionOperation(jsn.vObj['operation']);{q3}
    if jsn.has('assert') then
        result.assert := ParseTestScriptSetupActionAssert(jsn.vObj['assert']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptTestAction(json : TJSONWriter; name : string; elem : TFhirTestScriptTestAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(json, 'operation', elem.operation); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(json, 'assert', elem.assert); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTeardown(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptTeardown(jsn : TJsonObject) : TFhirTestScriptTeardown;
begin
  result := TFhirTestScriptTeardown.create;
  try
    ParseTestScriptTeardownProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardownProperties(jsn : TJsonObject; result : TFhirTestScriptTeardown);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestScriptTeardownAction);
end;

procedure TFHIRJsonComposer.ComposeTestScriptTeardown(json : TJSONWriter; name : string; elem : TFhirTestScriptTeardown; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestScriptTeardownAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTeardownAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptTeardownAction(jsn : TJsonObject) : TFhirTestScriptTeardownAction;
begin
  result := TFhirTestScriptTeardownAction.create;
  try
    ParseTestScriptTeardownActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardownActionProperties(jsn : TJsonObject; result : TFhirTestScriptTeardownAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestScriptSetupActionOperation(jsn.vObj['operation']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptTeardownAction(json : TJSONWriter; name : string; elem : TFhirTestScriptTeardownAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(json, 'operation', elem.operation); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScript(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScript(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScript(jsn : TJsonObject) : TFhirTestScript;
begin
  result := TFhirTestScript.create;
  try
    ParseTestScriptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptProperties(jsn : TJsonObject; result : TFhirTestScript);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('origin') then
      iterateArray(jsn.vArr['origin'], result.originList, parseTestScriptOrigin);
    if jsn.has('destination') then
      iterateArray(jsn.vArr['destination'], result.destinationList, parseTestScriptDestination);
    if jsn.has('metadata') then
        result.metadata := ParseTestScriptMetadata(jsn.vObj['metadata']);{q3}
    if jsn.has('fixture') then
      iterateArray(jsn.vArr['fixture'], result.fixtureList, parseTestScriptFixture);
    if jsn.has('profile') then
      iterateArray(jsn.vArr['profile'], result.profileList, parseReference{TFhirReference});
    if jsn.has('variable') then
      iterateArray(jsn.vArr['variable'], result.variableList, parseTestScriptVariable);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseTestScriptRule);
    if jsn.has('ruleset') then
      iterateArray(jsn.vArr['ruleset'], result.rulesetList, parseTestScriptRuleset);
    if jsn.has('setup') then
        result.setup := ParseTestScriptSetup(jsn.vObj['setup']);{q3}
    if jsn.has('test') then
      iterateArray(jsn.vArr['test'], result.testList, parseTestScriptTest);
    if jsn.has('teardown') then
        result.teardown := ParseTestScriptTeardown(jsn.vObj['teardown']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScript(json : TJSONWriter; name : string; elem : TFhirTestScript; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('origin') and (SummaryOption in [soFull, soData]) and (elem.originList.Count > 0) then
  begin
    json.valueArray('origin');
    for i := 0 to elem.originList.Count - 1 do
      ComposeTestScriptOrigin(json, '', elem.originList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('destination') and (SummaryOption in [soFull, soData]) and (elem.destinationList.Count > 0) then
  begin
    json.valueArray('destination');
    for i := 0 to elem.destinationList.Count - 1 do
      ComposeTestScriptDestination(json, '', elem.destinationList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('metadata') and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptMetadata(json, 'metadata', elem.metadata); {a}
  if not elem.noCompose and doCompose('fixture') and (SummaryOption in [soFull, soData]) and (elem.fixtureList.Count > 0) then
  begin
    json.valueArray('fixture');
    for i := 0 to elem.fixtureList.Count - 1 do
      ComposeTestScriptFixture(json, '', elem.fixtureList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('profile') and (SummaryOption in [soFull, soData]) and (elem.profileList.Count > 0) then
  begin
    json.valueArray('profile');
    for i := 0 to elem.profileList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.profileList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('variable') and (SummaryOption in [soFull, soData]) and (elem.variableList.Count > 0) then
  begin
    json.valueArray('variable');
    for i := 0 to elem.variableList.Count - 1 do
      ComposeTestScriptVariable(json, '', elem.variableList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('rule') and (SummaryOption in [soFull, soData]) and (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeTestScriptRule(json, '', elem.ruleList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('ruleset') and (SummaryOption in [soFull, soData]) and (elem.rulesetList.Count > 0) then
  begin
    json.valueArray('ruleset');
    for i := 0 to elem.rulesetList.Count - 1 do
      ComposeTestScriptRuleset(json, '', elem.rulesetList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('setup') and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetup(json, 'setup', elem.setup); {a}
  if not elem.noCompose and doCompose('test') and (SummaryOption in [soFull, soData]) and (elem.testList.Count > 0) then
  begin
    json.valueArray('test');
    for i := 0 to elem.testList.Count - 1 do
      ComposeTestScriptTest(json, '', elem.testList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('teardown') and (SummaryOption in [soFull, soData]) then
    ComposeTestScriptTeardown(json, 'teardown', elem.teardown); {a}
end;

{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_USERSESSION}
procedure TFHIRJsonParser.ParseUserSessionStatus(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUserSessionStatus(jsn)); {2}
end;

function TFHIRJsonParser.ParseUserSessionStatus(jsn : TJsonObject) : TFhirUserSessionStatus;
begin
  result := TFhirUserSessionStatus.create;
  try
    ParseUserSessionStatusProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseUserSessionStatusProperties(jsn : TJsonObject; result : TFhirUserSessionStatus);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn['code'], jsn.vObj['_code'], CODES_TFhirUsersessionStatusEnum, SYSTEMS_TFhirUsersessionStatusEnum);
    if jsn.has('source') or jsn.has('_source')  then
      result.sourceElement := parseEnum(jsn.path+'/source', jsn['source'], jsn.vObj['_source'], CODES_TFhirUsersessionStatusSourceEnum, SYSTEMS_TFhirUsersessionStatusSourceEnum);
end;

procedure TFHIRJsonComposer.ComposeUserSessionStatus(json : TJSONWriter; name : string; elem : TFhirUserSessionStatus; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirUsersessionStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirUsersessionStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'source', elem.SourceElement, CODES_TFhirUsersessionStatusSourceEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'source', elem.SourceElement, CODES_TFhirUsersessionStatusSourceEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseUserSessionContext(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUserSessionContext(jsn)); {2}
end;

function TFHIRJsonParser.ParseUserSessionContext(jsn : TJsonObject) : TFhirUserSessionContext;
begin
  result := TFhirUserSessionContext.create;
  try
    ParseUserSessionContextProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseUserSessionContextProperties(jsn : TJsonObject; result : TFhirUserSessionContext);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := ParseString(jsn['type'], jsn.vObj['_type']);{q}
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
end;

procedure TFHIRJsonComposer.ComposeUserSessionContext(json : TJSONWriter; name : string; elem : TFhirUserSessionContext; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'type', elem.type_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseUserSession(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUserSession(jsn)); {2}
end;

function TFHIRJsonParser.ParseUserSession(jsn : TJsonObject) : TFhirUserSession;
begin
  result := TFhirUserSession.create;
  try
    ParseUserSessionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseUserSessionProperties(jsn : TJsonObject; result : TFhirUserSession);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('user') then
        result.user := ParseReference{Resource}(jsn.vObj['user']);{q3}
    if jsn.has('status') then
        result.status := ParseUserSessionStatus(jsn.vObj['status']);{q3}
    if jsn.has('workstation') then
        result.workstation := ParseIdentifier(jsn.vObj['workstation']);{q3}
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], result.focusList, parseReference{TFhirReference});
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := ParseInstant(jsn['created'], jsn.vObj['_created']);{q}
    if jsn.has('expires') or jsn.has('_expires') then
        result.expiresElement := ParseInstant(jsn['expires'], jsn.vObj['_expires']);{q}
    if jsn.has('context') then
      iterateArray(jsn.vArr['context'], result.contextList, parseUserSessionContext);
end;

procedure TFHIRJsonComposer.ComposeUserSession(json : TJSONWriter; name : string; elem : TFhirUserSession; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and doCompose('user') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'user', elem.user); {a}
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soData]) then
    ComposeUserSessionStatus(json, 'status', elem.status); {a}
  if not elem.noCompose and doCompose('workstation') and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'workstation', elem.workstation); {a}
  if not elem.noCompose and doCompose('focus') and (SummaryOption in [soFull, soData]) and (elem.focusList.Count > 0) then
  begin
    json.valueArray('focus');
    for i := 0 to elem.focusList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.focusList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeInstantValue(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('created') and (SummaryOption in [soFull, soData]) then
    ComposeInstantProps(json, 'created', elem.createdElement, false);
  if not elem.noCompose and doCompose('expires') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'expires', elem.expiresElement, false);
  if not elem.noCompose and doCompose('expires') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'expires', elem.expiresElement, false);
  if not elem.noCompose and doCompose('context') and (SummaryOption in [soFull, soData]) and (elem.contextList.Count > 0) then
  begin
    json.valueArray('context');
    for i := 0 to elem.contextList.Count - 1 do
      ComposeUserSessionContext(json, '', elem.contextList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_USERSESSION}
{$IFDEF FHIR_VALUESET}
procedure TFHIRJsonParser.ParseValueSetCompose(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetCompose(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetCompose(jsn : TJsonObject) : TFhirValueSetCompose;
begin
  result := TFhirValueSetCompose.create;
  try
    ParseValueSetComposeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeProperties(jsn : TJsonObject; result : TFhirValueSetCompose);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('lockedDate') or jsn.has('_lockedDate') then
        result.lockedDateElement := ParseDate(jsn['lockedDate'], jsn.vObj['_lockedDate']);{q}
    if jsn.has('inactive') or jsn.has('_inactive') then
        result.inactiveElement := ParseBoolean(jsn['inactive'], jsn.vObj['_inactive']);{q}
    if jsn.has('include') then
      iterateArray(jsn.vArr['include'], result.includeList, parseValueSetComposeInclude);
    if jsn.has('exclude') then
      iterateArray(jsn.vArr['exclude'], result.excludeList, parseValueSetComposeInclude);
end;

procedure TFHIRJsonComposer.ComposeValueSetCompose(json : TJSONWriter; name : string; elem : TFhirValueSetCompose; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'lockedDate', elem.lockedDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'lockedDate', elem.lockedDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'inactive', elem.inactiveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'inactive', elem.inactiveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.includeList.Count > 0) then
  begin
    json.valueArray('include');
    for i := 0 to elem.includeList.Count - 1 do
      ComposeValueSetComposeInclude(json, '', elem.includeList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.excludeList.Count > 0) then
  begin
    json.valueArray('exclude');
    for i := 0 to elem.excludeList.Count - 1 do
      ComposeValueSetComposeInclude(json, '', elem.excludeList[i]); {z - @ValueSet.compose.include}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetComposeInclude(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeInclude(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetComposeInclude(jsn : TJsonObject) : TFhirValueSetComposeInclude;
begin
  result := TFhirValueSetComposeInclude.create;
  try
    ParseValueSetComposeIncludeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeProperties(jsn : TJsonObject; result : TFhirValueSetComposeInclude);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := ParseUri(jsn['system'], jsn.vObj['_system']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('concept') then
      iterateArray(jsn.vArr['concept'], result.conceptList, parseValueSetComposeIncludeConcept);
    if jsn.has('filter') then
      iterateArray(jsn.vArr['filter'], result.filterList, parseValueSetComposeIncludeFilter);
      if jsn.has('valueSet') or jsn.has('_valueSet') then
      iteratePrimitiveArray(jsn.vArr['valueSet'], jsn.vArr['_valueSet'], result.valueSetList, parseUri);
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeInclude(json : TJSONWriter; name : string; elem : TFhirValueSetComposeInclude; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.conceptList.Count > 0) then
  begin
    json.valueArray('concept');
    for i := 0 to elem.conceptList.Count - 1 do
      ComposeValueSetComposeIncludeConcept(json, '', elem.conceptList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.filterList.Count > 0) then
  begin
    json.valueArray('filter');
    for i := 0 to elem.filterList.Count - 1 do
      ComposeValueSetComposeIncludeFilter(json, '', elem.filterList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSetList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.valueSetList.Count - 1 do
    begin
      ext := ext or ((elem.valueSetList[i].id <> '') or (elem.valueSetList[i].hasExtensionList) {no-comments or (elem.valueSetList[i].hasComments)});
      val := val or (elem.valueSetList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('valueSet');
      for i := 0 to elem.valueSetList.Count - 1 do
        ComposeUriValue(json, '',elem.valueSetList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_valueSet');
      for i := 0 to elem.valueSetList.Count - 1 do
        ComposeUriProps(json, '',elem.valueSetList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeIncludeConcept(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetComposeIncludeConcept(jsn : TJsonObject) : TFhirValueSetComposeIncludeConcept;
begin
  result := TFhirValueSetComposeIncludeConcept.create;
  try
    ParseValueSetComposeIncludeConceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConceptProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeConcept);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseValueSetComposeIncludeConceptDesignation);
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeIncludeConcept(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeConcept; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(json, '', elem.designationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeIncludeConceptDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject) : TFhirValueSetComposeIncludeConceptDesignation;
begin
  result := TFhirValueSetComposeIncludeConceptDesignation.create;
  try
    ParseValueSetComposeIncludeConceptDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConceptDesignationProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeConceptDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := ParseCode(jsn['language'], jsn.vObj['_language']);{q}
    if jsn.has('use') then
        result.use := ParseCoding(jsn.vObj['use']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseString(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeIncludeConceptDesignation(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeConceptDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'use', elem.use); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeIncludeFilter(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetComposeIncludeFilter(jsn : TJsonObject) : TFhirValueSetComposeIncludeFilter;
begin
  result := TFhirValueSetComposeIncludeFilter.create;
  try
    ParseValueSetComposeIncludeFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeFilterProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeFilter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('property') or jsn.has('_property') then
        result.property_Element := ParseCode(jsn['property'], jsn.vObj['_property']);{q}
    if jsn.has('op') or jsn.has('_op')  then
      result.opElement := parseEnum(jsn.path+'/op', jsn['op'], jsn.vObj['_op'], CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := ParseCode(jsn['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeIncludeFilter(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeFilter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'property', elem.property_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'property', elem.property_Element, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'op', elem.OpElement, CODES_TFhirFilterOperatorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'op', elem.OpElement, CODES_TFhirFilterOperatorEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'value', elem.valueElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetExpansion(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetExpansion(jsn : TJsonObject) : TFhirValueSetExpansion;
begin
  result := TFhirValueSetExpansion.create;
  try
    ParseValueSetExpansionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionProperties(jsn : TJsonObject; result : TFhirValueSetExpansion);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') or jsn.has('_identifier') then
        result.identifierElement := ParseUri(jsn['identifier'], jsn.vObj['_identifier']);{q}
    if jsn.has('timestamp') or jsn.has('_timestamp') then
        result.timestampElement := ParseDateTime(jsn['timestamp'], jsn.vObj['_timestamp']);{q}
    if jsn.has('total') or jsn.has('_total') then
        result.totalElement := ParseInteger(jsn['total'], jsn.vObj['_total']);{q}
    if jsn.has('offset') or jsn.has('_offset') then
        result.offsetElement := ParseInteger(jsn['offset'], jsn.vObj['_offset']);{q}
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseValueSetExpansionParameter);
    if jsn.has('contains') then
      iterateArray(jsn.vArr['contains'], result.containsList, parseValueSetExpansionContains);
end;

procedure TFHIRJsonComposer.ComposeValueSetExpansion(json : TJSONWriter; name : string; elem : TFhirValueSetExpansion; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'identifier', elem.identifierElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'identifier', elem.identifierElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'timestamp', elem.timestampElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'timestamp', elem.timestampElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'total', elem.totalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'total', elem.totalElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'offset', elem.offsetElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'offset', elem.offsetElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeValueSetExpansionParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.containsList.Count > 0) then
  begin
    json.valueArray('contains');
    for i := 0 to elem.containsList.Count - 1 do
      ComposeValueSetExpansionContains(json, '', elem.containsList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetExpansionParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetExpansionParameter(jsn : TJsonObject) : TFhirValueSetExpansionParameter;
begin
  result := TFhirValueSetExpansionParameter.create;
  try
    ParseValueSetExpansionParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionParameterProperties(jsn : TJsonObject; result : TFhirValueSetExpansionParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeValueSetExpansionParameter(json : TJSONWriter; name : string; elem : TFhirValueSetExpansionParameter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionContains(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetExpansionContains(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetExpansionContains(jsn : TJsonObject) : TFhirValueSetExpansionContains;
begin
  result := TFhirValueSetExpansionContains.create;
  try
    ParseValueSetExpansionContainsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionContainsProperties(jsn : TJsonObject; result : TFhirValueSetExpansionContains);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := ParseUri(jsn['system'], jsn.vObj['_system']);{q}
    if jsn.has('abstract') or jsn.has('_abstract') then
        result.abstractElement := ParseBoolean(jsn['abstract'], jsn.vObj['_abstract']);{q}
    if jsn.has('inactive') or jsn.has('_inactive') then
        result.inactiveElement := ParseBoolean(jsn['inactive'], jsn.vObj['_inactive']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := ParseCode(jsn['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := ParseString(jsn['display'], jsn.vObj['_display']);{q}
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseValueSetComposeIncludeConceptDesignation);
    if jsn.has('contains') then
      iterateArray(jsn.vArr['contains'], result.containsList, parseValueSetExpansionContains);
end;

procedure TFHIRJsonComposer.ComposeValueSetExpansionContains(json : TJSONWriter; name : string; elem : TFhirValueSetExpansionContains; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if not elem.noCompose and (not isCanonical or (elem.abstract <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'abstract', elem.abstractElement, false);
  if not elem.noCompose and (not isCanonical or (elem.abstract <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'abstract', elem.abstractElement, false);
  if not elem.noCompose and (not isCanonical or (elem.inactive <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'inactive', elem.inactiveElement, false);
  if not elem.noCompose and (not isCanonical or (elem.inactive <> false)) and (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'inactive', elem.inactiveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(json, '', elem.designationList[i]); {z - @ValueSet.compose.include.concept.designation}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.containsList.Count > 0) then
  begin
    json.valueArray('contains');
    for i := 0 to elem.containsList.Count - 1 do
      ComposeValueSetExpansionContains(json, '', elem.containsList[i]); {z - @ValueSet.expansion.contains}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSet(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSet(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSet(jsn : TJsonObject) : TFhirValueSet;
begin
  result := TFhirValueSet.create;
  try
    ParseValueSetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetProperties(jsn : TJsonObject; result : TFhirValueSet);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := ParseUri(jsn['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := ParseString(jsn['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := ParseString(jsn['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := ParseString(jsn['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := ParseBoolean(jsn['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDateTime(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := ParseString(jsn['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := ParseMarkdown(jsn['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('immutable') or jsn.has('_immutable') then
        result.immutableElement := ParseBoolean(jsn['immutable'], jsn.vObj['_immutable']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := ParseMarkdown(jsn['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := ParseMarkdown(jsn['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('extensible') or jsn.has('_extensible') then
        result.extensibleElement := ParseBoolean(jsn['extensible'], jsn.vObj['_extensible']);{q}
    if jsn.has('compose') then
        result.compose := ParseValueSetCompose(jsn.vObj['compose']);{q3}
    if jsn.has('expansion') then
        result.expansion := ParseValueSetExpansion(jsn.vObj['expansion']);{q3}
end;

procedure TFHIRJsonComposer.ComposeValueSet(json : TJSONWriter; name : string; elem : TFhirValueSet; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('url') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('version') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('name') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('title') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('experimental') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('date') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('publisher') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if not elem.noCompose and doCompose('contact') and (SummaryOption in [soFull, soSummary, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('description') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if not elem.noCompose and doCompose('useContext') and (SummaryOption in [soFull, soSummary, soData]) and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('jurisdiction') and (SummaryOption in [soFull, soSummary, soData]) and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('immutable') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'immutable', elem.immutableElement, false);
  if not elem.noCompose and doCompose('immutable') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'immutable', elem.immutableElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('purpose') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('copyright') and (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if not elem.noCompose and doCompose('extensible') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'extensible', elem.extensibleElement, false);
  if not elem.noCompose and doCompose('extensible') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'extensible', elem.extensibleElement, false);
  if not elem.noCompose and doCompose('compose') and (SummaryOption in [soFull, soData]) then
    ComposeValueSetCompose(json, 'compose', elem.compose); {a}
  if not elem.noCompose and doCompose('expansion') and (SummaryOption in [soFull, soData]) then
    ComposeValueSetExpansion(json, 'expansion', elem.expansion); {a}
end;

{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
procedure TFHIRJsonParser.ParseVerificationResultPrimarySource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVerificationResultPrimarySource(jsn)); {2}
end;

function TFHIRJsonParser.ParseVerificationResultPrimarySource(jsn : TJsonObject) : TFhirVerificationResultPrimarySource;
begin
  result := TFhirVerificationResultPrimarySource.create;
  try
    ParseVerificationResultPrimarySourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVerificationResultPrimarySourceProperties(jsn : TJsonObject; result : TFhirVerificationResultPrimarySource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('validationProcess') then
      iterateArray(jsn.vArr['validationProcess'], result.validationProcessList, parseCodeableConcept);
    if jsn.has('validationStatus') or jsn.has('_validationStatus')  then
      result.validationStatusElement := parseEnum(jsn.path+'/validationStatus', jsn['validationStatus'], jsn.vObj['_validationStatus'], CODES_TFhirValidationStatusEnum, SYSTEMS_TFhirValidationStatusEnum);
    if jsn.has('validationDate') or jsn.has('_validationDate') then
        result.validationDateElement := ParseDateTime(jsn['validationDate'], jsn.vObj['_validationDate']);{q}
    if jsn.has('canPushUpdates') or jsn.has('_canPushUpdates')  then
      result.canPushUpdatesElement := parseEnum(jsn.path+'/canPushUpdates', jsn['canPushUpdates'], jsn.vObj['_canPushUpdates'], CODES_TFhirCanPushUpdatesEnum, SYSTEMS_TFhirCanPushUpdatesEnum);
    if jsn.has('pushTypeAvailable') or jsn.has('_pushTypeAvailable') then
      iterateEnumArray(jsn.vArr['pushTypeAvailable'], jsn.vArr['_pushTypeAvailable'], jsn.path+'/pushTypeAvailable', result.pushTypeAvailableList, parseEnum, CODES_TFhirPushTypeAvailableEnum, SYSTEMS_TFhirPushTypeAvailableEnum);
end;

procedure TFHIRJsonComposer.ComposeVerificationResultPrimarySource(json : TJSONWriter; name : string; elem : TFhirVerificationResultPrimarySource; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) and (elem.validationProcessList.Count > 0) then
  begin
    json.valueArray('validationProcess');
    for i := 0 to elem.validationProcessList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.validationProcessList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'validationStatus', elem.ValidationStatusElement, CODES_TFhirValidationStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'validationStatus', elem.ValidationStatusElement, CODES_TFhirValidationStatusEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'validationDate', elem.validationDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'validationDate', elem.validationDateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'canPushUpdates', elem.CanPushUpdatesElement, CODES_TFhirCanPushUpdatesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'canPushUpdates', elem.CanPushUpdatesElement, CODES_TFhirCanPushUpdatesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.pushTypeAvailableList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.pushTypeAvailableList.Count - 1 do
    begin
      val := val or (elem.pushTypeAvailableList[i].hasPrimitiveValue);
      ext := ext or ((elem.pushTypeAvailableList[i].id <> '') or (elem.pushTypeAvailableList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('pushTypeAvailable');
      for i := 0 to elem.pushTypeAvailableList.Count - 1 do
        ComposeEnumValue(json, '', elem.pushTypeAvailableList[i], CODES_TFhirPushTypeAvailableEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_pushTypeAvailable');
      for i := 0 to elem.pushTypeAvailableList.Count - 1 do
        ComposeEnumProps(json, '', elem.pushTypeAvailableList[i], CODES_TFhirPushTypeAvailableEnum, true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseVerificationResultAttestation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVerificationResultAttestation(jsn)); {2}
end;

function TFHIRJsonParser.ParseVerificationResultAttestation(jsn : TJsonObject) : TFhirVerificationResultAttestation;
begin
  result := TFhirVerificationResultAttestation.create;
  try
    ParseVerificationResultAttestationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVerificationResultAttestationProperties(jsn : TJsonObject; result : TFhirVerificationResultAttestation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('source') then
        result.source := ParseReference{TFhirPractitioner}(jsn.vObj['source']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := ParseDate(jsn['date'], jsn.vObj['_date']);{q}
    if jsn.has('sourceIdentityCertificate') or jsn.has('_sourceIdentityCertificate') then
        result.sourceIdentityCertificateElement := ParseString(jsn['sourceIdentityCertificate'], jsn.vObj['_sourceIdentityCertificate']);{q}
    if jsn.has('proxyIdentityCertificate') or jsn.has('_proxyIdentityCertificate') then
        result.proxyIdentityCertificateElement := ParseString(jsn['proxyIdentityCertificate'], jsn.vObj['_proxyIdentityCertificate']);{q}
end;

procedure TFHIRJsonComposer.ComposeVerificationResultAttestation(json : TJSONWriter; name : string; elem : TFhirVerificationResultAttestation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'source', elem.source); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'sourceIdentityCertificate', elem.sourceIdentityCertificateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'sourceIdentityCertificate', elem.sourceIdentityCertificateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'proxyIdentityCertificate', elem.proxyIdentityCertificateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'proxyIdentityCertificate', elem.proxyIdentityCertificateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseVerificationResultValidator(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVerificationResultValidator(jsn)); {2}
end;

function TFHIRJsonParser.ParseVerificationResultValidator(jsn : TJsonObject) : TFhirVerificationResultValidator;
begin
  result := TFhirVerificationResultValidator.create;
  try
    ParseVerificationResultValidatorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVerificationResultValidatorProperties(jsn : TJsonObject; result : TFhirVerificationResultValidator);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('identityCertificate') or jsn.has('_identityCertificate') then
        result.identityCertificateElement := ParseString(jsn['identityCertificate'], jsn.vObj['_identityCertificate']);{q}
    if jsn.has('dateValidated') or jsn.has('_dateValidated') then
        result.dateValidatedElement := ParseDate(jsn['dateValidated'], jsn.vObj['_dateValidated']);{q}
end;

procedure TFHIRJsonComposer.ComposeVerificationResultValidator(json : TJSONWriter; name : string; elem : TFhirVerificationResultValidator; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'identityCertificate', elem.identityCertificateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'identityCertificate', elem.identityCertificateElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'dateValidated', elem.dateValidatedElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'dateValidated', elem.dateValidatedElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseVerificationResult(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVerificationResult(jsn)); {2}
end;

function TFHIRJsonParser.ParseVerificationResult(jsn : TJsonObject) : TFhirVerificationResult;
begin
  result := TFhirVerificationResult.create;
  try
    ParseVerificationResultProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVerificationResultProperties(jsn : TJsonObject; result : TFhirVerificationResult);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseReference{TFhirReference});
      if jsn.has('targetLocation') or jsn.has('_targetLocation') then
      iteratePrimitiveArray(jsn.vArr['targetLocation'], jsn.vArr['_targetLocation'], result.targetLocationList, parseString);
    if jsn.has('need') or jsn.has('_need')  then
      result.needElement := parseEnum(jsn.path+'/need', jsn['need'], jsn.vObj['_need'], CODES_TFhirNeedEnum, SYSTEMS_TFhirNeedEnum);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirStatusEnum, SYSTEMS_TFhirStatusEnum);
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        result.statusDateElement := ParseDateTime(jsn['statusDate'], jsn.vObj['_statusDate']);{q}
    if jsn.has('validationType') or jsn.has('_validationType')  then
      result.validationTypeElement := parseEnum(jsn.path+'/validationType', jsn['validationType'], jsn.vObj['_validationType'], CODES_TFhirValidationTypeEnum, SYSTEMS_TFhirValidationTypeEnum);
    if jsn.has('validationProcess') then
      iterateArray(jsn.vArr['validationProcess'], result.validationProcessList, parseCodeableConcept);
    if jsn.has('frequency') then
        result.frequency := ParseTiming(jsn.vObj['frequency']);{q3}
    if jsn.has('lastPerformed') or jsn.has('_lastPerformed') then
        result.lastPerformedElement := ParseDateTime(jsn['lastPerformed'], jsn.vObj['_lastPerformed']);{q}
    if jsn.has('nextScheduled') or jsn.has('_nextScheduled') then
        result.nextScheduledElement := ParseDate(jsn['nextScheduled'], jsn.vObj['_nextScheduled']);{q}
    if jsn.has('failureAction') or jsn.has('_failureAction')  then
      result.failureActionElement := parseEnum(jsn.path+'/failureAction', jsn['failureAction'], jsn.vObj['_failureAction'], CODES_TFhirFailureActionEnum, SYSTEMS_TFhirFailureActionEnum);
    if jsn.has('primarySource') then
      iterateArray(jsn.vArr['primarySource'], result.primarySourceList, parseVerificationResultPrimarySource);
    if jsn.has('attestation') then
        result.attestation := ParseVerificationResultAttestation(jsn.vObj['attestation']);{q3}
    if jsn.has('validator') then
      iterateArray(jsn.vArr['validator'], result.validatorList, parseVerificationResultValidator);
end;

procedure TFHIRJsonComposer.ComposeVerificationResult(json : TJSONWriter; name : string; elem : TFhirVerificationResult; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('target') and (SummaryOption in [soFull, soSummary, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.targetList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('targetLocation') and (SummaryOption in [soFull, soSummary, soData]) and (elem.targetLocationList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.targetLocationList.Count - 1 do
    begin
      ext := ext or ((elem.targetLocationList[i].id <> '') or (elem.targetLocationList[i].hasExtensionList) {no-comments or (elem.targetLocationList[i].hasComments)});
      val := val or (elem.targetLocationList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('targetLocation');
      for i := 0 to elem.targetLocationList.Count - 1 do
        ComposeStringValue(json, '',elem.targetLocationList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_targetLocation');
      for i := 0 to elem.targetLocationList.Count - 1 do
        ComposeStringProps(json, '',elem.targetLocationList[i], true);
      json.FinishArray;
    end;
  end;
  if not elem.noCompose and doCompose('need') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'need', elem.NeedElement, CODES_TFhirNeedEnum, false);
  if not elem.noCompose and doCompose('need') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'need', elem.NeedElement, CODES_TFhirNeedEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirStatusEnum, false);
  if not elem.noCompose and doCompose('statusDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and doCompose('statusDate') and (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'statusDate', elem.statusDateElement, false);
  if not elem.noCompose and doCompose('validationType') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'validationType', elem.ValidationTypeElement, CODES_TFhirValidationTypeEnum, false);
  if not elem.noCompose and doCompose('validationType') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'validationType', elem.ValidationTypeElement, CODES_TFhirValidationTypeEnum, false);
  if not elem.noCompose and doCompose('validationProcess') and (SummaryOption in [soFull, soSummary, soData]) and (elem.validationProcessList.Count > 0) then
  begin
    json.valueArray('validationProcess');
    for i := 0 to elem.validationProcessList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.validationProcessList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('frequency') and (SummaryOption in [soFull, soData]) then
    ComposeTiming(json, 'frequency', elem.frequency); {a}
  if not elem.noCompose and doCompose('lastPerformed') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'lastPerformed', elem.lastPerformedElement, false);
  if not elem.noCompose and doCompose('lastPerformed') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'lastPerformed', elem.lastPerformedElement, false);
  if not elem.noCompose and doCompose('nextScheduled') and (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'nextScheduled', elem.nextScheduledElement, false);
  if not elem.noCompose and doCompose('nextScheduled') and (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'nextScheduled', elem.nextScheduledElement, false);
  if not elem.noCompose and doCompose('failureAction') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'failureAction', elem.FailureActionElement, CODES_TFhirFailureActionEnum, false);
  if not elem.noCompose and doCompose('failureAction') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'failureAction', elem.FailureActionElement, CODES_TFhirFailureActionEnum, false);
  if not elem.noCompose and doCompose('primarySource') and (SummaryOption in [soFull, soData]) and (elem.primarySourceList.Count > 0) then
  begin
    json.valueArray('primarySource');
    for i := 0 to elem.primarySourceList.Count - 1 do
      ComposeVerificationResultPrimarySource(json, '', elem.primarySourceList[i]); {z - }
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('attestation') and (SummaryOption in [soFull, soData]) then
    ComposeVerificationResultAttestation(json, 'attestation', elem.attestation); {a}
  if not elem.noCompose and doCompose('validator') and (SummaryOption in [soFull, soData]) and (elem.validatorList.Count > 0) then
  begin
    json.valueArray('validator');
    for i := 0 to elem.validatorList.Count - 1 do
      ComposeVerificationResultValidator(json, '', elem.validatorList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
procedure TFHIRJsonParser.ParseVisionPrescriptionDispense(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVisionPrescriptionDispense(jsn)); {2}
end;

function TFHIRJsonParser.ParseVisionPrescriptionDispense(jsn : TJsonObject) : TFhirVisionPrescriptionDispense;
begin
  result := TFhirVisionPrescriptionDispense.create;
  try
    ParseVisionPrescriptionDispenseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVisionPrescriptionDispenseProperties(jsn : TJsonObject; result : TFhirVisionPrescriptionDispense);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('product') then
        result.product := ParseCodeableConcept(jsn.vObj['product']);{q3}
    if jsn.has('eye') or jsn.has('_eye')  then
      result.eyeElement := parseEnum(jsn.path+'/eye', jsn['eye'], jsn.vObj['_eye'], CODES_TFhirVisionEyeCodesEnum, SYSTEMS_TFhirVisionEyeCodesEnum);
    if jsn.has('sphere') or jsn.has('_sphere') then
        result.sphereElement := ParseDecimal(jsn['sphere'], jsn.vObj['_sphere']);{q}
    if jsn.has('cylinder') or jsn.has('_cylinder') then
        result.cylinderElement := ParseDecimal(jsn['cylinder'], jsn.vObj['_cylinder']);{q}
    if jsn.has('axis') or jsn.has('_axis') then
        result.axisElement := ParseInteger(jsn['axis'], jsn.vObj['_axis']);{q}
    if jsn.has('prism') or jsn.has('_prism') then
        result.prismElement := ParseDecimal(jsn['prism'], jsn.vObj['_prism']);{q}
    if jsn.has('base') or jsn.has('_base')  then
      result.baseElement := parseEnum(jsn.path+'/base', jsn['base'], jsn.vObj['_base'], CODES_TFhirVisionBaseCodesEnum, SYSTEMS_TFhirVisionBaseCodesEnum);
    if jsn.has('add') or jsn.has('_add') then
        result.addElement := ParseDecimal(jsn['add'], jsn.vObj['_add']);{q}
    if jsn.has('power') or jsn.has('_power') then
        result.powerElement := ParseDecimal(jsn['power'], jsn.vObj['_power']);{q}
    if jsn.has('backCurve') or jsn.has('_backCurve') then
        result.backCurveElement := ParseDecimal(jsn['backCurve'], jsn.vObj['_backCurve']);{q}
    if jsn.has('diameter') or jsn.has('_diameter') then
        result.diameterElement := ParseDecimal(jsn['diameter'], jsn.vObj['_diameter']);{q}
    if jsn.has('duration') then
        result.duration := ParseQuantity(jsn.vObj['duration']);{q3}
    if jsn.has('color') or jsn.has('_color') then
        result.colorElement := ParseString(jsn['color'], jsn.vObj['_color']);{q}
    if jsn.has('brand') or jsn.has('_brand') then
        result.brandElement := ParseString(jsn['brand'], jsn.vObj['_brand']);{q}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeVisionPrescriptionDispense(json : TJSONWriter; name : string; elem : TFhirVisionPrescriptionDispense; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'product', elem.product); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'eye', elem.EyeElement, CODES_TFhirVisionEyeCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'eye', elem.EyeElement, CODES_TFhirVisionEyeCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'sphere', elem.sphereElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'sphere', elem.sphereElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'cylinder', elem.cylinderElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'cylinder', elem.cylinderElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'axis', elem.axisElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'axis', elem.axisElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'prism', elem.prismElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'prism', elem.prismElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumValue(json, 'base', elem.BaseElement, CODES_TFhirVisionBaseCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
     ComposeEnumProps(json, 'base', elem.BaseElement, CODES_TFhirVisionBaseCodesEnum, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'add', elem.addElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'add', elem.addElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'power', elem.powerElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'power', elem.powerElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'backCurve', elem.backCurveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'backCurve', elem.backCurveElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'diameter', elem.diameterElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'diameter', elem.diameterElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'duration', elem.duration); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'color', elem.colorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'color', elem.colorElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'brand', elem.brandElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'brand', elem.brandElement, false);
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseVisionPrescription(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVisionPrescription(jsn)); {2}
end;

function TFHIRJsonParser.ParseVisionPrescription(jsn : TJsonObject) : TFhirVisionPrescription;
begin
  result := TFhirVisionPrescription.create;
  try
    ParseVisionPrescriptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVisionPrescriptionProperties(jsn : TJsonObject; result : TFhirVisionPrescription);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('dateWritten') or jsn.has('_dateWritten') then
        result.dateWrittenElement := ParseDateTime(jsn['dateWritten'], jsn.vObj['_dateWritten']);{q}
    if jsn.has('prescriber') then
        result.prescriber := ParseReference{TFhirPractitioner}(jsn.vObj['prescriber']);{q3}
    if jsn.has('reasonCodeableConcept') {a4} then
      result.reason := ParseCodeableConcept(jsn.vObj['reasonCodeableConcept']);
    if jsn.has('reasonReference') {a3} then
      result.reason := ParseReference(jsn.vObj['reasonReference']);
    if jsn.has('dispense') then
      iterateArray(jsn.vArr['dispense'], result.dispenseList, parseVisionPrescriptionDispense);
end;

procedure TFHIRJsonComposer.ComposeVisionPrescription(json : TJSONWriter; name : string; elem : TFhirVisionPrescription; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if not elem.noCompose and doCompose('identifier') and (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('status') and (SummaryOption in [soFull, soSummary, soData]) then
     ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if not elem.noCompose and doCompose('patient') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if not elem.noCompose and doCompose('encounter') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if not elem.noCompose and doCompose('dateWritten') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'dateWritten', elem.dateWrittenElement, false);
  if not elem.noCompose and doCompose('dateWritten') and (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'dateWritten', elem.dateWrittenElement, false);
  if not elem.noCompose and doCompose('prescriber') and (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'prescriber', elem.prescriber); {a}
  if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'reasonCodeableConcept', TFhirCodeableConcept(elem.reason)) 
  else if not elem.noCompose and (SummaryOption in [soFull, soData]) and (elem.reason is TFhirReference) then
    ComposeReference(json, 'reasonReference', TFhirReference(elem.reason));
  if not elem.noCompose and doCompose('dispense') and (SummaryOption in [soFull, soData]) and (elem.dispenseList.Count > 0) then
  begin
    json.valueArray('dispense');
    for i := 0 to elem.dispenseList.Count - 1 do
      ComposeVisionPrescriptionDispense(json, '', elem.dispenseList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_VISIONPRESCRIPTION}
function TFHIRJsonParser.ParseResource(jsn : TJsonObject) : TFhirResource;
var
  s : String;
begin
  s := jsn['resourceType'];
 {$IFDEF FHIR_PARAMETERS}
  if s = 'Parameters' Then
    result := ParseParameters(jsn)
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_ACCOUNT}
  {$IFDEF FHIR_ACCOUNT}
   else if s = 'Account' Then
    result := ParseAccount(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  {$IFDEF FHIR_ACTIVITYDEFINITION}
   else if s = 'ActivityDefinition' Then
    result := ParseActivityDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  {$IFDEF FHIR_ADVERSEEVENT}
   else if s = 'AdverseEvent' Then
    result := ParseAdverseEvent(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  {$IFDEF FHIR_ALLERGYINTOLERANCE}
   else if s = 'AllergyIntolerance' Then
    result := ParseAllergyIntolerance(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  {$IFDEF FHIR_APPOINTMENT}
   else if s = 'Appointment' Then
    result := ParseAppointment(jsn) 
  {$ENDIF}
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  {$IFDEF FHIR_APPOINTMENTRESPONSE}
   else if s = 'AppointmentResponse' Then
    result := ParseAppointmentResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  {$IFDEF FHIR_AUDITEVENT}
   else if s = 'AuditEvent' Then
    result := ParseAuditEvent(jsn) 
  {$ENDIF}
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  {$IFDEF FHIR_BASIC}
   else if s = 'Basic' Then
    result := ParseBasic(jsn) 
  {$ENDIF}
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  {$IFDEF FHIR_BINARY}
   else if s = 'Binary' Then
    result := ParseBinary(jsn) 
  {$ENDIF}
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  {$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
   else if s = 'BiologicallyDerivedProduct' Then
    result := ParseBiologicallyDerivedProduct(jsn) 
  {$ENDIF}
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  {$IFDEF FHIR_BODYSTRUCTURE}
   else if s = 'BodyStructure' Then
    result := ParseBodyStructure(jsn) 
  {$ENDIF}
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  {$IFDEF FHIR_BUNDLE}
   else if s = 'Bundle' Then
    result := ParseBundle(jsn) 
  {$ENDIF}
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  {$IFDEF FHIR_CAPABILITYSTATEMENT}
   else if s = 'CapabilityStatement' Then
    result := ParseCapabilityStatement(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  {$IFDEF FHIR_CAREPLAN}
   else if s = 'CarePlan' Then
    result := ParseCarePlan(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  {$IFDEF FHIR_CARETEAM}
   else if s = 'CareTeam' Then
    result := ParseCareTeam(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
  {$IFDEF FHIR_CHARGEITEM}
   else if s = 'ChargeItem' Then
    result := ParseChargeItem(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
  {$IFDEF FHIR_CLAIM}
   else if s = 'Claim' Then
    result := ParseClaim(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  {$IFDEF FHIR_CLAIMRESPONSE}
   else if s = 'ClaimResponse' Then
    result := ParseClaimResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  {$IFDEF FHIR_CLINICALIMPRESSION}
   else if s = 'ClinicalImpression' Then
    result := ParseClinicalImpression(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  {$IFDEF FHIR_CODESYSTEM}
   else if s = 'CodeSystem' Then
    result := ParseCodeSystem(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  {$IFDEF FHIR_COMMUNICATION}
   else if s = 'Communication' Then
    result := ParseCommunication(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  {$IFDEF FHIR_COMMUNICATIONREQUEST}
   else if s = 'CommunicationRequest' Then
    result := ParseCommunicationRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  {$IFDEF FHIR_COMPARTMENTDEFINITION}
   else if s = 'CompartmentDefinition' Then
    result := ParseCompartmentDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  {$IFDEF FHIR_COMPOSITION}
   else if s = 'Composition' Then
    result := ParseComposition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  {$IFDEF FHIR_CONCEPTMAP}
   else if s = 'ConceptMap' Then
    result := ParseConceptMap(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  {$IFDEF FHIR_CONDITION}
   else if s = 'Condition' Then
    result := ParseCondition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  {$IFDEF FHIR_CONSENT}
   else if s = 'Consent' Then
    result := ParseConsent(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  {$IFDEF FHIR_CONTRACT}
   else if s = 'Contract' Then
    result := ParseContract(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  {$IFDEF FHIR_COVERAGE}
   else if s = 'Coverage' Then
    result := ParseCoverage(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DETECTEDISSUE}
  {$IFDEF FHIR_DETECTEDISSUE}
   else if s = 'DetectedIssue' Then
    result := ParseDetectedIssue(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  {$IFDEF FHIR_DEVICE}
   else if s = 'Device' Then
    result := ParseDevice(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
  {$IFDEF FHIR_DEVICECOMPONENT}
   else if s = 'DeviceComponent' Then
    result := ParseDeviceComponent(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
  {$IFDEF FHIR_DEVICEMETRIC}
   else if s = 'DeviceMetric' Then
    result := ParseDeviceMetric(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  {$IFDEF FHIR_DEVICEREQUEST}
   else if s = 'DeviceRequest' Then
    result := ParseDeviceRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  {$IFDEF FHIR_DEVICEUSESTATEMENT}
   else if s = 'DeviceUseStatement' Then
    result := ParseDeviceUseStatement(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  {$IFDEF FHIR_DIAGNOSTICREPORT}
   else if s = 'DiagnosticReport' Then
    result := ParseDiagnosticReport(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  {$IFDEF FHIR_DOCUMENTMANIFEST}
   else if s = 'DocumentManifest' Then
    result := ParseDocumentManifest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  {$IFDEF FHIR_DOCUMENTREFERENCE}
   else if s = 'DocumentReference' Then
    result := ParseDocumentReference(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
  {$IFDEF FHIR_ELIGIBILITYREQUEST}
   else if s = 'EligibilityRequest' Then
    result := ParseEligibilityRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
  {$IFDEF FHIR_ELIGIBILITYRESPONSE}
   else if s = 'EligibilityResponse' Then
    result := ParseEligibilityResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
  {$IFDEF FHIR_ENCOUNTER}
   else if s = 'Encounter' Then
    result := ParseEncounter(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  {$IFDEF FHIR_ENDPOINT}
   else if s = 'Endpoint' Then
    result := ParseEndpoint(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  {$IFDEF FHIR_ENROLLMENTREQUEST}
   else if s = 'EnrollmentRequest' Then
    result := ParseEnrollmentRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  {$IFDEF FHIR_ENROLLMENTRESPONSE}
   else if s = 'EnrollmentResponse' Then
    result := ParseEnrollmentResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_ENTRYDEFINITION}
  {$IFDEF FHIR_ENTRYDEFINITION}
   else if s = 'EntryDefinition' Then
    result := ParseEntryDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ENTRYDEFINITION}
{$IFDEF FHIR_EPISODEOFCARE}
  {$IFDEF FHIR_EPISODEOFCARE}
   else if s = 'EpisodeOfCare' Then
    result := ParseEpisodeOfCare(jsn) 
  {$ENDIF}
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  {$IFDEF FHIR_EVENTDEFINITION}
   else if s = 'EventDefinition' Then
    result := ParseEventDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EXAMPLESCENARIO}
  {$IFDEF FHIR_EXAMPLESCENARIO}
   else if s = 'ExampleScenario' Then
    result := ParseExampleScenario(jsn) 
  {$ENDIF}
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPANSIONPROFILE}
  {$IFDEF FHIR_EXPANSIONPROFILE}
   else if s = 'ExpansionProfile' Then
    result := ParseExpansionProfile(jsn) 
  {$ENDIF}
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  {$IFDEF FHIR_EXPLANATIONOFBENEFIT}
   else if s = 'ExplanationOfBenefit' Then
    result := ParseExplanationOfBenefit(jsn) 
  {$ENDIF}
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  {$IFDEF FHIR_FAMILYMEMBERHISTORY}
   else if s = 'FamilyMemberHistory' Then
    result := ParseFamilyMemberHistory(jsn) 
  {$ENDIF}
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  {$IFDEF FHIR_FLAG}
   else if s = 'Flag' Then
    result := ParseFlag(jsn) 
  {$ENDIF}
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  {$IFDEF FHIR_GOAL}
   else if s = 'Goal' Then
    result := ParseGoal(jsn) 
  {$ENDIF}
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  {$IFDEF FHIR_GRAPHDEFINITION}
   else if s = 'GraphDefinition' Then
    result := ParseGraphDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  {$IFDEF FHIR_GROUP}
   else if s = 'Group' Then
    result := ParseGroup(jsn) 
  {$ENDIF}
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  {$IFDEF FHIR_GUIDANCERESPONSE}
   else if s = 'GuidanceResponse' Then
    result := ParseGuidanceResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  {$IFDEF FHIR_HEALTHCARESERVICE}
   else if s = 'HealthcareService' Then
    result := ParseHealthcareService(jsn) 
  {$ENDIF}
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  {$IFDEF FHIR_IMAGINGSTUDY}
   else if s = 'ImagingStudy' Then
    result := ParseImagingStudy(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  {$IFDEF FHIR_IMMUNIZATION}
   else if s = 'Immunization' Then
    result := ParseImmunization(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  {$IFDEF FHIR_IMMUNIZATIONEVALUATION}
   else if s = 'ImmunizationEvaluation' Then
    result := ParseImmunizationEvaluation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  {$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
   else if s = 'ImmunizationRecommendation' Then
    result := ParseImmunizationRecommendation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDE}
   else if s = 'ImplementationGuide' Then
    result := ParseImplementationGuide(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEINPUT}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDEINPUT}
   else if s = 'ImplementationGuideInput' Then
    result := ParseImplementationGuideInput(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDEINPUT}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
   else if s = 'ImplementationGuideOutput' Then
    result := ParseImplementationGuideOutput(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
{$IFDEF FHIR_INVOICE}
  {$IFDEF FHIR_INVOICE}
   else if s = 'Invoice' Then
    result := ParseInvoice(jsn) 
  {$ENDIF}
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_ITEMINSTANCE}
  {$IFDEF FHIR_ITEMINSTANCE}
   else if s = 'ItemInstance' Then
    result := ParseItemInstance(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ITEMINSTANCE}
{$IFDEF FHIR_LIBRARY}
  {$IFDEF FHIR_LIBRARY}
   else if s = 'Library' Then
    result := ParseLibrary(jsn) 
  {$ENDIF}
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  {$IFDEF FHIR_LINKAGE}
   else if s = 'Linkage' Then
    result := ParseLinkage(jsn) 
  {$ENDIF}
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  {$IFDEF FHIR_LIST}
   else if s = 'List' Then
    result := ParseList(jsn) 
  {$ENDIF}
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  {$IFDEF FHIR_LOCATION}
   else if s = 'Location' Then
    result := ParseLocation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  {$IFDEF FHIR_MEASURE}
   else if s = 'Measure' Then
    result := ParseMeasure(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  {$IFDEF FHIR_MEASUREREPORT}
   else if s = 'MeasureReport' Then
    result := ParseMeasureReport(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  {$IFDEF FHIR_MEDIA}
   else if s = 'Media' Then
    result := ParseMedia(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  {$IFDEF FHIR_MEDICATION}
   else if s = 'Medication' Then
    result := ParseMedication(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  {$IFDEF FHIR_MEDICATIONADMINISTRATION}
   else if s = 'MedicationAdministration' Then
    result := ParseMedicationAdministration(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  {$IFDEF FHIR_MEDICATIONDISPENSE}
   else if s = 'MedicationDispense' Then
    result := ParseMedicationDispense(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  {$IFDEF FHIR_MEDICATIONREQUEST}
   else if s = 'MedicationRequest' Then
    result := ParseMedicationRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  {$IFDEF FHIR_MEDICATIONSTATEMENT}
   else if s = 'MedicationStatement' Then
    result := ParseMedicationStatement(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
  {$IFDEF FHIR_MEDICINALPRODUCT}
   else if s = 'MedicinalProduct' Then
    result := ParseMedicinalProduct(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
  {$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
   else if s = 'MedicinalProductAuthorization' Then
    result := ParseMedicinalProductAuthorization(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCLINICALS}
  {$IFDEF FHIR_MEDICINALPRODUCTCLINICALS}
   else if s = 'MedicinalProductClinicals' Then
    result := ParseMedicinalProductClinicals(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTCLINICALS}
{$IFDEF FHIR_MEDICINALPRODUCTDEVICESPEC}
  {$IFDEF FHIR_MEDICINALPRODUCTDEVICESPEC}
   else if s = 'MedicinalProductDeviceSpec' Then
    result := ParseMedicinalProductDeviceSpec(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTDEVICESPEC}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
  {$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
   else if s = 'MedicinalProductIngredient' Then
    result := ParseMedicinalProductIngredient(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
  {$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
   else if s = 'MedicinalProductPackaged' Then
    result := ParseMedicinalProductPackaged(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
  {$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
   else if s = 'MedicinalProductPharmaceutical' Then
    result := ParseMedicinalProductPharmaceutical(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MESSAGEDEFINITION}
  {$IFDEF FHIR_MESSAGEDEFINITION}
   else if s = 'MessageDefinition' Then
    result := ParseMessageDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  {$IFDEF FHIR_MESSAGEHEADER}
   else if s = 'MessageHeader' Then
    result := ParseMessageHeader(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
  {$IFDEF FHIR_NAMINGSYSTEM}
   else if s = 'NamingSystem' Then
    result := ParseNamingSystem(jsn) 
  {$ENDIF}
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  {$IFDEF FHIR_NUTRITIONORDER}
   else if s = 'NutritionOrder' Then
    result := ParseNutritionOrder(jsn) 
  {$ENDIF}
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  {$IFDEF FHIR_OBSERVATION}
   else if s = 'Observation' Then
    result := ParseObservation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  {$IFDEF FHIR_OBSERVATIONDEFINITION}
   else if s = 'ObservationDefinition' Then
    result := ParseObservationDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OCCUPATIONALDATA}
  {$IFDEF FHIR_OCCUPATIONALDATA}
   else if s = 'OccupationalData' Then
    result := ParseOccupationalData(jsn) 
  {$ENDIF}
{$ENDIF FHIR_OCCUPATIONALDATA}
{$IFDEF FHIR_OPERATIONDEFINITION}
  {$IFDEF FHIR_OPERATIONDEFINITION}
   else if s = 'OperationDefinition' Then
    result := ParseOperationDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  {$IFDEF FHIR_OPERATIONOUTCOME}
   else if s = 'OperationOutcome' Then
    result := ParseOperationOutcome(jsn) 
  {$ENDIF}
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  {$IFDEF FHIR_ORGANIZATION}
   else if s = 'Organization' Then
    result := ParseOrganization(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONROLE}
  {$IFDEF FHIR_ORGANIZATIONROLE}
   else if s = 'OrganizationRole' Then
    result := ParseOrganizationRole(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ORGANIZATIONROLE}
{$IFDEF FHIR_PATIENT}
  {$IFDEF FHIR_PATIENT}
   else if s = 'Patient' Then
    result := ParsePatient(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  {$IFDEF FHIR_PAYMENTNOTICE}
   else if s = 'PaymentNotice' Then
    result := ParsePaymentNotice(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  {$IFDEF FHIR_PAYMENTRECONCILIATION}
   else if s = 'PaymentReconciliation' Then
    result := ParsePaymentReconciliation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  {$IFDEF FHIR_PERSON}
   else if s = 'Person' Then
    result := ParsePerson(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  {$IFDEF FHIR_PLANDEFINITION}
   else if s = 'PlanDefinition' Then
    result := ParsePlanDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  {$IFDEF FHIR_PRACTITIONER}
   else if s = 'Practitioner' Then
    result := ParsePractitioner(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  {$IFDEF FHIR_PRACTITIONERROLE}
   else if s = 'PractitionerRole' Then
    result := ParsePractitionerRole(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  {$IFDEF FHIR_PROCEDURE}
   else if s = 'Procedure' Then
    result := ParseProcedure(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCESSREQUEST}
  {$IFDEF FHIR_PROCESSREQUEST}
   else if s = 'ProcessRequest' Then
    result := ParseProcessRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
  {$IFDEF FHIR_PROCESSRESPONSE}
   else if s = 'ProcessResponse' Then
    result := ParseProcessResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PRODUCTPLAN}
  {$IFDEF FHIR_PRODUCTPLAN}
   else if s = 'ProductPlan' Then
    result := ParseProductPlan(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PRODUCTPLAN}
{$IFDEF FHIR_PROVENANCE}
  {$IFDEF FHIR_PROVENANCE}
   else if s = 'Provenance' Then
    result := ParseProvenance(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  {$IFDEF FHIR_QUESTIONNAIRE}
   else if s = 'Questionnaire' Then
    result := ParseQuestionnaire(jsn) 
  {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  {$IFDEF FHIR_QUESTIONNAIRERESPONSE}
   else if s = 'QuestionnaireResponse' Then
    result := ParseQuestionnaireResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
  {$IFDEF FHIR_RELATEDPERSON}
   else if s = 'RelatedPerson' Then
    result := ParseRelatedPerson(jsn) 
  {$ENDIF}
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  {$IFDEF FHIR_REQUESTGROUP}
   else if s = 'RequestGroup' Then
    result := ParseRequestGroup(jsn) 
  {$ENDIF}
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  {$IFDEF FHIR_RESEARCHSTUDY}
   else if s = 'ResearchStudy' Then
    result := ParseResearchStudy(jsn) 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  {$IFDEF FHIR_RESEARCHSUBJECT}
   else if s = 'ResearchSubject' Then
    result := ParseResearchSubject(jsn) 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  {$IFDEF FHIR_RISKASSESSMENT}
   else if s = 'RiskAssessment' Then
    result := ParseRiskAssessment(jsn) 
  {$ENDIF}
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  {$IFDEF FHIR_SCHEDULE}
   else if s = 'Schedule' Then
    result := ParseSchedule(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  {$IFDEF FHIR_SEARCHPARAMETER}
   else if s = 'SearchParameter' Then
    result := ParseSearchParameter(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
  {$IFDEF FHIR_SEQUENCE}
   else if s = 'Sequence' Then
    result := ParseSequence(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
  {$IFDEF FHIR_SERVICEDEFINITION}
   else if s = 'ServiceDefinition' Then
    result := ParseServiceDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SERVICEREQUEST}
  {$IFDEF FHIR_SERVICEREQUEST}
   else if s = 'ServiceRequest' Then
    result := ParseServiceRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  {$IFDEF FHIR_SLOT}
   else if s = 'Slot' Then
    result := ParseSlot(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  {$IFDEF FHIR_SPECIMEN}
   else if s = 'Specimen' Then
    result := ParseSpecimen(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  {$IFDEF FHIR_SPECIMENDEFINITION}
   else if s = 'SpecimenDefinition' Then
    result := ParseSpecimenDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  {$IFDEF FHIR_STRUCTUREDEFINITION}
   else if s = 'StructureDefinition' Then
    result := ParseStructureDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  {$IFDEF FHIR_STRUCTUREMAP}
   else if s = 'StructureMap' Then
    result := ParseStructureMap(jsn) 
  {$ENDIF}
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  {$IFDEF FHIR_SUBSCRIPTION}
   else if s = 'Subscription' Then
    result := ParseSubscription(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  {$IFDEF FHIR_SUBSTANCE}
   else if s = 'Substance' Then
    result := ParseSubstance(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  {$IFDEF FHIR_SUBSTANCEPOLYMER}
   else if s = 'SubstancePolymer' Then
    result := ParseSubstancePolymer(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  {$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
   else if s = 'SubstanceReferenceInformation' Then
    result := ParseSubstanceReferenceInformation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
  {$IFDEF FHIR_SUBSTANCESPECIFICATION}
   else if s = 'SubstanceSpecification' Then
    result := ParseSubstanceSpecification(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  {$IFDEF FHIR_SUPPLYDELIVERY}
   else if s = 'SupplyDelivery' Then
    result := ParseSupplyDelivery(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  {$IFDEF FHIR_SUPPLYREQUEST}
   else if s = 'SupplyRequest' Then
    result := ParseSupplyRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  {$IFDEF FHIR_TASK}
   else if s = 'Task' Then
    result := ParseTask(jsn) 
  {$ENDIF}
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  {$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
   else if s = 'TerminologyCapabilities' Then
    result := ParseTerminologyCapabilities(jsn) 
  {$ENDIF}
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  {$IFDEF FHIR_TESTREPORT}
   else if s = 'TestReport' Then
    result := ParseTestReport(jsn) 
  {$ENDIF}
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  {$IFDEF FHIR_TESTSCRIPT}
   else if s = 'TestScript' Then
    result := ParseTestScript(jsn) 
  {$ENDIF}
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_USERSESSION}
  {$IFDEF FHIR_USERSESSION}
   else if s = 'UserSession' Then
    result := ParseUserSession(jsn) 
  {$ENDIF}
{$ENDIF FHIR_USERSESSION}
{$IFDEF FHIR_VALUESET}
  {$IFDEF FHIR_VALUESET}
   else if s = 'ValueSet' Then
    result := ParseValueSet(jsn) 
  {$ENDIF}
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  {$IFDEF FHIR_VERIFICATIONRESULT}
   else if s = 'VerificationResult' Then
    result := ParseVerificationResult(jsn) 
  {$ENDIF}
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  {$IFDEF FHIR_VISIONPRESCRIPTION}
   else if s = 'VisionPrescription' Then
    result := ParseVisionPrescription(jsn) 
  {$ENDIF}
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise Exception.create('error: the element '+s+' is not a valid resource name');
end;

function TFHIRJsonParser.ParseFragment(jsn : TJsonObject; type_ : String) : TFHIRObject;
begin
   if (type_ = 'TFhirElement') then
    result := parseElement(jsn)
  else if (type_ = 'TFhirBackboneElement') then
    result := parseBackboneElement(jsn)
{$IFDEF FHIR_PARAMETERS}
  else if (type_ = 'TFhirParameters') then
    result := parseParameters(jsn)
{$ENDIF FHIR_PARAMETERS}
  else if (type_ = 'TFhirExtension') then
    result := parseExtension(jsn)
  else if (type_ = 'TFhirNarrative') then
    result := parseNarrative(jsn)
  else if (type_ = 'TFhirContributor') then
    result := parseContributor(jsn)
  else if (type_ = 'TFhirAttachment') then
    result := parseAttachment(jsn)
  else if (type_ = 'TFhirDataRequirement') then
    result := parseDataRequirement(jsn)
  else if (type_ = 'TFhirDosage') then
    result := parseDosage(jsn)
  else if (type_ = 'TFhirMarketingStatus') then
    result := parseMarketingStatus(jsn)
  else if (type_ = 'TFhirIdentifier') then
    result := parseIdentifier(jsn)
  else if (type_ = 'TFhirSubstanceAmount') then
    result := parseSubstanceAmount(jsn)
  else if (type_ = 'TFhirCoding') then
    result := parseCoding(jsn)
  else if (type_ = 'TFhirSampledData') then
    result := parseSampledData(jsn)
  else if (type_ = 'TFhirRatio') then
    result := parseRatio(jsn)
  else if (type_ = 'TFhirSubstanceMoiety') then
    result := parseSubstanceMoiety(jsn)
  else if (type_ = 'TFhirReference') then
    result := parseReference(jsn)
  else if (type_ = 'TFhirTriggerDefinition') then
    result := parseTriggerDefinition(jsn)
  else if (type_ = 'TFhirPeriod') then
    result := parsePeriod(jsn)
  else if (type_ = 'TFhirQuantity') then
    result := parseQuantity(jsn)
  else if (type_ = 'TFhirRange') then
    result := parseRange(jsn)
  else if (type_ = 'TFhirRelatedArtifact') then
    result := parseRelatedArtifact(jsn)
  else if (type_ = 'TFhirAnnotation') then
    result := parseAnnotation(jsn)
  else if (type_ = 'TFhirProductShelfLife') then
    result := parseProductShelfLife(jsn)
  else if (type_ = 'TFhirContactDetail') then
    result := parseContactDetail(jsn)
  else if (type_ = 'TFhirUsageContext') then
    result := parseUsageContext(jsn)
  else if (type_ = 'TFhirSignature') then
    result := parseSignature(jsn)
  else if (type_ = 'TFhirProdCharacteristic') then
    result := parseProdCharacteristic(jsn)
  else if (type_ = 'TFhirCodeableConcept') then
    result := parseCodeableConcept(jsn)
  else if (type_ = 'TFhirParameterDefinition') then
    result := parseParameterDefinition(jsn)
  else if (type_ = 'TFhirContactPoint') then
    result := parseContactPoint(jsn)
  else if (type_ = 'TFhirHumanName') then
    result := parseHumanName(jsn)
  else if (type_ = 'TFhirMeta') then
    result := parseMeta(jsn)
  else if (type_ = 'TFhirAddress') then
    result := parseAddress(jsn)
  else if (type_ = 'TFhirElementDefinition') then
    result := parseElementDefinition(jsn)
  else if (type_ = 'TFhirTiming') then
    result := parseTiming(jsn)
  else if (type_ = 'TFhirCount') then
    result := parseCount(jsn)
  else if (type_ = 'TFhirMoney') then
    result := parseMoney(jsn)
  else if (type_ = 'TFhirAge') then
    result := parseAge(jsn)
  else if (type_ = 'TFhirDistance') then
    result := parseDistance(jsn)
  else if (type_ = 'TFhirDuration') then
    result := parseDuration(jsn)
{$IFDEF FHIR_ACCOUNT}
  else if (type_ = 'TFhirAccount') then
    result := parseAccount(jsn)
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if (type_ = 'TFhirActivityDefinition') then
    result := parseActivityDefinition(jsn)
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if (type_ = 'TFhirAdverseEvent') then
    result := parseAdverseEvent(jsn)
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if (type_ = 'TFhirAllergyIntolerance') then
    result := parseAllergyIntolerance(jsn)
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if (type_ = 'TFhirAppointment') then
    result := parseAppointment(jsn)
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if (type_ = 'TFhirAppointmentResponse') then
    result := parseAppointmentResponse(jsn)
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if (type_ = 'TFhirAuditEvent') then
    result := parseAuditEvent(jsn)
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if (type_ = 'TFhirBasic') then
    result := parseBasic(jsn)
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if (type_ = 'TFhirBinary') then
    result := parseBinary(jsn)
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  else if (type_ = 'TFhirBiologicallyDerivedProduct') then
    result := parseBiologicallyDerivedProduct(jsn)
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  else if (type_ = 'TFhirBodyStructure') then
    result := parseBodyStructure(jsn)
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  else if (type_ = 'TFhirBundle') then
    result := parseBundle(jsn)
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if (type_ = 'TFhirCapabilityStatement') then
    result := parseCapabilityStatement(jsn)
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  else if (type_ = 'TFhirCarePlan') then
    result := parseCarePlan(jsn)
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if (type_ = 'TFhirCareTeam') then
    result := parseCareTeam(jsn)
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
  else if (type_ = 'TFhirChargeItem') then
    result := parseChargeItem(jsn)
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
  else if (type_ = 'TFhirClaim') then
    result := parseClaim(jsn)
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if (type_ = 'TFhirClaimResponse') then
    result := parseClaimResponse(jsn)
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if (type_ = 'TFhirClinicalImpression') then
    result := parseClinicalImpression(jsn)
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  else if (type_ = 'TFhirCodeSystem') then
    result := parseCodeSystem(jsn)
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if (type_ = 'TFhirCommunication') then
    result := parseCommunication(jsn)
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if (type_ = 'TFhirCommunicationRequest') then
    result := parseCommunicationRequest(jsn)
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if (type_ = 'TFhirCompartmentDefinition') then
    result := parseCompartmentDefinition(jsn)
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if (type_ = 'TFhirComposition') then
    result := parseComposition(jsn)
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if (type_ = 'TFhirConceptMap') then
    result := parseConceptMap(jsn)
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if (type_ = 'TFhirCondition') then
    result := parseCondition(jsn)
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  else if (type_ = 'TFhirConsent') then
    result := parseConsent(jsn)
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if (type_ = 'TFhirContract') then
    result := parseContract(jsn)
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if (type_ = 'TFhirCoverage') then
    result := parseCoverage(jsn)
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DETECTEDISSUE}
  else if (type_ = 'TFhirDetectedIssue') then
    result := parseDetectedIssue(jsn)
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if (type_ = 'TFhirDevice') then
    result := parseDevice(jsn)
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
  else if (type_ = 'TFhirDeviceComponent') then
    result := parseDeviceComponent(jsn)
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
  else if (type_ = 'TFhirDeviceMetric') then
    result := parseDeviceMetric(jsn)
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if (type_ = 'TFhirDeviceRequest') then
    result := parseDeviceRequest(jsn)
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if (type_ = 'TFhirDeviceUseStatement') then
    result := parseDeviceUseStatement(jsn)
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if (type_ = 'TFhirDiagnosticReport') then
    result := parseDiagnosticReport(jsn)
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if (type_ = 'TFhirDocumentManifest') then
    result := parseDocumentManifest(jsn)
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if (type_ = 'TFhirDocumentReference') then
    result := parseDocumentReference(jsn)
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
  else if (type_ = 'TFhirEligibilityRequest') then
    result := parseEligibilityRequest(jsn)
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
  else if (type_ = 'TFhirEligibilityResponse') then
    result := parseEligibilityResponse(jsn)
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
  else if (type_ = 'TFhirEncounter') then
    result := parseEncounter(jsn)
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if (type_ = 'TFhirEndpoint') then
    result := parseEndpoint(jsn)
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if (type_ = 'TFhirEnrollmentRequest') then
    result := parseEnrollmentRequest(jsn)
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if (type_ = 'TFhirEnrollmentResponse') then
    result := parseEnrollmentResponse(jsn)
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_ENTRYDEFINITION}
  else if (type_ = 'TFhirEntryDefinition') then
    result := parseEntryDefinition(jsn)
{$ENDIF FHIR_ENTRYDEFINITION}
{$IFDEF FHIR_EPISODEOFCARE}
  else if (type_ = 'TFhirEpisodeOfCare') then
    result := parseEpisodeOfCare(jsn)
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  else if (type_ = 'TFhirEventDefinition') then
    result := parseEventDefinition(jsn)
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EXAMPLESCENARIO}
  else if (type_ = 'TFhirExampleScenario') then
    result := parseExampleScenario(jsn)
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPANSIONPROFILE}
  else if (type_ = 'TFhirExpansionProfile') then
    result := parseExpansionProfile(jsn)
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if (type_ = 'TFhirExplanationOfBenefit') then
    result := parseExplanationOfBenefit(jsn)
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if (type_ = 'TFhirFamilyMemberHistory') then
    result := parseFamilyMemberHistory(jsn)
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if (type_ = 'TFhirFlag') then
    result := parseFlag(jsn)
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if (type_ = 'TFhirGoal') then
    result := parseGoal(jsn)
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if (type_ = 'TFhirGraphDefinition') then
    result := parseGraphDefinition(jsn)
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if (type_ = 'TFhirGroup') then
    result := parseGroup(jsn)
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if (type_ = 'TFhirGuidanceResponse') then
    result := parseGuidanceResponse(jsn)
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if (type_ = 'TFhirHealthcareService') then
    result := parseHealthcareService(jsn)
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if (type_ = 'TFhirImagingStudy') then
    result := parseImagingStudy(jsn)
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if (type_ = 'TFhirImmunization') then
    result := parseImmunization(jsn)
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  else if (type_ = 'TFhirImmunizationEvaluation') then
    result := parseImmunizationEvaluation(jsn)
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if (type_ = 'TFhirImmunizationRecommendation') then
    result := parseImmunizationRecommendation(jsn)
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if (type_ = 'TFhirImplementationGuide') then
    result := parseImplementationGuide(jsn)
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEINPUT}
  else if (type_ = 'TFhirImplementationGuideInput') then
    result := parseImplementationGuideInput(jsn)
{$ENDIF FHIR_IMPLEMENTATIONGUIDEINPUT}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
  else if (type_ = 'TFhirImplementationGuideOutput') then
    result := parseImplementationGuideOutput(jsn)
{$ENDIF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
{$IFDEF FHIR_INVOICE}
  else if (type_ = 'TFhirInvoice') then
    result := parseInvoice(jsn)
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_ITEMINSTANCE}
  else if (type_ = 'TFhirItemInstance') then
    result := parseItemInstance(jsn)
{$ENDIF FHIR_ITEMINSTANCE}
{$IFDEF FHIR_LIBRARY}
  else if (type_ = 'TFhirLibrary') then
    result := parseLibrary(jsn)
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if (type_ = 'TFhirLinkage') then
    result := parseLinkage(jsn)
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if (type_ = 'TFhirList') then
    result := parseList(jsn)
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if (type_ = 'TFhirLocation') then
    result := parseLocation(jsn)
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  else if (type_ = 'TFhirMeasure') then
    result := parseMeasure(jsn)
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if (type_ = 'TFhirMeasureReport') then
    result := parseMeasureReport(jsn)
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  else if (type_ = 'TFhirMedia') then
    result := parseMedia(jsn)
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  else if (type_ = 'TFhirMedication') then
    result := parseMedication(jsn)
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if (type_ = 'TFhirMedicationAdministration') then
    result := parseMedicationAdministration(jsn)
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if (type_ = 'TFhirMedicationDispense') then
    result := parseMedicationDispense(jsn)
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if (type_ = 'TFhirMedicationRequest') then
    result := parseMedicationRequest(jsn)
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  else if (type_ = 'TFhirMedicationStatement') then
    result := parseMedicationStatement(jsn)
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
  else if (type_ = 'TFhirMedicinalProduct') then
    result := parseMedicinalProduct(jsn)
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
  else if (type_ = 'TFhirMedicinalProductAuthorization') then
    result := parseMedicinalProductAuthorization(jsn)
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCLINICALS}
  else if (type_ = 'TFhirMedicinalProductClinicals') then
    result := parseMedicinalProductClinicals(jsn)
{$ENDIF FHIR_MEDICINALPRODUCTCLINICALS}
{$IFDEF FHIR_MEDICINALPRODUCTDEVICESPEC}
  else if (type_ = 'TFhirMedicinalProductDeviceSpec') then
    result := parseMedicinalProductDeviceSpec(jsn)
{$ENDIF FHIR_MEDICINALPRODUCTDEVICESPEC}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
  else if (type_ = 'TFhirMedicinalProductIngredient') then
    result := parseMedicinalProductIngredient(jsn)
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
  else if (type_ = 'TFhirMedicinalProductPackaged') then
    result := parseMedicinalProductPackaged(jsn)
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
  else if (type_ = 'TFhirMedicinalProductPharmaceutical') then
    result := parseMedicinalProductPharmaceutical(jsn)
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if (type_ = 'TFhirMessageDefinition') then
    result := parseMessageDefinition(jsn)
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if (type_ = 'TFhirMessageHeader') then
    result := parseMessageHeader(jsn)
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if (type_ = 'TFhirNamingSystem') then
    result := parseNamingSystem(jsn)
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  else if (type_ = 'TFhirNutritionOrder') then
    result := parseNutritionOrder(jsn)
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  else if (type_ = 'TFhirObservation') then
    result := parseObservation(jsn)
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  else if (type_ = 'TFhirObservationDefinition') then
    result := parseObservationDefinition(jsn)
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OCCUPATIONALDATA}
  else if (type_ = 'TFhirOccupationalData') then
    result := parseOccupationalData(jsn)
{$ENDIF FHIR_OCCUPATIONALDATA}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if (type_ = 'TFhirOperationDefinition') then
    result := parseOperationDefinition(jsn)
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if (type_ = 'TFhirOperationOutcome') then
    result := parseOperationOutcome(jsn)
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if (type_ = 'TFhirOrganization') then
    result := parseOrganization(jsn)
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONROLE}
  else if (type_ = 'TFhirOrganizationRole') then
    result := parseOrganizationRole(jsn)
{$ENDIF FHIR_ORGANIZATIONROLE}
{$IFDEF FHIR_PATIENT}
  else if (type_ = 'TFhirPatient') then
    result := parsePatient(jsn)
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if (type_ = 'TFhirPaymentNotice') then
    result := parsePaymentNotice(jsn)
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if (type_ = 'TFhirPaymentReconciliation') then
    result := parsePaymentReconciliation(jsn)
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  else if (type_ = 'TFhirPerson') then
    result := parsePerson(jsn)
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if (type_ = 'TFhirPlanDefinition') then
    result := parsePlanDefinition(jsn)
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if (type_ = 'TFhirPractitioner') then
    result := parsePractitioner(jsn)
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if (type_ = 'TFhirPractitionerRole') then
    result := parsePractitionerRole(jsn)
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if (type_ = 'TFhirProcedure') then
    result := parseProcedure(jsn)
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCESSREQUEST}
  else if (type_ = 'TFhirProcessRequest') then
    result := parseProcessRequest(jsn)
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
  else if (type_ = 'TFhirProcessResponse') then
    result := parseProcessResponse(jsn)
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PRODUCTPLAN}
  else if (type_ = 'TFhirProductPlan') then
    result := parseProductPlan(jsn)
{$ENDIF FHIR_PRODUCTPLAN}
{$IFDEF FHIR_PROVENANCE}
  else if (type_ = 'TFhirProvenance') then
    result := parseProvenance(jsn)
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if (type_ = 'TFhirQuestionnaire') then
    result := parseQuestionnaire(jsn)
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if (type_ = 'TFhirQuestionnaireResponse') then
    result := parseQuestionnaireResponse(jsn)
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
  else if (type_ = 'TFhirRelatedPerson') then
    result := parseRelatedPerson(jsn)
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if (type_ = 'TFhirRequestGroup') then
    result := parseRequestGroup(jsn)
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if (type_ = 'TFhirResearchStudy') then
    result := parseResearchStudy(jsn)
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if (type_ = 'TFhirResearchSubject') then
    result := parseResearchSubject(jsn)
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if (type_ = 'TFhirRiskAssessment') then
    result := parseRiskAssessment(jsn)
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  else if (type_ = 'TFhirSchedule') then
    result := parseSchedule(jsn)
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if (type_ = 'TFhirSearchParameter') then
    result := parseSearchParameter(jsn)
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
  else if (type_ = 'TFhirSequence') then
    result := parseSequence(jsn)
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
  else if (type_ = 'TFhirServiceDefinition') then
    result := parseServiceDefinition(jsn)
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SERVICEREQUEST}
  else if (type_ = 'TFhirServiceRequest') then
    result := parseServiceRequest(jsn)
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  else if (type_ = 'TFhirSlot') then
    result := parseSlot(jsn)
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if (type_ = 'TFhirSpecimen') then
    result := parseSpecimen(jsn)
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  else if (type_ = 'TFhirSpecimenDefinition') then
    result := parseSpecimenDefinition(jsn)
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if (type_ = 'TFhirStructureDefinition') then
    result := parseStructureDefinition(jsn)
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if (type_ = 'TFhirStructureMap') then
    result := parseStructureMap(jsn)
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if (type_ = 'TFhirSubscription') then
    result := parseSubscription(jsn)
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  else if (type_ = 'TFhirSubstance') then
    result := parseSubstance(jsn)
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  else if (type_ = 'TFhirSubstancePolymer') then
    result := parseSubstancePolymer(jsn)
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  else if (type_ = 'TFhirSubstanceReferenceInformation') then
    result := parseSubstanceReferenceInformation(jsn)
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
  else if (type_ = 'TFhirSubstanceSpecification') then
    result := parseSubstanceSpecification(jsn)
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if (type_ = 'TFhirSupplyDelivery') then
    result := parseSupplyDelivery(jsn)
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if (type_ = 'TFhirSupplyRequest') then
    result := parseSupplyRequest(jsn)
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if (type_ = 'TFhirTask') then
    result := parseTask(jsn)
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  else if (type_ = 'TFhirTerminologyCapabilities') then
    result := parseTerminologyCapabilities(jsn)
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  else if (type_ = 'TFhirTestReport') then
    result := parseTestReport(jsn)
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if (type_ = 'TFhirTestScript') then
    result := parseTestScript(jsn)
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_USERSESSION}
  else if (type_ = 'TFhirUserSession') then
    result := parseUserSession(jsn)
{$ENDIF FHIR_USERSESSION}
{$IFDEF FHIR_VALUESET}
  else if (type_ = 'TFhirValueSet') then
    result := parseValueSet(jsn)
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  else if (type_ = 'TFhirVerificationResult') then
    result := parseVerificationResult(jsn)
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if (type_ = 'TFhirVisionPrescription') then
    result := parseVisionPrescription(jsn)
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise Exception.create('error: the element '+type_+' is not a valid fragment name');
end;

function TFHIRJsonParser.ParseDataType(jsn : TJsonObject; name : String; type_ : TFHIRTypeClass) : TFHIRType;
begin
   if (type_ = TFhirExtension) then
    result := parseExtension(jsn)
  else if (type_ = TFhirNarrative) then
    result := parseNarrative(jsn)
  else if (type_ = TFhirContributor) then
    result := parseContributor(jsn)
  else if (type_ = TFhirAttachment) then
    result := parseAttachment(jsn)
  else if (type_ = TFhirDataRequirement) then
    result := parseDataRequirement(jsn)
  else if (type_ = TFhirDosage) then
    result := parseDosage(jsn)
  else if (type_ = TFhirMarketingStatus) then
    result := parseMarketingStatus(jsn)
  else if (type_ = TFhirIdentifier) then
    result := parseIdentifier(jsn)
  else if (type_ = TFhirSubstanceAmount) then
    result := parseSubstanceAmount(jsn)
  else if (type_ = TFhirCoding) then
    result := parseCoding(jsn)
  else if (type_ = TFhirSampledData) then
    result := parseSampledData(jsn)
  else if (type_ = TFhirRatio) then
    result := parseRatio(jsn)
  else if (type_ = TFhirSubstanceMoiety) then
    result := parseSubstanceMoiety(jsn)
  else if (type_ = TFhirReference) then
    result := parseReference(jsn)
  else if (type_ = TFhirTriggerDefinition) then
    result := parseTriggerDefinition(jsn)
  else if (type_ = TFhirPeriod) then
    result := parsePeriod(jsn)
  else if (type_ = TFhirQuantity) then
    result := parseQuantity(jsn)
  else if (type_ = TFhirRange) then
    result := parseRange(jsn)
  else if (type_ = TFhirRelatedArtifact) then
    result := parseRelatedArtifact(jsn)
  else if (type_ = TFhirAnnotation) then
    result := parseAnnotation(jsn)
  else if (type_ = TFhirProductShelfLife) then
    result := parseProductShelfLife(jsn)
  else if (type_ = TFhirContactDetail) then
    result := parseContactDetail(jsn)
  else if (type_ = TFhirUsageContext) then
    result := parseUsageContext(jsn)
  else if (type_ = TFhirSignature) then
    result := parseSignature(jsn)
  else if (type_ = TFhirProdCharacteristic) then
    result := parseProdCharacteristic(jsn)
  else if (type_ = TFhirCodeableConcept) then
    result := parseCodeableConcept(jsn)
  else if (type_ = TFhirParameterDefinition) then
    result := parseParameterDefinition(jsn)
  else if (type_ = TFhirContactPoint) then
    result := parseContactPoint(jsn)
  else if (type_ = TFhirHumanName) then
    result := parseHumanName(jsn)
  else if (type_ = TFhirMeta) then
    result := parseMeta(jsn)
  else if (type_ = TFhirAddress) then
    result := parseAddress(jsn)
  else if (type_ = TFhirElementDefinition) then
    result := parseElementDefinition(jsn)
  else if (type_ = TFhirTiming) then
    result := parseTiming(jsn)
  else if (type_ = TFhirCount) then
    result := parseCount(jsn)
  else if (type_ = TFhirMoney) then
    result := parseMoney(jsn)
  else if (type_ = TFhirAge) then
    result := parseAge(jsn)
  else if (type_ = TFhirDistance) then
    result := parseDistance(jsn)
  else if (type_ = TFhirDuration) then
    result := parseDuration(jsn)
  else
    raise Exception.create('Unknown Type');
end;

procedure TFHIRJsonComposer.ComposeBase(json: TJSONWriter; name: String; base: TFHIRObject);
begin
   if (base is TFhirDate) then
    composeDateValue(json, name, TFhirDate(base), false)
  else if (base is TFhirDateTime) then
    composeDateTimeValue(json, name, TFhirDateTime(base), false)
  else if (base is TFhirString) then
    composeStringValue(json, name, TFhirString(base), false)
  else if (base is TFhirInteger) then
    composeIntegerValue(json, name, TFhirInteger(base), false)
  else if (base is TFhirUri) then
    composeUriValue(json, name, TFhirUri(base), false)
  else if (base is TFhirInstant) then
    composeInstantValue(json, name, TFhirInstant(base), false)
  else if (base is TFhirXhtml) then
    composeXhtmlValue(json, name, TFhirXhtml(base), false)
  else if (base is TFhirBoolean) then
    composeBooleanValue(json, name, TFhirBoolean(base), false)
  else if (base is TFhirBase64Binary) then
    composeBase64BinaryValue(json, name, TFhirBase64Binary(base), false)
  else if (base is TFhirTime) then
    composeTimeValue(json, name, TFhirTime(base), false)
  else if (base is TFhirDecimal) then
    composeDecimalValue(json, name, TFhirDecimal(base), false)
  else if (base is TFhirCode) then
    composeCodeValue(json, name, TFhirCode(base), false)
  else if (base is TFhirOid) then
    composeOidValue(json, name, TFhirOid(base), false)
  else if (base is TFhirUuid) then
    composeUuidValue(json, name, TFhirUuid(base), false)
  else if (base is TFhirMarkdown) then
    composeMarkdownValue(json, name, TFhirMarkdown(base), false)
  else if (base is TFhirUnsignedInt) then
    composeUnsignedIntValue(json, name, TFhirUnsignedInt(base), false)
  else if (base is TFhirId) then
    composeIdValue(json, name, TFhirId(base), false)
  else if (base is TFhirPositiveInt) then
    composePositiveIntValue(json, name, TFhirPositiveInt(base), false)
{$IFDEF FHIR_PARAMETERS}
  else if (base is TFhirParametersParameter) then
    composeParametersParameter(json, name, TFhirParametersParameter(base), false)
  else if (base is TFhirParameters) then
    composeParameters(json, name, TFhirParameters(base), false)
{$ENDIF FHIR_PARAMETERS}
  else if (base is TFhirExtension) then
    composeExtension(json, name, TFhirExtension(base), false)
  else if (base is TFhirNarrative) then
    composeNarrative(json, name, TFhirNarrative(base), false)
  else if (base is TFhirContributor) then
    composeContributor(json, name, TFhirContributor(base), false)
  else if (base is TFhirAttachment) then
    composeAttachment(json, name, TFhirAttachment(base), false)
  else if (base is TFhirDataRequirementCodeFilter) then
    composeDataRequirementCodeFilter(json, name, TFhirDataRequirementCodeFilter(base), false)
  else if (base is TFhirDataRequirementDateFilter) then
    composeDataRequirementDateFilter(json, name, TFhirDataRequirementDateFilter(base), false)
  else if (base is TFhirDataRequirement) then
    composeDataRequirement(json, name, TFhirDataRequirement(base), false)
  else if (base is TFhirDosage) then
    composeDosage(json, name, TFhirDosage(base), false)
  else if (base is TFhirMarketingStatus) then
    composeMarketingStatus(json, name, TFhirMarketingStatus(base), false)
  else if (base is TFhirIdentifier) then
    composeIdentifier(json, name, TFhirIdentifier(base), false)
  else if (base is TFhirSubstanceAmountReferenceRange) then
    composeSubstanceAmountReferenceRange(json, name, TFhirSubstanceAmountReferenceRange(base), false)
  else if (base is TFhirSubstanceAmount) then
    composeSubstanceAmount(json, name, TFhirSubstanceAmount(base), false)
  else if (base is TFhirCoding) then
    composeCoding(json, name, TFhirCoding(base), false)
  else if (base is TFhirSampledData) then
    composeSampledData(json, name, TFhirSampledData(base), false)
  else if (base is TFhirRatio) then
    composeRatio(json, name, TFhirRatio(base), false)
  else if (base is TFhirSubstanceMoiety) then
    composeSubstanceMoiety(json, name, TFhirSubstanceMoiety(base), false)
  else if (base is TFhirReference) then
    composeReference(json, name, TFhirReference(base), false)
  else if (base is TFhirTriggerDefinitionCondition) then
    composeTriggerDefinitionCondition(json, name, TFhirTriggerDefinitionCondition(base), false)
  else if (base is TFhirTriggerDefinition) then
    composeTriggerDefinition(json, name, TFhirTriggerDefinition(base), false)
  else if (base is TFhirPeriod) then
    composePeriod(json, name, TFhirPeriod(base), false)
  else if (base is TFhirQuantity) then
    composeQuantity(json, name, TFhirQuantity(base), false)
  else if (base is TFhirRange) then
    composeRange(json, name, TFhirRange(base), false)
  else if (base is TFhirRelatedArtifact) then
    composeRelatedArtifact(json, name, TFhirRelatedArtifact(base), false)
  else if (base is TFhirAnnotation) then
    composeAnnotation(json, name, TFhirAnnotation(base), false)
  else if (base is TFhirProductShelfLife) then
    composeProductShelfLife(json, name, TFhirProductShelfLife(base), false)
  else if (base is TFhirContactDetail) then
    composeContactDetail(json, name, TFhirContactDetail(base), false)
  else if (base is TFhirUsageContext) then
    composeUsageContext(json, name, TFhirUsageContext(base), false)
  else if (base is TFhirSignature) then
    composeSignature(json, name, TFhirSignature(base), false)
  else if (base is TFhirProdCharacteristic) then
    composeProdCharacteristic(json, name, TFhirProdCharacteristic(base), false)
  else if (base is TFhirCodeableConcept) then
    composeCodeableConcept(json, name, TFhirCodeableConcept(base), false)
  else if (base is TFhirParameterDefinition) then
    composeParameterDefinition(json, name, TFhirParameterDefinition(base), false)
  else if (base is TFhirContactPoint) then
    composeContactPoint(json, name, TFhirContactPoint(base), false)
  else if (base is TFhirHumanName) then
    composeHumanName(json, name, TFhirHumanName(base), false)
  else if (base is TFhirMeta) then
    composeMeta(json, name, TFhirMeta(base), false)
  else if (base is TFhirAddress) then
    composeAddress(json, name, TFhirAddress(base), false)
  else if (base is TFhirElementDefinitionSlicing) then
    composeElementDefinitionSlicing(json, name, TFhirElementDefinitionSlicing(base), false)
  else if (base is TFhirElementDefinitionSlicingDiscriminator) then
    composeElementDefinitionSlicingDiscriminator(json, name, TFhirElementDefinitionSlicingDiscriminator(base), false)
  else if (base is TFhirElementDefinitionBase) then
    composeElementDefinitionBase(json, name, TFhirElementDefinitionBase(base), false)
  else if (base is TFhirElementDefinitionType) then
    composeElementDefinitionType(json, name, TFhirElementDefinitionType(base), false)
  else if (base is TFhirElementDefinitionExample) then
    composeElementDefinitionExample(json, name, TFhirElementDefinitionExample(base), false)
  else if (base is TFhirElementDefinitionConstraint) then
    composeElementDefinitionConstraint(json, name, TFhirElementDefinitionConstraint(base), false)
  else if (base is TFhirElementDefinitionBinding) then
    composeElementDefinitionBinding(json, name, TFhirElementDefinitionBinding(base), false)
  else if (base is TFhirElementDefinitionMapping) then
    composeElementDefinitionMapping(json, name, TFhirElementDefinitionMapping(base), false)
  else if (base is TFhirElementDefinition) then
    composeElementDefinition(json, name, TFhirElementDefinition(base), false)
  else if (base is TFhirTimingRepeat) then
    composeTimingRepeat(json, name, TFhirTimingRepeat(base), false)
  else if (base is TFhirTiming) then
    composeTiming(json, name, TFhirTiming(base), false)
  else if (base is TFhirCount) then
    composeCount(json, name, TFhirCount(base), false)
  else if (base is TFhirMoney) then
    composeMoney(json, name, TFhirMoney(base), false)
  else if (base is TFhirAge) then
    composeAge(json, name, TFhirAge(base), false)
  else if (base is TFhirDistance) then
    composeDistance(json, name, TFhirDistance(base), false)
  else if (base is TFhirDuration) then
    composeDuration(json, name, TFhirDuration(base), false)
{$IFDEF FHIR_ACCOUNT}
  else if (base is TFhirAccountCoverage) then
    composeAccountCoverage(json, name, TFhirAccountCoverage(base), false)
  else if (base is TFhirAccountGuarantor) then
    composeAccountGuarantor(json, name, TFhirAccountGuarantor(base), false)
  else if (base is TFhirAccount) then
    composeAccount(json, name, TFhirAccount(base), false)
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if (base is TFhirActivityDefinitionParticipant) then
    composeActivityDefinitionParticipant(json, name, TFhirActivityDefinitionParticipant(base), false)
  else if (base is TFhirActivityDefinitionDynamicValue) then
    composeActivityDefinitionDynamicValue(json, name, TFhirActivityDefinitionDynamicValue(base), false)
  else if (base is TFhirActivityDefinition) then
    composeActivityDefinition(json, name, TFhirActivityDefinition(base), false)
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if (base is TFhirAdverseEventSuspectEntity) then
    composeAdverseEventSuspectEntity(json, name, TFhirAdverseEventSuspectEntity(base), false)
  else if (base is TFhirAdverseEventSuspectEntityCausality) then
    composeAdverseEventSuspectEntityCausality(json, name, TFhirAdverseEventSuspectEntityCausality(base), false)
  else if (base is TFhirAdverseEvent) then
    composeAdverseEvent(json, name, TFhirAdverseEvent(base), false)
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if (base is TFhirAllergyIntoleranceReaction) then
    composeAllergyIntoleranceReaction(json, name, TFhirAllergyIntoleranceReaction(base), false)
  else if (base is TFhirAllergyIntolerance) then
    composeAllergyIntolerance(json, name, TFhirAllergyIntolerance(base), false)
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if (base is TFhirAppointmentParticipant) then
    composeAppointmentParticipant(json, name, TFhirAppointmentParticipant(base), false)
  else if (base is TFhirAppointment) then
    composeAppointment(json, name, TFhirAppointment(base), false)
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if (base is TFhirAppointmentResponse) then
    composeAppointmentResponse(json, name, TFhirAppointmentResponse(base), false)
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if (base is TFhirAuditEventAgent) then
    composeAuditEventAgent(json, name, TFhirAuditEventAgent(base), false)
  else if (base is TFhirAuditEventAgentNetwork) then
    composeAuditEventAgentNetwork(json, name, TFhirAuditEventAgentNetwork(base), false)
  else if (base is TFhirAuditEventSource) then
    composeAuditEventSource(json, name, TFhirAuditEventSource(base), false)
  else if (base is TFhirAuditEventEntity) then
    composeAuditEventEntity(json, name, TFhirAuditEventEntity(base), false)
  else if (base is TFhirAuditEventEntityDetail) then
    composeAuditEventEntityDetail(json, name, TFhirAuditEventEntityDetail(base), false)
  else if (base is TFhirAuditEvent) then
    composeAuditEvent(json, name, TFhirAuditEvent(base), false)
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if (base is TFhirBasic) then
    composeBasic(json, name, TFhirBasic(base), false)
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if (base is TFhirBinary) then
    composeBinary(json, name, TFhirBinary(base), false)
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  else if (base is TFhirBiologicallyDerivedProductCollection) then
    composeBiologicallyDerivedProductCollection(json, name, TFhirBiologicallyDerivedProductCollection(base), false)
  else if (base is TFhirBiologicallyDerivedProductProcessing) then
    composeBiologicallyDerivedProductProcessing(json, name, TFhirBiologicallyDerivedProductProcessing(base), false)
  else if (base is TFhirBiologicallyDerivedProductManipulation) then
    composeBiologicallyDerivedProductManipulation(json, name, TFhirBiologicallyDerivedProductManipulation(base), false)
  else if (base is TFhirBiologicallyDerivedProductStorage) then
    composeBiologicallyDerivedProductStorage(json, name, TFhirBiologicallyDerivedProductStorage(base), false)
  else if (base is TFhirBiologicallyDerivedProduct) then
    composeBiologicallyDerivedProduct(json, name, TFhirBiologicallyDerivedProduct(base), false)
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  else if (base is TFhirBodyStructure) then
    composeBodyStructure(json, name, TFhirBodyStructure(base), false)
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  else if (base is TFhirBundleLink) then
    composeBundleLink(json, name, TFhirBundleLink(base), false)
  else if (base is TFhirBundleEntry) then
    composeBundleEntry(json, name, TFhirBundleEntry(base), false)
  else if (base is TFhirBundleEntrySearch) then
    composeBundleEntrySearch(json, name, TFhirBundleEntrySearch(base), false)
  else if (base is TFhirBundleEntryRequest) then
    composeBundleEntryRequest(json, name, TFhirBundleEntryRequest(base), false)
  else if (base is TFhirBundleEntryResponse) then
    composeBundleEntryResponse(json, name, TFhirBundleEntryResponse(base), false)
  else if (base is TFhirBundle) then
    composeBundle(json, name, TFhirBundle(base), false)
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if (base is TFhirCapabilityStatementSoftware) then
    composeCapabilityStatementSoftware(json, name, TFhirCapabilityStatementSoftware(base), false)
  else if (base is TFhirCapabilityStatementImplementation) then
    composeCapabilityStatementImplementation(json, name, TFhirCapabilityStatementImplementation(base), false)
  else if (base is TFhirCapabilityStatementRest) then
    composeCapabilityStatementRest(json, name, TFhirCapabilityStatementRest(base), false)
  else if (base is TFhirCapabilityStatementRestSecurity) then
    composeCapabilityStatementRestSecurity(json, name, TFhirCapabilityStatementRestSecurity(base), false)
  else if (base is TFhirCapabilityStatementRestSecurityCertificate) then
    composeCapabilityStatementRestSecurityCertificate(json, name, TFhirCapabilityStatementRestSecurityCertificate(base), false)
  else if (base is TFhirCapabilityStatementRestResource) then
    composeCapabilityStatementRestResource(json, name, TFhirCapabilityStatementRestResource(base), false)
  else if (base is TFhirCapabilityStatementRestResourceInteraction) then
    composeCapabilityStatementRestResourceInteraction(json, name, TFhirCapabilityStatementRestResourceInteraction(base), false)
  else if (base is TFhirCapabilityStatementRestResourceSearchParam) then
    composeCapabilityStatementRestResourceSearchParam(json, name, TFhirCapabilityStatementRestResourceSearchParam(base), false)
  else if (base is TFhirCapabilityStatementRestResourceOperation) then
    composeCapabilityStatementRestResourceOperation(json, name, TFhirCapabilityStatementRestResourceOperation(base), false)
  else if (base is TFhirCapabilityStatementRestInteraction) then
    composeCapabilityStatementRestInteraction(json, name, TFhirCapabilityStatementRestInteraction(base), false)
  else if (base is TFhirCapabilityStatementMessaging) then
    composeCapabilityStatementMessaging(json, name, TFhirCapabilityStatementMessaging(base), false)
  else if (base is TFhirCapabilityStatementMessagingEndpoint) then
    composeCapabilityStatementMessagingEndpoint(json, name, TFhirCapabilityStatementMessagingEndpoint(base), false)
  else if (base is TFhirCapabilityStatementMessagingSupportedMessage) then
    composeCapabilityStatementMessagingSupportedMessage(json, name, TFhirCapabilityStatementMessagingSupportedMessage(base), false)
  else if (base is TFhirCapabilityStatementDocument) then
    composeCapabilityStatementDocument(json, name, TFhirCapabilityStatementDocument(base), false)
  else if (base is TFhirCapabilityStatement) then
    composeCapabilityStatement(json, name, TFhirCapabilityStatement(base), false)
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  else if (base is TFhirCarePlanActivity) then
    composeCarePlanActivity(json, name, TFhirCarePlanActivity(base), false)
  else if (base is TFhirCarePlanActivityDetail) then
    composeCarePlanActivityDetail(json, name, TFhirCarePlanActivityDetail(base), false)
  else if (base is TFhirCarePlan) then
    composeCarePlan(json, name, TFhirCarePlan(base), false)
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if (base is TFhirCareTeamParticipant) then
    composeCareTeamParticipant(json, name, TFhirCareTeamParticipant(base), false)
  else if (base is TFhirCareTeam) then
    composeCareTeam(json, name, TFhirCareTeam(base), false)
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
  else if (base is TFhirChargeItemParticipant) then
    composeChargeItemParticipant(json, name, TFhirChargeItemParticipant(base), false)
  else if (base is TFhirChargeItem) then
    composeChargeItem(json, name, TFhirChargeItem(base), false)
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
  else if (base is TFhirClaimRelated) then
    composeClaimRelated(json, name, TFhirClaimRelated(base), false)
  else if (base is TFhirClaimPayee) then
    composeClaimPayee(json, name, TFhirClaimPayee(base), false)
  else if (base is TFhirClaimCareTeam) then
    composeClaimCareTeam(json, name, TFhirClaimCareTeam(base), false)
  else if (base is TFhirClaimInformation) then
    composeClaimInformation(json, name, TFhirClaimInformation(base), false)
  else if (base is TFhirClaimDiagnosis) then
    composeClaimDiagnosis(json, name, TFhirClaimDiagnosis(base), false)
  else if (base is TFhirClaimProcedure) then
    composeClaimProcedure(json, name, TFhirClaimProcedure(base), false)
  else if (base is TFhirClaimInsurance) then
    composeClaimInsurance(json, name, TFhirClaimInsurance(base), false)
  else if (base is TFhirClaimAccident) then
    composeClaimAccident(json, name, TFhirClaimAccident(base), false)
  else if (base is TFhirClaimItem) then
    composeClaimItem(json, name, TFhirClaimItem(base), false)
  else if (base is TFhirClaimItemDetail) then
    composeClaimItemDetail(json, name, TFhirClaimItemDetail(base), false)
  else if (base is TFhirClaimItemDetailSubDetail) then
    composeClaimItemDetailSubDetail(json, name, TFhirClaimItemDetailSubDetail(base), false)
  else if (base is TFhirClaim) then
    composeClaim(json, name, TFhirClaim(base), false)
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if (base is TFhirClaimResponseItem) then
    composeClaimResponseItem(json, name, TFhirClaimResponseItem(base), false)
  else if (base is TFhirClaimResponseItemAdjudication) then
    composeClaimResponseItemAdjudication(json, name, TFhirClaimResponseItemAdjudication(base), false)
  else if (base is TFhirClaimResponseItemDetail) then
    composeClaimResponseItemDetail(json, name, TFhirClaimResponseItemDetail(base), false)
  else if (base is TFhirClaimResponseItemDetailSubDetail) then
    composeClaimResponseItemDetailSubDetail(json, name, TFhirClaimResponseItemDetailSubDetail(base), false)
  else if (base is TFhirClaimResponseAddItem) then
    composeClaimResponseAddItem(json, name, TFhirClaimResponseAddItem(base), false)
  else if (base is TFhirClaimResponseError) then
    composeClaimResponseError(json, name, TFhirClaimResponseError(base), false)
  else if (base is TFhirClaimResponsePayment) then
    composeClaimResponsePayment(json, name, TFhirClaimResponsePayment(base), false)
  else if (base is TFhirClaimResponseProcessNote) then
    composeClaimResponseProcessNote(json, name, TFhirClaimResponseProcessNote(base), false)
  else if (base is TFhirClaimResponseInsurance) then
    composeClaimResponseInsurance(json, name, TFhirClaimResponseInsurance(base), false)
  else if (base is TFhirClaimResponse) then
    composeClaimResponse(json, name, TFhirClaimResponse(base), false)
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if (base is TFhirClinicalImpressionInvestigation) then
    composeClinicalImpressionInvestigation(json, name, TFhirClinicalImpressionInvestigation(base), false)
  else if (base is TFhirClinicalImpressionFinding) then
    composeClinicalImpressionFinding(json, name, TFhirClinicalImpressionFinding(base), false)
  else if (base is TFhirClinicalImpression) then
    composeClinicalImpression(json, name, TFhirClinicalImpression(base), false)
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  else if (base is TFhirCodeSystemFilter) then
    composeCodeSystemFilter(json, name, TFhirCodeSystemFilter(base), false)
  else if (base is TFhirCodeSystemProperty) then
    composeCodeSystemProperty(json, name, TFhirCodeSystemProperty(base), false)
  else if (base is TFhirCodeSystemConcept) then
    composeCodeSystemConcept(json, name, TFhirCodeSystemConcept(base), false)
  else if (base is TFhirCodeSystemConceptDesignation) then
    composeCodeSystemConceptDesignation(json, name, TFhirCodeSystemConceptDesignation(base), false)
  else if (base is TFhirCodeSystemConceptProperty) then
    composeCodeSystemConceptProperty(json, name, TFhirCodeSystemConceptProperty(base), false)
  else if (base is TFhirCodeSystem) then
    composeCodeSystem(json, name, TFhirCodeSystem(base), false)
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if (base is TFhirCommunicationPayload) then
    composeCommunicationPayload(json, name, TFhirCommunicationPayload(base), false)
  else if (base is TFhirCommunication) then
    composeCommunication(json, name, TFhirCommunication(base), false)
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if (base is TFhirCommunicationRequestPayload) then
    composeCommunicationRequestPayload(json, name, TFhirCommunicationRequestPayload(base), false)
  else if (base is TFhirCommunicationRequest) then
    composeCommunicationRequest(json, name, TFhirCommunicationRequest(base), false)
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if (base is TFhirCompartmentDefinitionResource) then
    composeCompartmentDefinitionResource(json, name, TFhirCompartmentDefinitionResource(base), false)
  else if (base is TFhirCompartmentDefinition) then
    composeCompartmentDefinition(json, name, TFhirCompartmentDefinition(base), false)
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if (base is TFhirCompositionAttester) then
    composeCompositionAttester(json, name, TFhirCompositionAttester(base), false)
  else if (base is TFhirCompositionRelatesTo) then
    composeCompositionRelatesTo(json, name, TFhirCompositionRelatesTo(base), false)
  else if (base is TFhirCompositionEvent) then
    composeCompositionEvent(json, name, TFhirCompositionEvent(base), false)
  else if (base is TFhirCompositionSection) then
    composeCompositionSection(json, name, TFhirCompositionSection(base), false)
  else if (base is TFhirComposition) then
    composeComposition(json, name, TFhirComposition(base), false)
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if (base is TFhirConceptMapGroup) then
    composeConceptMapGroup(json, name, TFhirConceptMapGroup(base), false)
  else if (base is TFhirConceptMapGroupElement) then
    composeConceptMapGroupElement(json, name, TFhirConceptMapGroupElement(base), false)
  else if (base is TFhirConceptMapGroupElementTarget) then
    composeConceptMapGroupElementTarget(json, name, TFhirConceptMapGroupElementTarget(base), false)
  else if (base is TFhirConceptMapGroupElementTargetDependsOn) then
    composeConceptMapGroupElementTargetDependsOn(json, name, TFhirConceptMapGroupElementTargetDependsOn(base), false)
  else if (base is TFhirConceptMapGroupUnmapped) then
    composeConceptMapGroupUnmapped(json, name, TFhirConceptMapGroupUnmapped(base), false)
  else if (base is TFhirConceptMap) then
    composeConceptMap(json, name, TFhirConceptMap(base), false)
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if (base is TFhirConditionStage) then
    composeConditionStage(json, name, TFhirConditionStage(base), false)
  else if (base is TFhirConditionEvidence) then
    composeConditionEvidence(json, name, TFhirConditionEvidence(base), false)
  else if (base is TFhirCondition) then
    composeCondition(json, name, TFhirCondition(base), false)
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  else if (base is TFhirConsentPolicy) then
    composeConsentPolicy(json, name, TFhirConsentPolicy(base), false)
  else if (base is TFhirConsentVerification) then
    composeConsentVerification(json, name, TFhirConsentVerification(base), false)
  else if (base is TFhirConsentProvision) then
    composeConsentProvision(json, name, TFhirConsentProvision(base), false)
  else if (base is TFhirConsentProvisionActor) then
    composeConsentProvisionActor(json, name, TFhirConsentProvisionActor(base), false)
  else if (base is TFhirConsentProvisionData) then
    composeConsentProvisionData(json, name, TFhirConsentProvisionData(base), false)
  else if (base is TFhirConsent) then
    composeConsent(json, name, TFhirConsent(base), false)
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if (base is TFhirContractTerm) then
    composeContractTerm(json, name, TFhirContractTerm(base), false)
  else if (base is TFhirContractTermOffer) then
    composeContractTermOffer(json, name, TFhirContractTermOffer(base), false)
  else if (base is TFhirContractTermAsset) then
    composeContractTermAsset(json, name, TFhirContractTermAsset(base), false)
  else if (base is TFhirContractTermAssetData) then
    composeContractTermAssetData(json, name, TFhirContractTermAssetData(base), false)
  else if (base is TFhirContractTermAssetValuedItem) then
    composeContractTermAssetValuedItem(json, name, TFhirContractTermAssetValuedItem(base), false)
  else if (base is TFhirContractTermAgent) then
    composeContractTermAgent(json, name, TFhirContractTermAgent(base), false)
  else if (base is TFhirContractSigner) then
    composeContractSigner(json, name, TFhirContractSigner(base), false)
  else if (base is TFhirContractFriendly) then
    composeContractFriendly(json, name, TFhirContractFriendly(base), false)
  else if (base is TFhirContractLegal) then
    composeContractLegal(json, name, TFhirContractLegal(base), false)
  else if (base is TFhirContractRule) then
    composeContractRule(json, name, TFhirContractRule(base), false)
  else if (base is TFhirContract) then
    composeContract(json, name, TFhirContract(base), false)
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if (base is TFhirCoverageClass) then
    composeCoverageClass(json, name, TFhirCoverageClass(base), false)
  else if (base is TFhirCoverageGrouping) then
    composeCoverageGrouping(json, name, TFhirCoverageGrouping(base), false)
  else if (base is TFhirCoverageCopay) then
    composeCoverageCopay(json, name, TFhirCoverageCopay(base), false)
  else if (base is TFhirCoverage) then
    composeCoverage(json, name, TFhirCoverage(base), false)
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DETECTEDISSUE}
  else if (base is TFhirDetectedIssueMitigation) then
    composeDetectedIssueMitigation(json, name, TFhirDetectedIssueMitigation(base), false)
  else if (base is TFhirDetectedIssue) then
    composeDetectedIssue(json, name, TFhirDetectedIssue(base), false)
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if (base is TFhirDeviceUdi) then
    composeDeviceUdi(json, name, TFhirDeviceUdi(base), false)
  else if (base is TFhirDevice) then
    composeDevice(json, name, TFhirDevice(base), false)
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
  else if (base is TFhirDeviceComponentProductionSpecification) then
    composeDeviceComponentProductionSpecification(json, name, TFhirDeviceComponentProductionSpecification(base), false)
  else if (base is TFhirDeviceComponentProperty) then
    composeDeviceComponentProperty(json, name, TFhirDeviceComponentProperty(base), false)
  else if (base is TFhirDeviceComponent) then
    composeDeviceComponent(json, name, TFhirDeviceComponent(base), false)
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
  else if (base is TFhirDeviceMetricCalibration) then
    composeDeviceMetricCalibration(json, name, TFhirDeviceMetricCalibration(base), false)
  else if (base is TFhirDeviceMetric) then
    composeDeviceMetric(json, name, TFhirDeviceMetric(base), false)
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if (base is TFhirDeviceRequestParameter) then
    composeDeviceRequestParameter(json, name, TFhirDeviceRequestParameter(base), false)
  else if (base is TFhirDeviceRequest) then
    composeDeviceRequest(json, name, TFhirDeviceRequest(base), false)
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if (base is TFhirDeviceUseStatement) then
    composeDeviceUseStatement(json, name, TFhirDeviceUseStatement(base), false)
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if (base is TFhirDiagnosticReportMedia) then
    composeDiagnosticReportMedia(json, name, TFhirDiagnosticReportMedia(base), false)
  else if (base is TFhirDiagnosticReport) then
    composeDiagnosticReport(json, name, TFhirDiagnosticReport(base), false)
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if (base is TFhirDocumentManifestAgent) then
    composeDocumentManifestAgent(json, name, TFhirDocumentManifestAgent(base), false)
  else if (base is TFhirDocumentManifestRelated) then
    composeDocumentManifestRelated(json, name, TFhirDocumentManifestRelated(base), false)
  else if (base is TFhirDocumentManifest) then
    composeDocumentManifest(json, name, TFhirDocumentManifest(base), false)
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if (base is TFhirDocumentReferenceAgent) then
    composeDocumentReferenceAgent(json, name, TFhirDocumentReferenceAgent(base), false)
  else if (base is TFhirDocumentReferenceRelatesTo) then
    composeDocumentReferenceRelatesTo(json, name, TFhirDocumentReferenceRelatesTo(base), false)
  else if (base is TFhirDocumentReferenceContent) then
    composeDocumentReferenceContent(json, name, TFhirDocumentReferenceContent(base), false)
  else if (base is TFhirDocumentReferenceContext) then
    composeDocumentReferenceContext(json, name, TFhirDocumentReferenceContext(base), false)
  else if (base is TFhirDocumentReferenceContextRelated) then
    composeDocumentReferenceContextRelated(json, name, TFhirDocumentReferenceContextRelated(base), false)
  else if (base is TFhirDocumentReference) then
    composeDocumentReference(json, name, TFhirDocumentReference(base), false)
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
  else if (base is TFhirEligibilityRequestAuthorization) then
    composeEligibilityRequestAuthorization(json, name, TFhirEligibilityRequestAuthorization(base), false)
  else if (base is TFhirEligibilityRequest) then
    composeEligibilityRequest(json, name, TFhirEligibilityRequest(base), false)
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
  else if (base is TFhirEligibilityResponseInsurance) then
    composeEligibilityResponseInsurance(json, name, TFhirEligibilityResponseInsurance(base), false)
  else if (base is TFhirEligibilityResponseInsuranceBenefitBalance) then
    composeEligibilityResponseInsuranceBenefitBalance(json, name, TFhirEligibilityResponseInsuranceBenefitBalance(base), false)
  else if (base is TFhirEligibilityResponseInsuranceBenefitBalanceFinancial) then
    composeEligibilityResponseInsuranceBenefitBalanceFinancial(json, name, TFhirEligibilityResponseInsuranceBenefitBalanceFinancial(base), false)
  else if (base is TFhirEligibilityResponseAuthorization) then
    composeEligibilityResponseAuthorization(json, name, TFhirEligibilityResponseAuthorization(base), false)
  else if (base is TFhirEligibilityResponseError) then
    composeEligibilityResponseError(json, name, TFhirEligibilityResponseError(base), false)
  else if (base is TFhirEligibilityResponse) then
    composeEligibilityResponse(json, name, TFhirEligibilityResponse(base), false)
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
  else if (base is TFhirEncounterStatusHistory) then
    composeEncounterStatusHistory(json, name, TFhirEncounterStatusHistory(base), false)
  else if (base is TFhirEncounterClassHistory) then
    composeEncounterClassHistory(json, name, TFhirEncounterClassHistory(base), false)
  else if (base is TFhirEncounterParticipant) then
    composeEncounterParticipant(json, name, TFhirEncounterParticipant(base), false)
  else if (base is TFhirEncounterDiagnosis) then
    composeEncounterDiagnosis(json, name, TFhirEncounterDiagnosis(base), false)
  else if (base is TFhirEncounterHospitalization) then
    composeEncounterHospitalization(json, name, TFhirEncounterHospitalization(base), false)
  else if (base is TFhirEncounterLocation) then
    composeEncounterLocation(json, name, TFhirEncounterLocation(base), false)
  else if (base is TFhirEncounter) then
    composeEncounter(json, name, TFhirEncounter(base), false)
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if (base is TFhirEndpoint) then
    composeEndpoint(json, name, TFhirEndpoint(base), false)
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if (base is TFhirEnrollmentRequest) then
    composeEnrollmentRequest(json, name, TFhirEnrollmentRequest(base), false)
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if (base is TFhirEnrollmentResponse) then
    composeEnrollmentResponse(json, name, TFhirEnrollmentResponse(base), false)
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_ENTRYDEFINITION}
  else if (base is TFhirEntryDefinitionRelatedEntry) then
    composeEntryDefinitionRelatedEntry(json, name, TFhirEntryDefinitionRelatedEntry(base), false)
  else if (base is TFhirEntryDefinition) then
    composeEntryDefinition(json, name, TFhirEntryDefinition(base), false)
{$ENDIF FHIR_ENTRYDEFINITION}
{$IFDEF FHIR_EPISODEOFCARE}
  else if (base is TFhirEpisodeOfCareStatusHistory) then
    composeEpisodeOfCareStatusHistory(json, name, TFhirEpisodeOfCareStatusHistory(base), false)
  else if (base is TFhirEpisodeOfCareDiagnosis) then
    composeEpisodeOfCareDiagnosis(json, name, TFhirEpisodeOfCareDiagnosis(base), false)
  else if (base is TFhirEpisodeOfCare) then
    composeEpisodeOfCare(json, name, TFhirEpisodeOfCare(base), false)
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  else if (base is TFhirEventDefinition) then
    composeEventDefinition(json, name, TFhirEventDefinition(base), false)
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EXAMPLESCENARIO}
  else if (base is TFhirExampleScenarioActor) then
    composeExampleScenarioActor(json, name, TFhirExampleScenarioActor(base), false)
  else if (base is TFhirExampleScenarioInstance) then
    composeExampleScenarioInstance(json, name, TFhirExampleScenarioInstance(base), false)
  else if (base is TFhirExampleScenarioInstanceVersion) then
    composeExampleScenarioInstanceVersion(json, name, TFhirExampleScenarioInstanceVersion(base), false)
  else if (base is TFhirExampleScenarioInstanceContainedInstance) then
    composeExampleScenarioInstanceContainedInstance(json, name, TFhirExampleScenarioInstanceContainedInstance(base), false)
  else if (base is TFhirExampleScenarioProcess) then
    composeExampleScenarioProcess(json, name, TFhirExampleScenarioProcess(base), false)
  else if (base is TFhirExampleScenarioProcessStep) then
    composeExampleScenarioProcessStep(json, name, TFhirExampleScenarioProcessStep(base), false)
  else if (base is TFhirExampleScenarioProcessStepOperation) then
    composeExampleScenarioProcessStepOperation(json, name, TFhirExampleScenarioProcessStepOperation(base), false)
  else if (base is TFhirExampleScenarioProcessStepAlternative) then
    composeExampleScenarioProcessStepAlternative(json, name, TFhirExampleScenarioProcessStepAlternative(base), false)
  else if (base is TFhirExampleScenarioProcessStepAlternativeOption) then
    composeExampleScenarioProcessStepAlternativeOption(json, name, TFhirExampleScenarioProcessStepAlternativeOption(base), false)
  else if (base is TFhirExampleScenario) then
    composeExampleScenario(json, name, TFhirExampleScenario(base), false)
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPANSIONPROFILE}
  else if (base is TFhirExpansionProfileFixedVersion) then
    composeExpansionProfileFixedVersion(json, name, TFhirExpansionProfileFixedVersion(base), false)
  else if (base is TFhirExpansionProfileExcludedSystem) then
    composeExpansionProfileExcludedSystem(json, name, TFhirExpansionProfileExcludedSystem(base), false)
  else if (base is TFhirExpansionProfileDesignation) then
    composeExpansionProfileDesignation(json, name, TFhirExpansionProfileDesignation(base), false)
  else if (base is TFhirExpansionProfileDesignationInclude) then
    composeExpansionProfileDesignationInclude(json, name, TFhirExpansionProfileDesignationInclude(base), false)
  else if (base is TFhirExpansionProfileDesignationIncludeDesignation) then
    composeExpansionProfileDesignationIncludeDesignation(json, name, TFhirExpansionProfileDesignationIncludeDesignation(base), false)
  else if (base is TFhirExpansionProfileDesignationExclude) then
    composeExpansionProfileDesignationExclude(json, name, TFhirExpansionProfileDesignationExclude(base), false)
  else if (base is TFhirExpansionProfileDesignationExcludeDesignation) then
    composeExpansionProfileDesignationExcludeDesignation(json, name, TFhirExpansionProfileDesignationExcludeDesignation(base), false)
  else if (base is TFhirExpansionProfile) then
    composeExpansionProfile(json, name, TFhirExpansionProfile(base), false)
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if (base is TFhirExplanationOfBenefitRelated) then
    composeExplanationOfBenefitRelated(json, name, TFhirExplanationOfBenefitRelated(base), false)
  else if (base is TFhirExplanationOfBenefitPayee) then
    composeExplanationOfBenefitPayee(json, name, TFhirExplanationOfBenefitPayee(base), false)
  else if (base is TFhirExplanationOfBenefitInformation) then
    composeExplanationOfBenefitInformation(json, name, TFhirExplanationOfBenefitInformation(base), false)
  else if (base is TFhirExplanationOfBenefitCareTeam) then
    composeExplanationOfBenefitCareTeam(json, name, TFhirExplanationOfBenefitCareTeam(base), false)
  else if (base is TFhirExplanationOfBenefitDiagnosis) then
    composeExplanationOfBenefitDiagnosis(json, name, TFhirExplanationOfBenefitDiagnosis(base), false)
  else if (base is TFhirExplanationOfBenefitProcedure) then
    composeExplanationOfBenefitProcedure(json, name, TFhirExplanationOfBenefitProcedure(base), false)
  else if (base is TFhirExplanationOfBenefitInsurance) then
    composeExplanationOfBenefitInsurance(json, name, TFhirExplanationOfBenefitInsurance(base), false)
  else if (base is TFhirExplanationOfBenefitAccident) then
    composeExplanationOfBenefitAccident(json, name, TFhirExplanationOfBenefitAccident(base), false)
  else if (base is TFhirExplanationOfBenefitItem) then
    composeExplanationOfBenefitItem(json, name, TFhirExplanationOfBenefitItem(base), false)
  else if (base is TFhirExplanationOfBenefitItemAdjudication) then
    composeExplanationOfBenefitItemAdjudication(json, name, TFhirExplanationOfBenefitItemAdjudication(base), false)
  else if (base is TFhirExplanationOfBenefitItemDetail) then
    composeExplanationOfBenefitItemDetail(json, name, TFhirExplanationOfBenefitItemDetail(base), false)
  else if (base is TFhirExplanationOfBenefitItemDetailSubDetail) then
    composeExplanationOfBenefitItemDetailSubDetail(json, name, TFhirExplanationOfBenefitItemDetailSubDetail(base), false)
  else if (base is TFhirExplanationOfBenefitAddItem) then
    composeExplanationOfBenefitAddItem(json, name, TFhirExplanationOfBenefitAddItem(base), false)
  else if (base is TFhirExplanationOfBenefitPayment) then
    composeExplanationOfBenefitPayment(json, name, TFhirExplanationOfBenefitPayment(base), false)
  else if (base is TFhirExplanationOfBenefitProcessNote) then
    composeExplanationOfBenefitProcessNote(json, name, TFhirExplanationOfBenefitProcessNote(base), false)
  else if (base is TFhirExplanationOfBenefitBenefitBalance) then
    composeExplanationOfBenefitBenefitBalance(json, name, TFhirExplanationOfBenefitBenefitBalance(base), false)
  else if (base is TFhirExplanationOfBenefitBenefitBalanceFinancial) then
    composeExplanationOfBenefitBenefitBalanceFinancial(json, name, TFhirExplanationOfBenefitBenefitBalanceFinancial(base), false)
  else if (base is TFhirExplanationOfBenefit) then
    composeExplanationOfBenefit(json, name, TFhirExplanationOfBenefit(base), false)
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if (base is TFhirFamilyMemberHistoryCondition) then
    composeFamilyMemberHistoryCondition(json, name, TFhirFamilyMemberHistoryCondition(base), false)
  else if (base is TFhirFamilyMemberHistory) then
    composeFamilyMemberHistory(json, name, TFhirFamilyMemberHistory(base), false)
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if (base is TFhirFlag) then
    composeFlag(json, name, TFhirFlag(base), false)
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if (base is TFhirGoalTarget) then
    composeGoalTarget(json, name, TFhirGoalTarget(base), false)
  else if (base is TFhirGoal) then
    composeGoal(json, name, TFhirGoal(base), false)
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if (base is TFhirGraphDefinitionLink) then
    composeGraphDefinitionLink(json, name, TFhirGraphDefinitionLink(base), false)
  else if (base is TFhirGraphDefinitionLinkTarget) then
    composeGraphDefinitionLinkTarget(json, name, TFhirGraphDefinitionLinkTarget(base), false)
  else if (base is TFhirGraphDefinitionLinkTargetCompartment) then
    composeGraphDefinitionLinkTargetCompartment(json, name, TFhirGraphDefinitionLinkTargetCompartment(base), false)
  else if (base is TFhirGraphDefinition) then
    composeGraphDefinition(json, name, TFhirGraphDefinition(base), false)
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if (base is TFhirGroupCharacteristic) then
    composeGroupCharacteristic(json, name, TFhirGroupCharacteristic(base), false)
  else if (base is TFhirGroupMember) then
    composeGroupMember(json, name, TFhirGroupMember(base), false)
  else if (base is TFhirGroup) then
    composeGroup(json, name, TFhirGroup(base), false)
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if (base is TFhirGuidanceResponse) then
    composeGuidanceResponse(json, name, TFhirGuidanceResponse(base), false)
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if (base is TFhirHealthcareServiceAvailableTime) then
    composeHealthcareServiceAvailableTime(json, name, TFhirHealthcareServiceAvailableTime(base), false)
  else if (base is TFhirHealthcareServiceNotAvailable) then
    composeHealthcareServiceNotAvailable(json, name, TFhirHealthcareServiceNotAvailable(base), false)
  else if (base is TFhirHealthcareService) then
    composeHealthcareService(json, name, TFhirHealthcareService(base), false)
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if (base is TFhirImagingStudySeries) then
    composeImagingStudySeries(json, name, TFhirImagingStudySeries(base), false)
  else if (base is TFhirImagingStudySeriesInstance) then
    composeImagingStudySeriesInstance(json, name, TFhirImagingStudySeriesInstance(base), false)
  else if (base is TFhirImagingStudy) then
    composeImagingStudy(json, name, TFhirImagingStudy(base), false)
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if (base is TFhirImmunizationPractitioner) then
    composeImmunizationPractitioner(json, name, TFhirImmunizationPractitioner(base), false)
  else if (base is TFhirImmunizationEducation) then
    composeImmunizationEducation(json, name, TFhirImmunizationEducation(base), false)
  else if (base is TFhirImmunization) then
    composeImmunization(json, name, TFhirImmunization(base), false)
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  else if (base is TFhirImmunizationEvaluation) then
    composeImmunizationEvaluation(json, name, TFhirImmunizationEvaluation(base), false)
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if (base is TFhirImmunizationRecommendationRecommendation) then
    composeImmunizationRecommendationRecommendation(json, name, TFhirImmunizationRecommendationRecommendation(base), false)
  else if (base is TFhirImmunizationRecommendationRecommendationDateCriterion) then
    composeImmunizationRecommendationRecommendationDateCriterion(json, name, TFhirImmunizationRecommendationRecommendationDateCriterion(base), false)
  else if (base is TFhirImmunizationRecommendation) then
    composeImmunizationRecommendation(json, name, TFhirImmunizationRecommendation(base), false)
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if (base is TFhirImplementationGuideDependency) then
    composeImplementationGuideDependency(json, name, TFhirImplementationGuideDependency(base), false)
  else if (base is TFhirImplementationGuidePackage) then
    composeImplementationGuidePackage(json, name, TFhirImplementationGuidePackage(base), false)
  else if (base is TFhirImplementationGuidePackageResource) then
    composeImplementationGuidePackageResource(json, name, TFhirImplementationGuidePackageResource(base), false)
  else if (base is TFhirImplementationGuideGlobal) then
    composeImplementationGuideGlobal(json, name, TFhirImplementationGuideGlobal(base), false)
  else if (base is TFhirImplementationGuidePage) then
    composeImplementationGuidePage(json, name, TFhirImplementationGuidePage(base), false)
  else if (base is TFhirImplementationGuide) then
    composeImplementationGuide(json, name, TFhirImplementationGuide(base), false)
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEINPUT}
  else if (base is TFhirImplementationGuideInputDependency) then
    composeImplementationGuideInputDependency(json, name, TFhirImplementationGuideInputDependency(base), false)
  else if (base is TFhirImplementationGuideInputPackage) then
    composeImplementationGuideInputPackage(json, name, TFhirImplementationGuideInputPackage(base), false)
  else if (base is TFhirImplementationGuideInputPackageResource) then
    composeImplementationGuideInputPackageResource(json, name, TFhirImplementationGuideInputPackageResource(base), false)
  else if (base is TFhirImplementationGuideInputGlobal) then
    composeImplementationGuideInputGlobal(json, name, TFhirImplementationGuideInputGlobal(base), false)
  else if (base is TFhirImplementationGuideInputPage) then
    composeImplementationGuideInputPage(json, name, TFhirImplementationGuideInputPage(base), false)
  else if (base is TFhirImplementationGuideInput) then
    composeImplementationGuideInput(json, name, TFhirImplementationGuideInput(base), false)
{$ENDIF FHIR_IMPLEMENTATIONGUIDEINPUT}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
  else if (base is TFhirImplementationGuideOutputDependency) then
    composeImplementationGuideOutputDependency(json, name, TFhirImplementationGuideOutputDependency(base), false)
  else if (base is TFhirImplementationGuideOutputResource) then
    composeImplementationGuideOutputResource(json, name, TFhirImplementationGuideOutputResource(base), false)
  else if (base is TFhirImplementationGuideOutputGlobal) then
    composeImplementationGuideOutputGlobal(json, name, TFhirImplementationGuideOutputGlobal(base), false)
  else if (base is TFhirImplementationGuideOutputPage) then
    composeImplementationGuideOutputPage(json, name, TFhirImplementationGuideOutputPage(base), false)
  else if (base is TFhirImplementationGuideOutput) then
    composeImplementationGuideOutput(json, name, TFhirImplementationGuideOutput(base), false)
{$ENDIF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
{$IFDEF FHIR_INVOICE}
  else if (base is TFhirInvoiceParticipant) then
    composeInvoiceParticipant(json, name, TFhirInvoiceParticipant(base), false)
  else if (base is TFhirInvoiceLineItem) then
    composeInvoiceLineItem(json, name, TFhirInvoiceLineItem(base), false)
  else if (base is TFhirInvoiceLineItemPriceComponent) then
    composeInvoiceLineItemPriceComponent(json, name, TFhirInvoiceLineItemPriceComponent(base), false)
  else if (base is TFhirInvoice) then
    composeInvoice(json, name, TFhirInvoice(base), false)
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_ITEMINSTANCE}
  else if (base is TFhirItemInstance) then
    composeItemInstance(json, name, TFhirItemInstance(base), false)
{$ENDIF FHIR_ITEMINSTANCE}
{$IFDEF FHIR_LIBRARY}
  else if (base is TFhirLibrary) then
    composeLibrary(json, name, TFhirLibrary(base), false)
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if (base is TFhirLinkageItem) then
    composeLinkageItem(json, name, TFhirLinkageItem(base), false)
  else if (base is TFhirLinkage) then
    composeLinkage(json, name, TFhirLinkage(base), false)
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if (base is TFhirListEntry) then
    composeListEntry(json, name, TFhirListEntry(base), false)
  else if (base is TFhirList) then
    composeList(json, name, TFhirList(base), false)
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if (base is TFhirLocationPosition) then
    composeLocationPosition(json, name, TFhirLocationPosition(base), false)
  else if (base is TFhirLocationHoursOfOperation) then
    composeLocationHoursOfOperation(json, name, TFhirLocationHoursOfOperation(base), false)
  else if (base is TFhirLocation) then
    composeLocation(json, name, TFhirLocation(base), false)
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  else if (base is TFhirMeasureGroup) then
    composeMeasureGroup(json, name, TFhirMeasureGroup(base), false)
  else if (base is TFhirMeasureGroupPopulation) then
    composeMeasureGroupPopulation(json, name, TFhirMeasureGroupPopulation(base), false)
  else if (base is TFhirMeasureGroupStratifier) then
    composeMeasureGroupStratifier(json, name, TFhirMeasureGroupStratifier(base), false)
  else if (base is TFhirMeasureSupplementalData) then
    composeMeasureSupplementalData(json, name, TFhirMeasureSupplementalData(base), false)
  else if (base is TFhirMeasure) then
    composeMeasure(json, name, TFhirMeasure(base), false)
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if (base is TFhirMeasureReportGroup) then
    composeMeasureReportGroup(json, name, TFhirMeasureReportGroup(base), false)
  else if (base is TFhirMeasureReportGroupPopulation) then
    composeMeasureReportGroupPopulation(json, name, TFhirMeasureReportGroupPopulation(base), false)
  else if (base is TFhirMeasureReportGroupStratifier) then
    composeMeasureReportGroupStratifier(json, name, TFhirMeasureReportGroupStratifier(base), false)
  else if (base is TFhirMeasureReportGroupStratifierStratum) then
    composeMeasureReportGroupStratifierStratum(json, name, TFhirMeasureReportGroupStratifierStratum(base), false)
  else if (base is TFhirMeasureReportGroupStratifierStratumPopulation) then
    composeMeasureReportGroupStratifierStratumPopulation(json, name, TFhirMeasureReportGroupStratifierStratumPopulation(base), false)
  else if (base is TFhirMeasureReport) then
    composeMeasureReport(json, name, TFhirMeasureReport(base), false)
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  else if (base is TFhirMedia) then
    composeMedia(json, name, TFhirMedia(base), false)
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  else if (base is TFhirMedicationIngredient) then
    composeMedicationIngredient(json, name, TFhirMedicationIngredient(base), false)
  else if (base is TFhirMedicationBatch) then
    composeMedicationBatch(json, name, TFhirMedicationBatch(base), false)
  else if (base is TFhirMedication) then
    composeMedication(json, name, TFhirMedication(base), false)
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if (base is TFhirMedicationAdministrationPerformer) then
    composeMedicationAdministrationPerformer(json, name, TFhirMedicationAdministrationPerformer(base), false)
  else if (base is TFhirMedicationAdministrationDosage) then
    composeMedicationAdministrationDosage(json, name, TFhirMedicationAdministrationDosage(base), false)
  else if (base is TFhirMedicationAdministration) then
    composeMedicationAdministration(json, name, TFhirMedicationAdministration(base), false)
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if (base is TFhirMedicationDispensePerformer) then
    composeMedicationDispensePerformer(json, name, TFhirMedicationDispensePerformer(base), false)
  else if (base is TFhirMedicationDispenseSubstitution) then
    composeMedicationDispenseSubstitution(json, name, TFhirMedicationDispenseSubstitution(base), false)
  else if (base is TFhirMedicationDispense) then
    composeMedicationDispense(json, name, TFhirMedicationDispense(base), false)
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if (base is TFhirMedicationRequestDispenseRequest) then
    composeMedicationRequestDispenseRequest(json, name, TFhirMedicationRequestDispenseRequest(base), false)
  else if (base is TFhirMedicationRequestSubstitution) then
    composeMedicationRequestSubstitution(json, name, TFhirMedicationRequestSubstitution(base), false)
  else if (base is TFhirMedicationRequest) then
    composeMedicationRequest(json, name, TFhirMedicationRequest(base), false)
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  else if (base is TFhirMedicationStatement) then
    composeMedicationStatement(json, name, TFhirMedicationStatement(base), false)
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
  else if (base is TFhirMedicinalProductName) then
    composeMedicinalProductName(json, name, TFhirMedicinalProductName(base), false)
  else if (base is TFhirMedicinalProductNameNamePart) then
    composeMedicinalProductNameNamePart(json, name, TFhirMedicinalProductNameNamePart(base), false)
  else if (base is TFhirMedicinalProductNameCountryLanguage) then
    composeMedicinalProductNameCountryLanguage(json, name, TFhirMedicinalProductNameCountryLanguage(base), false)
  else if (base is TFhirMedicinalProductManufacturingBusinessOperation) then
    composeMedicinalProductManufacturingBusinessOperation(json, name, TFhirMedicinalProductManufacturingBusinessOperation(base), false)
  else if (base is TFhirMedicinalProduct) then
    composeMedicinalProduct(json, name, TFhirMedicinalProduct(base), false)
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
  else if (base is TFhirMedicinalProductAuthorizationJurisdictionalAuthorization) then
    composeMedicinalProductAuthorizationJurisdictionalAuthorization(json, name, TFhirMedicinalProductAuthorizationJurisdictionalAuthorization(base), false)
  else if (base is TFhirMedicinalProductAuthorizationProcedure) then
    composeMedicinalProductAuthorizationProcedure(json, name, TFhirMedicinalProductAuthorizationProcedure(base), false)
  else if (base is TFhirMedicinalProductAuthorizationProcedureApplication) then
    composeMedicinalProductAuthorizationProcedureApplication(json, name, TFhirMedicinalProductAuthorizationProcedureApplication(base), false)
  else if (base is TFhirMedicinalProductAuthorization) then
    composeMedicinalProductAuthorization(json, name, TFhirMedicinalProductAuthorization(base), false)
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCLINICALS}
  else if (base is TFhirMedicinalProductClinicalsUndesirableEffects) then
    composeMedicinalProductClinicalsUndesirableEffects(json, name, TFhirMedicinalProductClinicalsUndesirableEffects(base), false)
  else if (base is TFhirMedicinalProductClinicalsUndesirableEffectsPopulation) then
    composeMedicinalProductClinicalsUndesirableEffectsPopulation(json, name, TFhirMedicinalProductClinicalsUndesirableEffectsPopulation(base), false)
  else if (base is TFhirMedicinalProductClinicalsTherapeuticIndication) then
    composeMedicinalProductClinicalsTherapeuticIndication(json, name, TFhirMedicinalProductClinicalsTherapeuticIndication(base), false)
  else if (base is TFhirMedicinalProductClinicalsTherapeuticIndicationOtherTherapy) then
    composeMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(json, name, TFhirMedicinalProductClinicalsTherapeuticIndicationOtherTherapy(base), false)
  else if (base is TFhirMedicinalProductClinicalsContraindication) then
    composeMedicinalProductClinicalsContraindication(json, name, TFhirMedicinalProductClinicalsContraindication(base), false)
  else if (base is TFhirMedicinalProductClinicalsInteractions) then
    composeMedicinalProductClinicalsInteractions(json, name, TFhirMedicinalProductClinicalsInteractions(base), false)
  else if (base is TFhirMedicinalProductClinicals) then
    composeMedicinalProductClinicals(json, name, TFhirMedicinalProductClinicals(base), false)
{$ENDIF FHIR_MEDICINALPRODUCTCLINICALS}
{$IFDEF FHIR_MEDICINALPRODUCTDEVICESPEC}
  else if (base is TFhirMedicinalProductDeviceSpecMaterial) then
    composeMedicinalProductDeviceSpecMaterial(json, name, TFhirMedicinalProductDeviceSpecMaterial(base), false)
  else if (base is TFhirMedicinalProductDeviceSpec) then
    composeMedicinalProductDeviceSpec(json, name, TFhirMedicinalProductDeviceSpec(base), false)
{$ENDIF FHIR_MEDICINALPRODUCTDEVICESPEC}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
  else if (base is TFhirMedicinalProductIngredientSpecifiedSubstance) then
    composeMedicinalProductIngredientSpecifiedSubstance(json, name, TFhirMedicinalProductIngredientSpecifiedSubstance(base), false)
  else if (base is TFhirMedicinalProductIngredientSpecifiedSubstanceStrength) then
    composeMedicinalProductIngredientSpecifiedSubstanceStrength(json, name, TFhirMedicinalProductIngredientSpecifiedSubstanceStrength(base), false)
  else if (base is TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) then
    composeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(json, name, TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(base), false)
  else if (base is TFhirMedicinalProductIngredientSubstance) then
    composeMedicinalProductIngredientSubstance(json, name, TFhirMedicinalProductIngredientSubstance(base), false)
  else if (base is TFhirMedicinalProductIngredient) then
    composeMedicinalProductIngredient(json, name, TFhirMedicinalProductIngredient(base), false)
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
  else if (base is TFhirMedicinalProductPackagedBatchIdentifier) then
    composeMedicinalProductPackagedBatchIdentifier(json, name, TFhirMedicinalProductPackagedBatchIdentifier(base), false)
  else if (base is TFhirMedicinalProductPackagedPackageItem) then
    composeMedicinalProductPackagedPackageItem(json, name, TFhirMedicinalProductPackagedPackageItem(base), false)
  else if (base is TFhirMedicinalProductPackagedPackageItemManufacturedItem) then
    composeMedicinalProductPackagedPackageItemManufacturedItem(json, name, TFhirMedicinalProductPackagedPackageItemManufacturedItem(base), false)
  else if (base is TFhirMedicinalProductPackaged) then
    composeMedicinalProductPackaged(json, name, TFhirMedicinalProductPackaged(base), false)
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
  else if (base is TFhirMedicinalProductPharmaceuticalCharacteristics) then
    composeMedicinalProductPharmaceuticalCharacteristics(json, name, TFhirMedicinalProductPharmaceuticalCharacteristics(base), false)
  else if (base is TFhirMedicinalProductPharmaceutical) then
    composeMedicinalProductPharmaceutical(json, name, TFhirMedicinalProductPharmaceutical(base), false)
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if (base is TFhirMessageDefinitionFocus) then
    composeMessageDefinitionFocus(json, name, TFhirMessageDefinitionFocus(base), false)
  else if (base is TFhirMessageDefinitionAllowedResponse) then
    composeMessageDefinitionAllowedResponse(json, name, TFhirMessageDefinitionAllowedResponse(base), false)
  else if (base is TFhirMessageDefinition) then
    composeMessageDefinition(json, name, TFhirMessageDefinition(base), false)
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if (base is TFhirMessageHeaderDestination) then
    composeMessageHeaderDestination(json, name, TFhirMessageHeaderDestination(base), false)
  else if (base is TFhirMessageHeaderSource) then
    composeMessageHeaderSource(json, name, TFhirMessageHeaderSource(base), false)
  else if (base is TFhirMessageHeaderResponse) then
    composeMessageHeaderResponse(json, name, TFhirMessageHeaderResponse(base), false)
  else if (base is TFhirMessageHeader) then
    composeMessageHeader(json, name, TFhirMessageHeader(base), false)
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if (base is TFhirNamingSystemUniqueId) then
    composeNamingSystemUniqueId(json, name, TFhirNamingSystemUniqueId(base), false)
  else if (base is TFhirNamingSystem) then
    composeNamingSystem(json, name, TFhirNamingSystem(base), false)
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  else if (base is TFhirNutritionOrderOralDiet) then
    composeNutritionOrderOralDiet(json, name, TFhirNutritionOrderOralDiet(base), false)
  else if (base is TFhirNutritionOrderOralDietNutrient) then
    composeNutritionOrderOralDietNutrient(json, name, TFhirNutritionOrderOralDietNutrient(base), false)
  else if (base is TFhirNutritionOrderOralDietTexture) then
    composeNutritionOrderOralDietTexture(json, name, TFhirNutritionOrderOralDietTexture(base), false)
  else if (base is TFhirNutritionOrderSupplement) then
    composeNutritionOrderSupplement(json, name, TFhirNutritionOrderSupplement(base), false)
  else if (base is TFhirNutritionOrderEnteralFormula) then
    composeNutritionOrderEnteralFormula(json, name, TFhirNutritionOrderEnteralFormula(base), false)
  else if (base is TFhirNutritionOrderEnteralFormulaAdministration) then
    composeNutritionOrderEnteralFormulaAdministration(json, name, TFhirNutritionOrderEnteralFormulaAdministration(base), false)
  else if (base is TFhirNutritionOrder) then
    composeNutritionOrder(json, name, TFhirNutritionOrder(base), false)
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  else if (base is TFhirObservationReferenceRange) then
    composeObservationReferenceRange(json, name, TFhirObservationReferenceRange(base), false)
  else if (base is TFhirObservationComponent) then
    composeObservationComponent(json, name, TFhirObservationComponent(base), false)
  else if (base is TFhirObservation) then
    composeObservation(json, name, TFhirObservation(base), false)
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  else if (base is TFhirObservationDefinitionQuantitativeDetails) then
    composeObservationDefinitionQuantitativeDetails(json, name, TFhirObservationDefinitionQuantitativeDetails(base), false)
  else if (base is TFhirObservationDefinitionQualifiedInterval) then
    composeObservationDefinitionQualifiedInterval(json, name, TFhirObservationDefinitionQualifiedInterval(base), false)
  else if (base is TFhirObservationDefinition) then
    composeObservationDefinition(json, name, TFhirObservationDefinition(base), false)
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OCCUPATIONALDATA}
  else if (base is TFhirOccupationalDataEmploymentStatus) then
    composeOccupationalDataEmploymentStatus(json, name, TFhirOccupationalDataEmploymentStatus(base), false)
  else if (base is TFhirOccupationalDataUsualOccupation) then
    composeOccupationalDataUsualOccupation(json, name, TFhirOccupationalDataUsualOccupation(base), false)
  else if (base is TFhirOccupationalDataPastOrPresentOccupation) then
    composeOccupationalDataPastOrPresentOccupation(json, name, TFhirOccupationalDataPastOrPresentOccupation(base), false)
  else if (base is TFhirOccupationalDataPastOrPresentOccupationWorkSchedule) then
    composeOccupationalDataPastOrPresentOccupationWorkSchedule(json, name, TFhirOccupationalDataPastOrPresentOccupationWorkSchedule(base), false)
  else if (base is TFhirOccupationalData) then
    composeOccupationalData(json, name, TFhirOccupationalData(base), false)
{$ENDIF FHIR_OCCUPATIONALDATA}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if (base is TFhirOperationDefinitionParameter) then
    composeOperationDefinitionParameter(json, name, TFhirOperationDefinitionParameter(base), false)
  else if (base is TFhirOperationDefinitionParameterBinding) then
    composeOperationDefinitionParameterBinding(json, name, TFhirOperationDefinitionParameterBinding(base), false)
  else if (base is TFhirOperationDefinitionOverload) then
    composeOperationDefinitionOverload(json, name, TFhirOperationDefinitionOverload(base), false)
  else if (base is TFhirOperationDefinition) then
    composeOperationDefinition(json, name, TFhirOperationDefinition(base), false)
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if (base is TFhirOperationOutcomeIssue) then
    composeOperationOutcomeIssue(json, name, TFhirOperationOutcomeIssue(base), false)
  else if (base is TFhirOperationOutcome) then
    composeOperationOutcome(json, name, TFhirOperationOutcome(base), false)
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if (base is TFhirOrganizationContact) then
    composeOrganizationContact(json, name, TFhirOrganizationContact(base), false)
  else if (base is TFhirOrganization) then
    composeOrganization(json, name, TFhirOrganization(base), false)
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONROLE}
  else if (base is TFhirOrganizationRoleAvailableTime) then
    composeOrganizationRoleAvailableTime(json, name, TFhirOrganizationRoleAvailableTime(base), false)
  else if (base is TFhirOrganizationRoleNotAvailable) then
    composeOrganizationRoleNotAvailable(json, name, TFhirOrganizationRoleNotAvailable(base), false)
  else if (base is TFhirOrganizationRole) then
    composeOrganizationRole(json, name, TFhirOrganizationRole(base), false)
{$ENDIF FHIR_ORGANIZATIONROLE}
{$IFDEF FHIR_PATIENT}
  else if (base is TFhirPatientContact) then
    composePatientContact(json, name, TFhirPatientContact(base), false)
  else if (base is TFhirPatientAnimal) then
    composePatientAnimal(json, name, TFhirPatientAnimal(base), false)
  else if (base is TFhirPatientCommunication) then
    composePatientCommunication(json, name, TFhirPatientCommunication(base), false)
  else if (base is TFhirPatientLink) then
    composePatientLink(json, name, TFhirPatientLink(base), false)
  else if (base is TFhirPatient) then
    composePatient(json, name, TFhirPatient(base), false)
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if (base is TFhirPaymentNotice) then
    composePaymentNotice(json, name, TFhirPaymentNotice(base), false)
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if (base is TFhirPaymentReconciliationDetail) then
    composePaymentReconciliationDetail(json, name, TFhirPaymentReconciliationDetail(base), false)
  else if (base is TFhirPaymentReconciliationProcessNote) then
    composePaymentReconciliationProcessNote(json, name, TFhirPaymentReconciliationProcessNote(base), false)
  else if (base is TFhirPaymentReconciliation) then
    composePaymentReconciliation(json, name, TFhirPaymentReconciliation(base), false)
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  else if (base is TFhirPersonLink) then
    composePersonLink(json, name, TFhirPersonLink(base), false)
  else if (base is TFhirPerson) then
    composePerson(json, name, TFhirPerson(base), false)
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if (base is TFhirPlanDefinitionGoal) then
    composePlanDefinitionGoal(json, name, TFhirPlanDefinitionGoal(base), false)
  else if (base is TFhirPlanDefinitionGoalTarget) then
    composePlanDefinitionGoalTarget(json, name, TFhirPlanDefinitionGoalTarget(base), false)
  else if (base is TFhirPlanDefinitionAction) then
    composePlanDefinitionAction(json, name, TFhirPlanDefinitionAction(base), false)
  else if (base is TFhirPlanDefinitionActionCondition) then
    composePlanDefinitionActionCondition(json, name, TFhirPlanDefinitionActionCondition(base), false)
  else if (base is TFhirPlanDefinitionActionRelatedAction) then
    composePlanDefinitionActionRelatedAction(json, name, TFhirPlanDefinitionActionRelatedAction(base), false)
  else if (base is TFhirPlanDefinitionActionParticipant) then
    composePlanDefinitionActionParticipant(json, name, TFhirPlanDefinitionActionParticipant(base), false)
  else if (base is TFhirPlanDefinitionActionDynamicValue) then
    composePlanDefinitionActionDynamicValue(json, name, TFhirPlanDefinitionActionDynamicValue(base), false)
  else if (base is TFhirPlanDefinition) then
    composePlanDefinition(json, name, TFhirPlanDefinition(base), false)
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if (base is TFhirPractitionerQualification) then
    composePractitionerQualification(json, name, TFhirPractitionerQualification(base), false)
  else if (base is TFhirPractitioner) then
    composePractitioner(json, name, TFhirPractitioner(base), false)
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if (base is TFhirPractitionerRoleAvailableTime) then
    composePractitionerRoleAvailableTime(json, name, TFhirPractitionerRoleAvailableTime(base), false)
  else if (base is TFhirPractitionerRoleNotAvailable) then
    composePractitionerRoleNotAvailable(json, name, TFhirPractitionerRoleNotAvailable(base), false)
  else if (base is TFhirPractitionerRole) then
    composePractitionerRole(json, name, TFhirPractitionerRole(base), false)
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if (base is TFhirProcedurePerformer) then
    composeProcedurePerformer(json, name, TFhirProcedurePerformer(base), false)
  else if (base is TFhirProcedureFocalDevice) then
    composeProcedureFocalDevice(json, name, TFhirProcedureFocalDevice(base), false)
  else if (base is TFhirProcedure) then
    composeProcedure(json, name, TFhirProcedure(base), false)
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCESSREQUEST}
  else if (base is TFhirProcessRequestItem) then
    composeProcessRequestItem(json, name, TFhirProcessRequestItem(base), false)
  else if (base is TFhirProcessRequest) then
    composeProcessRequest(json, name, TFhirProcessRequest(base), false)
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
  else if (base is TFhirProcessResponseProcessNote) then
    composeProcessResponseProcessNote(json, name, TFhirProcessResponseProcessNote(base), false)
  else if (base is TFhirProcessResponse) then
    composeProcessResponse(json, name, TFhirProcessResponse(base), false)
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PRODUCTPLAN}
  else if (base is TFhirProductPlanContact) then
    composeProductPlanContact(json, name, TFhirProductPlanContact(base), false)
  else if (base is TFhirProductPlanCoverage) then
    composeProductPlanCoverage(json, name, TFhirProductPlanCoverage(base), false)
  else if (base is TFhirProductPlanCoverageBenefit) then
    composeProductPlanCoverageBenefit(json, name, TFhirProductPlanCoverageBenefit(base), false)
  else if (base is TFhirProductPlanCoverageBenefitItem) then
    composeProductPlanCoverageBenefitItem(json, name, TFhirProductPlanCoverageBenefitItem(base), false)
  else if (base is TFhirProductPlanPlan) then
    composeProductPlanPlan(json, name, TFhirProductPlanPlan(base), false)
  else if (base is TFhirProductPlanPlanCategory) then
    composeProductPlanPlanCategory(json, name, TFhirProductPlanPlanCategory(base), false)
  else if (base is TFhirProductPlanPlanCategoryBenefit) then
    composeProductPlanPlanCategoryBenefit(json, name, TFhirProductPlanPlanCategoryBenefit(base), false)
  else if (base is TFhirProductPlanPlanCategoryBenefitCost) then
    composeProductPlanPlanCategoryBenefitCost(json, name, TFhirProductPlanPlanCategoryBenefitCost(base), false)
  else if (base is TFhirProductPlan) then
    composeProductPlan(json, name, TFhirProductPlan(base), false)
{$ENDIF FHIR_PRODUCTPLAN}
{$IFDEF FHIR_PROVENANCE}
  else if (base is TFhirProvenanceAgent) then
    composeProvenanceAgent(json, name, TFhirProvenanceAgent(base), false)
  else if (base is TFhirProvenanceEntity) then
    composeProvenanceEntity(json, name, TFhirProvenanceEntity(base), false)
  else if (base is TFhirProvenance) then
    composeProvenance(json, name, TFhirProvenance(base), false)
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if (base is TFhirQuestionnaireItem) then
    composeQuestionnaireItem(json, name, TFhirQuestionnaireItem(base), false)
  else if (base is TFhirQuestionnaireItemEnableWhen) then
    composeQuestionnaireItemEnableWhen(json, name, TFhirQuestionnaireItemEnableWhen(base), false)
  else if (base is TFhirQuestionnaireItemOption) then
    composeQuestionnaireItemOption(json, name, TFhirQuestionnaireItemOption(base), false)
  else if (base is TFhirQuestionnaire) then
    composeQuestionnaire(json, name, TFhirQuestionnaire(base), false)
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if (base is TFhirQuestionnaireResponseItem) then
    composeQuestionnaireResponseItem(json, name, TFhirQuestionnaireResponseItem(base), false)
  else if (base is TFhirQuestionnaireResponseItemAnswer) then
    composeQuestionnaireResponseItemAnswer(json, name, TFhirQuestionnaireResponseItemAnswer(base), false)
  else if (base is TFhirQuestionnaireResponse) then
    composeQuestionnaireResponse(json, name, TFhirQuestionnaireResponse(base), false)
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
  else if (base is TFhirRelatedPerson) then
    composeRelatedPerson(json, name, TFhirRelatedPerson(base), false)
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if (base is TFhirRequestGroupAction) then
    composeRequestGroupAction(json, name, TFhirRequestGroupAction(base), false)
  else if (base is TFhirRequestGroupActionCondition) then
    composeRequestGroupActionCondition(json, name, TFhirRequestGroupActionCondition(base), false)
  else if (base is TFhirRequestGroupActionRelatedAction) then
    composeRequestGroupActionRelatedAction(json, name, TFhirRequestGroupActionRelatedAction(base), false)
  else if (base is TFhirRequestGroup) then
    composeRequestGroup(json, name, TFhirRequestGroup(base), false)
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if (base is TFhirResearchStudyArm) then
    composeResearchStudyArm(json, name, TFhirResearchStudyArm(base), false)
  else if (base is TFhirResearchStudyObjective) then
    composeResearchStudyObjective(json, name, TFhirResearchStudyObjective(base), false)
  else if (base is TFhirResearchStudy) then
    composeResearchStudy(json, name, TFhirResearchStudy(base), false)
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if (base is TFhirResearchSubject) then
    composeResearchSubject(json, name, TFhirResearchSubject(base), false)
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if (base is TFhirRiskAssessmentPrediction) then
    composeRiskAssessmentPrediction(json, name, TFhirRiskAssessmentPrediction(base), false)
  else if (base is TFhirRiskAssessment) then
    composeRiskAssessment(json, name, TFhirRiskAssessment(base), false)
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  else if (base is TFhirSchedule) then
    composeSchedule(json, name, TFhirSchedule(base), false)
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if (base is TFhirSearchParameterComponent) then
    composeSearchParameterComponent(json, name, TFhirSearchParameterComponent(base), false)
  else if (base is TFhirSearchParameter) then
    composeSearchParameter(json, name, TFhirSearchParameter(base), false)
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
  else if (base is TFhirSequenceReferenceSeq) then
    composeSequenceReferenceSeq(json, name, TFhirSequenceReferenceSeq(base), false)
  else if (base is TFhirSequenceVariant) then
    composeSequenceVariant(json, name, TFhirSequenceVariant(base), false)
  else if (base is TFhirSequenceQuality) then
    composeSequenceQuality(json, name, TFhirSequenceQuality(base), false)
  else if (base is TFhirSequenceQualityRoc) then
    composeSequenceQualityRoc(json, name, TFhirSequenceQualityRoc(base), false)
  else if (base is TFhirSequenceRepository) then
    composeSequenceRepository(json, name, TFhirSequenceRepository(base), false)
  else if (base is TFhirSequenceStructureVariant) then
    composeSequenceStructureVariant(json, name, TFhirSequenceStructureVariant(base), false)
  else if (base is TFhirSequenceStructureVariantOuter) then
    composeSequenceStructureVariantOuter(json, name, TFhirSequenceStructureVariantOuter(base), false)
  else if (base is TFhirSequenceStructureVariantInner) then
    composeSequenceStructureVariantInner(json, name, TFhirSequenceStructureVariantInner(base), false)
  else if (base is TFhirSequence) then
    composeSequence(json, name, TFhirSequence(base), false)
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
  else if (base is TFhirServiceDefinition) then
    composeServiceDefinition(json, name, TFhirServiceDefinition(base), false)
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SERVICEREQUEST}
  else if (base is TFhirServiceRequest) then
    composeServiceRequest(json, name, TFhirServiceRequest(base), false)
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  else if (base is TFhirSlot) then
    composeSlot(json, name, TFhirSlot(base), false)
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if (base is TFhirSpecimenCollection) then
    composeSpecimenCollection(json, name, TFhirSpecimenCollection(base), false)
  else if (base is TFhirSpecimenProcessing) then
    composeSpecimenProcessing(json, name, TFhirSpecimenProcessing(base), false)
  else if (base is TFhirSpecimenContainer) then
    composeSpecimenContainer(json, name, TFhirSpecimenContainer(base), false)
  else if (base is TFhirSpecimen) then
    composeSpecimen(json, name, TFhirSpecimen(base), false)
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  else if (base is TFhirSpecimenDefinitionSpecimenToLab) then
    composeSpecimenDefinitionSpecimenToLab(json, name, TFhirSpecimenDefinitionSpecimenToLab(base), false)
  else if (base is TFhirSpecimenDefinitionSpecimenToLabContainerAdditive) then
    composeSpecimenDefinitionSpecimenToLabContainerAdditive(json, name, TFhirSpecimenDefinitionSpecimenToLabContainerAdditive(base), false)
  else if (base is TFhirSpecimenDefinitionSpecimenToLabHandling) then
    composeSpecimenDefinitionSpecimenToLabHandling(json, name, TFhirSpecimenDefinitionSpecimenToLabHandling(base), false)
  else if (base is TFhirSpecimenDefinition) then
    composeSpecimenDefinition(json, name, TFhirSpecimenDefinition(base), false)
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if (base is TFhirStructureDefinitionMapping) then
    composeStructureDefinitionMapping(json, name, TFhirStructureDefinitionMapping(base), false)
  else if (base is TFhirStructureDefinitionSnapshot) then
    composeStructureDefinitionSnapshot(json, name, TFhirStructureDefinitionSnapshot(base), false)
  else if (base is TFhirStructureDefinitionDifferential) then
    composeStructureDefinitionDifferential(json, name, TFhirStructureDefinitionDifferential(base), false)
  else if (base is TFhirStructureDefinition) then
    composeStructureDefinition(json, name, TFhirStructureDefinition(base), false)
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if (base is TFhirStructureMapStructure) then
    composeStructureMapStructure(json, name, TFhirStructureMapStructure(base), false)
  else if (base is TFhirStructureMapGroup) then
    composeStructureMapGroup(json, name, TFhirStructureMapGroup(base), false)
  else if (base is TFhirStructureMapGroupInput) then
    composeStructureMapGroupInput(json, name, TFhirStructureMapGroupInput(base), false)
  else if (base is TFhirStructureMapGroupRule) then
    composeStructureMapGroupRule(json, name, TFhirStructureMapGroupRule(base), false)
  else if (base is TFhirStructureMapGroupRuleSource) then
    composeStructureMapGroupRuleSource(json, name, TFhirStructureMapGroupRuleSource(base), false)
  else if (base is TFhirStructureMapGroupRuleTarget) then
    composeStructureMapGroupRuleTarget(json, name, TFhirStructureMapGroupRuleTarget(base), false)
  else if (base is TFhirStructureMapGroupRuleTargetParameter) then
    composeStructureMapGroupRuleTargetParameter(json, name, TFhirStructureMapGroupRuleTargetParameter(base), false)
  else if (base is TFhirStructureMapGroupRuleDependent) then
    composeStructureMapGroupRuleDependent(json, name, TFhirStructureMapGroupRuleDependent(base), false)
  else if (base is TFhirStructureMap) then
    composeStructureMap(json, name, TFhirStructureMap(base), false)
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if (base is TFhirSubscriptionChannel) then
    composeSubscriptionChannel(json, name, TFhirSubscriptionChannel(base), false)
  else if (base is TFhirSubscription) then
    composeSubscription(json, name, TFhirSubscription(base), false)
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  else if (base is TFhirSubstanceInstance) then
    composeSubstanceInstance(json, name, TFhirSubstanceInstance(base), false)
  else if (base is TFhirSubstanceIngredient) then
    composeSubstanceIngredient(json, name, TFhirSubstanceIngredient(base), false)
  else if (base is TFhirSubstance) then
    composeSubstance(json, name, TFhirSubstance(base), false)
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  else if (base is TFhirSubstancePolymerMonomerSet) then
    composeSubstancePolymerMonomerSet(json, name, TFhirSubstancePolymerMonomerSet(base), false)
  else if (base is TFhirSubstancePolymerMonomerSetStartingMaterial) then
    composeSubstancePolymerMonomerSetStartingMaterial(json, name, TFhirSubstancePolymerMonomerSetStartingMaterial(base), false)
  else if (base is TFhirSubstancePolymerRepeat) then
    composeSubstancePolymerRepeat(json, name, TFhirSubstancePolymerRepeat(base), false)
  else if (base is TFhirSubstancePolymerRepeatRepeatUnit) then
    composeSubstancePolymerRepeatRepeatUnit(json, name, TFhirSubstancePolymerRepeatRepeatUnit(base), false)
  else if (base is TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) then
    composeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(json, name, TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(base), false)
  else if (base is TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation) then
    composeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(json, name, TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation(base), false)
  else if (base is TFhirSubstancePolymer) then
    composeSubstancePolymer(json, name, TFhirSubstancePolymer(base), false)
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  else if (base is TFhirSubstanceReferenceInformationGene) then
    composeSubstanceReferenceInformationGene(json, name, TFhirSubstanceReferenceInformationGene(base), false)
  else if (base is TFhirSubstanceReferenceInformationGeneElement) then
    composeSubstanceReferenceInformationGeneElement(json, name, TFhirSubstanceReferenceInformationGeneElement(base), false)
  else if (base is TFhirSubstanceReferenceInformationClassification) then
    composeSubstanceReferenceInformationClassification(json, name, TFhirSubstanceReferenceInformationClassification(base), false)
  else if (base is TFhirSubstanceReferenceInformationRelationship) then
    composeSubstanceReferenceInformationRelationship(json, name, TFhirSubstanceReferenceInformationRelationship(base), false)
  else if (base is TFhirSubstanceReferenceInformationTarget) then
    composeSubstanceReferenceInformationTarget(json, name, TFhirSubstanceReferenceInformationTarget(base), false)
  else if (base is TFhirSubstanceReferenceInformation) then
    composeSubstanceReferenceInformation(json, name, TFhirSubstanceReferenceInformation(base), false)
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
  else if (base is TFhirSubstanceSpecificationMoiety) then
    composeSubstanceSpecificationMoiety(json, name, TFhirSubstanceSpecificationMoiety(base), false)
  else if (base is TFhirSubstanceSpecificationProperty) then
    composeSubstanceSpecificationProperty(json, name, TFhirSubstanceSpecificationProperty(base), false)
  else if (base is TFhirSubstanceSpecificationStructure) then
    composeSubstanceSpecificationStructure(json, name, TFhirSubstanceSpecificationStructure(base), false)
  else if (base is TFhirSubstanceSpecificationStructureIsotope) then
    composeSubstanceSpecificationStructureIsotope(json, name, TFhirSubstanceSpecificationStructureIsotope(base), false)
  else if (base is TFhirSubstanceSpecificationStructureIsotopeMolecularWeight) then
    composeSubstanceSpecificationStructureIsotopeMolecularWeight(json, name, TFhirSubstanceSpecificationStructureIsotopeMolecularWeight(base), false)
  else if (base is TFhirSubstanceSpecificationStructureStructuralRepresentation) then
    composeSubstanceSpecificationStructureStructuralRepresentation(json, name, TFhirSubstanceSpecificationStructureStructuralRepresentation(base), false)
  else if (base is TFhirSubstanceSpecificationSubstanceCode) then
    composeSubstanceSpecificationSubstanceCode(json, name, TFhirSubstanceSpecificationSubstanceCode(base), false)
  else if (base is TFhirSubstanceSpecificationSubstanceName) then
    composeSubstanceSpecificationSubstanceName(json, name, TFhirSubstanceSpecificationSubstanceName(base), false)
  else if (base is TFhirSubstanceSpecificationSubstanceNameOfficialName) then
    composeSubstanceSpecificationSubstanceNameOfficialName(json, name, TFhirSubstanceSpecificationSubstanceNameOfficialName(base), false)
  else if (base is TFhirSubstanceSpecification) then
    composeSubstanceSpecification(json, name, TFhirSubstanceSpecification(base), false)
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if (base is TFhirSupplyDeliverySuppliedItem) then
    composeSupplyDeliverySuppliedItem(json, name, TFhirSupplyDeliverySuppliedItem(base), false)
  else if (base is TFhirSupplyDelivery) then
    composeSupplyDelivery(json, name, TFhirSupplyDelivery(base), false)
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if (base is TFhirSupplyRequestParameter) then
    composeSupplyRequestParameter(json, name, TFhirSupplyRequestParameter(base), false)
  else if (base is TFhirSupplyRequest) then
    composeSupplyRequest(json, name, TFhirSupplyRequest(base), false)
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if (base is TFhirTaskRestriction) then
    composeTaskRestriction(json, name, TFhirTaskRestriction(base), false)
  else if (base is TFhirTaskInput) then
    composeTaskInput(json, name, TFhirTaskInput(base), false)
  else if (base is TFhirTaskOutput) then
    composeTaskOutput(json, name, TFhirTaskOutput(base), false)
  else if (base is TFhirTask) then
    composeTask(json, name, TFhirTask(base), false)
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  else if (base is TFhirTerminologyCapabilitiesCodeSystem) then
    composeTerminologyCapabilitiesCodeSystem(json, name, TFhirTerminologyCapabilitiesCodeSystem(base), false)
  else if (base is TFhirTerminologyCapabilitiesCodeSystemVersion) then
    composeTerminologyCapabilitiesCodeSystemVersion(json, name, TFhirTerminologyCapabilitiesCodeSystemVersion(base), false)
  else if (base is TFhirTerminologyCapabilitiesCodeSystemVersionFilter) then
    composeTerminologyCapabilitiesCodeSystemVersionFilter(json, name, TFhirTerminologyCapabilitiesCodeSystemVersionFilter(base), false)
  else if (base is TFhirTerminologyCapabilitiesExpansion) then
    composeTerminologyCapabilitiesExpansion(json, name, TFhirTerminologyCapabilitiesExpansion(base), false)
  else if (base is TFhirTerminologyCapabilitiesValidateCode) then
    composeTerminologyCapabilitiesValidateCode(json, name, TFhirTerminologyCapabilitiesValidateCode(base), false)
  else if (base is TFhirTerminologyCapabilitiesTranslation) then
    composeTerminologyCapabilitiesTranslation(json, name, TFhirTerminologyCapabilitiesTranslation(base), false)
  else if (base is TFhirTerminologyCapabilitiesClosure) then
    composeTerminologyCapabilitiesClosure(json, name, TFhirTerminologyCapabilitiesClosure(base), false)
  else if (base is TFhirTerminologyCapabilities) then
    composeTerminologyCapabilities(json, name, TFhirTerminologyCapabilities(base), false)
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  else if (base is TFhirTestReportParticipant) then
    composeTestReportParticipant(json, name, TFhirTestReportParticipant(base), false)
  else if (base is TFhirTestReportSetup) then
    composeTestReportSetup(json, name, TFhirTestReportSetup(base), false)
  else if (base is TFhirTestReportSetupAction) then
    composeTestReportSetupAction(json, name, TFhirTestReportSetupAction(base), false)
  else if (base is TFhirTestReportSetupActionOperation) then
    composeTestReportSetupActionOperation(json, name, TFhirTestReportSetupActionOperation(base), false)
  else if (base is TFhirTestReportSetupActionAssert) then
    composeTestReportSetupActionAssert(json, name, TFhirTestReportSetupActionAssert(base), false)
  else if (base is TFhirTestReportTest) then
    composeTestReportTest(json, name, TFhirTestReportTest(base), false)
  else if (base is TFhirTestReportTestAction) then
    composeTestReportTestAction(json, name, TFhirTestReportTestAction(base), false)
  else if (base is TFhirTestReportTeardown) then
    composeTestReportTeardown(json, name, TFhirTestReportTeardown(base), false)
  else if (base is TFhirTestReportTeardownAction) then
    composeTestReportTeardownAction(json, name, TFhirTestReportTeardownAction(base), false)
  else if (base is TFhirTestReport) then
    composeTestReport(json, name, TFhirTestReport(base), false)
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if (base is TFhirTestScriptOrigin) then
    composeTestScriptOrigin(json, name, TFhirTestScriptOrigin(base), false)
  else if (base is TFhirTestScriptDestination) then
    composeTestScriptDestination(json, name, TFhirTestScriptDestination(base), false)
  else if (base is TFhirTestScriptMetadata) then
    composeTestScriptMetadata(json, name, TFhirTestScriptMetadata(base), false)
  else if (base is TFhirTestScriptMetadataLink) then
    composeTestScriptMetadataLink(json, name, TFhirTestScriptMetadataLink(base), false)
  else if (base is TFhirTestScriptMetadataCapability) then
    composeTestScriptMetadataCapability(json, name, TFhirTestScriptMetadataCapability(base), false)
  else if (base is TFhirTestScriptFixture) then
    composeTestScriptFixture(json, name, TFhirTestScriptFixture(base), false)
  else if (base is TFhirTestScriptVariable) then
    composeTestScriptVariable(json, name, TFhirTestScriptVariable(base), false)
  else if (base is TFhirTestScriptRule) then
    composeTestScriptRule(json, name, TFhirTestScriptRule(base), false)
  else if (base is TFhirTestScriptRuleParam) then
    composeTestScriptRuleParam(json, name, TFhirTestScriptRuleParam(base), false)
  else if (base is TFhirTestScriptRuleset) then
    composeTestScriptRuleset(json, name, TFhirTestScriptRuleset(base), false)
  else if (base is TFhirTestScriptRulesetRule) then
    composeTestScriptRulesetRule(json, name, TFhirTestScriptRulesetRule(base), false)
  else if (base is TFhirTestScriptRulesetRuleParam) then
    composeTestScriptRulesetRuleParam(json, name, TFhirTestScriptRulesetRuleParam(base), false)
  else if (base is TFhirTestScriptSetup) then
    composeTestScriptSetup(json, name, TFhirTestScriptSetup(base), false)
  else if (base is TFhirTestScriptSetupAction) then
    composeTestScriptSetupAction(json, name, TFhirTestScriptSetupAction(base), false)
  else if (base is TFhirTestScriptSetupActionOperation) then
    composeTestScriptSetupActionOperation(json, name, TFhirTestScriptSetupActionOperation(base), false)
  else if (base is TFhirTestScriptSetupActionOperationRequestHeader) then
    composeTestScriptSetupActionOperationRequestHeader(json, name, TFhirTestScriptSetupActionOperationRequestHeader(base), false)
  else if (base is TFhirTestScriptSetupActionAssert) then
    composeTestScriptSetupActionAssert(json, name, TFhirTestScriptSetupActionAssert(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRule) then
    composeTestScriptSetupActionAssertRule(json, name, TFhirTestScriptSetupActionAssertRule(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRuleParam) then
    composeTestScriptSetupActionAssertRuleParam(json, name, TFhirTestScriptSetupActionAssertRuleParam(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRuleset) then
    composeTestScriptSetupActionAssertRuleset(json, name, TFhirTestScriptSetupActionAssertRuleset(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRulesetRule) then
    composeTestScriptSetupActionAssertRulesetRule(json, name, TFhirTestScriptSetupActionAssertRulesetRule(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRulesetRuleParam) then
    composeTestScriptSetupActionAssertRulesetRuleParam(json, name, TFhirTestScriptSetupActionAssertRulesetRuleParam(base), false)
  else if (base is TFhirTestScriptTest) then
    composeTestScriptTest(json, name, TFhirTestScriptTest(base), false)
  else if (base is TFhirTestScriptTestAction) then
    composeTestScriptTestAction(json, name, TFhirTestScriptTestAction(base), false)
  else if (base is TFhirTestScriptTeardown) then
    composeTestScriptTeardown(json, name, TFhirTestScriptTeardown(base), false)
  else if (base is TFhirTestScriptTeardownAction) then
    composeTestScriptTeardownAction(json, name, TFhirTestScriptTeardownAction(base), false)
  else if (base is TFhirTestScript) then
    composeTestScript(json, name, TFhirTestScript(base), false)
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_USERSESSION}
  else if (base is TFhirUserSessionStatus) then
    composeUserSessionStatus(json, name, TFhirUserSessionStatus(base), false)
  else if (base is TFhirUserSessionContext) then
    composeUserSessionContext(json, name, TFhirUserSessionContext(base), false)
  else if (base is TFhirUserSession) then
    composeUserSession(json, name, TFhirUserSession(base), false)
{$ENDIF FHIR_USERSESSION}
{$IFDEF FHIR_VALUESET}
  else if (base is TFhirValueSetCompose) then
    composeValueSetCompose(json, name, TFhirValueSetCompose(base), false)
  else if (base is TFhirValueSetComposeInclude) then
    composeValueSetComposeInclude(json, name, TFhirValueSetComposeInclude(base), false)
  else if (base is TFhirValueSetComposeIncludeConcept) then
    composeValueSetComposeIncludeConcept(json, name, TFhirValueSetComposeIncludeConcept(base), false)
  else if (base is TFhirValueSetComposeIncludeConceptDesignation) then
    composeValueSetComposeIncludeConceptDesignation(json, name, TFhirValueSetComposeIncludeConceptDesignation(base), false)
  else if (base is TFhirValueSetComposeIncludeFilter) then
    composeValueSetComposeIncludeFilter(json, name, TFhirValueSetComposeIncludeFilter(base), false)
  else if (base is TFhirValueSetExpansion) then
    composeValueSetExpansion(json, name, TFhirValueSetExpansion(base), false)
  else if (base is TFhirValueSetExpansionParameter) then
    composeValueSetExpansionParameter(json, name, TFhirValueSetExpansionParameter(base), false)
  else if (base is TFhirValueSetExpansionContains) then
    composeValueSetExpansionContains(json, name, TFhirValueSetExpansionContains(base), false)
  else if (base is TFhirValueSet) then
    composeValueSet(json, name, TFhirValueSet(base), false)
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  else if (base is TFhirVerificationResultPrimarySource) then
    composeVerificationResultPrimarySource(json, name, TFhirVerificationResultPrimarySource(base), false)
  else if (base is TFhirVerificationResultAttestation) then
    composeVerificationResultAttestation(json, name, TFhirVerificationResultAttestation(base), false)
  else if (base is TFhirVerificationResultValidator) then
    composeVerificationResultValidator(json, name, TFhirVerificationResultValidator(base), false)
  else if (base is TFhirVerificationResult) then
    composeVerificationResult(json, name, TFhirVerificationResult(base), false)
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if (base is TFhirVisionPrescriptionDispense) then
    composeVisionPrescriptionDispense(json, name, TFhirVisionPrescriptionDispense(base), false)
  else if (base is TFhirVisionPrescription) then
    composeVisionPrescription(json, name, TFhirVisionPrescription(base), false)
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise Exception.create('Unknown Type '+base.className);
end;

procedure TFHIRJsonComposer.ComposeResource(json : TJSONWriter; resource: TFhirResource; links : TFhirBundleLinkList);
begin
  if (resource = nil) Then
    Raise Exception.Create('error - resource is nil');
  json.value('resourceType', CODES_TFhirResourceType[resource.ResourceType]);
  Case resource.ResourceType of
{$IFDEF FHIR_PARAMETERS}
    frtParameters: ComposeParameters(json, 'Parameters', TFhirParameters(resource));
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_ACCOUNT}
  {$IFDEF FHIR_ACCOUNT}
     frtAccount: ComposeAccount(json, 'Account', TFhirAccount(resource));
   {$ENDIF}
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  {$IFDEF FHIR_ACTIVITYDEFINITION}
     frtActivityDefinition: ComposeActivityDefinition(json, 'ActivityDefinition', TFhirActivityDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  {$IFDEF FHIR_ADVERSEEVENT}
     frtAdverseEvent: ComposeAdverseEvent(json, 'AdverseEvent', TFhirAdverseEvent(resource));
   {$ENDIF}
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  {$IFDEF FHIR_ALLERGYINTOLERANCE}
     frtAllergyIntolerance: ComposeAllergyIntolerance(json, 'AllergyIntolerance', TFhirAllergyIntolerance(resource));
   {$ENDIF}
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  {$IFDEF FHIR_APPOINTMENT}
     frtAppointment: ComposeAppointment(json, 'Appointment', TFhirAppointment(resource));
   {$ENDIF}
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  {$IFDEF FHIR_APPOINTMENTRESPONSE}
     frtAppointmentResponse: ComposeAppointmentResponse(json, 'AppointmentResponse', TFhirAppointmentResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  {$IFDEF FHIR_AUDITEVENT}
     frtAuditEvent: ComposeAuditEvent(json, 'AuditEvent', TFhirAuditEvent(resource));
   {$ENDIF}
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  {$IFDEF FHIR_BASIC}
     frtBasic: ComposeBasic(json, 'Basic', TFhirBasic(resource));
   {$ENDIF}
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  {$IFDEF FHIR_BINARY}
     frtBinary: ComposeBinary(json, 'Binary', TFhirBinary(resource));
   {$ENDIF}
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  {$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
     frtBiologicallyDerivedProduct: ComposeBiologicallyDerivedProduct(json, 'BiologicallyDerivedProduct', TFhirBiologicallyDerivedProduct(resource));
   {$ENDIF}
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  {$IFDEF FHIR_BODYSTRUCTURE}
     frtBodyStructure: ComposeBodyStructure(json, 'BodyStructure', TFhirBodyStructure(resource));
   {$ENDIF}
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  {$IFDEF FHIR_BUNDLE}
     frtBundle: ComposeBundle(json, 'Bundle', TFhirBundle(resource));
   {$ENDIF}
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  {$IFDEF FHIR_CAPABILITYSTATEMENT}
     frtCapabilityStatement: ComposeCapabilityStatement(json, 'CapabilityStatement', TFhirCapabilityStatement(resource));
   {$ENDIF}
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  {$IFDEF FHIR_CAREPLAN}
     frtCarePlan: ComposeCarePlan(json, 'CarePlan', TFhirCarePlan(resource));
   {$ENDIF}
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  {$IFDEF FHIR_CARETEAM}
     frtCareTeam: ComposeCareTeam(json, 'CareTeam', TFhirCareTeam(resource));
   {$ENDIF}
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
  {$IFDEF FHIR_CHARGEITEM}
     frtChargeItem: ComposeChargeItem(json, 'ChargeItem', TFhirChargeItem(resource));
   {$ENDIF}
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
  {$IFDEF FHIR_CLAIM}
     frtClaim: ComposeClaim(json, 'Claim', TFhirClaim(resource));
   {$ENDIF}
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  {$IFDEF FHIR_CLAIMRESPONSE}
     frtClaimResponse: ComposeClaimResponse(json, 'ClaimResponse', TFhirClaimResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  {$IFDEF FHIR_CLINICALIMPRESSION}
     frtClinicalImpression: ComposeClinicalImpression(json, 'ClinicalImpression', TFhirClinicalImpression(resource));
   {$ENDIF}
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  {$IFDEF FHIR_CODESYSTEM}
     frtCodeSystem: ComposeCodeSystem(json, 'CodeSystem', TFhirCodeSystem(resource));
   {$ENDIF}
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  {$IFDEF FHIR_COMMUNICATION}
     frtCommunication: ComposeCommunication(json, 'Communication', TFhirCommunication(resource));
   {$ENDIF}
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  {$IFDEF FHIR_COMMUNICATIONREQUEST}
     frtCommunicationRequest: ComposeCommunicationRequest(json, 'CommunicationRequest', TFhirCommunicationRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  {$IFDEF FHIR_COMPARTMENTDEFINITION}
     frtCompartmentDefinition: ComposeCompartmentDefinition(json, 'CompartmentDefinition', TFhirCompartmentDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  {$IFDEF FHIR_COMPOSITION}
     frtComposition: ComposeComposition(json, 'Composition', TFhirComposition(resource));
   {$ENDIF}
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  {$IFDEF FHIR_CONCEPTMAP}
     frtConceptMap: ComposeConceptMap(json, 'ConceptMap', TFhirConceptMap(resource));
   {$ENDIF}
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  {$IFDEF FHIR_CONDITION}
     frtCondition: ComposeCondition(json, 'Condition', TFhirCondition(resource));
   {$ENDIF}
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  {$IFDEF FHIR_CONSENT}
     frtConsent: ComposeConsent(json, 'Consent', TFhirConsent(resource));
   {$ENDIF}
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  {$IFDEF FHIR_CONTRACT}
     frtContract: ComposeContract(json, 'Contract', TFhirContract(resource));
   {$ENDIF}
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  {$IFDEF FHIR_COVERAGE}
     frtCoverage: ComposeCoverage(json, 'Coverage', TFhirCoverage(resource));
   {$ENDIF}
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DETECTEDISSUE}
  {$IFDEF FHIR_DETECTEDISSUE}
     frtDetectedIssue: ComposeDetectedIssue(json, 'DetectedIssue', TFhirDetectedIssue(resource));
   {$ENDIF}
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  {$IFDEF FHIR_DEVICE}
     frtDevice: ComposeDevice(json, 'Device', TFhirDevice(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
  {$IFDEF FHIR_DEVICECOMPONENT}
     frtDeviceComponent: ComposeDeviceComponent(json, 'DeviceComponent', TFhirDeviceComponent(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
  {$IFDEF FHIR_DEVICEMETRIC}
     frtDeviceMetric: ComposeDeviceMetric(json, 'DeviceMetric', TFhirDeviceMetric(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  {$IFDEF FHIR_DEVICEREQUEST}
     frtDeviceRequest: ComposeDeviceRequest(json, 'DeviceRequest', TFhirDeviceRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  {$IFDEF FHIR_DEVICEUSESTATEMENT}
     frtDeviceUseStatement: ComposeDeviceUseStatement(json, 'DeviceUseStatement', TFhirDeviceUseStatement(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  {$IFDEF FHIR_DIAGNOSTICREPORT}
     frtDiagnosticReport: ComposeDiagnosticReport(json, 'DiagnosticReport', TFhirDiagnosticReport(resource));
   {$ENDIF}
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  {$IFDEF FHIR_DOCUMENTMANIFEST}
     frtDocumentManifest: ComposeDocumentManifest(json, 'DocumentManifest', TFhirDocumentManifest(resource));
   {$ENDIF}
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  {$IFDEF FHIR_DOCUMENTREFERENCE}
     frtDocumentReference: ComposeDocumentReference(json, 'DocumentReference', TFhirDocumentReference(resource));
   {$ENDIF}
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
  {$IFDEF FHIR_ELIGIBILITYREQUEST}
     frtEligibilityRequest: ComposeEligibilityRequest(json, 'EligibilityRequest', TFhirEligibilityRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
  {$IFDEF FHIR_ELIGIBILITYRESPONSE}
     frtEligibilityResponse: ComposeEligibilityResponse(json, 'EligibilityResponse', TFhirEligibilityResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
  {$IFDEF FHIR_ENCOUNTER}
     frtEncounter: ComposeEncounter(json, 'Encounter', TFhirEncounter(resource));
   {$ENDIF}
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  {$IFDEF FHIR_ENDPOINT}
     frtEndpoint: ComposeEndpoint(json, 'Endpoint', TFhirEndpoint(resource));
   {$ENDIF}
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  {$IFDEF FHIR_ENROLLMENTREQUEST}
     frtEnrollmentRequest: ComposeEnrollmentRequest(json, 'EnrollmentRequest', TFhirEnrollmentRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  {$IFDEF FHIR_ENROLLMENTRESPONSE}
     frtEnrollmentResponse: ComposeEnrollmentResponse(json, 'EnrollmentResponse', TFhirEnrollmentResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_ENTRYDEFINITION}
  {$IFDEF FHIR_ENTRYDEFINITION}
     frtEntryDefinition: ComposeEntryDefinition(json, 'EntryDefinition', TFhirEntryDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_ENTRYDEFINITION}
{$IFDEF FHIR_EPISODEOFCARE}
  {$IFDEF FHIR_EPISODEOFCARE}
     frtEpisodeOfCare: ComposeEpisodeOfCare(json, 'EpisodeOfCare', TFhirEpisodeOfCare(resource));
   {$ENDIF}
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  {$IFDEF FHIR_EVENTDEFINITION}
     frtEventDefinition: ComposeEventDefinition(json, 'EventDefinition', TFhirEventDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EXAMPLESCENARIO}
  {$IFDEF FHIR_EXAMPLESCENARIO}
     frtExampleScenario: ComposeExampleScenario(json, 'ExampleScenario', TFhirExampleScenario(resource));
   {$ENDIF}
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPANSIONPROFILE}
  {$IFDEF FHIR_EXPANSIONPROFILE}
     frtExpansionProfile: ComposeExpansionProfile(json, 'ExpansionProfile', TFhirExpansionProfile(resource));
   {$ENDIF}
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  {$IFDEF FHIR_EXPLANATIONOFBENEFIT}
     frtExplanationOfBenefit: ComposeExplanationOfBenefit(json, 'ExplanationOfBenefit', TFhirExplanationOfBenefit(resource));
   {$ENDIF}
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  {$IFDEF FHIR_FAMILYMEMBERHISTORY}
     frtFamilyMemberHistory: ComposeFamilyMemberHistory(json, 'FamilyMemberHistory', TFhirFamilyMemberHistory(resource));
   {$ENDIF}
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  {$IFDEF FHIR_FLAG}
     frtFlag: ComposeFlag(json, 'Flag', TFhirFlag(resource));
   {$ENDIF}
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  {$IFDEF FHIR_GOAL}
     frtGoal: ComposeGoal(json, 'Goal', TFhirGoal(resource));
   {$ENDIF}
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  {$IFDEF FHIR_GRAPHDEFINITION}
     frtGraphDefinition: ComposeGraphDefinition(json, 'GraphDefinition', TFhirGraphDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  {$IFDEF FHIR_GROUP}
     frtGroup: ComposeGroup(json, 'Group', TFhirGroup(resource));
   {$ENDIF}
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  {$IFDEF FHIR_GUIDANCERESPONSE}
     frtGuidanceResponse: ComposeGuidanceResponse(json, 'GuidanceResponse', TFhirGuidanceResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  {$IFDEF FHIR_HEALTHCARESERVICE}
     frtHealthcareService: ComposeHealthcareService(json, 'HealthcareService', TFhirHealthcareService(resource));
   {$ENDIF}
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  {$IFDEF FHIR_IMAGINGSTUDY}
     frtImagingStudy: ComposeImagingStudy(json, 'ImagingStudy', TFhirImagingStudy(resource));
   {$ENDIF}
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  {$IFDEF FHIR_IMMUNIZATION}
     frtImmunization: ComposeImmunization(json, 'Immunization', TFhirImmunization(resource));
   {$ENDIF}
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  {$IFDEF FHIR_IMMUNIZATIONEVALUATION}
     frtImmunizationEvaluation: ComposeImmunizationEvaluation(json, 'ImmunizationEvaluation', TFhirImmunizationEvaluation(resource));
   {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  {$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
     frtImmunizationRecommendation: ComposeImmunizationRecommendation(json, 'ImmunizationRecommendation', TFhirImmunizationRecommendation(resource));
   {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDE}
     frtImplementationGuide: ComposeImplementationGuide(json, 'ImplementationGuide', TFhirImplementationGuide(resource));
   {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEINPUT}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDEINPUT}
     frtImplementationGuideInput: ComposeImplementationGuideInput(json, 'ImplementationGuideInput', TFhirImplementationGuideInput(resource));
   {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDEINPUT}
{$IFDEF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
     frtImplementationGuideOutput: ComposeImplementationGuideOutput(json, 'ImplementationGuideOutput', TFhirImplementationGuideOutput(resource));
   {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDEOUTPUT}
{$IFDEF FHIR_INVOICE}
  {$IFDEF FHIR_INVOICE}
     frtInvoice: ComposeInvoice(json, 'Invoice', TFhirInvoice(resource));
   {$ENDIF}
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_ITEMINSTANCE}
  {$IFDEF FHIR_ITEMINSTANCE}
     frtItemInstance: ComposeItemInstance(json, 'ItemInstance', TFhirItemInstance(resource));
   {$ENDIF}
{$ENDIF FHIR_ITEMINSTANCE}
{$IFDEF FHIR_LIBRARY}
  {$IFDEF FHIR_LIBRARY}
     frtLibrary: ComposeLibrary(json, 'Library', TFhirLibrary(resource));
   {$ENDIF}
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  {$IFDEF FHIR_LINKAGE}
     frtLinkage: ComposeLinkage(json, 'Linkage', TFhirLinkage(resource));
   {$ENDIF}
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  {$IFDEF FHIR_LIST}
     frtList: ComposeList(json, 'List', TFhirList(resource));
   {$ENDIF}
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  {$IFDEF FHIR_LOCATION}
     frtLocation: ComposeLocation(json, 'Location', TFhirLocation(resource));
   {$ENDIF}
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  {$IFDEF FHIR_MEASURE}
     frtMeasure: ComposeMeasure(json, 'Measure', TFhirMeasure(resource));
   {$ENDIF}
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  {$IFDEF FHIR_MEASUREREPORT}
     frtMeasureReport: ComposeMeasureReport(json, 'MeasureReport', TFhirMeasureReport(resource));
   {$ENDIF}
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  {$IFDEF FHIR_MEDIA}
     frtMedia: ComposeMedia(json, 'Media', TFhirMedia(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  {$IFDEF FHIR_MEDICATION}
     frtMedication: ComposeMedication(json, 'Medication', TFhirMedication(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  {$IFDEF FHIR_MEDICATIONADMINISTRATION}
     frtMedicationAdministration: ComposeMedicationAdministration(json, 'MedicationAdministration', TFhirMedicationAdministration(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  {$IFDEF FHIR_MEDICATIONDISPENSE}
     frtMedicationDispense: ComposeMedicationDispense(json, 'MedicationDispense', TFhirMedicationDispense(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  {$IFDEF FHIR_MEDICATIONREQUEST}
     frtMedicationRequest: ComposeMedicationRequest(json, 'MedicationRequest', TFhirMedicationRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  {$IFDEF FHIR_MEDICATIONSTATEMENT}
     frtMedicationStatement: ComposeMedicationStatement(json, 'MedicationStatement', TFhirMedicationStatement(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
  {$IFDEF FHIR_MEDICINALPRODUCT}
     frtMedicinalProduct: ComposeMedicinalProduct(json, 'MedicinalProduct', TFhirMedicinalProduct(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
  {$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
     frtMedicinalProductAuthorization: ComposeMedicinalProductAuthorization(json, 'MedicinalProductAuthorization', TFhirMedicinalProductAuthorization(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCLINICALS}
  {$IFDEF FHIR_MEDICINALPRODUCTCLINICALS}
     frtMedicinalProductClinicals: ComposeMedicinalProductClinicals(json, 'MedicinalProductClinicals', TFhirMedicinalProductClinicals(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTCLINICALS}
{$IFDEF FHIR_MEDICINALPRODUCTDEVICESPEC}
  {$IFDEF FHIR_MEDICINALPRODUCTDEVICESPEC}
     frtMedicinalProductDeviceSpec: ComposeMedicinalProductDeviceSpec(json, 'MedicinalProductDeviceSpec', TFhirMedicinalProductDeviceSpec(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTDEVICESPEC}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
  {$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
     frtMedicinalProductIngredient: ComposeMedicinalProductIngredient(json, 'MedicinalProductIngredient', TFhirMedicinalProductIngredient(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
  {$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
     frtMedicinalProductPackaged: ComposeMedicinalProductPackaged(json, 'MedicinalProductPackaged', TFhirMedicinalProductPackaged(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
  {$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
     frtMedicinalProductPharmaceutical: ComposeMedicinalProductPharmaceutical(json, 'MedicinalProductPharmaceutical', TFhirMedicinalProductPharmaceutical(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MESSAGEDEFINITION}
  {$IFDEF FHIR_MESSAGEDEFINITION}
     frtMessageDefinition: ComposeMessageDefinition(json, 'MessageDefinition', TFhirMessageDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  {$IFDEF FHIR_MESSAGEHEADER}
     frtMessageHeader: ComposeMessageHeader(json, 'MessageHeader', TFhirMessageHeader(resource));
   {$ENDIF}
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
  {$IFDEF FHIR_NAMINGSYSTEM}
     frtNamingSystem: ComposeNamingSystem(json, 'NamingSystem', TFhirNamingSystem(resource));
   {$ENDIF}
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  {$IFDEF FHIR_NUTRITIONORDER}
     frtNutritionOrder: ComposeNutritionOrder(json, 'NutritionOrder', TFhirNutritionOrder(resource));
   {$ENDIF}
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  {$IFDEF FHIR_OBSERVATION}
     frtObservation: ComposeObservation(json, 'Observation', TFhirObservation(resource));
   {$ENDIF}
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  {$IFDEF FHIR_OBSERVATIONDEFINITION}
     frtObservationDefinition: ComposeObservationDefinition(json, 'ObservationDefinition', TFhirObservationDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OCCUPATIONALDATA}
  {$IFDEF FHIR_OCCUPATIONALDATA}
     frtOccupationalData: ComposeOccupationalData(json, 'OccupationalData', TFhirOccupationalData(resource));
   {$ENDIF}
{$ENDIF FHIR_OCCUPATIONALDATA}
{$IFDEF FHIR_OPERATIONDEFINITION}
  {$IFDEF FHIR_OPERATIONDEFINITION}
     frtOperationDefinition: ComposeOperationDefinition(json, 'OperationDefinition', TFhirOperationDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  {$IFDEF FHIR_OPERATIONOUTCOME}
     frtOperationOutcome: ComposeOperationOutcome(json, 'OperationOutcome', TFhirOperationOutcome(resource));
   {$ENDIF}
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  {$IFDEF FHIR_ORGANIZATION}
     frtOrganization: ComposeOrganization(json, 'Organization', TFhirOrganization(resource));
   {$ENDIF}
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONROLE}
  {$IFDEF FHIR_ORGANIZATIONROLE}
     frtOrganizationRole: ComposeOrganizationRole(json, 'OrganizationRole', TFhirOrganizationRole(resource));
   {$ENDIF}
{$ENDIF FHIR_ORGANIZATIONROLE}
{$IFDEF FHIR_PATIENT}
  {$IFDEF FHIR_PATIENT}
     frtPatient: ComposePatient(json, 'Patient', TFhirPatient(resource));
   {$ENDIF}
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  {$IFDEF FHIR_PAYMENTNOTICE}
     frtPaymentNotice: ComposePaymentNotice(json, 'PaymentNotice', TFhirPaymentNotice(resource));
   {$ENDIF}
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  {$IFDEF FHIR_PAYMENTRECONCILIATION}
     frtPaymentReconciliation: ComposePaymentReconciliation(json, 'PaymentReconciliation', TFhirPaymentReconciliation(resource));
   {$ENDIF}
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  {$IFDEF FHIR_PERSON}
     frtPerson: ComposePerson(json, 'Person', TFhirPerson(resource));
   {$ENDIF}
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  {$IFDEF FHIR_PLANDEFINITION}
     frtPlanDefinition: ComposePlanDefinition(json, 'PlanDefinition', TFhirPlanDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  {$IFDEF FHIR_PRACTITIONER}
     frtPractitioner: ComposePractitioner(json, 'Practitioner', TFhirPractitioner(resource));
   {$ENDIF}
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  {$IFDEF FHIR_PRACTITIONERROLE}
     frtPractitionerRole: ComposePractitionerRole(json, 'PractitionerRole', TFhirPractitionerRole(resource));
   {$ENDIF}
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  {$IFDEF FHIR_PROCEDURE}
     frtProcedure: ComposeProcedure(json, 'Procedure', TFhirProcedure(resource));
   {$ENDIF}
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCESSREQUEST}
  {$IFDEF FHIR_PROCESSREQUEST}
     frtProcessRequest: ComposeProcessRequest(json, 'ProcessRequest', TFhirProcessRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
  {$IFDEF FHIR_PROCESSRESPONSE}
     frtProcessResponse: ComposeProcessResponse(json, 'ProcessResponse', TFhirProcessResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PRODUCTPLAN}
  {$IFDEF FHIR_PRODUCTPLAN}
     frtProductPlan: ComposeProductPlan(json, 'ProductPlan', TFhirProductPlan(resource));
   {$ENDIF}
{$ENDIF FHIR_PRODUCTPLAN}
{$IFDEF FHIR_PROVENANCE}
  {$IFDEF FHIR_PROVENANCE}
     frtProvenance: ComposeProvenance(json, 'Provenance', TFhirProvenance(resource));
   {$ENDIF}
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  {$IFDEF FHIR_QUESTIONNAIRE}
     frtQuestionnaire: ComposeQuestionnaire(json, 'Questionnaire', TFhirQuestionnaire(resource));
   {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  {$IFDEF FHIR_QUESTIONNAIRERESPONSE}
     frtQuestionnaireResponse: ComposeQuestionnaireResponse(json, 'QuestionnaireResponse', TFhirQuestionnaireResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
  {$IFDEF FHIR_RELATEDPERSON}
     frtRelatedPerson: ComposeRelatedPerson(json, 'RelatedPerson', TFhirRelatedPerson(resource));
   {$ENDIF}
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  {$IFDEF FHIR_REQUESTGROUP}
     frtRequestGroup: ComposeRequestGroup(json, 'RequestGroup', TFhirRequestGroup(resource));
   {$ENDIF}
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  {$IFDEF FHIR_RESEARCHSTUDY}
     frtResearchStudy: ComposeResearchStudy(json, 'ResearchStudy', TFhirResearchStudy(resource));
   {$ENDIF}
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  {$IFDEF FHIR_RESEARCHSUBJECT}
     frtResearchSubject: ComposeResearchSubject(json, 'ResearchSubject', TFhirResearchSubject(resource));
   {$ENDIF}
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  {$IFDEF FHIR_RISKASSESSMENT}
     frtRiskAssessment: ComposeRiskAssessment(json, 'RiskAssessment', TFhirRiskAssessment(resource));
   {$ENDIF}
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  {$IFDEF FHIR_SCHEDULE}
     frtSchedule: ComposeSchedule(json, 'Schedule', TFhirSchedule(resource));
   {$ENDIF}
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  {$IFDEF FHIR_SEARCHPARAMETER}
     frtSearchParameter: ComposeSearchParameter(json, 'SearchParameter', TFhirSearchParameter(resource));
   {$ENDIF}
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
  {$IFDEF FHIR_SEQUENCE}
     frtSequence: ComposeSequence(json, 'Sequence', TFhirSequence(resource));
   {$ENDIF}
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
  {$IFDEF FHIR_SERVICEDEFINITION}
     frtServiceDefinition: ComposeServiceDefinition(json, 'ServiceDefinition', TFhirServiceDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SERVICEREQUEST}
  {$IFDEF FHIR_SERVICEREQUEST}
     frtServiceRequest: ComposeServiceRequest(json, 'ServiceRequest', TFhirServiceRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  {$IFDEF FHIR_SLOT}
     frtSlot: ComposeSlot(json, 'Slot', TFhirSlot(resource));
   {$ENDIF}
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  {$IFDEF FHIR_SPECIMEN}
     frtSpecimen: ComposeSpecimen(json, 'Specimen', TFhirSpecimen(resource));
   {$ENDIF}
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  {$IFDEF FHIR_SPECIMENDEFINITION}
     frtSpecimenDefinition: ComposeSpecimenDefinition(json, 'SpecimenDefinition', TFhirSpecimenDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  {$IFDEF FHIR_STRUCTUREDEFINITION}
     frtStructureDefinition: ComposeStructureDefinition(json, 'StructureDefinition', TFhirStructureDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  {$IFDEF FHIR_STRUCTUREMAP}
     frtStructureMap: ComposeStructureMap(json, 'StructureMap', TFhirStructureMap(resource));
   {$ENDIF}
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  {$IFDEF FHIR_SUBSCRIPTION}
     frtSubscription: ComposeSubscription(json, 'Subscription', TFhirSubscription(resource));
   {$ENDIF}
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  {$IFDEF FHIR_SUBSTANCE}
     frtSubstance: ComposeSubstance(json, 'Substance', TFhirSubstance(resource));
   {$ENDIF}
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  {$IFDEF FHIR_SUBSTANCEPOLYMER}
     frtSubstancePolymer: ComposeSubstancePolymer(json, 'SubstancePolymer', TFhirSubstancePolymer(resource));
   {$ENDIF}
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  {$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
     frtSubstanceReferenceInformation: ComposeSubstanceReferenceInformation(json, 'SubstanceReferenceInformation', TFhirSubstanceReferenceInformation(resource));
   {$ENDIF}
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
  {$IFDEF FHIR_SUBSTANCESPECIFICATION}
     frtSubstanceSpecification: ComposeSubstanceSpecification(json, 'SubstanceSpecification', TFhirSubstanceSpecification(resource));
   {$ENDIF}
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  {$IFDEF FHIR_SUPPLYDELIVERY}
     frtSupplyDelivery: ComposeSupplyDelivery(json, 'SupplyDelivery', TFhirSupplyDelivery(resource));
   {$ENDIF}
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  {$IFDEF FHIR_SUPPLYREQUEST}
     frtSupplyRequest: ComposeSupplyRequest(json, 'SupplyRequest', TFhirSupplyRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  {$IFDEF FHIR_TASK}
     frtTask: ComposeTask(json, 'Task', TFhirTask(resource));
   {$ENDIF}
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  {$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
     frtTerminologyCapabilities: ComposeTerminologyCapabilities(json, 'TerminologyCapabilities', TFhirTerminologyCapabilities(resource));
   {$ENDIF}
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  {$IFDEF FHIR_TESTREPORT}
     frtTestReport: ComposeTestReport(json, 'TestReport', TFhirTestReport(resource));
   {$ENDIF}
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  {$IFDEF FHIR_TESTSCRIPT}
     frtTestScript: ComposeTestScript(json, 'TestScript', TFhirTestScript(resource));
   {$ENDIF}
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_USERSESSION}
  {$IFDEF FHIR_USERSESSION}
     frtUserSession: ComposeUserSession(json, 'UserSession', TFhirUserSession(resource));
   {$ENDIF}
{$ENDIF FHIR_USERSESSION}
{$IFDEF FHIR_VALUESET}
  {$IFDEF FHIR_VALUESET}
     frtValueSet: ComposeValueSet(json, 'ValueSet', TFhirValueSet(resource));
   {$ENDIF}
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  {$IFDEF FHIR_VERIFICATIONRESULT}
     frtVerificationResult: ComposeVerificationResult(json, 'VerificationResult', TFhirVerificationResult(resource));
   {$ENDIF}
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  {$IFDEF FHIR_VISIONPRESCRIPTION}
     frtVisionPrescription: ComposeVisionPrescription(json, 'VisionPrescription', TFhirVisionPrescription(resource));
   {$ENDIF}
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise Exception.create('Internal error: the resource type '+CODES_TFhirResourceType[resource.ResourceType]+' is not a valid resource type');
  end;
end;


end.

